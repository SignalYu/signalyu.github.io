[{"content":"1. Solid Principle 1.1 Single Responsibility Principle A class should have only one reason to change, meaning each class should focus on a single functionality or responsibility.\nSHOW CODE Single Responsibility Principle import java.io.IOException; import java.util.*; import java.util.regex.*; import com.fasterxml.jackson.databind.ObjectMapper; /** * 1. User class is only used to represent entity. * 2. UserValidator class is solely responsible for validating user objects. * 3. Store class is only used to manage user objects storage. * 4. UserPersistenceService class is dedicated to save the user data. * 5. UserController is solely used to handle incoming requests (in this case, creating users form JSON input). */ /* \u0026lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.fasterxml.jackson.core\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jackson-databind\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.18.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; */ /** * Represents a user with basic details. * User class is only used to represent entity. */ class User { private String name; private String email; private String address; public User() {} public User(String name, String email, String address) { this.name = name; this.email = email; this.address = address; } // Getters and setters public String getName() { return name; } public void setName(String name) { this.name = name; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } @Override public String toString() { return \"User [name=\" + name + \", email=\" + email + \", address=\" + address + \"]\"; } } /** * Handles incoming JSON requests that work on User. * UserController is solely used to handle incoming requests (in this case, creating users form JSON input). */ class UserController { private final UserPersistenceService persistenceService = new UserPersistenceService(); public String createUser(String userJson) throws IOException { ObjectMapper mapper = new ObjectMapper(); User user = mapper.readValue(userJson, User.class); UserValidator validator = new UserValidator(); if (!validator.validateUser(user)) { return \"ERROR\"; } persistenceService.saveUser(user); return \"SUCCESS\"; } } /** * Handles persistence of User objects. * UserPersistenceService class is dedicated to save the user data. */ class UserPersistenceService { private final Store store = new Store(); public void saveUser(User user) { store.store(user); } } /** * Validates User data. * UserValidator class is solely responsible for validating user objects. */ class UserValidator { public boolean validateUser(User user) { if (!isPresent(user.getName()) || !isValidAlphaNumeric(user.getName())) { return false; } user.setName(user.getName().trim()); user.setEmail(user.getEmail().trim()); return isValidEmail(user.getEmail()); } private boolean isPresent(String value) { return value != null \u0026\u0026 value.trim().length() \u003e 0; } private boolean isValidAlphaNumeric(String value) { Pattern pattern = Pattern.compile(\"[^A-Za-z0-9]\"); Matcher matcher = pattern.matcher(value); return !matcher.find(); } private boolean isValidEmail(String value) { Pattern pattern = Pattern.compile(\"^[\\\\w-\\\\.]+@[\\\\w-]+(\\\\.[\\\\w-]+)+$\"); Matcher matcher = pattern.matcher(value); return matcher.find(); } } /** * Stores User data in memory. * Store class is only used to manage user objects storage. */ class Store { private static final Map\u0026lt;String, User\u0026gt; STORAGE = new HashMap\u0026lt;\u0026gt;(); public void store(User user) { synchronized (STORAGE) { STORAGE.put(user.getName(), user); } } public User getUser(String name) { synchronized (STORAGE) { return STORAGE.get(name); } } } /** * Main class for demonstrating the Single Responsibility Principle. */ public class Main { private static final String VALID_USER_JSON = \"{\\\"name\\\": \\\"Signal\\\", \\\"email\\\": \\\"signalyu999@gmail.com\\\", \\\"address\\\":\\\"999 Sugar lane\\\"}\"; private static final String INVALID_USER_JSON = \"{\\\"name\\\": \\\"Sam\\\", \\\"email\\\": \\\"sam@email\\\", \\\"address\\\":\\\"111 Sugar lane\\\"}\"; public static void main(String[] args) throws IOException { UserController controller = new UserController(); String response = controller.createUser(VALID_USER_JSON); System.out.println(\"Valid JSON response: \" + response); response = controller.createUser(INVALID_USER_JSON); System.out.println(\"Invalid JSON response: \" + response); } } Each class in the above code strictly adheres to the Single Responsibility Principle by focusing on a specific responsibility:\nUser for representing the user entity UserController for request handling UserPersistenceService for data persistence UserValidator for user data validation Store for managing in-memory data storage --- title: Single Responsibility Principle - Class Diagram --- classDiagram class User { - String name - String email - String address + String toString() } class Store { + void store(User user) + User getUser(String name) } class UserPersistenceService { + void saveUser(User user) } class UserValidator { - boolean isPresent(String value) - boolean isValidAlphaNumeric(String value) - boolean isValidEmail(String value) + boolean validateUser(User user) } class UserController { + String createUser(String userJson) } class Main { + void main(String[] args) } User --* Store Store --* UserPersistenceService UserPersistenceService --* UserController UserController --\u003e UserValidator : create Main --\u003e UserController : create 1.2 Open-Closed Principle A software entity (class, module, function, etc.) should be open for extension but closed for modification.\n点击查看代码 Java import java.time.LocalDateTime; import java.util.*; // Abstract base class, closed for modification but open for extension abstract class Subscriber { protected Long subscriberId; protected String address; protected Long phoneNumber; protected int baseRate; // Getter and Setter methods public Long getSubscriberId() { return subscriberId; } public void setSubscriberId(Long subscriberId) { this.subscriberId = subscriberId; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public Long getPhoneNumber() { return phoneNumber; } public void setPhoneNumber(Long phoneNumber) { this.phoneNumber = phoneNumber; } public int getBaseRate() { return baseRate; } public void setBaseRate(int baseRate) { this.baseRate = baseRate; } // Abstract method to calculate the bill; implementation is defined in subclasses public abstract double calculateBill(); } // PhoneSubscriber class extends Subscriber, calculates the phone bill class PhoneSubscriber extends Subscriber { @Override public double calculateBill() { List\u0026lt;CallHistory.Call\u0026gt; calls = CallHistory.getCurrentCalls(subscriberId); long totalDuration = calls.stream().mapToLong(CallHistory.Call::getDuration).sum(); return (totalDuration * baseRate) / 100.0; } } // ISPSubscriber class extends Subscriber, calculates the internet bill class ISPSubscriber extends Subscriber { private long freeUsage; // Free usage limit in data units @Override public double calculateBill() { List\u0026lt;InternetSessionHistory.InternetSession\u0026gt; sessions = InternetSessionHistory.getCurrentSessions(subscriberId); long totalData = sessions.stream().mapToLong(InternetSessionHistory.InternetSession::getDataUsed).sum(); long chargeableData = totalData - freeUsage; return chargeableData \u003c= 0 ? 0 : (chargeableData * baseRate) / 100.0; } public long getFreeUsage() { return freeUsage; } public void setFreeUsage(long freeUsage) { this.freeUsage = freeUsage; } } // InternetSessionHistory class to manage internet usage records class InternetSessionHistory { public static class InternetSession { private final LocalDateTime begin; private final Long subscriberId; private final Long dataUsed; public InternetSession(Long subscriberId, LocalDateTime begin, long dataUsed) { this.subscriberId = subscriberId; this.begin = begin; this.dataUsed = dataUsed; } public LocalDateTime getBegin() { return begin; } public long getDataUsed() { return dataUsed; } public Long getSubscriberId() { return subscriberId; } } private static final Map\u0026lt;Long, List\u0026lt;InternetSession\u0026gt;\u0026gt; SESSIONS = new HashMap\u0026lt;\u0026gt;(); // Retrieves the current sessions for a subscriber, returns an empty list if none found public static synchronized List\u0026lt;InternetSession\u0026gt; getCurrentSessions(Long subscriberId) { return SESSIONS.getOrDefault(subscriberId, Collections.emptyList()); } // Adds a new internet session record for a subscriber public static synchronized void addSession(Long subscriberId, LocalDateTime begin, long dataUsed) { SESSIONS.computeIfAbsent(subscriberId, k -\u003e new LinkedList\u0026lt;\u0026gt;()).add(new InternetSession(subscriberId, begin, dataUsed)); } } // CallHistory class to manage call records class CallHistory { public static class Call { private final LocalDateTime begin; private final long duration; private final Long subscriberId; public Call(Long subscriberId, LocalDateTime begin, long duration) { this.subscriberId = subscriberId; this.begin = begin; this.duration = duration; } public LocalDateTime getBegin() { return begin; } public long getDuration() { return duration; } public Long getSubscriberId() { return subscriberId; } } private static final Map\u0026lt;Long, List\u0026lt;Call\u0026gt; CALLS = new HashMap\u0026lt;\u0026gt;(); // Retrieves the current calls for a subscriber, returns an empty list if none found public static synchronized List\u0026lt;Call\u0026gt; getCurrentCalls(Long subscriberId) { return CALLS.getOrDefault(subscriberId, Collections.emptyList()); } // Adds a new call record for a subscriber public static synchronized void addSession(Long subscriberId, LocalDateTime begin, long duration) { CALLS.computeIfAbsent(subscriberId, k -\u003e new LinkedList\u0026lt;\u0026gt;()).add(new Call(subscriberId, begin, duration)); } } public class Main { public static void main(String[] args) { // Initialize PhoneSubscriber and ISPSubscriber with sample data PhoneSubscriber phoneSubscriber = new PhoneSubscriber(); phoneSubscriber.setSubscriberId(1L); phoneSubscriber.setBaseRate(10); ISPSubscriber ispSubscriber = new ISPSubscriber(); ispSubscriber.setSubscriberId(2L); ispSubscriber.setBaseRate(5); ispSubscriber.setFreeUsage(1000); // Add call records for PhoneSubscriber CallHistory.addSession(1L, LocalDateTime.now().minusMinutes(5), 300); // 300 seconds call CallHistory.addSession(1L, LocalDateTime.now().minusMinutes(10), 600); // 600 seconds call // Calculate and print the phone subscriber's bill double phoneBill = phoneSubscriber.calculateBill(); System.out.println(\"Phone Subscriber's Bill: \" + phoneBill); // Add internet session records for ISPSubscriber InternetSessionHistory.addSession(2L, LocalDateTime.now().minusHours(1), 500); // 500 data units InternetSessionHistory.addSession(2L, LocalDateTime.now().minusHours(2), 800); // 800 data units // Calculate and print the ISP subscriber's bill double ispBill = ispSubscriber.calculateBill(); System.out.println(\"ISP Subscriber's Bill: \" + ispBill); } } The above code demonstrates the Open/Closed Principle (OCP) by separating the base Subscriber class from its specific implementations, PhoneSubscriber and ISPSubscriber, allowing for new functionalities to be added without modifying the existing code structure.\nClosed for Modification: The Subscriber base class is closed for modification. It defines common properties (like subscriberId, address, and baseRate) and an abstract calculateBill method that acts as a placeholder for billing logic. This base class remains unchanged even as new types of subscribers or billing strategies are introduced.\nOpen for Extension: The calculateBill method in Subscriber can be extended by subclasses, like PhoneSubscriber and ISPSubscriber, to implement custom billing calculations. Each subclass overrides calculateBill according to its unique billing requirements (e.g., PhoneSubscriber calculates based on call duration, while ISPSubscriber uses data usage with free data allowances). This enables additional subscriber types to be created without altering the base class or existing subclasses.\nFlexible to New Requirements: By following OCP, any new type of subscriber can be added—such as PremiumSubscriber or CorporateSubscriber—with its own billing logic without affecting the existing structure. This ensures that the core system remains stable, extensible, and easily maintainable as new features or subscriber types are introduced.\n--- title: Open Closed Principle - Class Diagram --- classDiagram class Subscriber { +Long subscriberId +String address +Long phoneNumber +int baseRate +double calculateBill() } class PhoneSubscriber { +double calculateBill() } class ISPSubscriber { +double calculateBill() +long freeUsage +void setFreeUsage(long freeUsage) +long getFreeUsage() } Subscriber \u003c|-- PhoneSubscriber Subscriber \u003c|-- ISPSubscriber 1.3 Liskov Substitution Principle Objects of a superclass should be replaceable with objects of a subclass without altering the correctness of the program.\nSHOW CODE: Violation of LSP Violation of LSP package dev.signalyu.solid.lsp; class Rectangle { private int width; private int height; public Rectangle(int width, int height) { this.width = width; this.height = height; } public int getWidth() { return width; } public void setWidth(int width) { this.width = width; } public int getHeight() { return height; } public void setHeight(int height) { this.height = height; } public int computeArea() { return width * height; } } class Square extends Rectangle { public Square(int side) { super(side, side); } @Override public void setWidth(int width) { setSide(width); } @Override public void setHeight(int height) { setSide(height); } public void setSide(int side) { super.setWidth(side); super.setHeight(side); } } public class Main { public static void main(String[] args) { Rectangle rectangle = new Rectangle(10, 20); System.out.println(rectangle.computeArea()); // 200 = 10 * 20 Square square = new Square(10); System.out.println(square.computeArea()); // 100 = 10 * 10 useRectangle(rectangle); System.out.println(rectangle.computeArea()); // 600 = 20 * 30 useRectangle(square); // Violates Liskov Substitution Principle System.out.println(square.computeArea()); // 900 = 30 * 30 } private static void useRectangle(Rectangle rectangle) { rectangle.setHeight(20); rectangle.setWidth(30); assert rectangle.getHeight() == 20 : \"Height Not equal to 20\"; assert rectangle.getWidth() == 30 : \"Width Not equal to 30\"; } } In the above code, the useRectangle method assumes that it can independently set the width and height of a Rectangle. However, when a Square (a subclass of Rectangle) object is passed to it, unexpected behavior will occur.\nSHOW CODE: After Refactoring After Refactoring package dev.signalyu.solid.lsp; interface Shape { int computeArea(); } class Rectangle implements Shape { private int width; private int height; public Rectangle(int width, int height) { this.width = width; this.height = height; } public int getWidth() { return width; } public void setWidth(int width) { this.width = width; } public int getHeight() { return height; } public void setHeight(int height) { this.height = height; } @Override public int computeArea() { return width * height; } } class Square implements Shape { private int side; public Square(int side) { this.side = side; } public void setSide(int side) { this.side = side; } public int getSide() { return side; } @Override public int computeArea() { return side * side; } } public class Main { public static void main(String[] args) { Rectangle rectangle = new Rectangle(10, 20); System.out.println(rectangle.computeArea()); Square square = new Square(10); System.out.println(square.computeArea()); useRectangle(rectangle); } private static void useRectangle(Rectangle rectangle) { rectangle.setHeight(20); rectangle.setWidth(30); assert rectangle.getHeight() == 20 : \"Height Not equal to 20\"; assert rectangle.getWidth() == 30 : \"Width Not equal to 30\"; } } After refactoring, the useRectangle method is now dedicated exclusively to the Rectangle class.\n1.4 Interface Segregation Principle No client should be forced to depend on methods it does not use.\nSHOW CODE: Violation of ISP Violation of ISP package dev.signalyu.solid.isp; import java.time.LocalDateTime; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.stream.Collectors; // Abstract Entity Class abstract class Entity { private Long id; public Long getId() { return id; } public void setId(Long id) { this.id = id; } } // Order Entity class Order extends Entity { private LocalDateTime orderPlacedOn; private double totalValue; public LocalDateTime getOrderPlacedOn() { return orderPlacedOn; } public void setOrderPlacedOn(LocalDateTime orderPlacedOn) { this.orderPlacedOn = orderPlacedOn; } public double getTotalValue() { return totalValue; } public void setTotalValue(double totalValue) { this.totalValue = totalValue; } } // User Entity class User extends Entity { private String name; private LocalDateTime lastLogin; public String getName() { return name; } public void setName(String name) { this.name = name; } public LocalDateTime getLastLogin() { return lastLogin; } public void setLastLogin(LocalDateTime lastLogin) { this.lastLogin = lastLogin; } } // Persistence Service Interface interface PersistenceService\u0026lt;T extends Entity\u0026gt; { void save(T entity); void delete(T entity); T findById(Long id); /** * ISP VIOLATION!!! * * Order entity doesn't have a name property and hence doesn't * need to implement the findByName method */ List\u0026lt;T\u0026gt; findByName(String name); } // User Persistence Service class UserPersistenceService implements PersistenceService\u0026lt;User\u0026gt; { private static final Map\u0026lt;Long, User\u0026gt; USERS = new HashMap\u0026lt;\u0026gt;(); @Override public void save(User entity) { synchronized (USERS) { USERS.put(entity.getId(), entity); } } @Override public void delete(User entity) { synchronized (USERS) { USERS.remove(entity.getId()); } } @Override public User findById(Long id) { synchronized (USERS) { return USERS.get(id); } } @Override public List findByName(String name) { synchronized (USERS) { return USERS.values().stream() .filter(u -\u003e u.getName().equalsIgnoreCase(name)) .collect(Collectors.toList()); } } } The above code violates the Interface Segregation Principle because the PersistenceService interface defines methods that are not applicable to all entities. For instance, the Order entity does not have a name property and therefore does not require the findByName method.\nSHOW CODE: After Refactoring After Refactoring import java.time.LocalDateTime; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.stream.Collectors; // Abstract Entity Class abstract class Entity { private Long id; public Long getId() { return id; } public void setId(Long id) { this.id = id; } } // User Entity class User extends Entity { private String name; private LocalDateTime lastLogin; public String getName() { return name; } public void setName(String name) { this.name = name; } public LocalDateTime getLastLogin() { return lastLogin; } public void setLastLogin(LocalDateTime lastLogin) { this.lastLogin = lastLogin; } } // Order Entity class Order extends Entity { private LocalDateTime orderPlacedOn; private double totalValue; public LocalDateTime getOrderPlacedOn() { return orderPlacedOn; } public void setOrderPlacedOn(LocalDateTime orderPlacedOn) { this.orderPlacedOn = orderPlacedOn; } public double getTotalValue() { return totalValue; } public void setTotalValue(double totalValue) { this.totalValue = totalValue; } } // Persistence Service Interface interface PersistenceService\u0026lt;T extends Entity\u0026gt; { void save(T entity); void delete(T entity); T findById(Long id); } // Order Persistence Service class OrderPersistenceService implements PersistenceService\u0026lt;Order\u0026gt; { private static final Map\u0026lt;Long, Order\u0026gt; ORDERS = new HashMap\u0026lt;\u0026gt;(); @Override public void save(Order entity) { synchronized (ORDERS) { ORDERS.put(entity.getId(), entity); } } @Override public void delete(Order entity) { synchronized (ORDERS) { ORDERS.remove(entity.getId()); } } @Override public Order findById(Long id) { synchronized (ORDERS) { return ORDERS.get(id); } } } // User Persistence Service class UserPersistenceService implements PersistenceService\u0026lt;User\u0026gt; { private static final Map\u0026lt;Long, User\u0026gt; USERS = new HashMap\u0026lt;\u0026gt;(); @Override public void save(User entity) { synchronized (USERS) { USERS.put(entity.getId(), entity); } } @Override public void delete(User entity) { synchronized (USERS) { USERS.remove(entity.getId()); } } @Override public User findById(Long id) { synchronized (USERS) { return USERS.get(id); } } public List findByName(String name) { synchronized (USERS) { return USERS.values().stream() .filter(u -\u003e u.getName().equalsIgnoreCase(name)) .collect(Collectors.toList()); } } } After refactoring, the PersistenceService interface includes only the generic methods (save, findById, and delete) that are applicable to all entities.\n1.5 Dependency Inversion Principle High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions\nSHOW CODE: Violation of DIP Violation of DIP package dev.signalyu.solid.dip; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.time.LocalDateTime; import java.time.ZoneId; // Common interface for classes formatting Message object interface Formatter { String format(Message message) throws FormatException; } // Thrown by formatter class FormatException extends IOException { public FormatException(Exception cause) { super(cause); } } // Formats message to JSON format class JSONFormatter implements Formatter { public String format(Message message) throws FormatException { ObjectMapper mapper = new ObjectMapper(); try { return mapper.writeValueAsString(message); } catch (JsonProcessingException e) { e.printStackTrace(); throw new FormatException(e); } } } // Message class with content and timestamp class Message { private String msg; private LocalDateTime timestamp; public Message(String msg) { this.msg = msg; this.timestamp = LocalDateTime.now(ZoneId.of(\"UTC\")); } public String getMsg() { return msg; } public LocalDateTime getTimestamp() { return timestamp; } } // Writes message to a file class MessagePrinter { /** * MessagePrinter directly instantiates the JSONFormatter object inside the * writeMessage method, which violates the Dependency Inversion Principle. */ public void writeMessage(Message msg, String fileName) throws IOException { Formatter formatter = new JSONFormatter(); // creates formatter try (PrintWriter writer = new PrintWriter(new FileWriter(fileName))) { // creates print writer writer.println(formatter.format(msg)); // formats and writes message writer.flush(); } } } // Main class public class Main { public static void main(String[] args) throws IOException { Message msg = new Message(\"This is a message again\"); MessagePrinter printer = new MessagePrinter(); printer.writeMessage(msg, \"test_msg.txt\"); } } In the above code, the MessagePrinter class directly instanitiates the JSONFormatter object inside the writeMessage method, which violates the Dependency Inversion Principle. This tight coupling means that if a new formatter, such as TextFormatter, needs to be added, the writeMessage method must be modified. This violates the Open-Closed Principle, which states that classes should be open for extension but closed for modification. According to the Dependency Inversion Principle, the high-level module (MessagePrinter) should not depend on the low-level module (JSONFormatter). Instead, both should depend on abstractions, such as the Formatter interface.\nSHOW CODE: After Refactoring After Refactoring import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule; import java.io.IOException; import java.io.PrintWriter; import java.time.LocalDateTime; import java.time.ZoneId; // Common interface for classes formatting Message objects interface Formatter { String format(Message message) throws FormatException; } // Custom exception thrown by Formatter class FormatException extends IOException { public FormatException(Exception cause) { super(cause); } } // Formats a Message object to JSON format class JSONFormatter implements Formatter { public String format(Message message) throws FormatException { ObjectMapper mapper = new ObjectMapper(); mapper.registerModule(new JavaTimeModule()); try { return mapper.writeValueAsString(message); } catch (JsonProcessingException e) { e.printStackTrace(); throw new FormatException(e); } } } // Represents a message with content and a timestamp class Message { private String msg; private LocalDateTime timestamp; public Message(String msg) { this.msg = msg; this.timestamp = LocalDateTime.now(ZoneId.of(\"UTC\")); } public String getMsg() { return msg; } public LocalDateTime getTimestamp() { return timestamp; } } // Responsible for writing a formatted Message to a file or output stream class MessagePrinter { public void writeMessage(Message msg, Formatter formatter, PrintWriter writer) throws IOException { writer.println(formatter.format(msg)); // Formats and writes the message writer.flush(); } } // Main class demonstrating functionality public class Main { public static void main(String[] args) throws IOException { Message msg = new Message(\"This is a message again\"); MessagePrinter printer = new MessagePrinter(); try (PrintWriter writer = new PrintWriter(System.out)) { // Writing to console output printer.writeMessage(msg, new JSONFormatter(), writer); } } } After refactoring, the MessagePrinter class now depends on the Formatter abstraction rather than its concrete implementations. This makes it easier to replace JSONFormatter with any other implementation of Formatter without modifying the existing code, adhering to the Open-Closed Principle.\n2. Creational Design Patterns Creational Design Patterns focus on the process of object creation, ensuring flexibility and promoting code reuse.\n2.1 Builder The Builder Design Pattern is a creational design pattern that enables the step-by-step construction of complex objects. It separates the construction process form the object\u0026rsquo;s representation, allowing the same process to produce different representations. This pattern is often used to build complex or immutable obejcts.\n❔❔❔ Same Construction Process Creates Different Representations:\nConsider building a meal in a fast-food restaurant, where the construction steps include:\nAdd a main dish (e.g., burger, sandwich, or pizza). Add a side dish (e.g., fries, salad, or breadsticks). Add a drink (e.g., soda, coffee, or juice). The construction process remains consistent: (main dish + side dish + drink). However, the final representation varies based on the choices:\nVeggie Meal: Sandwich + Salad + Juice. Classic Meal: Burger + Fries + Soda. Kids\u0026rsquo; Meal: Mini Pizza + Fries + Milk. --- title: UML Diagram of Builder Pattern --- classDiagram class Builder { +buildPartA() +buildPartB() +getResult() } class ConcreteBuilder1 { +buildPartA() +buildPartB() +getResult() } class ConcreteBuilder2 { +buildPartA() +buildPartB() +getResult() } class Director { +construct(builder: Builder) } class Product { +PartA +PartB } Builder \u003c|-- ConcreteBuilder1 Builder \u003c|-- ConcreteBuilder2 Director --\u003e Builder : uses ConcreteBuilder1 --\u003e Product : creates ConcreteBuilder2 --\u003e Product : creates ℹ️ In a context of design patterns, UML (Unified Modeling Language) is commonly used to represent the structure and behavior of the patterns in a clear and simple manner.\nSHOW CODE: Director Java import java.time.LocalDate; import java.time.Period; import java.util.Objects; // Address class class Address { private String houseNumber; private String street; private String city; private String zipcode; private String state; public Address(String houseNumber, String street, String city, String state, String zipcode) { this.houseNumber = houseNumber; this.street = street; this.city = city; this.state = state; this.zipcode = zipcode; } public String getFullAddress() { return houseNumber + \", \" + street + \"\\n\" + city + \"\\n\" + state + \" \" + zipcode; } } // User class class User { private String firstName; private String lastName; private LocalDate birthday; private Address address; public User(String firstName, String lastName, LocalDate birthday, Address address) { this.firstName = firstName; this.lastName = lastName; this.birthday = birthday; this.address = address; } public String getFirstName() { return firstName; } public String getLastName() { return lastName; } public LocalDate getBirthday() { return birthday; } public Address getAddress() { return address; } } // UserDTO interface interface UserDTO { String getName(); String getAddress(); String getAge(); } // UserWebDTO implementation class UserWebDTO implements UserDTO { private final String name; private final String address; private final String age; public UserWebDTO(String name, String address, String age) { this.name = name; this.address = address; this.age = age; } @Override public String getName() { return name; } @Override public String getAddress() { return address; } @Override public String getAge() { return age; } @Override public String toString() { return \"Name: \" + name + \"\\nAge: \" + age + \"\\nAddress:\\n\" + address; } } // UserDTOBuilder interface interface UserDTOBuilder { UserDTOBuilder withFirstName(String firstName); UserDTOBuilder withLastName(String lastName); UserDTOBuilder withBirthday(LocalDate birthday); UserDTOBuilder withAddress(Address address); UserDTO build(); } // Concrete builder class UserWebDTOBuilder implements UserDTOBuilder { private String firstName; private String lastName; private String age; private String address; @Override public UserDTOBuilder withFirstName(String firstName) { this.firstName = firstName; return this; } @Override public UserDTOBuilder withLastName(String lastName) { this.lastName = lastName; return this; } @Override public UserDTOBuilder withBirthday(LocalDate birthday) { if (Objects.nonNull(birthday)) { this.age = String.valueOf(Period.between(birthday, LocalDate.now()).getYears()); } return this; } @Override public UserDTOBuilder withAddress(Address address) { if (Objects.nonNull(address)) { this.address = address.getFullAddress(); } return this; } @Override public UserDTO build() { return new UserWebDTO(firstName + \" \" + lastName, address, age); } } // Client code (Director) public class Client { public static void main(String[] args) { User user = createUser(); UserDTOBuilder builder = new UserWebDTOBuilder(); UserDTO userDTO = buildUserDTO(builder, user); System.out.println(userDTO); } private static UserDTO buildUserDTO(UserDTOBuilder builder, User user) { return builder.withFirstName(user.getFirstName()) .withLastName(user.getLastName()) .withBirthday(user.getBirthday()) .withAddress(user.getAddress()) .build(); } private static User createUser() { Address address = new Address(\"100\", \"State Street\", \"Pawnee\", \"Indiana\", \"47998\"); return new User(\"Ron\", \"Swanson\", LocalDate.of(1960, 5, 6), address); } } SHOW CODE: Inner Builder Java import java.time.LocalDate; import java.time.Period; // Address class with Builder class Address { private final String houseNumber; private final String street; private final String city; private final String zipcode; private final String state; private Address(Builder builder) { this.houseNumber = builder.houseNumber; this.street = builder.street; this.city = builder.city; this.zipcode = builder.zipcode; this.state = builder.state; } public String getFullAddress() { return houseNumber + \", \" + street + \"\\n\" + city + \"\\n\" + state + \" \" + zipcode; } public static class Builder { private String houseNumber; private String street; private String city; private String zipcode; private String state; public Builder setHouseNumber(String houseNumber) { this.houseNumber = houseNumber; return this; } public Builder setStreet(String street) { this.street = street; return this; } public Builder setCity(String city) { this.city = city; return this; } public Builder setZipcode(String zipcode) { this.zipcode = zipcode; return this; } public Builder setState(String state) { this.state = state; return this; } public Address build() { return new Address(this); } } } // User class with Builder class User { private final String firstName; private final String lastName; private final LocalDate birthday; private final Address address; private User(Builder builder) { this.firstName = builder.firstName; this.lastName = builder.lastName; this.birthday = builder.birthday; this.address = builder.address; } public String getFirstName() { return firstName; } public String getLastName() { return lastName; } public LocalDate getBirthday() { return birthday; } public Address getAddress() { return address; } public static class Builder { private String firstName; private String lastName; private LocalDate birthday; private Address address; public Builder setFirstName(String firstName) { this.firstName = firstName; return this; } public Builder setLastName(String lastName) { this.lastName = lastName; return this; } public Builder setBirthday(LocalDate birthday) { this.birthday = birthday; return this; } public Builder setAddress(Address address) { this.address = address; return this; } public User build() { return new User(this); } } } // UserDTO interface interface UserDTO { String getName(); String getAddress(); String getAge(); } // UserWebDTO implementation class UserWebDTO implements UserDTO { private final String name; private final String address; private final String age; private UserWebDTO(Builder builder) { this.name = builder.name; this.address = builder.address; this.age = builder.age; } @Override public String getName() { return name; } @Override public String getAddress() { return address; } @Override public String getAge() { return age; } @Override public String toString() { return \"Name: \" + name + \"\\nAge: \" + age + \"\\nAddress:\\n\" + address; } public static class Builder { private String name; private String address; private String age; public Builder setName(String name) { this.name = name; return this; } public Builder setAddress(String address) { this.address = address; return this; } public Builder setAge(String age) { this.age = age; return this; } public UserWebDTO build() { return new UserWebDTO(this); } } } // Client code public class Client { public static void main(String[] args) { Address address = new Address.Builder() .setHouseNumber(\"100\") .setStreet(\"State Street\") .setCity(\"Pawnee\") .setState(\"Indiana\") .setZipcode(\"47998\") .build(); User user = new User.Builder() .setFirstName(\"Ron\") .setLastName(\"Swanson\") .setBirthday(LocalDate.of(1960, 5, 6)) .setAddress(address) .build(); UserWebDTO userDTO = new UserWebDTO.Builder() .setName(user.getFirstName() + \" \" + user.getLastName()) .setAddress(user.getAddress().getFullAddress()) .setAge(String.valueOf(Period.between(user.getBirthday(), LocalDate.now()).getYears())) .build(); System.out.println(userDTO); } } Summary Why builder pattern is capable of creating immutable objects?\nImplementing the builder as a static inner class facilitates the creation of immutable objects. The builder class has provileged access to the enclosing class\u0026rsquo;s internal state during the construction process. However, once the final object is built, it does not expose any setters or methods that modify its state, ensuring immutability.\nThe Director in the Builder Design Pattern is responsible for the construction process but is often not implemented as a standalone class. Instead, its responsibilities are typically handled by the client code or the consumer that requires the constructed object. This approach avoids the need for a separate director class, especially when the construction logic is simple or tailored to the client\u0026rsquo;s specific requirements.\nSHOW CODE: Without a Director Java UserDTO userDTO = new UserWebDTOBuilder() .withFirstName(\"John\") .withLastName(\"Doe\") .withBirthday(LocalDate.of(1990, 1, 1)) .withAddress(new Address(\"123\", \"Main St\", \"City\", \"State\", \"12345\")) .build(); SHOW CODE: With a Director Java public class Director { public UserDTO constructUser(UserDTOBuilder builder) { return builder.withFirstName(\"John\") .withLastName(\"Doe\") .withBirthday(LocalDate.of(1990, 1, 1)) .withAddress(new Address(\"123\", \"Main St\", \"City\", \"State\", \"12345\")) .build(); } } If a Product in the Builder Design Pattern is not part of an inheritance hierarchy, creating an abstract builder is unnecessary. The abstract builder is typically used to define method for mutiple types of builders. When there is only one type of product to construct, a concrete builder alone is sufficient to meet the requirements.\n2.2 Simple Factory The Simple Factory design pattern is a creational design pattern that delegates the responsibility of creating instances of different classes to a factory class, typically using a static method based on input parameters. This pattern centralizes object creation, simplifying the client code. However, it can violate the Open-Closed Principle (OCP), because adding a new product type requires modifying the factory class itself. This makes the code less flexible and harder to extend without altering existing source code.\nSHOW CODE Java import java.time.LocalDateTime; import java.time.LocalDate; // Abstract Post class public abstract class Post { private Long id; private String title; private String content; private LocalDateTime createdOn; private LocalDateTime publishedOn; public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getContent() { return content; } public void setContent(String content) { this.content = content; } public LocalDateTime getCreatedOn() { return createdOn; } public void setCreatedOn(LocalDateTime createdOn) { this.createdOn = createdOn; } public LocalDateTime getPublishedOn() { return publishedOn; } public void setPublishedOn(LocalDateTime publishedOn) { this.publishedOn = publishedOn; } } // BlogPost class extends Post public class BlogPost extends Post { private String author; private String[] tags; public String getAuthor() { return author; } public void setAuthor(String author) { this.author = author; } public String[] getTags() { return tags; } public void setTags(String[] tags) { this.tags = tags; } } // NewsPost class extends Post public class NewsPost extends Post { private String headline; private LocalDate newsTime; public String getHeadline() { return headline; } public void setHeadline(String headline) { this.headline = headline; } public LocalDate getNewsTime() { return newsTime; } public void setNewsTime(LocalDate newsTime) { this.newsTime = newsTime; } } // ProductPost class extends Post public class ProductPost extends Post { private String imageUrl; private String name; public String getImageUrl() { return imageUrl; } public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } public String getName() { return name; } public void setName(String name) { this.name = name; } } // PostFactory class to create different types of posts public class PostFactory { public static Post createPost(String type) { switch (type) { case \"blog\": return new BlogPost(); case \"news\": return new NewsPost(); case \"product\": return new ProductPost(); default: throw new IllegalArgumentException(\"Post type is unknown\"); } } } // Client class to demonstrate the usage of Simple Factory public class Client { public static void main(String[] args) { Post post = PostFactory.createPost(\"news\"); System.out.println(post.getClass().getSimpleName()); // Prints the type of the created post (NewsPost) } } classDiagram direction RL class Post { - Long id - String title - String content - LocalDateTime createdOn - LocalDateTime publishedOn + getId() + setId(Long) + getTitle() + setTitle(String) + getContent() + setContent(String) + getCreatedOn() + setCreatedOn(LocalDateTime) + getPublishedOn() + setPublishedOn(LocalDateTime) } class BlogPost { - String author - String[] tags + getAuthor() + setAuthor(String) + getTags() + setTags(String[]) } class NewsPost { - String headline - LocalDate newsTime + getHeadline() + setHeadline(String) + getNewsTime() + setNewsTime(LocalDate) } class ProductPost { - String imageUrl - String name + getImageUrl() + setImageUrl(String) + getName() + setName(String) } class PostFactory { + createPost(String) } Post \u003c|-- BlogPost Post \u003c|-- NewsPost Post \u003c|-- ProductPost PostFactory --|\u003e BlogPost : creates PostFactory --|\u003e NewsPost : creates PostFactory --|\u003e ProductPost : creates The above code violates the Open-Closed Principle because when adding a new post type, such as EventPost, to the factory, the code must be modified by adding a new case statement, like the following:\ncase \u0026#34;event\u0026#34;: return new EventPost(); This approach breaks the OCP, which dictates that entities should be open for extension but closed for modification.\n2.3 Factory Method The Factory Method design pattern is a creational pattern that provides a method for creating objects in a superclass, while allowing subclasses to determine the type of object that will be created. This approach delegates the object creation process to the subclasses, enabling them to instantiate specific classes without the superclass needing to know the exact class being instantiated.\nSHOW CODE Java import java.util.*; /** * Abstract class representing a message, which is the \"product\". * Subclasses will provide specific content types. */ abstract class Message { public abstract String getContent(); public void addDefaultHeaders() { // Adds some default headers } public void encrypt() { // Has some code to encrypt the content } } /** * Concrete implementation of the Message class for Text messages. */ class TextMessage extends Message { @Override public String getContent() { return \"Text\"; } } /** * Concrete implementation of the Message class for JSON messages. */ class JSONMessage extends Message { @Override public String getContent() { return \"{\\\"JSON\\\":[]}\"; } } /** * Abstract creator class. The factory method createMessage() must be implemented * by subclasses to instantiate the specific message type. */ abstract class MessageCreator { public Message getMessage() { Message msg = createMessage(); msg.addDefaultHeaders(); msg.encrypt(); return msg; } // Factory method to create a message protected abstract Message createMessage(); } /** * Concrete creator for creating JSON messages. */ class JSONMessageCreator extends MessageCreator { @Override public Message createMessage() { return new JSONMessage(); } } /** * Concrete creator for creating Text messages. */ class TextMessageCreator extends MessageCreator { @Override public Message createMessage() { return new TextMessage(); } } /** * Client class demonstrating the use of the Factory Method pattern. */ public class Client { public static void main(String[] args) { printMessage(new JSONMessageCreator()); printMessage(new TextMessageCreator()); } public static void printMessage(MessageCreator creator) { Message msg = creator.getMessage(); System.out.println(msg.getContent()); } } --- title: UML Diagram of Factory Method Pattern --- classDiagram Message \u003c|-- TextMessage Message \u003c|-- JSONMessage MessageCreator \u003c|-- JSONMessageCreator MessageCreator \u003c|-- TextMessageCreator JSONMessageCreator \"1\" --\u003e \"1\" JSONMessage : creates TextMessageCreator \"1\" --\u003e \"1\" TextMessage : creates MessageCreator : +getMessage() MessageCreator : +createMessage() JSONMessageCreator : +createMessage() TextMessageCreator : +createMessage() Message : +getContent() Message : +addDefaultHeaders() Message : +encrypt() 2.4 Prototype The Prototype design pattern is a creational pattern that enables the creation of new objects by copying an existing object, known as the prototype. It is particularly useful when object creation is resource-intensive or when there is a need to dynamically create mana similar objects.\nSHOW CODE Java // Point3D class representing a 3D point class Point3D { private float x, y, z; public static final Point3D ZERO = new Point3D(0, 0, 0); public Point3D(float x, float y, float z) { this.x = x; this.y = y; this.z = z; } public Point3D normalize() { float mag = magnitude(); return new Point3D(x / mag, y / mag, z / mag); } private float magnitude() { return (float) Math.sqrt(x * x + y * y + z * z); } public Point3D multiply(float scale) { return new Point3D(x * scale, y * scale, z * scale); } public Point3D add(Point3D vector) { return new Point3D(x + vector.x, y + vector.y, z + vector.z); } @Override public String toString() { return \"(\" + x + \", \" + y + \", \" + z + \")\"; } } // Abstract GameUnit class defining the clone method abstract class GameUnit implements Cloneable { private Point3D position; public GameUnit() { position = Point3D.ZERO; } @Override public GameUnit clone() throws CloneNotSupportedException { GameUnit unit = (GameUnit) super.clone(); unit.initialize(); return unit; } protected void initialize() { this.position = Point3D.ZERO; reset(); } protected abstract void reset(); public GameUnit(float x, float y, float z) { position = new Point3D(x, y, z); } public void move(Point3D direction, float distance) { Point3D finalMove = direction.normalize(); finalMove = finalMove.multiply(distance); position = position.add(finalMove); } public Point3D getPosition() { return position; } } // Swordsman class extends GameUnit and implements specific behavior class Swordsman extends GameUnit { private String state = \"idle\"; public void attack() { this.state = \"attacking\"; } @Override public String toString() { return \"Swordsman \" + state + \" @ \" + getPosition(); } @Override protected void reset() { state = \"idle\"; } } // General class extends GameUnit but does not support cloning class General extends GameUnit { private String state = \"idle\"; public void boostMorale() { this.state = \"MoralBoost\"; } @Override public String toString() { return \"General \" + state + \" @ \" + getPosition(); } @Override public GameUnit clone() throws CloneNotSupportedException { throw new CloneNotSupportedException(\"Generals are unique\"); } @Override protected void reset() { throw new UnsupportedOperationException(\"Reset not supported\"); } } public class Main { // Client code to demonstrate the Prototype Pattern public static void main(String[] args) throws CloneNotSupportedException { // Creating and moving a Swordsman Swordsman s1 = new Swordsman(); s1.move(new Point3D(-10, 0, 0), 20); s1.attack(); System.out.println(s1); // Cloning the Swordsman Swordsman s2 = (Swordsman) s1.clone(); System.out.println(\"Cloned swordsman: \" + s2); } } Shallow Copy vs. Deep Copy: A shallow copy creates a new object but only copies the references of the original object\u0026rsquo;s fields. As a result, both the original and the copied object share references to the same inner objects. Any changes made to the inner mutable objects of the copied object will affect the original object as well. In Java, the clone method performs a shallow copy. On the other hand, a deep copy involves recursively copying the original object and all the objects it references. As a result, the copied object is entirely independent of the original, and changes made to the copied object do not affect the original one.\nSHOW CODE: Shallow Copy Java import java.util.ArrayList; import java.util.List; /** * @author Signal Yu * @since 2024-12-2 */ class Person { String name; int age; public Person(String name, int age) { this.name = name; this.age = age; } public void setName(String name) { this.name = name; } @Override public String toString() { return \"Person{name='\" + name + \"', age=\" + age + '}'; } } public class Solution { public static void main(String[] args) { // Original list with mutable objects (Person) List\u0026lt;Person\u0026gt; originalList = new ArrayList\u0026lt;\u0026gt;(); originalList.add(new Person(\"Alice\", 30)); originalList.add(new Person(\"Bob\", 25)); // Shallow copy of the list List\u0026lt;Person\u0026gt; shallowCopyList = new ArrayList\u0026lt;\u0026gt;(originalList); // Modify the object in the shallow copy shallowCopyList.get(1).setName(\"Signal\"); // Print both lists System.out.println(\"Original List: \" + originalList); System.out.println(\"Shallow Copy List: \" + shallowCopyList); } } SHOW OUTPUT: Shallow Copy Output Original List: [Person{name='Alice', age=30}, Person{name='Signal', age=25}] Shallow Copy List: [Person{name='Alice', age=30}, Person{name='Signal', age=25}] SHOW CODE: Deep Copy Java import java.util.ArrayList; import java.util.List; class Person { String name; int age; public Person(String name, int age) { this.name = name; this.age = age; } public void setName(String name) { this.name = name; } @Override public String toString() { return \"Person{name='\" + name + \"', age=\" + age + '}'; } // Deep copy method for Person class public Person deepCopy() { return new Person(this.name, this.age); } } public class Solution { public static void main(String[] args) { // Original list with mutable objects (Person) List\u0026lt;Person\u0026gt; originalList = new ArrayList\u0026lt;\u0026gt;(); originalList.add(new Person(\"Alice\", 30)); originalList.add(new Person(\"Bob\", 25)); // Deep copy of the list (creating new Person objects) List\u0026lt;Person\u0026gt; deepCopyList = new ArrayList\u0026lt;\u0026gt;(); for (Person person : originalList) { deepCopyList.add(person.deepCopy()); // Add a deep copy of each person } // Modify the object in the deep copy deepCopyList.get(1).setName(\"Signal\"); // Print both lists System.out.println(\"Original List: \" + originalList); System.out.println(\"Deep Copy List: \" + deepCopyList); } } SHOW OUTPUT: Deep Copy Output Original List: [Person{name='Alice', age=30}, Person{name='Bob', age=25}] Deep Copy List: [Person{name='Alice', age=30}, Person{name='Signal', age=25}] It is important to note that changes made to immutable objects in a shallow copied object will not affect the original object. For example, when performing a shallow copy of an ArrayList that contains Integer values, changes made to the Integer of the copied object will not affect the original object because Integer is immutable (since it is marked as final and its value cannot be changed).\nSHOW CODE Java import java.util.ArrayList; import java.util.List; /** * @author Signal Yu * @since 2024-12-2 */ public class Solution { public static void main(String[] args) { // Integer is an immutable class List\u0026lt;Integer\u0026gt; original = new ArrayList\u0026lt;\u0026gt;(); original.add(1); original.add(2); List\u0026lt;Integer\u0026gt; shallowCopy = new ArrayList\u0026lt;\u0026gt;(original); // Shallow copy shallowCopy.set(0, 99); // Modify the shallow copy System.out.println(original); // Output: [1, 2] System.out.println(shallowCopy); // Output: [99, 2] } } Prototype v.s. Builder\n2.5 Abstract Factory The Abstract Factory design pattern is a creational pattern that creates families of related objects without specifying their concrete classes. It allows the client to instantiate objects from a group of related products while ensuring that these objects are compatible with each other. This pattern is particularly useful when a system needs to be independent of how objects are created, composed, and represented. However, a limitation of this pattern is that when a new product type is added, the base factory typically needs to be modified, which can increase the maintainence overhead.\nSHOW CODE Java // Represents an abstract product interface Storage { String getId(); } // Represents a concrete product in a family \"Amazon Web Services\" class S3Storage implements Storage { public S3Storage(int capacityInMib) { System.out.println(\"Allocated \" + capacityInMib + \" on S3\"); } @Override public String getId() { return \"S31\"; } @Override public String toString() { return \"S3 Storage\"; } } // Represents a concrete product in a family \"Google Cloud Platform\" class GoogleCloudStorage implements Storage { public GoogleCloudStorage(int capacityInMib) { System.out.println(\"Allocated \" + capacityInMib + \" on Google Cloud Storage\"); } @Override public String getId() { return \"gcpcs1\"; } @Override public String toString() { return \"Google cloud storage\"; } } // Represents an abstract product interface Instance { enum Capacity {micro, small, large} void start(); void attachStorage(Storage storage); void stop(); } // Represents a concrete product in a family \"Amazon Web Services\" class Ec2Instance implements Instance { public Ec2Instance(Capacity capacity) { System.out.println(\"Created Ec2Instance\"); } @Override public void start() { System.out.println(\"Ec2Instance started\"); } @Override public void attachStorage(Storage storage) { System.out.println(\"Attached \" + storage + \" to Ec2Instance\"); } @Override public void stop() { System.out.println(\"Ec2Instance stopped\"); } @Override public String toString() { return \"EC2Instance\"; } } // Represents a concrete product in a family \"Google Cloud Platform\" class GoogleComputeEngineInstance implements Instance { public GoogleComputeEngineInstance(Capacity capacity) { System.out.println(\"Created Google Compute Engine instance\"); } @Override public void start() { System.out.println(\"Compute engine instance started\"); } @Override public void attachStorage(Storage storage) { System.out.println(\"Attached \" + storage + \" to Compute engine instance\"); } @Override public void stop() { System.out.println(\"Compute engine instance stopped\"); } } // Abstract factory with methods defined for each object type. interface ResourceFactory { Instance createInstance(Instance.Capacity capacity); Storage createStorage(int capMib); } // Factory implementation for Amazon Web Services resources class AwsResourceFactory implements ResourceFactory { @Override public Instance createInstance(Instance.Capacity capacity) { return new Ec2Instance(capacity); } @Override public Storage createStorage(int capMib) { return new S3Storage(capMib); } } // Factory implementation for Google Cloud Platform resources class GoogleResourceFactory implements ResourceFactory { @Override public Instance createInstance(Instance.Capacity capacity) { return new GoogleComputeEngineInstance(capacity); } @Override public Storage createStorage(int capMib) { return new GoogleCloudStorage(capMib); } } // Client class public class Client { private ResourceFactory factory; public Client(ResourceFactory factory) { this.factory = factory; } public Instance createServer(Instance.Capacity cap, int storageMib) { Instance instance = factory.createInstance(cap); Storage storage = factory.createStorage(storageMib); instance.attachStorage(storage); return instance; } public static void main(String[] args) { Client aws = new Client(new AwsResourceFactory()); Instance i1 = aws.createServer(Instance.Capacity.micro, 20480); i1.start(); i1.stop(); System.out.println(\"***************************************\"); Client gcp = new Client(new GoogleResourceFactory()); i1 = gcp.createServer(Instance.Capacity.micro, 20480); i1.start(); i1.stop(); } } SHOW OUTPUT Output Created Ec2Instance Allocated 20480 on S3 Attached S3 Storage to Ec2Instance Ec2Instance started Ec2Instance stopped *************************************** Created Google Compute Engine instance Allocated 20480 on Google Cloud Storage Attached Google cloud storage to Compute engine instance Compute engine instance started Compute engine instance stopped Adding a new product type, such as Engine, may require modifications to the base factory. This is because the new Engine product froms a new combination with Storage and Instance, and the base factory is responsible for creating all the products (i.e., Storage, Instance, and Engine). As a result, the base factory needs to include a new method, createEngine. This modification violates the Open/Closed Principle (OCP), which states that classes should be open for extension but closed for modification.\nSHOW CODE Java // Represents an abstract product for Storage interface Storage { String getId(); } // Represents a concrete product in a family \"Amazon Web Services\" for Storage class S3Storage implements Storage { public S3Storage(int capacityInMib) { System.out.println(\"Allocated \" + capacityInMib + \" on S3\"); } @Override public String getId() { return \"S31\"; } @Override public String toString() { return \"S3 Storage\"; } } // Represents a concrete product in a family \"Google Cloud Platform\" for Storage class GoogleCloudStorage implements Storage { public GoogleCloudStorage(int capacityInMib) { System.out.println(\"Allocated \" + capacityInMib + \" on Google Cloud Storage\"); } @Override public String getId() { return \"gcpcs1\"; } @Override public String toString() { return \"Google Cloud Storage\"; } } // Represents an abstract product for Engine interface Engine { String getName(); } // Represents a concrete product in a family \"Amazon Web Services\" for Engine class Ec2Engine implements Engine { String name; public Ec2Engine(String name) { this.name = name; System.out.println(name + \" engine selected.\"); } @Override public String getName() { return name; } } // Represents a concrete product in a family \"Google Cloud Platform\" for Engine class GoogleComputeEngine implements Engine { String name; public GoogleComputeEngine(String name) { this.name = name; System.out.println(name + \" engine selected.\"); } @Override public String getName() { return name; } } // Represents an abstract product for Instance interface Instance { enum Capacity {micro, small, large} void start(); void attachStorage(Storage storage); void stop(); void useEngine(Engine engine); } // Represents a concrete product in a family \"Amazon Web Services\" for Instance class Ec2Instance implements Instance { public Ec2Instance(Instance.Capacity capacity) { System.out.println(\"Created Ec2Instance\"); } @Override public void start() { System.out.println(\"Ec2Instance started\"); } @Override public void attachStorage(Storage storage) { System.out.println(\"Attached \" + storage + \" to Ec2Instance\"); } @Override public void stop() { System.out.println(\"Ec2Instance stopped\"); } @Override public void useEngine(Engine engine) { System.out.println(\"Ec2Instance uses \" + engine.getName() + \" engine.\"); } @Override public String toString() { return \"EC2Instance\"; } } // Represents a concrete product in a family \"Google Cloud Platform\" for Instance class GoogleComputeEngineInstance implements Instance { public GoogleComputeEngineInstance(Instance.Capacity capacity) { System.out.println(\"Created Google Compute Engine instance\"); } @Override public void start() { System.out.println(\"Compute engine instance started\"); } @Override public void attachStorage(Storage storage) { System.out.println(\"Attached \" + storage + \" to Compute engine instance\"); } @Override public void stop() { System.out.println(\"Compute engine instance stopped\"); } @Override public void useEngine(Engine engine) { System.out.println(\"Google compute engine instance uses \" + engine.getName() + \" engine.\"); } } // Abstract factory with methods defined for each object type interface ResourceFactory { Instance createInstance(Instance.Capacity capacity); Storage createStorage(int capMib); Engine createEngine(String name); } // Factory implementation for Amazon Web Services resources class AwsResourceFactory implements ResourceFactory { @Override public Instance createInstance(Instance.Capacity capacity) { return new Ec2Instance(capacity); // Pass engine to the Ec2Instance } @Override public Storage createStorage(int capMib) { return new S3Storage(capMib); } @Override public Engine createEngine(String name) { return new Ec2Engine(name); } } // Factory implementation for Google Cloud Platform resources class GoogleResourceFactory implements ResourceFactory { @Override public Instance createInstance(Instance.Capacity capacity) { return new GoogleComputeEngineInstance(capacity); } @Override public Storage createStorage(int capMib) { return new GoogleCloudStorage(capMib); } @Override public Engine createEngine(String name) { return new GoogleComputeEngine(name); } } // Client class to test the code public class Client { private ResourceFactory factory; public Client(ResourceFactory factory) { this.factory = factory; } public Instance createServer(Instance.Capacity cap, int storageMib, String name) { Instance instance = factory.createInstance(cap); // Pass engine to instance creation Storage storage = factory.createStorage(storageMib); Engine engine = factory.createEngine(name); instance.attachStorage(storage); instance.useEngine(engine); // Call useEngine() on instance, which delegates to engine's getName() return instance; } public static void main(String[] args) { Client aws = new Client(new AwsResourceFactory()); Instance i1 = aws.createServer(Instance.Capacity.micro, 20480, \"Ec2\"); i1.start(); i1.stop(); System.out.println(\"***************************************\"); Client gcp = new Client(new GoogleResourceFactory()); i1 = gcp.createServer(Instance.Capacity.micro, 20480, \"GCE\"); i1.start(); i1.stop(); } } 2.6 Singleton Singleton is a creational design pattern that ensures a class has only one instance and provides a global point of access to that instance (typically through a static method). To implement a Singleton, the class constructor must be private, which prevents external classes from creating instances of the class directly, and a global static method should be provided to access the instance. There are two common types of Singleton: Eager Singleton and Lazy Singleton.\n2.6.1 Eager Singleton Eager Singleton ensures that an instance is created as soon as the class is loaded, rather than being created when needed. This guarantees that the instance is ready to use but may cause unnecessary overhead if the instance is never actually used.\nSHOW CODE: Eager Singleton Eager Singleton package dev.signalyu.singleton; public class EagerRegistry { private EagerRegistry() { // Private constructor to prevent instantiation } // Eagerly initializing the single instance of EagerRegistry private static final EagerRegistry INSTANCE = new EagerRegistry(); // Public method to provide access to the instance public static EagerRegistry getInstance() { return INSTANCE; } // Main method to demonstrate usage public static void main(String[] args) { // Accessing the singleton instance EagerRegistry registry = EagerRegistry.getInstance(); System.out.println(\"Singleton instance: \" + registry); } } SHOW OUTPUT Output Singleton instance: dev.signalyu.singleton.EagerRegistry@7a81197d 2.6.2 Lazy Singleton Lazy Singleton ensures that an instance of the class is created only when it is actually needed. This approach helps avoid unnecessary overhead but requires additional mechanisms to ensure thread safety in multi-threaded environments. It is commonly implemented using techniques like Double-Checked Locking or Initialization-on-Demand Holder.\nDouble-Checked Locking is an optimization technique ensures only one instance of a class is created, even in a multi-threaded environment, while minimizing synchronization overhead. This approach involves two checks: The first check, outside the synchronized block, allows the thread to bypass synchronization if the instance has already been created. The second check, inside the synchronized block, ensures that only one thread can create the instance, even if multiple threads attempt to do so concurrently.\nSHOW CODE: Double-Checked Locking Double-Checked Locking package dev.signalyu.singleton; public class LazyRegistryWithDCL { // Private constructor to prevent external instantiation private LazyRegistryWithDCL() {} // Volatile keyword ensures visibility of changes across threads private static volatile LazyRegistryWithDCL INSTANCE; // Public method to provide access to the Singleton instance public static LazyRegistryWithDCL getInstance() { if (INSTANCE == null) { // First check (outside synchronized block) synchronized (LazyRegistryWithDCL.class) { // Synchronized block to ensure only one thread can create the instance if (INSTANCE == null) { // Second check (inside synchronized block) INSTANCE = new LazyRegistryWithDCL(); // Lazy initialization } } } return INSTANCE; } // Main method to demonstrate the usage of the Singleton public static void main(String[] args) { // Accessing the Singleton instance LazyRegistryWithDCL registry = LazyRegistryWithDCL.getInstance(); System.out.println(\"Singleton instance: \" + registry); } } SHOW OUTPUT Output Singleton instance: dev.signalyu.singleton.LazyRegistryWithDCL@7a81197d The Initialization-on-Demand Holder technique leverages the class loading mechnism to ensure that the Singleton instance is created only when it is first accessed. It takes advantages of the fact that class loading in Java inherently thread-safe. This approach relies on static inner classes, which are not loaded until they are referenced, meaning that the instance is created only when it is actually needed.\nSHOW CODE: Initialization-on-Demand Holder Initialization-on-Demand Holder package dev.signalyu.singleton; public class LazyRegistryIODH { // Private constructor to prevent external instantiation private LazyRegistryIODH() { System.out.println(\"In LazyRegistryIODH singleton\"); } // Static inner class that holds the Singleton instance private static class RegistryHolder { // The Singleton instance is created when the class is loaded static final LazyRegistryIODH INSTANCE = new LazyRegistryIODH(); } // Public method to provide access to the Singleton instance public static LazyRegistryIODH getInstance() { return RegistryHolder.INSTANCE; } // Main method to demonstrate the usage of the Singleton public static void main(String[] args) { // Accessing the Singleton instance LazyRegistryIODH registry = LazyRegistryIODH.getInstance(); System.out.println(\"Singleton instance: \" + registry); } } SHOW OUTPUT Output In LazyRegistryIODH singleton Singleton instance: dev.signalyu.singleton.LazyRegistryIODH@5ca881b5 2.7 Object Pool Object Pool Design Pattern is a creational design pattern that manages a collection of reusable objects, rather than frequently creating and destroying objects. These objects are stored in a pool, from which clients can borrow objects, use them, and return them when they are done. This pattern is particularly useful in scenerios where a large number of objects are needed temporarily, and the cost of creating these objects is high, such as resource management (e.g., database connection or thread pools).\nSHOW CODE Java import java.util.concurrent.BlockingQueue; import java.util.concurrent.LinkedBlockingQueue; import java.util.function.Supplier; // Point2D class class Point2D { private float x, y; public Point2D(float x, float y) { this.x = x; this.y = y; } @Override public String toString() { return \"Point2D [x=\" + x + \", y=\" + y + \"]\"; } } // Poolable interface interface Poolable { // state reset void reset(); } // Image interface extending Poolable interface Image extends Poolable { void draw(); Point2D getLocation(); void setLocation(Point2D location); } // Bitmap class implementing Image and Poolable class Bitmap implements Image { private Point2D location; private String name; public Bitmap(String name) { this.name = name; } @Override public void draw() { System.out.println(\"Drawing \" + name + \" @ \" + location); } @Override public Point2D getLocation() { return location; } @Override public void setLocation(Point2D location) { this.location = location; } @Override public void reset() { location = null; System.out.println(\"Bitmap is reset\"); } } // ObjectPool class for reusable objects class ObjectPool { private BlockingQueue\u0026lt;T\u0026gt; availablePool; public ObjectPool(Supplier\u0026lt;T\u0026gt; creator, int count) { availablePool = new LinkedBlockingQueue\u0026lt;\u0026gt;(); for (int i = 0; i \u003c count; i++) { availablePool.offer(creator.get()); } } public T get() { try { return availablePool.take(); } catch (InterruptedException ex) { System.err.println(\"take() was interrupted\"); } return null; } public void release(T obj) { obj.reset(); try { availablePool.put(obj); } catch (InterruptedException e) { System.err.println(\"put() was interrupted\"); } } } // Main class to demonstrate Object Pool usage public class Client { public static void main(String[] args) { // Create a pool for Bitmap objects with 5 instances ObjectPool\u0026lt;Bitmap\u0026gt; bitmapPool = new ObjectPool\u0026lt;\u0026gt;(() -\u003e new Bitmap(\"Logo.bmp\"), 5); // Borrow Bitmap objects from the pool Bitmap b1 = bitmapPool.get(); b1.setLocation(new Point2D(10, 10)); Bitmap b2 = bitmapPool.get(); b2.setLocation(new Point2D(-10, 0)); // Use the objects b1.draw(); b2.draw(); // Release the objects back to the pool bitmapPool.release(b1); bitmapPool.release(b2); } } --- title: UML Diagram of Object Pool Design Pattern --- classDiagram ObjectPool --\u003e Bitmap : uses Bitmap --\u003e Point2D : uses Poolable \u003c|-- Image : implements Image \u003c|-- Bitmap : implements Client --\u003e ObjectPool : uses class ObjectPool { +BlockingQueue~T~ availablePool +ObjectPool(Supplier~T~ creator, int count) +T get() +void release(T obj) } class Bitmap { +Point2D location +String name +Bitmap(String name) +void draw() +Point2D getLocation() +void setLocation(Point2D location) +void reset() } class Point2D { +float x +float y +Point2D(float x, float y) +String toString() } class Poolable { +void reset() } class Image { +void draw() +Point2D getLocation() +void setLocation(Point2D location) } class Client { +void main() } 3. Structural Design Patterns Structural Design Pattern focus on optimizing object composition, helping achieve better organization and efficiency.\n3.1 Adapter The Adapter Design Pattern is a structural design pattern that allows two incompatible interfaces to work together, enabling them to communicate despite differences in their method signatures. This pattern is commonly used in situations where legacy code cannot be modified but needs to integrate with a new system that has a different interface.\nSHOW CODE Java // Target Interface interface Customer { String getName(); String getDesignation(); String getAddress(); } // Client code which requires Customer interface. class BusinessCardDesigner { public String designCard(Customer customer) { String card = \"\"; card += customer.getName(); card += \"\\n\" + customer.getDesignation(); card += \"\\n\" + customer.getAddress(); return card; } } // An existing class used in our system - Adaptee class Employee { private String fullName; private String jobTitle; private String officeLocation; public String getFullName() { return fullName; } public void setFullName(String fullName) { this.fullName = fullName; } public String getJobTitle() { return jobTitle; } public void setJobTitle(String jobTitle) { this.jobTitle = jobTitle; } public String getOfficeLocation() { return officeLocation; } public void setOfficeLocation(String officeLocation) { this.officeLocation = officeLocation; } } // An object adapter using composition to translate the interface class EmployeeObjectAdapter implements Customer { private final Employee adaptee; public EmployeeObjectAdapter(Employee adaptee) { this.adaptee = adaptee; } @Override public String getName() { return adaptee.getFullName(); } @Override public String getDesignation() { return adaptee.getJobTitle(); } @Override public String getAddress() { return adaptee.getOfficeLocation(); } } public class Client { public static void main(String[] args) { // Using Object Adapter Employee employee = new Employee(); populateEmployeeData(employee); EmployeeObjectAdapter objectAdapter = new EmployeeObjectAdapter(employee); BusinessCardDesigner designer = new BusinessCardDesigner(); String card = designer.designCard(objectAdapter); System.out.println(card); } private static void populateEmployeeData(Employee employee) { employee.setFullName(\"Signal Yu\"); employee.setJobTitle(\"Software Engineer\"); employee.setOfficeLocation(\"Shenzhen, Guangdong Province\"); } } --- title: UML Diagram of Adapter Design Pattern --- classDiagram class Customer { +String getName() +String getDesignation() +String getAddress() } class BusinessCardDesigner { +String designCard(Customer customer) } class Employee { -String fullName -String jobTitle -String officeLocation +String getFullName() +String getJobTitle() +String getOfficeLocation() +setFullName(String fullName) +setJobTitle(String jobTitle) +setOfficeLocation(String officeLocation) } class EmployeeObjectAdapter { -Employee adaptee +String getName() +String getDesignation() +String getAddress() } Customer \u003c|-- EmployeeObjectAdapter : implements BusinessCardDesigner --\u003e Customer : uses EmployeeObjectAdapter --\u003e Employee : adapts 3.2 Bridge The Bridge Design Pattern is a structural design pattern that separates the abstraction and implementation, enabling them to evolve independently without affecting each other.\nIn the following example, the Queue data structure is decoupled from the implementation of LinkedList. When there is a need to change the way data is stored, this can be done without modifying the Queue class. Additionally, when a new type of list, such as Doubly Linked List, is introduced, it can be done without affecting the behavior of the Queue class.\nSHOW CODE Java // This is the implementor interface. // It defines the basic operations for a LinkedList. interface LinkedList { void addFirst(T element); T removeFirst(); void addLast(T element); T removeLast(); int getSize(); } // A concrete implementor that uses nodes to implement a Singly Linked List. // **NOT thread safe** class SinglyLinkedList implements LinkedList { private int size; private Node head; private Node last; private static class Node { private final Object data; private Node next; private Node(Object data, Node next) { this.data = data; this.next = next; } } @Override public void addFirst(T element) { if (head == null) { last = head = new Node(element, null); } else { head = new Node(element, head); } size++; } @Override public T removeFirst() { if (head == null) { return null; } @SuppressWarnings(\"unchecked\") T temp = (T) head.data; if (head.next != null) { head = head.next; } else { head = null; last = null; } size--; return temp; } @Override public void addLast(T element) { if (last == null) { last = head = new Node(element, null); } else { last.next = new Node(element, null); last = last.next; } size++; } @Override public T removeLast() { if (last == null) { return null; } if (head == last) { @SuppressWarnings(\"unchecked\") T temp = (T) head.data; head = last = null; size--; return temp; } // since we don't have a back pointer Node temp = head; while (temp.next != last) { temp = temp.next; } @SuppressWarnings(\"unchecked\") T result = (T) last.data; last = temp; last.next = null; size--; return result; } @Override public int getSize() { return size; } @Override public String toString() { StringBuilder result = new StringBuilder(\"[\"); Node temp = head; while (temp != null) { result.append(temp.data).append(temp.next == null ? \"\" : \", \"); temp = temp.next; } result.append(\"]\"); return result.toString(); } } // A concrete implementor that uses arrays to implement a LinkedList. // **NOT thread safe** class ArrayLinkedList implements LinkedList { private static final int DEFAULT_SIZE = 2; private Object[] data; private int size; public ArrayLinkedList() { data = new Object[DEFAULT_SIZE]; } @Override public void addFirst(T element) { ensureCapacity(++size); shiftOneRight(); data[0] = element; } @Override public T removeFirst() { if (size == 0) { return null; } @SuppressWarnings(\"unchecked\") T first = (T) data[0]; size--; shiftOneLeft(); return first; } @Override public void addLast(T element) { ensureCapacity(size + 1); data[size++] = element; } @Override @SuppressWarnings(\"unchecked\") public T removeLast() { if (size == 0) { return null; } return (T) data[size--]; } private void ensureCapacity(int newSize) { if (data.length \u003e newSize) { return; } Object[] temp = new Object[data.length + DEFAULT_SIZE]; System.arraycopy(data, 0, temp, 0, data.length); data = temp; } private void shiftOneRight() { System.arraycopy(data, 0, data, 1, size); } private void shiftOneLeft() { System.arraycopy(data, 1, data, 0, size); } public int getSize() { return size; } @Override public String toString() { StringBuilder result = new StringBuilder(\"[\"); for (int i = 0; i \u003c size; i++) { result.append(data[i]).append(i == size - 1 ? \"\" : \", \"); } result.append(\"]\"); return result.toString(); } } // This is the abstraction interface representing a FIFO collection. interface FifoCollection { // Adds an element to the collection void offer(T element); // Removes \u0026 returns the first element from the collection T poll(); } // A refined abstraction that uses LinkedList to implement a Queue. class Queue implements FifoCollection { private final LinkedList list; public Queue(LinkedList list) { this.list = list; } @Override public void offer(T element) { list.addLast(element); } @Override public T poll() { return list.removeFirst(); } @Override public String toString() { return \"Queue{\" + \"list=\" + list.toString() + '}'; } } // Client code to demonstrate the bridge pattern public class Client { public static void main(String[] args) { FifoCollection\u0026lt;Integer\u0026gt; arrayQueue = new Queue\u0026lt;\u0026gt;(new ArrayLinkedList\u0026lt;\u0026gt;()); arrayQueue.offer(1); arrayQueue.offer(2); arrayQueue.offer(3); System.out.print(\"Array List Queue: \"); System.out.println(arrayQueue); FifoCollection\u0026lt;Integer\u0026gt; linkedListQueue = new Queue\u0026lt;\u0026gt;(new SinglyLinkedList\u0026lt;\u0026gt;()); linkedListQueue.offer(11); linkedListQueue.offer(22); linkedListQueue.offer(33); System.out.print(\"Linked List Queue: \"); System.out.println(linkedListQueue); System.out.print(linkedListQueue.poll() + \" \"); System.out.print(linkedListQueue.poll() + \" \"); System.out.print(linkedListQueue.poll() + \"\\n\"); // Should print null as all elements are removed System.out.println(linkedListQueue.poll()); // null } } SHOW OUTPUT Output Array List Queue: Queue{list=[1, 2, 3]} Linked List Queue: Queue{list=[11, 22, 33]} 11 22 33 null --- title: UML Diagram of Adapter Design Pattern --- classDiagram class LinkedList { +addFirst(T element) +removeFirst() +addLast(T element) +removeLast() +getSize() } class SinglyLinkedList { -int size -Node head -Node last +addFirst(T element) +removeFirst() +addLast(T element) +removeLast() +getSize() +toString() } class ArrayLinkedList { -Object[] data -int size +addFirst(T element) +removeFirst() +addLast(T element) +removeLast() +getSize() +toString() } class FifoCollection { +offer(T element) +poll() } class Queue { -LinkedList list +offer(T element) +poll() +toString() } LinkedList \u003c|.. SinglyLinkedList LinkedList \u003c|.. ArrayLinkedList FifoCollection \u003c|.. Queue : implements Queue *--\u003e LinkedList : composites %% Client code class class Client { +main(String[] args) } Client --\u003e FifoCollection : Uses 3.3 Decorator Decorator Design Pattern is a structural design pattern that allows addding new behaviors to an object dynamically, without altering its structure.\nSHOW CODE Java import org.apache.commons.text.StringEscapeUtils; import java.util.Base64; // Base interface or component interface Message { String getContent(); } // Concrete component. Object to be decorated class TextMessage implements Message { private String msg; public TextMessage(String msg) { this.msg = msg; } @Override public String getContent() { return msg; } } // Decorator. Implements component interface class HtmlEncodedMessage implements Message { private Message msg; public HtmlEncodedMessage(Message msg) { this.msg = msg; } @Override public String getContent() { return StringEscapeUtils.escapeHtml4(msg.getContent()); } } // Decorator for Base64 encoding class Base64EncodedMessage implements Message { private Message msg; public Base64EncodedMessage(Message msg) { this.msg = msg; } @Override public String getContent() { // Be wary of charset!! This is platform dependent.. return Base64.getEncoder().encodeToString(msg.getContent().getBytes()); } } // Client to demonstrate the decorators public class Client { public static void main(String[] args) { Message m = new TextMessage(\"The is strong with this one!\"); System.out.println(\"Original: \" + m.getContent()); // Apply HTML encoding Message decorator = new HtmlEncodedMessage(m); System.out.println(\"HTML Encoded: \" + decorator.getContent()); // Apply Base64 encoding decorator = new Base64EncodedMessage(decorator); System.out.println(\"Base64 Encoded: \" + decorator.getContent()); } } --- title: UML Diagram of Decorator Design Pattern --- classDiagram class Message { +String getContent() } class TextMessage { -String msg +TextMessage(String msg) +String getContent() } class HtmlEncodedMessage { -Message msg +HtmlEncodedMessage(Message msg) +String getContent() } class Base64EncodedMessage { -Message msg +Base64EncodedMessage(Message msg) +String getContent() } Message \u003c|-- TextMessage Message \u003c|-- HtmlEncodedMessage Message \u003c|-- Base64EncodedMessage TextMessage --\u003e HtmlEncodedMessage : Wraps HtmlEncodedMessage --\u003e Base64EncodedMessage : Wraps 3.4 Composite The Composite Design Pattern is a structural pattern that enables treating both individual objects and compositions of objects uniformly. It is designed to represent part-whole hierarchies, where individual objects (leaf nodes) and their composites are handled in the same way. This pattern is often used for managing complex hierarchical structures, such as file systems or organization structures.\nSHOW CODE Java import java.util.ArrayList; import java.util.List; // The component base class for composite pattern // Defines operations applicable both leaf \u0026 composite abstract class File { private String name; public File(String name) { this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } public abstract void ls(); public abstract void addFile(File file); public abstract File[] getFiles(); public abstract boolean removeFile(File file); } // Leaf node in composite pattern class BinaryFile extends File { private long size; public BinaryFile(String name, long size) { super(name); this.size = size; } @Override public void ls() { System.out.println(getName() + \"\\t\" + size); } @Override public void addFile(File file) { throw new UnsupportedOperationException(\"Leaf node doesn't support add operation\"); } @Override public File[] getFiles() { throw new UnsupportedOperationException(\"Leaf node doesn't support get operation\"); } @Override public boolean removeFile(File file) { throw new UnsupportedOperationException(\"Leaf node doesn't support remove operation\"); } } // Composite in the composite pattern class Directory extends File { private List\u0026lt;File\u0026gt; children = new ArrayList\u0026lt;\u0026gt;(); public Directory(String name) { super(name); } @Override public void ls() { System.out.println(getName()); children.forEach(File::ls); } @Override public void addFile(File file) { children.add(file); } @Override public File[] getFiles() { return children.toArray(new File[children.size()]); } @Override public boolean removeFile(File file) { return children.remove(file); } } // Client class that creates and displays directory structure public class Client { public static void main(String[] args) { File root1 = createTreeOne(); root1.ls(); System.out.println(\"***********************************\"); File root2 = createTreeTwo(); root2.ls(); } // Client builds tree using leaf and composites private static File createTreeOne() { File file1 = new BinaryFile(\"file1\", 1000); File file2 = new BinaryFile(\"file2\", 2000); Directory dir1 = new Directory(\"dir1\"); dir1.addFile(file1); dir1.addFile(file2); File file3 = new BinaryFile(\"file3\", 3000); Directory dir2 = new Directory(\"dir2\"); dir2.addFile(file3); dir2.addFile(dir1); return dir2; } private static File createTreeTwo() { return new BinaryFile(\"Another file\", 200); } } In the above code, the statements dir2.addFile(file3); and dir2.addFile(dir1); demonstrate how both individual objects (file3) and compositions of objects (file1 and file2) are treated in the same way.\n--- title: UML Diagram of Composite Design Pattern --- classDiagram class File { +String name +getName() +setName(String name) +ls() +addFile(File file) +getFiles() +removeFile(File file) } class BinaryFile { +long size +BinaryFile(String name, long size) +ls() +addFile(File file) +getFiles() +removeFile(File file) } class Directory { +List~File~ children +Directory(String name) +ls() +addFile(File file) +getFiles() +removeFile(File file) } File \u003c|-- BinaryFile File \u003c|-- Directory Directory *--\u003e File : contains 3.5 Facade The Facade Design Pattern is a structural design pattern that provides a simplified interface to a complex subsystem. It is often used when the client needs to interact with only a specific part of a large system, hiding its complexity and making it easier to use.\nSHOW CODE Java package dev.signalyu.facade; // Template class and related classes abstract class Template { public enum TemplateType {Email, NewsLetter} public abstract String format(Object obj); } class TemplateFactory { public static Template createTemplateFor(Template.TemplateType type) { switch (type) { case Email: return new OrderEmailTemplate(); default: throw new IllegalArgumentException(\"Unknown TemplateType\"); } } } class OrderEmailTemplate extends Template { @Override public String format(Object obj) { return \"TEMPLATE\"; } } // Stationary class and related classes interface Stationary { String getHeader(); String getFooter(); } class StationaryFactory { public static Stationary createStationary() { return new HalloweenStationary(); } } class HalloweenStationary implements Stationary { @Override public String getHeader() { return \"It's Halloween!!\"; } @Override public String getFooter() { return \"BUY MORE STUFF! It's Halloween, c'mon!!\"; } } // Email class and related classes class EmailBuilder { public EmailBuilder withTemplate(Template template) { return this; } public EmailBuilder withStationary(Stationary stationary) { return this; } public EmailBuilder forObject(Object object) { return this; } public Email build() { return new Email(); } public Email getEmail() { return new Email(); } } class Email { public static EmailBuilder getBuilder() { return new EmailBuilder(); } } // Mailer class class Mailer { private static final Mailer MAILER = new Mailer(); public static Mailer getMailer() { return MAILER; } private Mailer() { } public boolean send(Email email) { return true; } } // Order class for reference (assuming Order exists as a placeholder) class Order { private String id; private double total; public Order(String id, double total) { this.id = id; this.total = total; } public String getId() { return id; } public void setId(String id) { this.id = id; } public double getTotal() { return total; } public void setTotal(double total) { this.total = total; } } // Facade provides simple methods for the client to use class EmailFacade { public boolean sendOrderEmail(Order order) { Template template = TemplateFactory.createTemplateFor(Template.TemplateType.Email); Stationary stationary = StationaryFactory.createStationary(); Email email = Email.getBuilder() .withTemplate(template) .withStationary(stationary) .forObject(order) .build(); Mailer mailer = Mailer.getMailer(); return mailer.send(email); } } public class Client { public static void main(String[] args) { Order order = new Order(\"101\", 99.99); EmailFacade facade = new EmailFacade(); boolean result = facade.sendOrderEmail(order); System.out.println(\"Order Email \" + (result ? \"sent!\" : \"NOT sent...\")); } } --- title: UML Diagram of Facade Design Pattern --- classDiagram class EmailFacade { +sendOrderEmail(order: Order) bool } class Template { +format(obj: Object) String } class TemplateFactory { +createTemplateFor(type: TemplateType) Template } class OrderEmailTemplate { +format(obj: Object) String } class Stationary { +getHeader() String +getFooter() String } class StationaryFactory { +createStationary() Stationary } class HalloweenStationary { +getHeader() String +getFooter() String } class EmailBuilder { +withTemplate(template: Template) EmailBuilder +withStationary(stationary: Stationary) EmailBuilder +forObject(object: Object) EmailBuilder +build() Email } class Email { +getBuilder() EmailBuilder } class Mailer { +getMailer() Mailer +send(email: Email) bool } EmailFacade --\u003e TemplateFactory : uses EmailFacade --\u003e StationaryFactory : uses EmailFacade --\u003e Mailer : uses TemplateFactory --\u003e OrderEmailTemplate : creates StationaryFactory --\u003e HalloweenStationary : creates Email --\u003e EmailBuilder : has EmailBuilder --\u003e Template : uses EmailBuilder --\u003e Stationary : uses Mailer --\u003e Email : uses EmailBuilder --\u003e Email : creates OrderEmailTemplate --\u003e Template : inherits HalloweenStationary --\u003e Stationary : implements 3.6 Flyweight The Flyweight Design Pattern is a structural design pattern used to optimize memory usuage by sharing common data across multiple objects. In this pattern, an object is divided into two categories: intrinsic state and extrinsic state.\nIntrinsic state refers to the data that is shared and remains consistent across different instances. It is usually stored within the Flyweight object. Extrinsic state, on the other hand, refers to data that can vary between instances. This state is typically managed and provided by the client or the object using the Flyweight. SHOW CODE Java import java.time.Duration; import java.util.HashMap; import java.util.Map; // Interface implemented by Flyweights interface ErrorMessage { // Get error message String getText(String code); } // A concrete Flyweight. Instance is shared class SystemErrorMessage implements ErrorMessage { // some error message $errorCode private String messageTemplate; // http://somedomain.com/help?error= private String helpUrlBase; public SystemErrorMessage(String messageTemplate, String helpUrlBase) { this.messageTemplate = messageTemplate; this.helpUrlBase = helpUrlBase; } @Override public String getText(String code) { return messageTemplate.replace(\"$errorCode\", code) + helpUrlBase + code; } } // Unshared concrete flyweight. class UserBannedErrorMessage implements ErrorMessage { // All state is defined here private String caseId; private String remarks; private Duration banDuration; private String msg; public UserBannedErrorMessage(String caseId) { // Load case info from DB. this.caseId = caseId; remarks = \"You violated terms of use.\"; banDuration = Duration.ofDays(2); msg = \"You are BANNED. Sorry. \\nMore information:\\n\"; msg += caseId + \"\\n\"; msg += remarks + \"\\n\"; msg += \"Banned For:\" + banDuration.toHours() + \" Hours\"; } // We ignore the extrinsic state argument @Override public String getText(String code) { return msg; } public String getCaseNo() { return caseId; } } // Flyweight factory. Returns shared flyweight based on key class ErrorMessageFactory { // This serves as key for getting flyweight instance public enum ErrorType { GenericSystemError, PageNotFoundError, ServerError } private static final ErrorMessageFactory FACTORY = new ErrorMessageFactory(); public static ErrorMessageFactory getInstance() { return FACTORY; } private Map\u0026lt;ErrorType, SystemErrorMessage\u0026gt; errorMessages = new HashMap\u0026lt;\u0026gt;(); private ErrorMessageFactory() { errorMessages.put(ErrorType.GenericSystemError, new SystemErrorMessage(\"A genetic error of type $errorCode occurred. Please refer to:\\n\", \"https://google.com/q=\")); errorMessages.put(ErrorType.PageNotFoundError, new SystemErrorMessage(\"Page not found. An error of type $errorCode occurred. Please refer to:\\n\", \"https://google.com/q=\")); } public SystemErrorMessage getError(ErrorType type) { return errorMessages.get(type); } public UserBannedErrorMessage getUserBannedMessage(String caseId) { return new UserBannedErrorMessage(caseId); } } // Client public class Client { public static void main(String[] args) { // Accessing shared flyweight objects SystemErrorMessage msg1 = ErrorMessageFactory.getInstance().getError(ErrorMessageFactory.ErrorType.GenericSystemError); System.out.println(msg1.getText(\"4056\")); // Accessing unshared flyweight objects UserBannedErrorMessage msg2 = ErrorMessageFactory.getInstance().getUserBannedMessage(\"1202\"); System.out.println(msg2.getText(null)); } } SHOW OUTPUT Output A genetic error of type 4056 occurred. Please refer to: https://google.com/q=4056 You are BANNED. Sorry. More information: 1202 You violated terms of use. Banned For:48 Hours --- title: UML Diagram of Flyweight Design Pattern --- classDiagram class ErrorMessage { +getText(code: String): String } class SystemErrorMessage { -messageTemplate: String -helpUrlBase: String +getText(code: String): String } class UserBannedErrorMessage { -caseId: String -remarks: String -banDuration: Duration -msg: String +getText(code: String): String +getCaseNo(): String } class ErrorMessageFactory { -errorMessages: Map~ErrorType, SystemErrorMessage~ +getInstance(): ErrorMessageFactory +getError(type: ErrorType): SystemErrorMessage +getUserBannedMessage(caseId: String): UserBannedErrorMessage } class Client { +main(args: String[]): void } ErrorMessage \u003c|-- SystemErrorMessage ErrorMessage \u003c|-- UserBannedErrorMessage ErrorMessageFactory *--\u003e SystemErrorMessage ErrorMessageFactory *--\u003e UserBannedErrorMessage Client --\u003e ErrorMessageFactory 3.7 Proxy The Proxy Design Pattern is a structural design pattern that involves using a proxy object to represent another object. The proxy controls access to the real object and can add additional functionality, such aas lazy initialization, logging, or monitoring. This pattern can be primarily categorized into two types: Static Proxy and Dynamic Proxy.\nThe Static Proxy is created at compile time, where a separate proxy class is written to manage method calls to the real object. In contrast, the Dynamic Proxy is created at runtime, often using reflection techniques in languages like Java. A dynamic proxy delegates method calls to the real object without the need for manually creating a proxy class.\nSHOW CODE: Static Proxy Java // Point2D class to represent the location of the image class Point2D { private final float x; private final float y; public Point2D(float x, float y) { this.x = x; this.y = y; } @Override public String toString() { return \"Point2D [x=\" + x + \", y=\" + y + \"]\"; } } // Interface implemented by proxy and concrete objects interface Image { void setLocation(Point2D point2d); Point2D getLocation(); void render(); } // Concrete class providing actual functionality class BitmapImage implements Image { private Point2D location; private final String name; public BitmapImage(String filename) { // Loads image from file on disk System.out.println(\"Loaded from disk: \" + filename); name = filename; } @Override public void setLocation(Point2D point2d) { location = point2d; } @Override public Point2D getLocation() { return location; } @Override public void render() { // Renders to screen System.out.println(\"Rendered \" + this.name); } } // Proxy class class ImageProxy implements Image { private final String name; private BitmapImage image; private Point2D location; public ImageProxy(String name) { this.name = name; } @Override public void setLocation(Point2D point2d) { if (image != null) { image.setLocation(point2d); } else { location = point2d; } } @Override public Point2D getLocation() { if (image != null) { return image.getLocation(); } return location; } @Override public void render() { if (image == null) { image = new BitmapImage(name); if (location != null) { image.setLocation(location); } } image.render(); } } // Factory to get image objects class ImageFactory { // We'll provide proxy to caller instead of real object public static Image getImage(String name) { return new ImageProxy(name); } } // Client class to test the proxy pattern public class Client { public static void main(String[] args) { Image img = ImageFactory.getImage(\"A1.bmp\"); img.setLocation(new Point2D(10, 10)); System.out.println(\"Image location: \" + img.getLocation()); System.out.println(\"Rendering image now...\"); img.render(); } } SHOW OUTPUT Output Image location: Point2D [x=10.0, y=10.0] Rendering image now... Loaded from disk: A1.bmp Rendered A1.bmp --- title: UML Diagram of Static Proxy Design Pattern --- classDiagram class Image { + setLocation(Point2D point2d) + Point2D getLocation() + render() } class BitmapImage { - Point2D location - String name + BitmapImage(String filename) + setLocation(Point2D point2d) + getLocation(): Point2D + render() } class ImageProxy { - String name - BitmapImage image - Point2D location + ImageProxy(String name) + setLocation(Point2D point2d) + getLocation(): Point2D + render() } class ImageFactory { + getImage(String name): Image } class Client { + main(String[] args) } Image \u003c|.. BitmapImage : implements Image \u003c|.. ImageProxy : implements ImageFactory --|\u003e ImageProxy : creates Client --\u003e ImageFactory : uses ImageProxy \"1\" --\u003e \"0..1\" BitmapImage : contains SHOW CODE: Dynamic Proxy Java import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; // Point2D class to represent the location of the image class Point2D { private final float x; private final float y; public Point2D(float x, float y) { this.x = x; this.y = y; } @Override public String toString() { return \"Point2D [x=\" + x + \", y=\" + y + \"]\"; } } // Interface implemented by proxy and concrete objects interface Image { void setLocation(Point2D point2d); Point2D getLocation(); void render(); } // Concrete class providing actual functionality (BitmapImage) class BitmapImage implements Image { private Point2D location; private final String name; public BitmapImage(String filename) { // Loads image from file on disk System.out.println(\"Loaded from disk: \" + filename); name = filename; } @Override public void setLocation(Point2D point2d) { location = point2d; } @Override public Point2D getLocation() { return location; } @Override public void render() { // Renders to screen System.out.println(\"Rendered \" + this.name); } } // InvocationHandler to implement proxy behavior class ImageInvocationHandler implements InvocationHandler { private final String filename; private Point2D location; private BitmapImage image; private static final Method setLocationMethod; private static final Method getLocationMethod; private static final Method renderMethod; static { try { setLocationMethod = Image.class.getMethod(\"setLocation\", Point2D.class); getLocationMethod = Image.class.getMethod(\"getLocation\"); renderMethod = Image.class.getMethod(\"render\"); } catch (NoSuchMethodException e) { throw new NoSuchMethodError(e.getMessage()); } } public ImageInvocationHandler(String filename) { this.filename = filename; } @Override public Object invoke(Object proxy, Method method, Object[] args) { System.out.println(\"Invoking method: \" + method.getName()); if (method.equals(setLocationMethod)) { return handleSetLocation(args); } else if (method.equals(getLocationMethod)) { return handleGetLocation(); } else if (method.equals(renderMethod)) { return handleRender(); } return null; } private Object handleRender() { if (image == null) { image = new BitmapImage(filename); if (location != null) { image.setLocation(location); } } image.render(); return null; } private Point2D handleGetLocation() { if (image != null) { return image.getLocation(); } else { return this.location; } } private Object handleSetLocation(Object[] args) { if (image != null) { image.setLocation((Point2D) args[0]); } else { this.location = (Point2D) args[0]; } return null; } } // Factory to provide the proxy object class ImageFactory { public static Image getImage(String name) { return (Image) Proxy.newProxyInstance( ImageFactory.class.getClassLoader(), new Class[]{Image.class}, new ImageInvocationHandler(name) ); } } // Client class to test the proxy pattern public class Client { public static void main(String[] args) { Image img = ImageFactory.getImage(\"A.bmp\"); img.setLocation(new Point2D(-10, 0)); System.out.println(img.getLocation()); System.out.println(\"*****************************\"); img.render(); } } SHOW OUTPUT Output Invoking method: setLocation Invoking method: getLocation Point2D [x=-10.0, y=0.0] ***************************** Invoking method: render Loaded from disk: A.bmp Rendered A.bmp --- title: UML Diagram of Dynamic Proxy Design Pattern --- classDiagram class Image { +setLocation(Point2D point2d) +getLocation(): Point2D +render() } class BitmapImage { -Point2D location -String name +BitmapImage(String filename) +setLocation(Point2D point2d) +getLocation(): Point2D +render() } class ImageInvocationHandler { -String filename -Point2D location -BitmapImage image +ImageInvocationHandler(String filename) +invoke(Object proxy, Method method, Object[] args) -handleRender() -handleGetLocation(): Point2D -handleSetLocation(Object[] args) } class ImageFactory { +getImage(String name): Image } class Client { +main(String[] args) } Image \u003c|.. BitmapImage : implements Image \u003c|.. ImageInvocationHandler : delegates ImageFactory ..\u003e ImageInvocationHandler : creates Client ..\u003e ImageFactory : uses ImageInvocationHandler \"1\" -- \"1\" BitmapImage : image 4. Behavioral Design Patterns Behavioral Design Patterns focus on the communication and interaction between objects or components in a system.\n4.1 Chain of Responsibility The Chain of Responsibility Design Pattern is a behavioral design pattern that allows a request to be passed along a chain of handlers, where each handler either processes the request or passes it along to the next handler in the chain. The request will continue through the chain until it is handled by an appropriate handler or the end of the chain is reached.\nSHOW CODE Java import java.time.LocalDate; import java.time.Period; // Represents a request in our chain of responsibility class LeaveApplication { public enum Type {Sick, PTO, LOP} public enum Status {Pending, Approved, Rejected} private final Type type; private final LocalDate from; private final LocalDate to; private String processedBy; private Status status; public LeaveApplication(Type type, LocalDate from, LocalDate to) { this.type = type; this.from = from; this.to = to; this.status = Status.Pending; } public Type getType() { return type; } public LocalDate getFrom() { return from; } public LocalDate getTo() { return to; } public int getNoOfDays() { return Period.between(from, to).getDays(); } public String getProcessedBy() { return processedBy; } public Status getStatus() { return status; } public void approve(String approvalName) { this.status = Status.Approved; this.processedBy = approvalName; } public void reject(String approvalName) { this.status = Status.Rejected; this.processedBy = approvalName; } public static Builder getBuilder() { return new Builder(); } @Override public String toString() { return type + \" leave for \" + getNoOfDays() + \" day(s) \" + status + \" by \" + processedBy; } // Builder pattern for LeaveApplication public static class Builder { private Type type; private LocalDate from; private LocalDate to; private LeaveApplication application; private Builder() { } public Builder withType(Type type) { this.type = type; return this; } public Builder from(LocalDate from) { this.from = from; return this; } public Builder to(LocalDate to) { this.to = to; return this; } public LeaveApplication build() { this.application = new LeaveApplication(type, from, to); return this.application; } public LeaveApplication getApplication() { return application; } } } // This represents a handler in chain of responsibility interface LeaveApproval { void processLeaveApplication(LeaveApplication application); String getApprovalRole(); } // Abstract handler abstract class Employee implements LeaveApproval { private final String role; private final LeaveApproval successor; public Employee(String role, LeaveApproval successor) { this.role = role; this.successor = successor; } @Override public void processLeaveApplication(LeaveApplication application) { if (!processRequest(application) \u0026\u0026 successor != null) { successor.processLeaveApplication(application); } } protected abstract boolean processRequest(LeaveApplication application); @Override public String getApprovalRole() { return role; } } // A concrete handler: Manager class Manager extends Employee { public Manager(LeaveApproval nextApproval) { super(\"Manager\", nextApproval); } @Override protected boolean processRequest(LeaveApplication application) { switch (application.getType()) { case Sick: application.approve(getApprovalRole()); return true; case PTO: if (application.getNoOfDays() \u003c= 5) { application.approve(getApprovalRole()); return true; } } return false; } } // A concrete handler: ProjectLead class ProjectLead extends Employee { public ProjectLead(LeaveApproval successor) { super(\"Project Lead\", successor); } @Override protected boolean processRequest(LeaveApplication application) { if (application.getType() == LeaveApplication.Type.Sick) { if (application.getNoOfDays() \u003c= 2) { application.approve(getApprovalRole()); return true; } } return false; } } // A concrete handler: Director class Director extends Employee { public Director(LeaveApproval nextApproval) { super(\"Director\", nextApproval); } @Override protected boolean processRequest(LeaveApplication application) { if (application.getType() == LeaveApplication.Type.PTO) { application.approve(getApprovalRole()); return true; } return false; } } // Client class to test the Chain of Responsibility public class Client { public static void main(String[] args) { LeaveApplication application = LeaveApplication.getBuilder() .withType(LeaveApplication.Type.PTO) .from(LocalDate.now()) .to(LocalDate.of(2025, 1, 8)) .build(); System.out.println(application); System.out.println(\"**************************************************\"); LeaveApproval approval = createChain(); approval.processLeaveApplication(application); System.out.println(application); } private static LeaveApproval createChain() { Director director = new Director(null); Manager manager = new Manager(director); ProjectLead lead = new ProjectLead(manager); return lead; } } SHOW OUTPUT Output PTO leave for 8 day(s) Pending by null ************************************************** PTO leave for 8 day(s) Approved by Director --- title: UML Diagram of Chain of Responsibility Design Pattern --- classDiagram class LeaveApproval { +void processLeaveApplication(LeaveApplication) +String getApprovalRole() } class Employee { +String role +LeaveApproval successor +Employee(String, LeaveApproval) +void processLeaveApplication(LeaveApplication) +String getApprovalRole() +protected abstract boolean processRequest(LeaveApplication) } class Manager { +Manager(LeaveApproval) +boolean processRequest(LeaveApplication) } class ProjectLead { +ProjectLead(LeaveApproval) +boolean processRequest(LeaveApplication) } class Director { +Director(LeaveApproval) +boolean processRequest(LeaveApplication) } LeaveApproval \u003c|-- Employee : implements Employee \u003c|-- Manager : extends Employee \u003c|-- ProjectLead : extends Employee \u003c|-- Director : extends Employee *--|\u003e LeaveApproval 4.2 Command The Command Design Pattern is a behavioral design pattern that turns a request into a stand-alone object, allowing the decoupling of the sender of the request from the object that processes the request.\nSHOW CODE Java import java.util.LinkedList; import java.util.List; // Command interface implemented by all concrete command classes interface Command { void execute(); } // Concrete implementation of Command class AddMemberCommand implements Command { private String emailAddress; private String listName; private EWSService receiver; public AddMemberCommand(String email, String listName, EWSService service) { this.emailAddress = email; this.listName = listName; this.receiver = service; } @Override public void execute() { receiver.addMember(emailAddress, listName); } } // Receiver class that performs the actual action class EWSService { // Add a new member to mailing list public void addMember(String contact, String contactGroup) { System.out.println(\"Added \" + contact + \" to \" + contactGroup); } // Remove member from mailing list public void removeMember(String contact, String contactGroup) { System.out.println(\"Removed \" + contact + \" from \" + contactGroup); } } // Invoker class that executes commands on a separate thread class MailTasksRunner implements Runnable { private Thread runner; private List\u0026lt;Command\u0026gt; pendingCommands; private volatile boolean stop; private static final MailTasksRunner RUNNER = new MailTasksRunner(); public static final MailTasksRunner getInstance() { return RUNNER; } private MailTasksRunner() { pendingCommands = new LinkedList\u0026lt;\u0026gt;(); runner = new Thread(this); runner.start(); } // Run method that takes pending commands and executes them @Override public void run() { while (true) { Command cmd = null; synchronized (pendingCommands) { if (pendingCommands.isEmpty()) { try { pendingCommands.wait(); } catch (InterruptedException e) { System.out.println(\"Runner interrupted\"); if (stop) { System.out.println(\"Runner stopping\"); return; } } } cmd = pendingCommands.isEmpty() ? null : pendingCommands.remove(0); } if (cmd == null) { return; } cmd.execute(); } } // Adds a command to the pending commands list for later execution public void addCommand(Command cmd) { synchronized (pendingCommands) { pendingCommands.add(cmd); pendingCommands.notifyAll(); } } // Stops the runner thread public void shutdown() { this.stop = true; this.runner.interrupt(); } } // Client class that demonstrates how the Command pattern works public class Client { public static void main(String[] args) throws InterruptedException { EWSService service = new EWSService(); // Create commands and add them to the runner for execution Command c1 = new AddMemberCommand(\"a@a.com\", \"spam\", service); MailTasksRunner.getInstance().addCommand(c1); Command c2 = new AddMemberCommand(\"b@b\", \"spam\", service); MailTasksRunner.getInstance().addCommand(c2); // Wait for a while to let commands execute Thread.sleep(3000); // Shutdown the runner MailTasksRunner.getInstance().shutdown(); } } --- title: UML Diagram of Command Design Pattern --- classDiagram class Command { +execute() } class AddMemberCommand { -String emailAddress -String listName -EWSService receiver +AddMemberCommand(email: String, listName: String, service: EWSService) +execute() } class EWSService { +addMember(contact: String, contactGroup: String) +removeMember(contact: String, contactGroup: String) } class MailTasksRunner { -Thread runner -List~Command~ pendingCommands -volatile boolean stop -static final MailTasksRunner RUNNER +getInstance(): MailTasksRunner +addCommand(cmd: Command) +shutdown() +run() } class Client { +main(args: String[]) } Command \u003c|-- AddMemberCommand AddMemberCommand --\u003e EWSService : uses MailTasksRunner --\u003e Command : invokes Client --\u003e MailTasksRunner : uses 4.3 Interpreter The Interpreter Design Pattern is a behavioral design pattern used to define a grammatical representation for a language and provide an interpreter to evaluate sentences in that language. It is commonly used to interpret expressions in a simple language or grammar.\nSHOW CODE Java import java.util.ArrayList; import java.util.List; import java.util.Stack; import java.util.StringTokenizer; import java.util.stream.Stream; // User class class User { private List\u0026lt;String\u0026gt; permissions; private String username; public User(String username, String... permissions) { this.username = username; this.permissions = new ArrayList\u0026lt;\u0026gt;(); Stream.of(permissions).forEach(e -\u003e this.permissions.add(e.toLowerCase())); } public List\u0026lt;String\u0026gt; getPermissions() { return permissions; } public String getUsername() { return username; } } // Abstract expression interface PermissionExpression { boolean interpret(User user); } // Terminal expression class Permission implements PermissionExpression { private String permission; public Permission(String permission) { this.permission = permission.toLowerCase(); } @Override public boolean interpret(User user) { return user.getPermissions().contains(permission); } @Override public String toString() { return permission; } } // Non-terminal expression class AndExpression implements PermissionExpression { private PermissionExpression expression1; private PermissionExpression expression2; public AndExpression(PermissionExpression expression1, PermissionExpression expression2) { this.expression1 = expression1; this.expression2 = expression2; } @Override public boolean interpret(User user) { return expression1.interpret(user) \u0026\u0026 expression2.interpret(user); } @Override public String toString() { return expression1 + \" AND \" + expression2; } } // Non-terminal expression class OrExpression implements PermissionExpression { private PermissionExpression expression1; private PermissionExpression expression2; public OrExpression(PermissionExpression one, PermissionExpression two) { this.expression1 = one; this.expression2 = two; } @Override public boolean interpret(User user) { return expression1.interpret(user) || expression2.interpret(user); } @Override public String toString() { return expression1 + \" OR \" + expression2; } } // Non-terminal expression class NotExpression implements PermissionExpression { private PermissionExpression expression; public NotExpression(PermissionExpression expression) { this.expression = expression; } @Override public boolean interpret(User user) { return !expression.interpret(user); } @Override public String toString() { return \"NOT \" + expression; } } // Report class class Report { private String name; private String permission; public Report(String name, String permissions) { this.name = name; this.permission = permissions; } public String getName() { return name; } public String getPermission() { return permission; } } // Parses \u0026 builds abstract syntax tree class ExpressionBuilder { private Stack\u0026lt;PermissionExpression\u0026gt; permissions = new Stack\u0026lt;\u0026gt;(); private Stack\u0026lt;String\u0026gt; operators = new Stack\u0026lt;\u0026gt;(); public PermissionExpression build(Report report) { parse(report.getPermission()); buildExpressions(); if (permissions.size() \u003e 1 || !operators.isEmpty()) { System.out.println(\"ERROR!\"); } return permissions.pop(); } private void parse(String permission) { StringTokenizer tokenizer = new StringTokenizer(permission.toLowerCase()); while (tokenizer.hasMoreTokens()) { String token = tokenizer.nextToken(); switch (token) { case \"and\": operators.push(\"and\"); break; case \"not\": operators.push(\"not\"); break; case \"or\": operators.push(\"or\"); break; default: permissions.push(new Permission(token)); break; } } } private void buildExpressions() { while (!operators.isEmpty()) { String operator = operators.pop(); PermissionExpression perm1; PermissionExpression perm2; PermissionExpression exp; switch (operator) { case \"not\": perm1 = permissions.pop(); exp = new NotExpression(perm1); break; case \"and\": perm1 = permissions.pop(); perm2 = permissions.pop(); exp = new AndExpression(perm1, perm2); break; case \"or\": perm1 = permissions.pop(); perm2 = permissions.pop(); exp = new OrExpression(perm1, perm2); break; default: throw new IllegalArgumentException(\"Unknown operator:\" + operator); } permissions.push(exp); } } } // Client class public class Client { public static void main(String[] args) { Report report1 = new Report(\"Cash flow report\", \"FINANCE_ADMIN OR ADMIN\"); ExpressionBuilder builder = new ExpressionBuilder(); PermissionExpression exp = builder.build(report1); System.out.println(exp); User user1 = new User(\"Dave\", \"USER\"); System.out.println(\"User access report: \" + exp.interpret(user1)); } } --- title: UML Diagram of Interpreter Design Pattern --- classDiagram class PermissionExpression { + interpret(User user): boolean } class Permission { - String permission + Permission(String permission) + interpret(User user): boolean + toString(): String } class AndExpression { - PermissionExpression expression1 - PermissionExpression expression2 + AndExpression(PermissionExpression expression1, PermissionExpression expression2) + interpret(User user): boolean + toString(): String } class OrExpression { - PermissionExpression expression1 - PermissionExpression expression2 + OrExpression(PermissionExpression expression1, PermissionExpression expression2) + interpret(User user): boolean + toString(): String } class NotExpression { - PermissionExpression expression + NotExpression(PermissionExpression expression) + interpret(User user): boolean + toString(): String } class ExpressionBuilder { - Stack~PermissionExpression~ permissions - Stack~String~ operators + build(Report report): PermissionExpression - parse(String permission) - buildExpressions() } class Client { + main(String[] args) } Permission --|\u003e PermissionExpression AndExpression --|\u003e PermissionExpression OrExpression --|\u003e PermissionExpression NotExpression --|\u003e PermissionExpression ExpressionBuilder --\u003e PermissionExpression Client --\u003e ExpressionBuilder 4.4 Mediator 4.5 Iterator 4.6 Momento 4.7 Observer 4.8 State 4.9 Strategy The Strategry Design Pattern is a behavioral design pattern that encapsulates a set of algorithms and allows a client to dynamically choose one at runtime based on the context. This pattern separates the algorithm from the existing code, enabling the addition of new algorithms without modifying the existing code.\nSHOW CODE Java import java.time.LocalDate; import java.util.Collection; import java.util.HashMap; import java.util.Iterator; import java.util.LinkedList; import java.util.Map; // Order class class Order { private final String id; private final LocalDate date; private final Map\u0026lt;String, Double\u0026gt; items = new HashMap\u0026lt;\u0026gt;(); private double total; public Order(String id) { this.id = id; this.date = LocalDate.now(); } public String getId() { return id; } public LocalDate getDate() { return date; } public Map\u0026lt;String, Double\u0026gt; getItems() { return items; } public void addItem(String name, double price) { items.put(name, price); total += price; } public double getTotal() { return total; } public void setTotal(double total) { this.total = total; } } // Strategy Interface interface OrderPrinter { void print(Collection\u0026lt;Order\u0026gt; orders); } // Concrete Strategy 1: Summary Printer class SummaryPrinter implements OrderPrinter { @Override public void print(Collection\u0026lt;Order\u0026gt; orders) { System.out.println(\"*************** Summary Report *************\"); Iterator\u0026lt;Order\u0026gt; iterator = orders.iterator(); double total = 0; for (int i = 1; iterator.hasNext(); i++) { Order order = iterator.next(); System.out.println(i + \". \" + order.getId() + \"\\t\" + order.getDate() + \"\\t\" + order.getItems().size() + \"\\t\" + order.getTotal()); total += order.getTotal(); } System.out.println(\"*******************************************\"); System.out.println(\"\\t\\t\\t\\t Total \" + total); } } // Concrete Strategy 2: Detail Printer class DetailPrinter implements OrderPrinter { @Override public void print(Collection\u0026lt;Order\u0026gt; orders) { System.out.println(\"************* Detail Report ***********\"); Iterator\u0026lt;Order\u0026gt; iter = orders.iterator(); double total = 0; for (int i = 1; iter.hasNext(); i++) { double orderTotal = 0; Order order = iter.next(); System.out.println(i + \". \" + order.getId() + \"\\t\" + order.getDate()); for (Map.Entry\u0026lt;String, Double\u0026gt; entry : order.getItems().entrySet()) { System.out.println(\"\\t\\t\" + entry.getKey() + \"\\t\" + entry.getValue()); orderTotal += entry.getValue(); } System.out.println(\"----------------------------------------\"); System.out.println(\"\\t\\t Total \" + orderTotal); System.out.println(\"----------------------------------------\"); total += orderTotal; } System.out.println(\"----------------------------------------\"); System.out.println(\"\\tGrand Total \" + total); } } // PrintService class for context class PrintService { private final OrderPrinter printer; public PrintService(OrderPrinter printer) { this.printer = printer; } public void printOrders(Collection\u0026lt;Order\u0026gt; orders) { printer.print(orders); } } // Client class to simulate the creation of orders and print them public class Main { private static final LinkedList\u0026lt;Order\u0026gt; orders = new LinkedList\u0026lt;\u0026gt;(); public static void main(String[] args) { createOrders(); // Print all orders using DetailPrinter strategy PrintService service1 = new PrintService(new DetailPrinter()); service1.printOrders(orders); System.out.println(\"\\n\"); // Print all orders using DetailPrinter strategy PrintService service2 = new PrintService(new SummaryPrinter()); service2.printOrders(orders); } private static void createOrders() { Order o = new Order(\"100\"); o.addItem(\"Soda\", 2); o.addItem(\"Chips\", 10); orders.add(o); o = new Order(\"200\"); o.addItem(\"Cake\", 20); o.addItem(\"Cookies\", 5); orders.add(o); o = new Order(\"300\"); o.addItem(\"Burger\", 8); o.addItem(\"Fries\", 5); orders.add(o); } } SHOW OUTPUT Output ************* Detail Report *********** 1. 100\t2024-12-07 Chips\t10.0 Soda\t2.0 ---------------------------------------- Total 12.0 ---------------------------------------- 2. 200\t2024-12-07 Cookies\t5.0 Cake\t20.0 ---------------------------------------- Total 25.0 ---------------------------------------- 3. 300\t2024-12-07 Burger\t8.0 Fries\t5.0 ---------------------------------------- Total 13.0 ---------------------------------------- ---------------------------------------- Grand Total 50.0 *************** Summary Report ************* 1. 100\t2024-12-07\t2\t12.0 2. 200\t2024-12-07\t2\t25.0 3. 300\t2024-12-07\t2\t13.0 ******************************************* Total 50.0 --- title: UML Diagram of Strategy Design Pattern --- classDiagram class Order { +String id +LocalDate date +Map~String, Double~ items +double total +Order(String id) +String getId() +LocalDate getDate() +Map~String, Double~ getItems() +void addItem(String name, double price) +double getTotal() +void setTotal(double total) } class OrderPrinter { +void print(Collection~Order~ orders) } class SummaryPrinter { +void print(Collection~Order~ orders) } class DetailPrinter { +void print(Collection~Order~ orders) } class PrintService { +OrderPrinter printer +PrintService(OrderPrinter printer) +void printOrders(Collection~Order~ orders) } OrderPrinter \u003c|-- SummaryPrinter OrderPrinter \u003c|-- DetailPrinter PrintService *--\u003e OrderPrinter PrintService --\u003e Order 4.10 Template Method 4.11 Visitor 4.12 Null Object ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/design-patterns/1-design-patterns/","summary":"1. Solid Principle 1.1 Single Responsibility Principle A class should have only one reason to change, meaning each class should focus on a single functionality or responsibility.\nSHOW CODE Single Responsibility Principle import java.io.IOException; import java.util.*; import java.util.regex.*; import com.fasterxml.jackson.databind.ObjectMapper; /** * 1. User class is only used to represent entity. * 2. UserValidator class is solely responsible for validating user objects. * 3. Store class is only used to manage user objects storage.","title":"Design Patterns"},{"content":"Simple Two Pointers The Simple Two Pointers technique is commonly used to solve problems involving sorted array, where a set of elements needs to be found that satisfy certain constrains. This approach is efficient in scenarios such as finding a pair that sums to a target or reversing an array or string. In the two simple two pointers technique, two pointers \u0026ndash; typically labeled \u0026ldquo;left\u0026rdquo; and \u0026ldquo;right\u0026rdquo; \u0026ndash; are initialized and move in a specific direction based on the problem\u0026rsquo;s requirements.\nTwo Sum II - Input Array Is Sorted SHOW PROBLEM Problem Statement\nGiven a 1-indexed array of integers, numbers, sorted in non-decreasing order, find two numbers that add up to a specific target. Let these two numbers be numbers[index1] and numbers[index2], where 1 \u0026lt;= index1 \u0026lt; index2 \u0026lt;= numbers.length.\nReturn the indices of the two numbers, index1 and index2, incremented by one, as an integer array [index1, index2] of length 2.\nThe problem guarantees that there is exactly one solution. You may not use the same element twice. Your solution must use only constant extra space. Example 1:\nInput: numbers = [2,7,11,15], target = 9 Output: [1, 2] Explanation: The sum of 2 and 7 is 9, so index1 = 1, index2 = 2. We return [1, 2]. Example 2:\nInput: numbers = [2,3,4], target = 6 Output: [1, 3] Explanation: The sum of 2 and 4 is 6, so index1 = 1, index2 = 3. We return [1, 3]. Example 3:\nInput: numbers = [-1,0], target = -1 Output: [1, 2] Explanation: The sum of -1 and 0 is -1, so index1 = 1, index2 = 2. We return [1, 2]. Constraints:\n2 \u0026lt;= numbers.length \u0026lt;= 30,000 -1000 \u0026lt;= numbers[i] \u0026lt;= 1000 numbers is sorted in non-decreasing order. -1000 \u0026lt;= target \u0026lt;= 1000 There is exactly one solution for each test case. Go to Leetcode 🔗 SHOW CODE Java class Solution { public int[] twoSum(int[] numbers, int target) { int left = 0, right = numbers.length - 1; // Iterate while left pointer is before right pointer while (left \u003c right) { int currentSum = numbers[left] + numbers[right]; // Check if the current sum matches the target if (currentSum == target) { break; } // Adjust the pointers to move towards the target sum if (currentSum \u003c target) { left++; // Increase sum by moving left pointer right } else { right--; // Decrease sum by moving right pointer left } } // Reture 1-indexed result return new int[] { left + 1, right + 1 }; } } SHOW NOTES Algorithm Walkthrough\nnums = [1, 2, 3, 4, 5, 8] target = 7 Initialize pointers: left = 0, right = 5 First iteration: currentSum = 1 + 8 = 9 (greater than the target) Decrease the right pointer to 4 Second iteration: currentSum = 1 + 5 = 6 (less than the target) Increase the left pointer to 1 Third iteration: currentSum = 2 + 4 = 6 (equals the target) Return the indices [1, 3]. Visualization\n3Sum SHOW PROBLEM Problem Statement\nGiven an integer array nums, return all unique triplets [nums[i], nums[j], nums[k]] such that:\ni != j, i != k, and j != k nums[i] + nums[j] + nums[k] == 0 The solution set must not contain duplicate triplets.\nExample 1:\nInput: nums = [-1, 0, 1, 2, -1, -4] Output: [[-1, -1, 2], [-1, 0, 1]] Explanation: nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 The distinct triplets are [-1, 0, 1] and [-1, -1, 2].\nNote: The order of the output and the order of the triplets does not matter.\nExample 2:\nInput: nums = [0, 1, 1] Output: [] Explanation: The only possible triplet does not sum up to 0. Example 3:\nInput: nums = [0, 0, 0] Output: [[0, 0, 0]] Explanation: The only possible triplet sums up to 0. Constraints:\n3 \u0026lt;= nums.length \u0026lt;= 3000 10^5 \u0026lt;= nums[i] \u0026lt;= 10^5 Go to Leetcode 🔗 SHOW CODE Java class Solution { public List threeSum(int[] nums) { List triplets = new ArrayList\u0026lt;\u0026gt;(); // Sort the array to enable the two-pointer approach Arrays.sort(nums); for (int i = 0; i \u003c nums.length - 2; i++) { // Skip duplicates for 'i' to ensure unique triplets if (i \u003e 0 \u0026\u0026 nums[i] == nums[i - 1]) { continue; } // Find pairs that sum up to the negative of the current number findTwoSum(nums, -nums[i], i + 1, nums.length - 1, triplets); } return triplets; } private static void findTwoSum(int[] nums, int target, int left, int right, List triplets) { while (left \u003c right) { int currentSum = nums[left] + nums[right]; if (target == currentSum) { triplets.add(Arrays.asList(-target, nums[left], nums[right])); left++; right--; // Skip duplicates for 'left' and 'right' to avoid duplicate triplets while (left \u003c right \u0026\u0026 nums[left] == nums[left - 1]) { left++; } while (left \u003c right \u0026\u0026 nums[right] == nums[right + 1]) { right--; } } else if (currentSum \u003c target) { // Move 'left' pointer to the right to increase the sum left++; } else { // Move 'right' pointer to the left to decrease the sum right--; } } } } SHOW NOTES Algorithm Walkthrough:\nInitialization: [2, -1, -2, 3, -5] Sort the Array: Input: [2, -1, -2, 3, -5] Sorted: [-5, -2, -1, 2, 3] Iteration: Iteration 1: Fix -5 (at index 0), left pointer at -2 (index 1), right pointer at 3 (index 4): Target Sum: -(-5) = 5 Sum = -2 + 3 = 1 (less than targetSum), move left pointer to -1 (index 2) Sum = -1 + 3 = 2 (less than targetSum), move left pointer to 2 (index 3) Sum = 2 + 3 = 5, found triplet [-5, 2, 3] Move left pointer to 4 and right pointer to 3 (end of this iteration). Iteration 2: Fix -2 (at index 1), left pointer at -1 (index 2), right pointer at 3 (index 4): Target Sum: -(-2) = 2 Sum = -1 + 3 = 2, found triplet [-2, -1, 3] Move left pointer to 2 and right pointer to 3 (end of this iteration). Iteration 3: Fix -1 (at index 2), left pointer at 2 (index 3), right pointer at 3 (index 4): Target Sum: -(-1) = 1 Sum = 2 + 3 = 5 (greater than targetSum), move right pointer to 2 (end of this iteration). End of Loop: All elements are processed. Result: [[ -5, 2, 3], [ -2, -1, 3]] Visulization:\nFast \u0026amp; Slow Pointers The Fast and Slow Pointers pattern, also known as the Tortoise and Hare Algorithm, invloves using two pointers that move at different speeds over an array or linked list. It is commonly used to solve problems related to cycle detection or finding the middle element in linked lists or arrays.\nLinked List Cycle SHOW PROBLEM Problem Statement\nGiven the head of a singly linked list, write a function to determine whether the list contains a cycle.\nConstraints:\nThe number of nodes in the list is between 0 and 10,000. Node values are in the range of [-10^5, 10^5]. Go to Leetcode 🔗 SHOW CODE Java /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public boolean hasCycle(ListNode head) { // Initialize slow and fast pointers at the head of the list ListNode slow = head, fast = head; // Traverse the list with fast and slow pointers while (fast != null \u0026\u0026 fast.next != null) { // Move slow pointer by one step and fast pointer by two steps slow = slow.next; fast = fast.next.next; // If the two pointers meet, a cycle is detected if (slow == fast) { return true; } } // If fast pointer reaches the end, there's no cycle return false; } } SHOW NOTES The fast and slow pointers start from the same point. The fast pointer moves two steps at a time, while the slow pointer moves one step at a time. If the linked list has no cycle, the fast pointer will reach the end before the slow pointer. If the linked list has a cycle, the fast pointer will enter the cycle first, and both pointers will continue moving in the cycle. Eventually, they will meet at some point, indicating the presence of a cycle. There are two possible scenerios when both pointers are in the cycle:\nThe fast pointer is one step behind the slow pointer. The fast pointer is two steps behind the slow pointer. In scenerio 1, after the next move, the two pointers will meet at the same position. This is the condition that confirms the presence of a cycle, as shown in the following illustration.\nMiddle of the LinkedList SHOW PROBLEM Problem Statement\nGiven the head of a singly linked list, write a method to return the middle node of the linked list.\nIf the total number of nodes in the list is even, return the second middle node.\nExample 1:\nInput: 1 → 2 → 3 → 4 → 5 → null Output: 3 Example 2:\nInput: 1 → 2 → 3 → 4 → 5 → 6 → null Output: 4 Example 3:\nInput: 1 → 2 → 3 → 4 → 5 → 6 → 7 → null Output: 4 Constraints:\nThe number of nodes in the list is between 1 and 100. Node values are between 1 and 100. Go to Leetcode 🔗 SHOW CODE Java /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode middleNode(ListNode head) { // Initialize slow and fast pointers at the head of the list ListNode slow = head, fast = head; while (fast != null \u0026\u0026 fast.next != null) { slow = slow.next; // Move slow pointer by one step fast = fast.next.next; // Move fast pointer by two steps } // When fast pointer reaches the end, slow pointer will be at the middle return slow; } } SHOW NOTES If the total number of nodes in the list is even, and return the first middle node is required, then\nwhile (fast != null \u0026amp;\u0026amp; fast.next != null) { fast = fast.next.next; // Move fast pointer by two steps if (fast != null) { break; } slow = slow.next; // Move slow pointer by one step } Remove Nth Node From End of List SHOW PROBLEM Problem Statement\nGiven the head of a singly linked list, remove the nth node from the end of the list and return the head of the updated list.\nExample 1:\nInput: head = [1, 2, 3, 4, 5], n = 2 Output: [1, 2, 3, 5] Example 2:\nInput: head = [1], n = 1 Output: [] Example 3:\nInput: head = [1, 2], n = 1 Output: [1] Constraints:\nThe number of nodes in the list is between 1 and 10^5. 1 \u0026lt;= n \u0026lt;= the number of nodes in the list. Go to Leetcode 🔗 SHOW CODE Java /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode removeNthFromEnd(ListNode head, int n) { // Create a dummy node to handle edge cases (e.g., removing the head) ListNode dummy = new ListNode(0); dummy.next = head; // Initialize slow and fast pointers at the dummy node ListNode slow = dummy, fast = dummy; // Move the fast pointer n+1 steps ahead from the dummy node for (int i = 0; i \u003c= n; i++) { fast = fast.next; } // Move both slow and fast pointers one step at a time until fast reaches the // end while (fast != null) { slow = slow.next; fast = fast.next; } // Remove the nth node from the end by skipping it slow.next = slow.next.next; // Return the updated head return dummy.next; } } SHOW NOTES The goal is to remove the nth node from the end of the list. The first step in solving this problem is to determine the position of the nth node from the end. This can be achieved using the slow and fast pointers techique. Initially, two pointer, slow and fast, are both set to the head of the list. The fast pointer is then moved n steps ahead from the head node.\nOnce the fast pointer is n steps ahead, both the slow and fast pointers move one step at a time simultaneously. When the fast pointer reaches the end of the list, the slow pointer will be positioned at the nth node from the end. Since the task is to remove this node, the node before it must be idetified.\nHowever, handling the edge case where the node to be removed is the head node requires special attention. To address this issue, a dummy node is introduced. The dummy node points to the head of the list, ensuring that there is always a valid node before the one to be deleted, even if the head node itself is the target.\nTo find the node just before the nth node from the end, the fast pointer is moved n+1 steps ahead from the dummy node. This places the fast pointer n+1 steps ahead of the slow pointer. Both pointers are then moved one step at a time until the fast pointer reaches the end of the list. At this point, the slow pointer will be positioned just before the nth node from the end.\nThe removal of the nth node is accomplished by updating the slow pointer\u0026rsquo;s next reference slow.next = slow.next.next;. When the node to be removed is the head, the slow pointer remains at the dummy node without moving. After executing slow.next = slow.next.next;, the node after the dummy node becomes the new head of the list.\nIllustration\nIllustration: Remove Head Node\nSliding Window The Sliding Window Pattern is a technique used to solve problems involving arrays or sequences when computing something over a continguous subarray or subsequence is required. There are two types of sliding window: fixed-size and dynamic. The fixed-size window involves calculating something over a contiguous subarray of a given size, while the dynamic window adjusts its size based on specific constraints to handle problems over a contiguous subarray or subsequence. The key to solving sliding window problems is determining when to shrink the window size.\nMaximum Sum Subarray of Size K SHOW PROBLEM Problem Statement\nGiven an array of positive numbers and a positive integer k, find the maximum sum of any contiguous subarray of size k.\nExample 1:\nInput:\narr = [2, 1, 5, 1, 3, 2], k = 3\nOutput:\n9\nExplanation:\nThe subarray with the maximum sum is [5, 1, 3], which has a sum of 9.\nExample 2:\nInput:\narr = [2, 3, 4, 1, 5], k = 2\nOutput:\n7\nExplanation:\nThe subarray with the maximum sum is [3, 4], which has a sum of 7.\nSHOW CODE Java public class Solution { public int findMaxSumSubArray(int k, int[] arr) { int windowStart = 0; int windowSum = 0, maxSum = Integer.MIN_VALUE; for (int windowEnd = 0; windowEnd \u003c arr.length; windowEnd++) { windowSum += arr[windowEnd]; // Update the window sum // Iterate the array to expand the window if (windowEnd \u003e= k - 1) { maxSum = Math.max(windowSum, maxSum); // Update the maximum sum windowSum -= arr[windowStart]; // Remove the element going out of the window windowStart++; // Shink the window } } return maxSum; } public static void main(String[] args) { Solution sol = new Solution(); System.out.println(\"Maximum sum of a subarray of size K: \" + sol.findMaxSumSubArray(3, new int[]{2, 1, 5, 1, 3, 2})); System.out.println(\"Maximum sum of a subarray of size K: \" + sol.findMaxSumSubArray(2, new int[]{2, 3, 4, 1, 5})); } } SHOW OUTPUT Output Maximum sum of a subarray of size K: 9 Maximum sum of a subarray of size K: 7 SHOW NOTES Algorithm Walkthrough\narr = [2, 1, 5, 1, 3, 2] k = 3 Initialization: windowSum = 0 maxSum = 0 windowStart = 0 Iteration: windowEnd = 0: Add arr[0] (2) to windowSum: windowSum = 2 windowEnd = 1: Add arr[1] (1) to windowSum: windowSum = 3 windowEnd = 2: Add arr[2] (5) to windowSum: windowSum = 8 Since windowEnd \u0026gt;= k - 1: Update maxSum = Math.max(0, 8) = 8 Subtract arr[0] = 2 from windowSum: windowSum = 6 Increment windowStart: windowStart = 1 windowEnd = 3: Add arr[3] (1) to windowSum: windowSum = 7 Since windowEnd \u0026gt;= k - 1: Update maxSum = Math.max(8, 7) = 8 Subtract arr[1] = 1 from windowSum: windowSum = 6 Increment windowStart: windowStart = 2 windowEnd = 4: Add arr[4] (3) to windowSum: windowSum = 9 Since windowEnd \u0026gt;= k - 1: Update maxSum = Math.max(8, 9) = 9 Subtract arr[2] = 5 from windowSum: windowSum = 4 Increment windowStart: windowStart = 3 windowEnd = 5: Add arr[5] (2) to windowSum: windowSum = 6 Since windowEnd \u0026gt;= k - 1: Update maxSum = Math.max(9, 6) = 9 Subtract arr[3] = 1 from windowSum: windowSum = 5 Increment windowStart: windowStart = 4 Result: The final maxSum is 9, which is the maximum sum of any subarray of size k = 3. Visualization\nLongest Substring with At Most K Distinct Characters SHOW PROBLEM Problem Statement\nGiven a string, find the length of the longest substring that contains no more than K distinct characters.\nIt is guaranteed that K will be less than or equal to the length of the given string.\nExample 1:\nInput: String = \u0026quot;araaci\u0026quot;, K = 2 Output: 4 Explanation: The longest substring with no more than 2 distinct characters is \u0026quot;araa\u0026quot;. Example 2:\nInput: String = \u0026quot;araaci\u0026quot;, K = 1 Output: 2 Explanation: The longest substring with no more than 1 distinct character is \u0026quot;aa\u0026quot;. Example 3:\nInput: String = \u0026quot;cbbebi\u0026quot;, K = 3 Output: 5 Explanation: The longest substrings with no more than 3 distinct characters are \u0026quot;cbbeb\u0026quot; and \u0026quot;bbebi\u0026quot;. Constraints:\n1 \u0026lt;= str.length \u0026lt;= 50,000 0 \u0026lt;= K \u0026lt;= 50 SHOW CODE Java import java.util.HashMap; import java.util.Map; class Solution { public int findLength(String str, int k) { Map\u0026lt;Character, Integer\u0026gt; charFrequencyMap = new HashMap\u0026lt;\u0026gt;(); int windowStart = 0; int maxLength = 0; // Iterate the char sequence to expand the window for (int windowEnd = 0; windowEnd \u003c str.length(); windowEnd++) { char endChar = str.charAt(windowEnd); charFrequencyMap.put(endChar, charFrequencyMap.getOrDefault(endChar, 0) + 1); // Shrink the window if there are more than 'k' distinct characters while (charFrequencyMap.size() \u003e k) { char startChar = str.charAt(windowStart); charFrequencyMap.put(startChar, charFrequencyMap.get(startChar) - 1); if (charFrequencyMap.get(startChar) == 0) { charFrequencyMap.remove(startChar); } windowStart++; // Shrink the window } // Update the maximum length of the valid substring found maxLength = Math.max(maxLength, windowEnd - windowStart + 1); } return maxLength; } public static void main(String[] args) { Solution sol = new Solution(); System.out.println(\"Length of the longest substring: \" + sol.findLength(\"araaci\", 2)); System.out.println(\"Length of the longest substring: \" + sol.findLength(\"araaci\", 1)); System.out.println(\"Length of the longest substring: \" + sol.findLength(\"cbbebi\", 3)); } } SHOW NOTES Algorithm Walkthrough:\nstr = \u0026quot;araaci\u0026quot; K = 2 Initialize: windowStart = 0, windowEnd = 0 Iteration: windowEnd = 0 Add 'a' to the hash map: {'a': 1} Maximum length = 1 windowEnd = 1 Add 'r' to the hash map: {'a': 1, 'r': 1} Maximum length = 2 windowEnd = 2 Add 'a' to the hash map: {'a': 2, 'r': 1} Maximum length = 3 windowEnd = 3 Add 'a' to the hash map: {'a': 3, 'r': 1} Maximum length = 4 windowEnd = 4 Add 'c' to the hash map: {'a': 3, 'r': 1, 'c': 1} Since the hash map has more than K = 2 distinct characters, shrink the window from the left: Remove one 'a': {'a': 2, 'r': 1, 'c': 1} Move windowStart = 1 Remove one 'r': {'a': 2, 'c': 1} Move windowStart = 2 Maximum length = 4 windowEnd = 5 Add 'i' to the hash map: {'a': 2, 'c': 1, 'i': 1} Since the hash map has more than K = 2 distinct characters, shrink the window from the left: Remove one 'a': {'a': 1, 'c': 1, 'i': 1} Move windowStart = 3 Remove one 'a': {'c': 1, 'i': 1} Move windowStart = 4 Maximum length = 4 Result: The maximum length of the substring with at most 2 distinct characters is 4. Visulization\nMerge Intervals The Merge Interval Pattern is a technique used to solve problems involving a list of intervals, where each interval is represented by a pair $[\\text{start}_i, \\text{end}_i]$. Common tasks following this pattern include merging overlapping intervals, inserting a new interval into an existing list, or finding the intersection of two interval lists.\nTo solve problems related to the merge interval pattern, the first step is to understand how two disjoint intervals can relate to each other. Given two intervals \u0026ldquo;a\u0026rdquo; and \u0026ldquo;b\u0026rdquo;, there are six possible relationships between them, as illustrated in the following image.\nAssuming a.start \u0026lt;= b.start (which can be achieved by sorting the intervals based on their starting points), there are only four possible scenatios:\nBy observing the above image, for two intervals to overlap, the condition a.start \u0026lt;= b.start \u0026amp;\u0026amp; b.start \u0026lt;= a.end must hold true. In this case, the merged interval becomes $[\\text{a.start}, \\text{max}\\{\\text{a.end, b.end}\\}]$.\nMerge Intervals SHOW PROBLEM Problem Statement\nGiven a list of intervals, merge all overlapping intervals to produce a list of mutually exclusive intervals.\nExample 1:\nInput: [[1, 4], [2, 5], [7, 9]] Output: [[1, 5], [7, 9]] Explanation: The first two intervals [1, 4] and [2, 5] overlap, so they are merged into one interval [1, 5]. Example 2:\nInput: [[6, 7], [2, 4], [5, 9]] Output: [[2, 4], [5, 9]] Explanation: The intervals [6, 7] and [5, 9] overlap, so they are merged into [5, 9]. Example 3:\nInput: [[1, 4], [2, 6], [3, 5]] Output: [[1, 6]] Explanation: All the given intervals overlap, so they are merged into one interval [1, 6]. Constraints:\n$1 \u0026lt;= \\text{intervals.length} \u0026lt;= 10^4$ $\\text{intervals[i].length} == 2$ $0 \u0026lt;= \\text{start}_i \u0026lt;= \\text{end}_i \u0026lt;= 10^4$ Go to Leetcode 🔗 SHOW CODE Java class Solution { public int[][] merge(int[][] intervals) { // Sort intervals by their start point Arrays.sort(intervals, (a, b) -\u003e a[0] - b[0]); // List to store merged intervals List\u0026lt;int[]\u0026gt; mergedIntervals = new ArrayList\u0026lt;\u0026gt;(); // Initialize the first interval as the current interval mergedIntervals.add(intervals[0]); // Iterate through the intervals for (int i = 1; i \u003c intervals.length; i++) { int[] currentInterval = mergedIntervals.get(mergedIntervals.size() - 1); int[] nextInterval = intervals[i]; // If the next interval overlaps with the current interval if (nextInterval[0] \u003c= currentInterval[1]) { // Merge by updating the end point of the current interval currentInterval[1] = Math.max(currentInterval[1], nextInterval[1]); } else { // No overlap, add the next interval as a new interval mergedIntervals.add(nextInterval); } } // Convert the list to a 2D array and return return mergedIntervals.toArray(new int[mergedIntervals.size()][]); } } SHOW NOTES Algorithm Walkthrough\nInput: [[1, 4], [2, 5], [7, 9]] Sort Intervals:\nOriginal intervals: [[1, 4], [2, 5], [7, 9]] Sorted intervals: [[1, 4], [2, 5], [7, 9]] (already sorted) Initialize Merged List:\nmergedIntervals = [[1, 4]] Iterate Through Intervals:\nFirst Iteration:\nCurrent interval: [1, 4] Next interval: [2, 5] Check overlap: 2 \u0026lt;= 4 (True) Merged intervals: [[1, 5]] Second Iteration:\nCurrent interval: [1, 5] Next interval: [7, 9] Check overlap: 7 \u0026lt;= 5 (False) Merged intervals: [[1, 5], [7, 9]] Result:\nResult: [[1, 5], [7, 9]] Visulization\nInsert Interval SHOW PROBLEM Problem Statement\nGiven a list of non-overlapping intervals sorted by their start time, insert a given interval at the correct position and merge all overlapping intervals to produce a list of mutually exclusive intervals.\nExample 1:\nInput: Intervals = [[1, 3], [5, 7], [8, 12]], New Interval = [4, 6] Output: [[1, 3], [4, 7], [8, 12]] Explanation: After inserting [4, 6], it overlaps with [5, 7], so they are merged into [4, 7]. Example 2:\nInput: Intervals = [[1, 3], [5, 7], [8, 12]], New Interval = [4, 10] Output: [[1, 3], [4, 12]] Explanation: After inserting [4, 10], it overlaps with [5, 7] and [8, 12], so they are merged into [4, 12]. Example 3:\nInput: Intervals = [[2, 3], [5, 7]], New Interval = [1, 4] Output: [[1, 4], [5, 7]] Explanation: After inserting [1, 4], it overlaps with [2, 3], so they are merged into [1, 4]. Constraints:\n1 \u0026lt;= intervals.length \u0026lt;= 10^4 intervals[i].length == 2 0 \u0026lt;= start_i \u0026lt;= end_i \u0026lt;= 10^5 intervals is sorted by start_i in ascending order. newInterval.length == 2 0 \u0026lt;= start \u0026lt;= end \u0026lt;= 10^5 Go to Leetcode 🔗 SHOW CODE Java class Solution { public int[][] insert(int[][] intervals, int[] newInterval) { List\u0026lt;int[]\u0026gt; mergedIntervals = new ArrayList\u0026lt;\u0026gt;(); int i = 0; // Add all intervals that ends before the new interval starts while (i \u003c intervals.length \u0026\u0026 intervals[i][1] \u003c newInterval[0]) { mergedIntervals.add(intervals[i]); i++; } // Merge the overlapping intervals with the new interval while (i \u003c intervals.length \u0026\u0026 intervals[i][0] \u003c= newInterval[1]) { newInterval[0] = Math.min(intervals[i][0], newInterval[0]); newInterval[1] = Math.max(intervals[i][1], newInterval[1]); i++; } // Add the merged new interval to the result list mergedIntervals.add(newInterval); // Add all intervals that don't overlap with the new interval to the result list while (i \u003c intervals.length) { mergedIntervals.add(intervals[i]); i++; } // Convert the list to a 2-D array and return return mergedIntervals.toArray(new int[mergedIntervals.size()][]); } } SHOW NOTES Since the interval list is sorted, the first step is to skip all intervals that satisfy the condition intervals[i].end \u0026lt; newInterval.start. After that, there are five possible ways the new interval can relate to the next interval in the list (where \u0026ldquo;a\u0026rdquo; represents newInterval, and \u0026ldquo;b\u0026rdquo; represents the next interval in the list), as shown in the following image.\nBy observing the above image, for two intervals to overlap, the condition interval.start \u0026lt;= newInterval.end must hold true. In this case, the merged interval will be $[\\text{min\\{a.start, b.start\\}}, \\text{max\\{a.end, b.end\\}}]$.\nAlgorithm Walkthrough\nIntervals = [[1, 3], [5, 7], [8, 12]] New Interval = [4, 10] Initialize Merged List:\nmergedIntervals = [] Iterate Through Intervals: Process the first interval [1, 3]: Ends before [4, 10] starts. Add to mergedIntervals: [[1, 3]] Process the second interval [5, 7]: Overlaps with [4, 10]. No change to the new interval: [4, 10] -\u0026gt; [4, 10] No change to mergedIntervals. Process the third interval [8, 12]: Overlaps with [4, 10]. Adjust new interval: [4, 10] -\u0026gt; [4, 12] Add the merged interval [4, 12] to mergedIntervals: [[1, 3], [4, 12]] No more intervals left to process. Final merged intervals: [[1, 3], [4, 12]] Visulization\nIntervals Intersection SHOW PROBLEM Problem Statement\nGiven two lists of disjoint intervals, find their intersection. Each list is sorted by the start time of the intervals.\nExample 1:\nInput: arr1 = [[1, 3], [5, 6], [7, 9]], arr2 = [[2, 3], [5, 7]] Output: [[2, 3], [5, 6], [7, 7]] Explanation: The output list contains the common intervals between the two lists. Example 2:\nInput: arr1 = [[1, 3], [5, 7], [9, 12]], arr2 = [[5, 10]] Output: [[5, 7], [9, 10]] Explanation: The output list contains the common intervals between the two lists. Constraints:\n0 \u0026lt;= arr1.length, arr2.length \u0026lt;= 1000 arr1.length + arr2.length \u0026gt;= 1 $0 \\le \\text{start}_i \u0026lt; \\text{end}_i \\le 10^9$ $end_i \u0026lt; \\text{start}_{i+1}$ for all intervals in arr1 $0 \\le \\text{start}_j \u0026lt; \\text{end}_j \\le 10^9$ $end_j \u0026lt; \\text{start}_{j+1}$ for all intervals in arr2 Go to Leetcode 🔗 SHOW CODE Java Optimization class Solution { public int[][] intervalIntersection(int[][] arr1, int[][] arr2) { List\u0026lt;int[]\u0026gt; intersections = new ArrayList\u0026lt;\u0026gt;(); int i = 0, j = 0; // Iterate over both interval lists to find all intersections while (i \u003c arr1.length \u0026\u0026 j \u003c arr2.length) { // Check if both intervals are overlapped if ((arr1[i][0] \u003e= arr2[j][0] \u0026\u0026 arr1[i][0] \u003c= arr2[j][1]) || (arr2[j][0] \u003e= arr1[i][0] \u0026\u0026 arr2[j][0] \u003c= arr1[i][1])) { // Store the intersection part intersections.add(new int[]{Math.max(arr1[i][0], arr2[j][0]), Math.min(arr1[i][1], arr2[j][1])}); } // Move the pointer of the interval that ends first if (arr1[i][1] \u003c arr2[j][1]) { i++; } else { j++; } } // Return the intersections as a 2D array return intersections.toArray(new int[intersections.size()][]); } } class Solution { public int[][] intervalIntersection(int[][] arr1, int[][] arr2) { List\u0026lt;int[]\u0026gt; intersections = new ArrayList\u0026lt;\u0026gt;(); int i = 0, j = 0; // Iterate over both interval lists to find all intersections while (i \u003c arr1.length \u0026\u0026 j \u003c arr2.length) { int start = Math.max(arr1[i][0], arr2[j][0]); int end = Math.min(arr1[i][1], arr2[j][1]); // Add the intersection to the result if valid if (start \u003c= end) { intersections.add(new int[] { start, end }); } // Move the pointer of the interval that ends first if (arr1[i][1] \u003c arr2[j][1]) { i++; } else { j++; } } // Return the result as a 2D array return intersections.toArray(new int[intersections.size()][]); } } SHOW NOTES Two Interval List: arr1 and arr2\nPointer Initialization: Initialize two pointers i and j, both set to 0, to track the current positions in arr1 and arr2, respectively.\nOverlapping Check: For two intervals a and b to overlap, at least one of the following conditions must hold true:\na.start \u0026lt;= b.start \u0026amp;\u0026amp; b.start \u0026lt;= a.end b.start \u0026lt;= a.start \u0026amp;\u0026amp; a.start \u0026lt;= b.end Interval Calculation: If a and b overlap (follows overlapping check), the intersection is calculated as:\n$[\\text{max}\\{\\text{a.start, b.start}\\}, \\text{min}\\{\\text{a.end, b.end}\\}]$ Interval Caculation (Optimization): Based on the Overlapping Check and Interval Calculation, the calculation can be optimized as follows:\nmaxStart = max{a.start, b.start} minEnd = min{a.end, b.end} An intersection [maxStart, minEnd] exists if maxStart \u0026lt;= minEnd Pointer Movement: Increment the pointer that ends first. For example, if arr1[i].end \u0026lt; arr2[j].end, increment i; otherwise increment j.\nIn-place Reversal of a Linked List The In-place Reversal of a Linked List pattern is a commonly used approach to solve linked-list-related problems efficiently without extra space. It relies on maintaining three pointers:\nprev: Points to the previous node. Initially set to null since there is no node before the head. current: Points to the node currently being processed. next: Points to the next node, ensuring the remaining list is not lost during the reversal process. This pattern typically involves the following three steps:\nInitialization: Set prev = null and current = head to start processing from the head of list. Iteration: Save the next node (next = current.next) to keep track of the remaining list. Reverse the link by updating current.next to point to prev. Move the prev pointer forward (prev = current). Move the current pointer forward (current = next); Termination: When current becomes null, the prev pointer will point to the new head of the reversed linked list. Reverse Linked List SHOW PROBLEM Problem Statement\nGiven the head of a singly linked list, reverse the list in-place and return the new head of the reversed list.\nConstraints\nThe number of nodes in the list is in the range: $[0, 5000]$. Each node’s value is within the range: $[-5000, 5000]$. Go to Leetcode 🔗 SHOW CODE Java /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode reverseList(ListNode head) { ListNode prev = null; // Tracks the previous node ListNode current = head; // Tracks the current node // Traverse and reverse the list while (current != null) { ListNode next = current.next; // Save the next node current.next = prev; // Reverse the link prev = current; // Move prev forward current = next; // Move current forward } return prev; // New head of the reversed list } } SHOW NOTES Visulization\nReverse a Sublist SHOW PROBLEM Given the head of a LinkedList and two positions, left and right, reverse the portion of the LinkedList from position left to position right.\nConstraints:\nThe number of nodes in the list is n. 1 \u0026lt;= n \u0026lt;= 500 -500 \u0026lt;= Node.val \u0026lt;= 500 1 \u0026lt;= left \u0026lt;= right \u0026lt;= n Go to Leetcode 🔗 SHOW CODE Java /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode reverseBetween(ListNode head, int left, int right) { ListNode prev = null, current = head; // Skip the first left - 1 node to reach the node at position left for (int i = 1; i \u003c left \u0026\u0026 current != null; i++) { prev = current; current = current.next; } // Save the node at position left - 1 to reconnect the reversed sublist ListNode lastNodeOfFirstPart = prev; // After reversing, the left node will become the last node of the reversed sublist ListNode lastNodeOfReversedList = current; // Reverse the node from left to right ListNode next = null; for (int i = 1; i \u003c= right - left + 1 \u0026\u0026 current != null; i++) { next = current.next; // Save the next node current.next = prev; // Reverse the link prev = current; // Move the 'prev' node forward current = next; // Move the 'current' node forward } // Reconnect the reversed sublist with the rest of the list if (lastNodeOfFirstPart != null) { // Connect with the new head of the sublist lastNodeOfFirstPart.next = prev; } else { // left == 1 in this case head = prev; } // Connect the tail of the reversed sublist to the remaining list lastNodeOfReversedList.next = current; return head; } } SHOW NOTES Skip the first left - 1 nodes to reach the node at position left Save the node at position left - 1 to later reconnect it with the reversed sublist. Save the node at position left before reversing, after reversing, the node will become the last node of the reversed sublist. Reverse the nodes from position left to right Reconnect the node at position left - 1 to the head of the reversed sublist, and connect the node at position right + 1 to the tail of the reversed sublist. Reverse Nodes in k-Group SHOW PROBLEM Problem Statement:\nGiven the head of a linked list, reverse the nodes of the list in groups of k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k, then the remaining nodes at the end should remain as they are (i.e., not reversed). You are not allowed to alter the values of the nodes in the list; only the nodes themselves may be rearranged. Example 1:\nInput: head = [1, 2, 3, 4, 5], k = 2 Output: [2, 1, 4, 3, 5] Example 2:\nInput: head = [1, 2, 3, 4, 5], k = 3 Output: [3, 2, 1, 4, 5] Go to Leetcode 🔗 SHOW CODE Java /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode reverseKGroup(ListNode head, int k) { // Return the original list if the list is empty or k is 1 if (head == null || k == 1) { return head; } // Count the total number of the list ListNode temp = head; int count = 0; while (temp != null) { count++; temp = temp.next; } ListNode prev = null, current = head, next = null; while (current != null \u0026\u0026 count \u003e= k) { ListNode lastNodeOfPrevGroup = prev; // After reversing, the current node will become the last node of the reversed list ListNode lastNodeOfReversedList = current; // Reverse the list in groups of size k for (int i = 0; i \u003c k; i++) { next = current.next; current.next = prev; prev = current; current = next; count--; } // Connect the last node of the reversed sublist to the start node of the // remaining list lastNodeOfReversedList.next = current; // Connect with the previous group if (lastNodeOfPrevGroup != null) { // After reversing, the prev node is the head node of the sublist lastNodeOfPrevGroup.next = prev; } else { // When previous group is null, the prev node becomes the head of the original list head = prev; } // Break the loop when current is null or count is less than k if (current == null || count \u003c k) { break; } // Update the prev node for next iteration prev = lastNodeOfReversedList; } return head; } } SHOW NOTES The first step to solve this problem is to track the last node of the previous group and the last node of the reversed sublist. When the previous group is null, the head of the reversed sublist becomes the new head of the original list.\nBefore reversing, the current node points to the head of the sublist. After reversing, the head of the sublist becomes the last node of the reversed segment. Therefore, the last node of the reversed list can be tracked by setting lastNodeOfReversedList = current. To track the last node of the previous group, simply setting lastNodeOfPreviousGroup = prev.\nAfter the reversal, the prev node will point to the head of the reversed sublist, and the current node (if it\u0026rsquo;s not null) will point to the head of the next sublist. To maintain the list structure, There are two key steps need to do, the first step is connecting the last node of the previous group to the head (prev after reversal) of the reversed sublist, the second step is connecting the last node of the reversed sublist to the remaining node (if any).\nFinally, update the prev node to be the last node of the reversed sublist, preparing it for the next iteration.\nHash Maps Hash Map Data Structure A Hash Map is a data structure that stores key-value pairs, enabling efficient lookup, insertion, and deletion operations. Under most conditions, it provides constant time complexity (O(1)) for these operations. The Hash Map Pattern takes advantage of the hash map\u0026rsquo;s efficiency to store and retrive data quickly. It is commonly used to solve problems involving the calculation of element frequencies in a sequency or array.\nFirst Unique Character in a String SHOW PROBLEM Problem Statement\nGiven a string, find the position of the first character that appears only once. If no such character exists, return -1.\nExample 1:\nInput: \u0026quot;apple\u0026quot; Expected Output: 0 Justification: The first character 'a' appears only once in the string, and it is located at index 0. Example 2:\nInput: \u0026quot;abcab\u0026quot; Expected Output: 2 Justification: The first character that appears only once is 'c', which is located at index 2. Example 3:\nInput: \u0026quot;abab\u0026quot; Expected Output: -1 Justification: All characters in the string appear more than once, so there is no character that appears only once. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 10^5 s consists of only lowercase English letters. Go to Leetcode 🔗 SHOW CODE Java class Solution { public int firstUniqChar(String s) { // Use a HashMap to store the frequency of each character Map\u0026lt;Character, Integer\u0026gt; charFrequencyMap = new HashMap\u0026lt;\u0026gt;(); // Populate the map with the frequency of each character for (char c : s.toCharArray()) { charFrequencyMap.put(c, charFrequencyMap.getOrDefault(c, 0) + 1); } // Iterate over the string to find the index of the first unique character for (int i = 0; i \u003c s.length(); i++) { if (charFrequencyMap.get(s.charAt(i)) == 1) { return i; // Return the index of the first unique character } } // No unique character found, return -1 return -1; } } SHOW NOTES Virsulization:\nMaximum Number of Balloons SHOW PROBLEM Problem Statement\nGiven a string, determine the maximum number of times the word \u0026ldquo;balloon\u0026rdquo; can be formed using the characters from the string. Each character in the string can be used only once.\nExample 1:\nInput: \u0026quot;balloonballoon\u0026quot; Expected Output: 2 Justification: The word \u0026ldquo;balloon\u0026rdquo; can be formed twice from the given string. Example 2:\nInput: \u0026quot;bbaall\u0026quot; Expected Output: 0 Justification: The word \u0026ldquo;balloon\u0026rdquo; cannot be formed because the character \u0026lsquo;o\u0026rsquo; is missing twice. Example 3:\nInput: \u0026quot;balloonballoooon\u0026quot; Expected Output: 2 Justification: The word \u0026ldquo;balloon\u0026rdquo; can be formed twice, even though there are extra \u0026lsquo;o\u0026rsquo; characters. Constraints:\n1 \u0026lt;= text.length \u0026lt;= 10^4 text consists of lowercase English letters only. Go to Leetcode 🔗 SHOW CODE Java class Solution { public int maxNumberOfBalloons(String text) { // Define the required frequencies of characters to form 'balloon' Map\u0026lt;Character, Integer\u0026gt; requiredCharMap = Map.of( 'b', 1, 'a', 1, 'l', 2, 'o', 2, 'n', 1); // Calculate the frequencies of characters that are part of 'balloon' Map\u0026lt;Character, Integer\u0026gt; availableCharMap = new HashMap\u0026lt;\u0026gt;(); for (char c : text.toCharArray()) { if (requiredCharMap.containsKey(c)) { availableCharMap.put(c, availableCharMap.getOrDefault(c, 0) + 1); } } // Calculate the maximum available count of the word 'balloon' int maxCount = Integer.MAX_VALUE; if (availableCharMap.size() == requiredCharMap.size()) { for (char c : availableCharMap.keySet()) { int requiredCount = requiredCharMap.get(c); int availableCount = availableCharMap.get(c); maxCount = Math.min(maxCount, availableCount / requiredCount); } } return (maxCount == Integer.MAX_VALUE) ? 0 : maxCount; } } SHOW NOTES Virsulization:\nLongest Palindrome SHOW PROBLEM Problem Statement:\nGiven a string, determine the length of the longest palindrome that can be constructed using the characters from the string. Return the maximum possible length of the palindromic string.\nExample 1:\nInput: \u0026quot;applepie\u0026quot; Expected Output: 5 Justification: The longest palindrome that can be formed is \u0026quot;pepep\u0026quot;, which has a length of 5. Other valid palindromes are also of length 5. Example 2:\nInput: \u0026quot;aabbcc\u0026quot; Expected Output: 6 Justification: We can form the palindrome \u0026quot;abccba\u0026quot;, which has a length of 6. Example 3:\nInput: \u0026quot;bananas\u0026quot; Expected Output: 5 Justification: The longest palindrome that can be formed is \u0026quot;anana\u0026quot;, which has a length of 5. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 2000 s consists of lowercase and/or uppercase English letters only. Go to Leetcode 🔗 SHOW CODE Java class Solution { public int longestPalindrome(String s) { // Calculate the frequency of each character in the string Map\u0026lt;Character, Integer\u0026gt; frequencyMap = new HashMap\u0026lt;\u0026gt;(); for (char c : s.toCharArray()) { frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1); } // Flag to track if any character has an odd frequency boolean oddFound = false; int maxLength = 0; // Calculate the maximum possible length of the palindrome for (int count : frequencyMap.values()) { if (count % 2 == 0) { // Add even counts directly to the length of the palindorme maxLength += count; } else { maxLength += count - 1; // Add the even parts of odd counts oddFound = true; // Mark an odd frequency character exists } } // For characters has an odd count, one can be placed in the middle of the palindrome return oddFound ? maxLength + 1 : maxLength; } } SHOW NOTES To solve this problem, the first step is to calculate the frequency of each character in the original string. If no character has an odd frequency, simply add the frequency of each character to the length of the palindrome. If there are characters with an odd frequency, one of those characters can be placed in the middle of the palindrome.\nTherefore, to get the maximum length of the palindrome, two key steps are involved. First, add the even part of each character\u0026rsquo;s frequency to the palindrome length. Then, if there is any character with an odd count, increment the length by 1, representing the character placed in the middle of the palindrome.\nVirsulization:\nPrefix Sum A prefix sum refers to the cumulative sum of an array from the begining up to a specified index. The prefix sum pattern is a programming technique commonly used to solve problems related to subarrays, such as calculating the range sum, range maximum/minimum, or frequency counting.\nTo calculate the prefix sum, the steps typically include:\nInitialze a prefix array with the same length as the original array. Assign prefix[0] = arr[0]. Iterate through the array from index 1 to n - 1, set prefix[i] = arr[i] + prefix[i - 1] Once the prefix sum array is constructed, the time complexity for calculating the sum of any subarray is O(1), makeing this technique very efficient.\nFind the Middle Index in Array SHOW PROBLEM Problem Statement:\nGiven an integer array nums, return the leftmost middleIndex (i.e., the smallest index among all possible middle indices).\nA middleIndex is an index where the sum of the numbers to the left of this index is equal to the sum of the numbers to the right of this index.\nYou can consider the left sum to be 0 when middleIndex == 0, and the right sum to be 0 when middleIndex == nums.length - 1. If no middle index exists in the array, return -1. Example 1:\nInput: nums = [1, 7, 3, 6, 5, 6] Expected Output: 3 Justification: The sum of the numbers to the left of index 3 (1 + 7 + 3 = 11) is equal to the sum of the numbers to the right of index 3 (5 + 6 = 11). Example 2:\nInput: nums = [2, 1, -1] Expected Output: 0 Justification: The sum of the numbers to the left of index 0 is considered 0. The sum of the numbers to the right of index 0 (1 + -1 = 0) is also 0. Example 3:\nInput: nums = [2, 3, 5, 5, 3, 2] Expected Output: -1 Justification: There is no index in the array where the left and right sums are equal. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 100 -1000 \u0026lt;= nums[i] \u0026lt;= 1000 Go to Leetcode 🔗 SHOW CODE Java class Solution { public int findMiddleIndex(int[] nums) { // Calculate the total sum of the array int totalSum = Arrays.stream(nums).sum(); int leftSum = 0; // Iterate through the array to find the middle index for (int i = 0; i \u003c nums.length; i++) { // Calculate the right sum int rightSum = totalSum - leftSum - nums[i]; // Found the middle index if left sum equals to right sum if (leftSum == rightSum) { return i; } // Update the left sum for next iteration leftSum += nums[i]; } // Return -1 if middle index is found return -1; } } SHOW NOTES Visualization:\nLeft and Right Sum Differences SHOW PROBLEM Problem Statement\nGiven an integer array nums, you need to find a new integer array called differenceArray, where each element at index i in differenceArray is the absolute difference between the sum of all elements to the left of index i and the sum of all elements to the right of index i in the original array nums.\nFormally, for each index i in the array:\n$$ \\text{differenceArray}[i] = | \\text{leftSumi} - \\text{rightSumi} | $$\nWhere:\n$\\text{leftSum}_i$ is the sum of all elements to the left of index i (i.e., nums[0] + nums[1] + ... + nums[i-1]). $\\text{rightSum}_i$ is the sum of all elements to the right of index i (i.e., nums[i+1] + nums[i+2] + ... + nums[nums.length-1]). If there are no elements to the left or right of i, treat the sum as 0. Example 1:\nInput: nums = [2, 5, 1, 6, 1] Expected Output: [13, 6, 0, 7, 14] Explanation: For i = 0: | (0) - (5 + 1 + 6 + 1) | = | 0 - 13 | = 13 For i = 1: | (2) - (1 + 6 + 1) | = | 2 - 8 | = 6 For i = 2: | (2 + 5) - (6 + 1) | = | 7 - 7 | = 0 For i = 3: | (2 + 5 + 1) - (1) | = | 8 - 1 | = 7 For i = 4: | (2 + 5 + 1 + 6) - (0) | = | 14 - 0 | = 14 Example 2:\nInput: nums = [3, 3, 3] Expected Output: [6, 0, 6] Explanation: For i = 0: | (0) - (3 + 3) | = | 0 - 6 | = 6 For i = 1: | (3) - (3) | = | 3 - 3 | = 0 For i = 2: | (3 + 3) - (0) | = | 6 - 0 | = 6 Example 3:\nInput: nums = [1, 2, 3, 4, 5] Expected Output: [14, 11, 6, 1, 10] Explanation: For i = 0: | (0) - (2 + 3 + 4 + 5) | = | 0 - 14 | = 14 For i = 1: | (1) - (3 + 4 + 5) | = | 1 - 12 | = 11 For i = 2: | (1 + 2) - (4 + 5) | = | 3 - 9 | = 6 For i = 3: | (1 + 2 + 3) - (5) | = | 6 - 5 | = 1 For i = 4: | (1 + 2 + 3 + 4) - (0) | = | 10 - 0 | = 10 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 1000 1 \u0026lt;= nums[i] \u0026lt;= 10^5 Go to Leetcode 🔗 SHOW CODE Java class Solution { public int[] leftRightDifference(int[] nums) { int n = nums.length; // Calculate the total sum of nums int totalSum = Arrays.stream(nums).sum(); // Construct prefix sum array based on nums int[] prefix = new int[n]; prefix[0] = nums[0]; for (int i = 1; i \u003c n; i++) { prefix[i] = nums[i] + prefix[i - 1]; } int[] answer = new int[n]; // Iterate over nums to calculate the absolute difference between left and right // sums for each index for (int i = 0; i \u003c n; i++) { int leftSum = prefix[i] - nums[i]; int rightSum = totalSum - prefix[i]; answer[i] = Math.abs(leftSum - rightSum); } return answer; } } Subarray Sums Divisible by K SHOW PROBLEM Problem Statement:\nGiven an integer array nums and an integer k, return the number of non-empty subarrays whose sum is divisible by k.\nA subarray is a contiguous part of an array.\nExample 1:\nInput: nums = [3, 1, 2, -2, 5, -1], k = 3 Output: 7 Explanation: There are 7 subarrays whose sum is divisible by k = 3: [3], [1, 2], [3, 1, 2], [-2, 2], [3, 1, 2, -2, 5], [1, 2, -2, 5], [-2, 5]. Example 2:\nInput: nums = [4, 5, 0, -2, -3, 1], k = 5 Output: 7 Explanation: There are 7 subarrays whose sum is divisible by k = 5: [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]. Example 2:\nInput: nums = [5], k = 9 Output: 0. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 30,000 -10,000 \u0026lt;= nums[i] \u0026lt;= 10,000 2 \u0026lt;= k \u0026lt;= 10,000 Go to Leetcode 🔗 SHOW CODE Java class Solution { public int subarraysDivByK(int[] nums, int k) { // Store frequency of prefix sum modulo k Map prefixSumModCount = new HashMap\u0026lt;\u0026gt;(); // Initialize with mod 0 having a frequency of 1 // (for the case where the prefix sum itself is divisible by k) prefixSumModCount.put(0, 1); // Initialize the prefix sum and the count of valid subarrays int prefixSum = 0, count = 0; for (int num : nums) { // Update the current prefix sum prefixSum += num; // Ensure the modulo is always positive int mod = ((prefixSum % k) + k) % k; // If the same mod has been seen before, // it means there are subarrays whose sum is divisible by k count += prefixSumModCount.getOrDefault(mod, 0); // Update frequency of current mod prefixSumModCount.put(mod, prefixSumModCount.getOrDefault(mod, 0) + 1); } return count; } } SHOW NOTES If the sum of a subarray form index $i$ to $j$ can be divisable by $k$, then: $$ (a[0] + a[1] + \\dots + a[i - 1] + a[i]) \\;\\text{mod} \\;k $$\nequals to\n$$ (a[0] + a[1] + \\dots + a[i] + \\dots + a[j-1] + a[j]) \\;\\text{mod} \\;k $$\nAlgorithm Walkthrough\nInput: nums = [3, 1, 2, -2, 5, -1] and k = 3. Initialization:\nremainder_count = {0: 1} (We start by initializing the count of remainders with 0, assuming a subarray sum of 0 is divisible by k.) cumulative_sum = 0 count = 0 Iteration 1 (num = 3):\ncumulative_sum = 3 remainder = 3 % 3 = 0 count += remainder_count[0] = 1 → count = 1 Update remainder_count: {0: 2} Iteration 2 (num = 1):\ncumulative_sum = 4 remainder = 4 % 3 = 1 count += remainder_count.get(1, 0) = 0 → count = 1 Update remainder_count: {0: 2, 1: 1} Iteration 3 (num = 2):\ncumulative_sum = 6 remainder = 6 % 3 = 0 count += remainder_count[0] = 2 → count = 3 Update remainder_count: {0: 3, 1: 1} Iteration 4 (num = -2):\ncumulative_sum = 4 remainder = 4 % 3 = 1 count += remainder_count[1] = 1 → count = 4 Update remainder_count: {0: 3, 1: 2} Iteration 5 (num = 5):\ncumulative_sum = 9 remainder = 9 % 3 = 0 count += remainder_count[0] = 3 → count = 7 Update remainder_count: {0: 4, 1: 2} Iteration 6 (num = -1):\ncumulative_sum = 8 remainder = 8 % 3 = 2 count += remainder_count.get(2, 0) = 0 → count = 7 Update remainder_count: {0: 4, 1: 2, 2: 1} The total count of subarrays whose sum is divisible by k is 7.\nMonotonic Stack A monotonic stack pattern is a technique commonly used to solve problems that involve finding the next greater or next smaller element in a sequence or array, or finding the largest rectangle in a histogram. There are two types of monotonic stacks: the increasing monotonic stack and the decreasing monotonic stack.\nAn increasing monotonic stack maintains elements in increasing order from bottom to top (i.e., each element is greater than or equal to the element below it). An decreasing monotonic stack maintains elements in decreasing order from bottom to top (i.e., each element is smaller than or equal to the element below it). Creating a monotonic stack commonly involves the following steps (using increasing monotonic stack as an example):\nInitialize an empty stack. Iterate over the array. Compare the current element with the top element of the stack (if the stack is not empty). Pop all elements from the stack that are smaller than the current element. This ensures that the stack only contains elements greater than or equal to the current element. Push the current element onto the stack. Next Greater Element I SHOW PROBLEM The next greater element for an element x in an array is the first element greater than x that appears to the right of x in the same array.\nYou are given two distinct 0-indexed integer arrays, nums1 and nums2, where nums1 is a subset of nums2.\nFor each 0 \u0026lt;= i \u0026lt; nums1.length, find the index j such that nums1[i] == nums2[j], and then determine the next greater element of nums2[j] in nums2. If there is no next greater element, return -1 for that query.\nReturn an array ans of length nums1.length such that ans[i] is the next greater element for nums1[i] as described above.\nExample 1:\nInput: nums1 = [4, 1, 2], nums2 = [1, 3, 4, 2] Output: [-1, 3, -1] Explanation: The next greater element for 4 is not found in nums2, so the answer is -1. The next greater element for 1 is 3. The next greater element for 2 is not found, so the answer is -1. Example 2:\nInput: nums1 = [2, 4], nums2 = [1, 2, 3, 4] Output: [3, -1] Explanation: The next greater element for 2 is 3. The next greater element for 4 is not found, so the answer is -1. Constraints:\n1 \u0026lt;= nums1.length \u0026lt;= nums2.length \u0026lt;= 1000 0 \u0026lt;= nums1[i], nums2[i] \u0026lt;= 10⁴ All integers in nums1 and nums2 are unique. All integers of nums1 are also present in nums2. Go to Leetcode 🔗 SHOW CODE Java class Solution { public int[] nextGreaterElement(int[] nums1, int[] nums2) { // Initialize an empty stack to track elements in nums2 Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); // Map to store the next greater element for each number in nums2 Map\u0026lt;Integer, Integer\u0026gt; nextGreaterMap = new HashMap\u0026lt;\u0026gt;(); // Traverse nums2 from right to left to populate the nextGreaterMap for (int i = nums2.length - 1; i \u003e= 0; i--) { int num = nums2[i]; // Pop elements from stack that are less than or equal to the current number while (!stack.isEmpty() \u0026\u0026 stack.peek() \u003c= num) { stack.pop(); } // If stack is empty, no greater element exists, otherwise top of stack is the next greater element nextGreaterMap.put(num, stack.isEmpty() ? -1 : stack.peek()); // Push the current number onto the stack for future comparisons stack.push(num); } // Prepare the result array for nums1 based on nextGreaterMap int[] result = new int[nums1.length]; // Find the next greater element for each number in nums1 for (int i = 0; i \u003c nums1.length; i++) { result[i] = nextGreaterMap.get(nums1[i]); } return result; } } SHOW NOTES When iterating over an increasing monotonic stack from right to left, if the current element is greater than the top of the stack, it means the current element could be the next greater element for the previous ones. In this case, pop the stack.\nRemove All Adjacent Duplicates in String II SHOW PROBLEM You are given a string s and an integer k. A k-duplicate removal consists of selecting k adjacent and identical letters from s and removing them, causing the left and right sides of the deleted substring to merge together.\nYou must repeatedly perform k-duplicate removals on s until no further removals are possible.\nReturn the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.\nExample 1:\nInput: s = \u0026quot;abcd\u0026quot;, k = 2 Output: \u0026quot;abcd\u0026quot; Explanation: There are no adjacent duplicate characters, so no removal happens. Example 2:\nInput: s = \u0026quot;deeedbbcccbdaa\u0026quot;, k = 3\nOutput: \u0026quot;aa\u0026quot; Explanation: First, delete \u0026ldquo;eee\u0026rdquo; and \u0026ldquo;ccc\u0026rdquo;, which results in \u0026quot;ddbbbdaa\u0026quot;. Then, delete \u0026ldquo;bbb\u0026rdquo;, resulting in \u0026quot;dddaa\u0026quot;. Finally, delete \u0026ldquo;ddd\u0026rdquo;, resulting in \u0026quot;aa\u0026quot;. Example 3:\nInput: s = \u0026quot;pbbcggttciiippooaais\u0026quot;, k = 2\nOutput: \u0026quot;ps\u0026quot;\nConstraints:\n1 \u0026lt;= s.length \u0026lt;= 10^5 2 \u0026lt;= k \u0026lt;= 10^4 s only contains lowercase English letters. Go to Leetcode 🔗 SHOW CODE Java class Solution { public String removeDuplicates(String s, int k) { // Stack to store characters along with their consecutive count Stack\u0026lt;int[]\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); // Iterate over each character in the string for (char c : s.toCharArray()) { // Check if the stack is not empty and the current character is the same as the top character if (!stack.isEmpty() \u0026\u0026 stack.peek()[0] == c) { // Increment the count of top character by 1 stack.peek()[1]++; } else { // Otherwise, push the current character onto the stack with count 1 stack.push(new int[]{c, 1}); } // If the top character's count reaches k, remove it from the stack if (stack.peek()[1] == k) { stack.pop(); } } // Construct result string from the stack StringBuilder builder = new StringBuilder(); for (int[] entry : stack) { builder.append(String.valueOf((char) entry[0]).repeat(entry[1])); } return builder.toString(); } } Largest Rectangle in Histogram SHOW PROBLEM Problem Statement:\nGiven an array of integers heights representing the heights of the histogram\u0026rsquo;s bars, where the width of each bar is 1, return the area of the largest rectangle that can be formed in the histogram.\nExample 1:\nInput: heights = [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The above is a histogram where each bar has a width of 1. The largest rectangle is formed by the bars of height 5 and 6, with a width of 2, yielding an area of 10 units. Example 2:\nInput: heights = [2, 4] Output: 4 Explanation: The largest rectangle is formed by the bar of height 4, yielding an area of 4 units. Constraints:\n1 \u0026lt;= heights.length \u0026lt;= 10^5 1 \u0026lt;= heights[i] \u0026lt;= 10^4 Go to Leetcode 🔗 SHOW CODE Javaimport java.util.Stack; class Solution { public int largestRectangleArea(int[] heights) { // Stack to store indices of the bars Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); int maxArea = 0; // Inerate through all the bars for (int i = 0; i \u003c heights.length; i++) { // While the stack is not empty and the current bar is shorter than the bar at the stack's top while (!stack.isEmpty() \u0026\u0026 heights[i] \u003c heights[stack.peek()]) { // Pop the top index from the stack int height = heights[stack.pop()]; // Calculate the width of the rectangle formed by the popped bar // If the stack is empty, it means the popped bar was the smallest so far, // so the width is 'i' int width = stack.isEmpty() ? i : i - stack.peek() - 1; // Calculate the area with the popped bar as the shortest bar maxArea = Math.max(maxArea, height * width); } // Push the current bar's index onto the stack stack.push(i); } // Process the remaining bars in the stack while (!stack.isEmpty()) { int height = heights[stack.pop()]; // If the stack is empty, it means the popped bar was the smallest so far int width = stack.isEmpty() ? heights.length : heights.length - stack.peek() - 1; maxArea = Math.max(maxArea, height * width); } return maxArea; } } SHOW NOTES To solve this problem, an increasing monotonic stack can be used. When the height of the current bar is less than the height of the bar at the top of the stack, the index of the top bar is popped to calculate the maximal area. Since the elements in the stack are in increasing order, the bar at the top always forms a rectangle with the bar below it, as illustrated in the follow image.\nFor example, consider an increasing monotonic stack containing the elements 2, 5, 6, and the current element is 2 (less than 6) with index 4. The indices of the three elements in the stack are 0, 2, 3, respectively. First, pop the bar with height 6. The area is calculated as height x width = 6 x (4 - 2 - 1). In this case, 2 is the index of element 5, because after popping the element 6, the top of the stack becomes index 2. Therefore, the width is calculated as the index of the current element minus stack.peek() minus 1, if the stack is not empty after popping.\nTree Breadth First Search The Tree Breadth First Search Pattern is a programming technique used for traversing a tree or graph level by level. It explores all nodes at the current depth before moving to the next level. This approach leverages the FIFO (First-In-First-Out) principle of the queue data structure to ensure that all nodes at a given level are processed before their child nodes. It is commonly used to solve problems that require level-wise processing, such as finding the shortest path or performing level-order operations.\nThe Tree Breadth First Search Pattern typically involves the following steps:\nEmpty Check: Check if the tree or graph is null. Queue Initialization: Initialize an empty queue and enqueue the root node. Process and Enqueue: While the queue is not empty, compute the current queue size, dequeue nodes one by one (dequeue times equal to the size of the current level), process each node, and enqueue its children if they exist. Repeat: Continue processing nodes until the queue is empty. Binary Tree Level Order Traversal SHOW PROBLEM Problem Statement:\nGiven the root of a binary tree, return the level order traversal of its nodes\u0026rsquo; values. (i.e., traverse the tree from left to right, level by level).\nExample 1:\nInput: root = [3, 9, 20, null, null, 15, 7] Output: [[3], [9, 20], [15, 7]] Example 2:\nInput: root = [1] Output: [[1]] Example 3:\nInput: root = [] Output: [] Constraints:\nThe number of nodes in the tree is in the range [0, 2000]. -1000 \u0026lt;= Node.val \u0026lt;= 1000. Go to Leetcode 🔗 SHOW CODE Java /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; levelOrder(TreeNode root) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); // Return an empty list if the tree is empty if (root == null) { return result; } // Initialize a queue for level order traversal Queue\u0026lt;TreeNode\u0026gt; queue = new LinkedList\u0026lt;\u0026gt;(); queue.offer(root); // Add the root node to the queue while (!queue.isEmpty()) { int levelSize = queue.size(); // Get the number of nodes at the current level List\u0026lt;Integer\u0026gt; currentLevel = new ArrayList\u0026lt;\u0026gt;(); // Process all nodes at the current level for (int i = 0; i \u003c levelSize; i++) { TreeNode node = queue.poll(); currentLevel.add(node.val); // Add left and right children to the queue if they exist if (node.left != null) { queue.offer(node.left); } if (node.right != null) { queue.offer(node.right); } } // Add the current level's result to the overall result result.add(currentLevel); } return result; // Return the level order traversal result } } Binary Tree Zigzag Level Order Traversal SHOW PROBLEM Problem Statement:\nGiven the root of a binary tree, return the zigzag level order traversal of its nodes\u0026rsquo; values. That is, traverse the tree from left to right for the first level, then right to left for the next level, and alternate between the two directions for each subsequent level.\nExample 1:\nInput: root = [3, 9, 20, null, null, 15, 7] Output: [[3], [20, 9], [15, 7]] Example 2:\nInput: root = [1] Output: [[1]] Example 3:\nInput: root = [] Output: [] Constraints:\nThe number of nodes in the tree is in the range [0, 2000]. -100 \u0026lt;= Node.val \u0026lt;= 100. Go to Leetcode 🔗 SHOW CODE Java /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; zigzagLevelOrder(TreeNode root) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); // Return empty result if tree is empty if (root == null) { return result; } Queue queue = new LinkedList\u0026lt;\u0026gt;(); queue.offer(root); // Add the root node to the queue boolean leftToRight = true; // Flag to alternate direction of traversal while (!queue.isEmpty()) { int levelSize = queue.size(); List\u0026lt;Integer\u0026gt; currentLevel = new LinkedList\u0026lt;\u0026gt;(); // Process each node at the current level for (int i = 0; i \u003c levelSize; i++) { TreeNode node = queue.poll(); // Add node value based on the current direction if (leftToRight) { currentLevel.add(node.val); // Left to right } else { currentLevel.add(0, node.val); // Right to left } // Enqueue left and right children if they exist if (node.left != null) { queue.offer(node.left); } if (node.right != null) { queue.offer(node.right); } } result.add(currentLevel); leftToRight = !leftToRight; // Toggle the direction for the next level } return result; } } SHOW NOTES Visualization\nPopulating Next Right Pointers in Each Node SHOW PROBLEM Problem Statement:\nYou are given a perfect binary tree where all leaves are on the same level, and every parent node has two children. The binary tree is defined as follows:\nstruct Node { int val; Node *left; Node *right; Node *next; } Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.\nExample 1:\nInput: root = [1,2,3,4,5,6,7] Output: [1,#,2,3,#,4,5,6,7,#] Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with # signifying the end of each level. Example 2:\nInput: root = [] Output: [] Constraints:\nThe number of nodes in the tree is in the range [0, 2^12 - 1]. -1000 \u0026lt;= Node.val \u0026lt;= 1000. Go to Leetcode 🔗 SHOW CODE Java /* // Definition for a Node. class Node { public int val; public Node left; public Node right; public Node next; public Node() {} public Node(int _val) { val = _val; } public Node(int _val, Node _left, Node _right, Node _next) { val = _val; left = _left; right = _right; next = _next; } }; */ class Solution { public Node connect(Node root) { // If the root is null, return null as there's nothing to connect if (root == null) { return root; } // Initialize a queue for level order traversal Queue\u0026lt;Node\u0026gt; queue = new LinkedList\u0026lt;\u0026gt;(); queue.offer(root); // Process nodes level by level while (!queue.isEmpty()) { int levelSize = queue.size(); // Get the number of nodes at the current level // Iterate through nodes at the current level for (int i = 0; i \u003c levelSize; i++) { Node node = queue.poll(); // Set the next pointer for all nodes except the last node at the level if (i \u003c levelSize - 1) { node.next = queue.peek(); // Next node at the same level } else { node.next = null; // Last node points to null } // Enqueue left and right children for the next level if (node.left != null) { queue.offer(node.left); } if (node.right != null) { queue.offer(node.right); } } } // Return the root of the tree with updated next pointers return root; } } SHOW NOTES Tree Depth First Search The Tree Depth-First Search Pattern is a programming technique commonly used to explore tree or graph data structures. It begins at the root node and explores all nodes in a single branch as far as possible before backtracking. This approach is especially useful for problems that involve tree traversal or handling hierarchical data.\nImplementing the Tree Depth-First Search Pattern commonly involves the following steps:\nEmpty Check: If the current node is null, return. Leaf Node Check: If both the left and right children of the current node are null, then the current node is a leaf node. Recursive Traversal: Recursively call the function on the left and right children of the current node. Result Computation: Compute the result based on the results obtained from the left and right branches. Path Sum SHOW PROBLEM Problem Description:\nGiven the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that the sum of all the node values along the path equals targetSum.\nA leaf is a node with no children. Example 1:\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22 Output: true Explanation: The root-to-leaf path that sums to the target value is: 5 -\u0026gt; 4 -\u0026gt; 11 -\u0026gt; 2. This path sums to 22. Example 2:\nInput: root = [1,2,3], targetSum = 5 Output: false Explanation: There are two root-to-leaf paths: (1 → 2): The sum is 3. (1 → 3): The sum is 4. Neither of these paths has a sum equal to 5. Example 3:\nInput: root = [], targetSum = 0 Output: false Explanation: Since the tree is empty, there are no root-to-leaf paths. Constraints:\nThe number of nodes in the tree is in the range [0, 5000]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 -1000 \u0026lt;= targetSum \u0026lt;= 1000 Go to Leetcode 🔗 SHOW CODE Java /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean hasPathSum(TreeNode root, int targetSum) { // Return false if the node is null if (root == null) { return false; } // Check if current node is a leaf node if (root.left == null \u0026\u0026 root.right == null) { return root.val == targetSum; } // Recursively check left and right subtrees with the reduced target targetSum -= root.val; // Reduce the target sum by the current node's value return hasPathSum(root.left, targetSum) || hasPathSum(root.right, targetSum); } } SHOW NOTES Visulization\nPath Sum II SHOW PROBLEM Problem Statement:\nGiven the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of node values, not node references.\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\nExample 1:\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22 Output: [[5,4,11,2],[5,8,4,5]] Explanation: There are two paths whose sum equals targetSum: 5 + 4 + 11 + 2 = 22 5 + 8 + 4 + 5 = 22 Example 2:\nInput: root = [1,2,3], targetSum = 5 Output: [] Example 3:\nInput: root = [1,2], targetSum = 0 Output: [] Constraints:\nThe number of nodes in the tree is in the range [0, 5000]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 -1000 \u0026lt;= targetSum \u0026lt;= 1000 Go to Leetcode 🔗 SHOW CODE Java /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; pathSum(TreeNode root, int targetSum) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); findPaths(root, targetSum, new ArrayList\u0026lt;\u0026gt;(), result); return result; } private void findPaths(TreeNode node, int remainingSum, List\u0026lt;Integer\u0026gt; currentPath, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result) { // Base case: return if the node is null if (node == null) return; // Add the current node's value to the path currentPath.add(node.val); // If it's a leaf node and the remaining sum equals the node's value, add the path to the result if (node.left == null \u0026\u0026 node.right == null \u0026\u0026 node.val == remainingSum) { result.add(new ArrayList\u0026lt;\u0026gt;(currentPath)); // Add a copy of current path } else { // Recursively explore left and right subtrees, updating the remaining sum findPaths(node.left, remainingSum - node.val, currentPath, result); findPaths(node.right, remainingSum - node.val, currentPath, result); } // Backtrack: remove the current node from the path currentPath.remove(currentPath.size() - 1); } } SHOW NOTES Visulization:\nPath Sum III SHOW PROBLEM Problem Statement:\nGiven the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.\nA path is a sequence of nodes where each consecutive node in the path is the child of the previous node. A path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\nExample 1:\nInput: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8 Output: 3 Explanation: The paths that sum to 8 are: Path 1: 5 → 3 → 2 Path 2: 5 → 3 Path 3: -3 → 11 Example 2:\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22 Output: 3 Explanation: The paths that sum to 22 are: Path 1: 5 → 4 → 11 → 2 Path 2: 5 → 8 → 4 → 5 Path 3: 8 → 4 → 7 Constraints:\nThe number of nodes in the tree is in the range [0, 1000]. -10^9 \u0026lt;= Node.val \u0026lt;= 10^9 -1000 \u0026lt;= targetSum \u0026lt;= 1000 Go to Leetcode 🔗 SHOW CODE Java /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public int pathSum(TreeNode root, int targetSum) { HashMap\u0026lt;Long, Integer\u0026gt; prefixSumMap = new HashMap\u0026lt;\u0026gt;(); // Base case: a path with current sum matches target sum exitst at the root prefixSumMap.put(0L, 1); return pathSumRecursive(root, 0, targetSum, prefixSumMap); } private static int pathSumRecursive(TreeNode node, long currentSum, int targetSum, Map\u0026lt;Long, Integer\u0026gt; prefixSumMap) { if (node == null) { return 0; } // Update the current sum currentSum += node.val; // Calculate the number of valid paths ending at this node int pathCount = prefixSumMap.getOrDefault(currentSum - targetSum, 0); // Add the current sum to the map prefixSumMap.put(currentSum, prefixSumMap.getOrDefault(currentSum, 0) + 1); // Recur for left and right sub-trees pathCount += pathSumRecursive(node.left, currentSum, targetSum, prefixSumMap); pathCount += pathSumRecursive(node.right, currentSum, targetSum, prefixSumMap); // Remove the current path sum to backtrack prefixSumMap.put(currentSum, prefixSumMap.get(currentSum) - 1); return pathCount; } } Cyclic Sort Matrix Traversal Modified Binary Search 2-Dimensional Prefix Sum Subsets Bitwise XOR Greedy Algorithm Dynamic Programming Backtracking Union Find Topological Sort Ordered Set Trie Top \u0026lsquo;K\u0026rsquo; Elements K-way Merge Two Heaps ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/data-structures-and-algorithms/patterns/1-coding-patterns/","summary":"Simple Two Pointers The Simple Two Pointers technique is commonly used to solve problems involving sorted array, where a set of elements needs to be found that satisfy certain constrains. This approach is efficient in scenarios such as finding a pair that sums to a target or reversing an array or string. In the two simple two pointers technique, two pointers \u0026ndash; typically labeled \u0026ldquo;left\u0026rdquo; and \u0026ldquo;right\u0026rdquo; \u0026ndash; are initialized and move in a specific direction based on the problem\u0026rsquo;s requirements.","title":"Coding Patterns"},{"content":"Introduction to Databases A database is a collection of data that is stored, managed, and accessed electronically. It typically contains one or more tables, which resemble Excel or Google sheets, with data organized into rows and columns. As the number of tables grows, managing the database can become complex, making it essential to design a scalable and maintainable strucutre.\nDatabases can be broadly categorized into two types: Relational database, primarily used for real-time data updates and transactions, and data warehouse, optimized for data analysis and reporting purposes.\nData Modeling Data modeling is the process of creating a conceptual representation of data structures, relationships, and rule to meet business requirements. It serves as a blueprint for designing and managing a database.\nThere are three types of data models: conceptual, logical, and physical. The conceptual data model provides a high-level overview, specifying relationships between objects without technical details. The logical data model refine the conceptual data model by adding more detail, such as fields for each object. The physical data model describe the internal schema of the database, including table structures, storage details, and implementation specifics.\n--- title: Conceptual Data Model --- erDiagram Customer ||--o{ Order : places Order ||--|{ Product : contains --- title: Logical Data Model --- erDiagram Customer { int customerId string name string email } Order { int orderId date orderDate float totalAmount } Product { int productId string productName float price } Customer ||--o{ Order : places Order ||--|{ Product : contains --- title: Physical Data Model --- erDiagram Customer { int customerId PK varchar name varchar email } Order { int orderId PK date orderDate float totalAmount int customerId FK } Product { int productId PK varchar productName decimal price } OrderItem { int orderItemId PK int orderId FK int productId FK int quantity } Customer ||--o{ Order : places Order ||--|{ OrderItem : includes OrderItem ||--|{ Product : contains Example: University Enrollment Management System Entities In database design, an entity is a distinct object that typically represents real-world objects, events, or concepts. Entities are represented as tables in a relational database, and they are similar to classes in object-oriented design. Each row in the table represents an instance of the entity. Each entity has attributes that describe its characteristics. For example, a Student entity may have attributes like student_id, first_name, last_name, and date_of_birth, among others. Entities can be related to one another, and these relationships are often captured using foreign keys or relationship tables, which link entities together based on logical associations. For example, a Student might be linked to a Course through an enrollment relationship.\nIdentifying Entities Identifying entities in database design is a crucial step, as entities form the foundation of a database. A useful approach for identifying entities is to clarify the design objectives and look for nouns in the objective statement. For example, consider the University Enrollment Management System. The objective statement might be:\n\u0026ldquo;The University Enrollment Management System\u0026rdquo; is designed to help a university track enrolled students, the subjects they are taking, and the teachers assigned to those subjects\u0026quot;.\nIn this sentence, the nouns university, student, subject, and teacher are potential entities, as they represent key objects or concepts that the system needs to track.\n--- title: Identifying Entities --- erDiagram UNIVERSITY STUDENT erDiagram TEACHER SUBJECT Defining Attributes In database design, an attribute describes the characteristics of an entity. In a relational database, attributes are typically represented as columns in a table. Defining entity attributes is a crucial step in database design, as it ensures that the entity captures all the necessary details required by the system. When defining attributes, it\u0026rsquo;s important to consider what properties or characteristics the entity possesses.\nFor example, in a University Enrollment Management System, the Student entity might have attributes like first_name, last_name, date_of_birth, and address. After identifying the necessary attributes, the next step is to specify the approapriate data type for each attribute. For instance, attributes like first_name, last_name, and address would typically use the TEXT data type, while the date_of_birth attribute would be defined with the DATE data type.\n--- title: Defining Attributes --- erDiagram UNIVERSITY { string name string address } STUDENT { string first_name string last_name date date_of_birth string address } erDiagram SUBJECT { string subject_name string category string students_enrolled } TEACHER { string first_name string last_name date date_of_birth string address string subject_taught } Normalization Normalization in database design is the process of organizing the attributes of entities and their relationships to reduce data redundency, avoid operational anomalies, and improve data integrity. Normalization involves decomposing a large, complex database into smaller, simpler tables while preserving the relationships between entities. This decomposition follows a set of rules called normal forms. In real-world database design, the three most commonly used normal normal forms are First Normal Form (1NF), Second Normal Form (2NF), and Third Normal Form (3NF).\nFirst Normal Form First Normal Form (1NF) is a property of a relational database table that ensures the table is structured properly. It follows the following conditions:\nEach column must contain atomic values, meaning that the value in a field should be indivisible and not contain sets or lists of values. Each row must be unique, which can be achieved by using a primary key to uniquely identify each record. All values in single column should be of the same data type. A Primary Key is a column (or a set of columns) in a relational database table that uniquely identifies each row in that table. It satisfies the following conditions:\nThe value in the primary key must be unique for each row. The value in the primary key must not be null for any record. The value in the primary key should generally be immutable, meaning it should not change once assigned. When designing tables, assess if any combination of columns can be used to uniquely identify a record. If such a combination exists, those columns can form the primary key. If no suitable combination is found, create a new column to serve as the primary key.\nA primary key can be a set of columns when a single column is not sufficient to uniquely identify a row. For example, in the following table, neither the StudentID nor the CourseID alone can uniquely identify a row, because a student might enroll mutiple courses, and a course can have multiple students. However, the combination of both columns can uniquely identify each enrollment record.\nStudentID CourseID EnrollmentDate 1 CS101 2024-01-01 1 MATH101 2024-01-02 2 CS101 2024-01-03 1NF: Student In the following Student table, there is no single field that can uniquely identify a row. Therefore, it is necessary to add a new field. such as StudentID, to ensure each row has a unique identifier. Additionally, the Address field may contain multiple values, such as unit number, street number, street name, suburb, city, state, country, and postcode. To comply with the First Normal Form (1NF), the Address firld must be divided into multiple separate columns, ensuring that each column contains only atomic values.\n--- title: Violation of 1NF - Student --- erDiagram STUDENT { string first_name string last_name date date_of_birth string address } --- title: Comply with 1NF - Student --- erDiagram STUDENT { number student_id PK string first_name string last_name date date_of_birth number unit_number number street_number string street_name string suburb string city string state string country string postcode } 1NF: Subject --- title: Violation of 1NF - Subject --- erDiagram SUBJECT { string subject_name string category string students_enrolled } --- title: Comply with 1NF - Subject --- erDiagram SUBJECT { number subject_id PK string subject_name string category string students_enrolled } 1NF: Teacher --- title: Violation of 1NF - Teacher --- erDiagram TEACHER { string first_name string last_name date date_of_birth string address string subject_taught } --- title: Comply with 1NF - Teacher --- erDiagram TEACHER { number teacher_id PK string first_name string last_name date date_of_birth number unit_number number street_number string street_name string suburb string city string state string country string postcode string subject_taught } 1NF: University --- title: Violation of 1NF - University --- erDiagram UNIVERSITY { string name string address } --- title: Comply with 1NF - University --- erDiagram UNIVERSITY { number university_id PK string name number unit_number number street_number string street_name string suburb string city string state string country string postcode } Second Normal Form The Second Normal Form (2NF) in database design is a level of normalization that builds upon the First Normal Form (1NF). A table is in 2NF if every non-key attribute is fully functionally dependent on the entire primary key, not just part of it, particularly in tables with composite primary keys (a key made up of two or more columns).\nRelationships Relationship in database design refers to the association between different entities (tables) in a database. It defines how data in one table is related to data in another table, enabling efficient organization and retrival of data. Relationships are established through a foreign key, which is a column in one table that references the primary key of another table. There are four main types of relationships: One-to-One (1:1), One-to-Many (1:N), Many-to-Many (N:M), and Self-Reference.\nIn a One to One relationship, each record in one table is related to exactly one record in another table. For example, consider a Person table and a Passport table, where each person has one unique passport, and each passport is associated with only one person. This type of relationship is relatively rare in real-world database design.\nThe One to Many relationship is the most common type in real-world database design. In a 1:N relationship, one record in a table can be linked to multiple records in another table. For example, in a Department table and an Employee table, one department can have many employees, but each employee blongs to exactly one department. This is a typical relational model for most business applications.\nThe Many-to-Many relationship is common but often requires an intermediary table to properly represent the association. In an N:M relationship, multiple records in one table can be asoociated with multiple records in another table. For instance, in a Student table and a Course table, a student can enroll in many courses, and each course can have many students enrolled. This relationship is typically handled by a joining table, such as Student_Course.\nIn a Self-Referencing relationship, a table is related to itself. In other words, a record in the table is associated with another record in the same table. For example, in an Employee table, each employee has a Manager, and that manager may also have a manager. This type of relationship is useful for representing hierarchical structures, such as organizational charts.\nIn database design, a foreign key is a column that references the primary key of another table. It is used to establish a relationship between two tables, ensuring referential integrity and maintaining consistent data across the database.\n2NF: Subject \u0026amp; Category In the following Subject table, the subject_name is dependent on the primary key subject_id, but the category is not fully dependent on the primary key, which violates 2NF. To resolve this issue, a new Category table should be created with two fields: category_id as the primary key and subject_id as a foreign key. The two tables have a One-to-Many relationship, where each category can have many subjects, while each subject bleongs to exactly one category.\n--- title: Violation of 2NF - Subject --- erDiagram SUBJECT { number subject_id PK string subject_name string category } --- title: Comply with 2NF - Subject --- erDiagram SUBJECT { number subject_id PK string subject_name number category_id FK } CATEGORY { number category_id PK string category_name } CATEGORY ||--|{ SUBJECT : \"\" 2NF: Student \u0026amp; Subject In the following Subject table, the subject_id and students_enrolled create a Many-to-Many relationship. However, relational databases should not represent Many-to-Many relationships directly in s single table. This is because a single table cannot handle multiple instances of related data (such as multiple students enrolled in multiple subjects) within a single field. To resolve this issue, a junction table is introduced. It breaks down the Many-to-Many relationship into two One-to-Many relationships, ensuring data integrity and normalization.\n--- title: Violation of 2NF - Subject --- erDiagram SUBJECT { number subject_id PK string subject_name string students_enrolled } subject_id subject_name students_name 1 Math Alice, Bob, Charlie 2 History David, Emily, Frank, Grace 3 Science Helen, Ian In the above table, the students_enrolled field violates First Normal Form (1NF), which requires each column to contain only atomic values. Additionally, this design leads to data redundancy. For example, if the student Alice enrolls in multiple courses such as Math, History, and Science. her name will be repeated in each row, causing unnecessary duplication of data.\nFurthermore, this design makes data manipulation more complex. For instance, when a student drops a course or a new student enrolls in a course, the list of students in the students_enrolled column must be manually updated, which is error-prone and inefficient.\n--- title: Comply with 2NF - Subject --- erDiagram SUBJECT { number subject_id PK string subject_name } STUDENT { number student_id PK string students_enrolled } ENROLLMENT { number subject_id FK number student_id FK } SUBJECT ||--|{ ENROLLMENT : \"has\" STUDENT ||--|{ ENROLLMENT : \"enrolled in\" Comply with 2NF: Real-World Example 2NF: Teacher --- title: Violation of 2NF - Teacher (subject_taught) --- erDiagram TEACHER { number teacher_id string first_name string last_name date date_of_birth string subject_taught } --- title: Comply with 2NF - Teacher --- erDiagram TEACHER { number teacher_id string first_name string last_name date date_of_birth } SUBJECT { number subject_id PK string subject_name number category_id FK number teacher_id FK } TEACHER ||--|{ SUBJECT : \"teaches\" 2NF: University --- title: Comply with 2NF - UNIVERSITY --- erDiagram UNIVERSITY { number university_id PK string name } SUBJECT { number subject_id PK string subject_name number category_id FK number teacher_id FK number university_id FK } UNIVERSITY ||--|{ SUBJECT : \"\" Third Normal From Third Normal Form (3NF) is a level of normalization that satisfies Second Normal Form (2NF) and eliminates transitive dependencies. In simpler terms, a non-key attribute in a table should not depend on another non-key attrubute. For example, if A $\\rightarrow$ B and B $\\rightarrow$ C, then A $\\rightarrow$ C, which means C should be moved to a separate table to avoid redundency. This process helps reduce data redundency and improves the efficiency of relational databases.\n3NF: Student In the following Student table, the non-key attributes (unit_number, street_number, street_name, suburb, city, state, country, and postcode) are not directly dependent on the primary key student_id; instead, they depend on the student\u0026rsquo;s address. This results in a transitive dependency, which violates 3NF. Furthermore, since multiple students may share the same address, these address attributes will be repeated for each student, leading to data redundency.\n--- title: Violation of 3NF - Student --- erDiagram STUDENT { number student_id PK string first_name string last_name date date_of_birth number unit_number number street_number string street_name string suburb string city string state string country string postcode } --- title: Comply with 3NF - Student --- erDiagram STUDENT { number student_id PK string first_name string last_name date date_of_birth number address_id FK } ADDRESS { number address_id PK number unit_number number street_number string street_name string suburb string city string state string country string postcode } STUDENT ||--|{ ADDRESS : \"\" 3NF: Teacher --- title: Comply with 3NF - Teacher --- erDiagram TEACHER { number teacher_id PK string first_name string last_name date date_of_birth number address_id FK } ADDRESS { number address_id PK number unit_number number street_number string street_name string suburb string city string state string country string postcode } TEACHER ||--|{ ADDRESS : \"\" 3NF: University --- title: Comply with 3NF - University --- erDiagram UNIVERSITY { number university_id PK string name number address_id FK } ADDRESS { number address_id PK number unit_number number street_number string street_name string suburb string city string state string country string postcode } UNIVERSITY ||--|{ ADDRESS : \"\" Design Considerations Determine Data Types \u0026amp; Precision Determining data types and precision in database design is crucial for ensuring optimal storage, performance, and accuracy of data. There are typically three steps to determine the apprpriate data type and precision for a field:\nIdentifying the nature of the field: Determine the type of data the field will store—whether it\u0026rsquo;s numeric, string, or data/time. For example, the student_id field might be of type INT, while the first_time field might of type CHAR or VARCHAR. Choose the smallest sufficient data type: Select the samllest data type that can accommodate the required values. For example, if a field\u0026rsquo;s values range from -128 to 127, use TINYINT instead of INT to optimize performance and storage efficiency. Set precision and scale for numeric values: For numeric fields, it\u0026rsquo;s important to define the precision (total number of digits) and scale (number of digits after the decimal point). For example, a price field should be set to DECIMAL(10,2), which allows for 10 digits in total, with 2 digits after the decimal point. Integrity Constraints Integrity Constraints in database design are rules that ensure the accuracy, consistency, and validity of data. There are several types of integrity constraints, each serving a specific purpose:\nEntity Integrity Entity Integrity ensures that each record in a table is unique and identifiable. This is achieved by setting a column in a table as a primary key. For example, the student_id field must be unique for each record in the Student table.\nCREATE TABLE Student ( student_id INT PRIMARY KEY, first_name VARCHAR(100), last_name VARCHAR(100) ); Referencial Integrity Referencial Integrity ensures that relationships between tables are maintained consistently. Foreign keys enforce this constraint by ensuring that a value in one table corresbonds to a valid value in another table. For example, the student_id field in the Enrollment table serves as a foreign key referencing the primary key student_id in the Student table.\nCREATE TABLE Enrollment ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, FOREIGN KEY (student_id) REFERENCES Students(student_id) ); Domain Integrity Domain Integrity ensures that the data entered in a column matches the defined data type, format, and range. This is enforced using data types. default values. and check constraints. For example, the price field should only store positive values.\nCREATE TABLE Product ( product_id INT PRIMARY KEY, product_name VARCHAR(100), price DECIMAL(10, 2) CHECK (price \u0026gt; 0) ); User-Defined Integrity User-defined integrity enforces business rules specific to the application or domain. For instance, in the Enrollment table, the combination of student_id and course_id should be unique to prevent a student from enrolling in the same course more than once.\nCREATE TABLE Enrollment ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, UNIQUE (student_id, course_id) ); Null Integrity Null integrity ensures that certain fields cannot store NULL values. This is enforced by defining the column with the NOT NULL constraint. For example, the student_id field in the Student table must not be NULL because it is used to identify each record.\nCREATE TABLE Student ( student_id INT PRIMARY KEY NOT NULL, first_name VARCHAR(100) NOT NULL, last_name VARCHAR(100) NOT NULL ); ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/database/database-design/1-database-design/","summary":"Introduction to Databases A database is a collection of data that is stored, managed, and accessed electronically. It typically contains one or more tables, which resemble Excel or Google sheets, with data organized into rows and columns. As the number of tables grows, managing the database can become complex, making it essential to design a scalable and maintainable strucutre.\nDatabases can be broadly categorized into two types: Relational database, primarily used for real-time data updates and transactions, and data warehouse, optimized for data analysis and reporting purposes.","title":"Database Design"},{"content":"Recursion Recursion is a programming technique where a function repeatedly calls itself until it reaches a base case, whcih stops the recursion and allows it to return a result. It is a way of breaking down complex problems into smaller, simpler subproblems that are eaiser to solve.\nHead Recursion Head Recursion is a type of recursion where a function makes its recursive call first, immediately after checking the base case, and performs all other operations only after the recursive call returns.\nSHOW CODE: Head Recursion Head Recursion void printNumbers(int n) { if (n == 0) { return; // Base case } printNumbers(n - 1); // Recursive call printf(\"%d\\n\", n); // Processing after recursion } Call Stack Operation Current Value of n headRecursion(3) Call function 3 headRecursion(2) Call function 2 headRecursion(1) Call function 1 headRecursion(0) Base case, exit 0 Unwinding begins: printf(1) Print 1 1 printf(2) Print 2 2 printf(3) Print 3 3 Tail Recursion Tail Recursion is a type of recursion where a function makes its recursive call as the last operation in its body. with no further operations after the call. This type of recursion can be optimized by the compiler into an iterative loop through tail call optimization (TCO), which help reduce memory consumption by the reusing the stack frame.\nSHOW CODE: Tail Recursion Tail Recursion void tailRecursion(int n) { if (n \u003e 0) { printf(\"%d \", n); // Operation first tailRecursion(n - 1); // Recursive call at the end } } Call Stack Operation Current Value of n tailRecursion(3) Print 3 3 tailRecursion(2) Print 2 2 tailRecursion(1) Print 1 1 tailRecursion(0) Base case, exit 0 Tail recursion is generally perfered for performance when recursion depth is large because it can be optimized into an iterative process.\nSHOW CODE: Tail Recursion Optimization Tail Recursion Optimization void tailRecursionOptimized(int n) { while (n \u003e 0) { printf(\"%d \", n); // Operation first n--; // Decrement n, same as `tailRecursion(n - 1)` } } In the above code, optimized Loop replaces recursion with a loop, ensuring only a single stack frame is used.\nConditions for Tail Recursion: The recursive call must be the last operation in the function, and its result must be immediately returned without any further computation after the call.\nSHOW CODE: Tail Recursive Function Tail Recursive Function // Tail recursive function to calculate factorial int factorialTailRecursion(int n, int accumulator) { if (n == 0) { return accumulator; // Base case: return accumulated result } return factorialTailRecursion(n - 1, accumulator * n); // Recursive call is the last operation } SHOW CODE: Non-tail Recursive Function Non-tail recursive // Non-tail recursive function to calculate factorial int factorialNonTailRecursion(int n) { if (n == 0) { return 1; // Base case } return n * factorialNonTailRecursion(n - 1); // Recursive call is not the last operation } Tree Recursion Tree recursion is a type of recursion in which a function makes multiple recursive calls to itself in its body, it creates a tree-like data structure, as each call can branch into multiple additional calls.\nSHOW CODE C public int fib(int n) { if (n \u003c= 1) { return n; } return fib(n - 1) + fib(n - 2); } Recursion Tree Analysis:\n--- title: Recursion Tree Analysis - fibonacci sequence --- graph TD L0((\"fib\\(5\\)\")) --\u003e L1((\"fib\\(4\\)\")) L0 --\u003e L2((\"fib\\(3\\)\")) L1 --\u003e L3((\"fib\\(3\\)\")) L1 --\u003e L4((\"fib\\(2\\)\")) L2 --\u003e L5((\"fib\\(2\\)\")) L2 --\u003e L6((\"fib\\(1\\)\")) L3 --\u003e L7((\"fib\\(2\\)\")) L3 --\u003e L8((\"fib\\(1\\)\")) L4 --\u003e L9((\"fib\\(1\\)\")) L4 --\u003e L10((\"fib\\(0\\)\")) L5 --\u003e L11((\"fib\\(1\\)\")) L5 --\u003e L12((\"fib\\(0\\)\")) L7 --\u003e L13((\"fib\\(1\\)\")) L7 --\u003e L14((\"fib\\(0\\)\")) Array An array is a data structure that stores a collection of elements of the same type in a fixed-size, continguous block of memory. Arrays can be categorized into two types: static arrays and dynamic arrays.\nA static array has a fixed size that cannot be changed after its declaration. Memory for a static array is allocated at compile time, and its size must be explicitly specified.\nIn contrast, a dynamic array allows its size to be adjusted during runtime, enabling it to grow or shrink as needed. Unlike static arrays, the size of a dynamic array does not need to be specified at the time of declaration, and memory is allocated dynamically from the heap.\nImplementation of Static Arrays Implementation of Dynamic Arrays Compiler\u0026rsquo;s Memory Layout for Arrays The address of an array element is determined at runtime. Array elements are stored in a continguous block of memory, and the compiler calculates each element\u0026rsquo;s address using its index and the size of each element.\n1-Dimentional Array Element Access Formula (0-based index): $\\text{Addr}_{A[i]} = B + i \\times W$\nB: Base Address i: Zero-based Index of Each Element W: Size of Each Element SHOW CODE C #include \u0026lt;stdio.h\u0026gt; int main() { int arr[5] = {10, 20, 30, 40, 50}; for (int i = 0; i \u003c 5; i++) { void *addr_i = (void *) arr + (i * sizeof(int)); printf(\"Element at index %d: %d \\t Address: %p\\n\", i, arr[i], addr_i); } return 0; } SHOW OUTPUT Output Element at index 0: 10 Address: 0x7ff7bb0b7170 Element at index 1: 20 Address: 0x7ff7bb0b7174 Element at index 2: 30 Address: 0x7ff7bb0b7178 Element at index 3: 40 Address: 0x7ff7bb0b717c Element at index 4: 50 Address: 0x7ff7bb0b7180 2-Dimentional Array Element Access Formula (Row Major Order): $\\text{Addr}_{A[i][j]} = \\text{B} + [(i \\times \\text{C}) + j] \\times \\text{W}$\nB: Base Address i: Zero-based Row Index of Each Element j: Zero-based Column Index of Each ELement C: Number of Columns W: Size of Each Element SHOW CODE C #include \u0026lt;stdio.h\u0026gt; int main() { int arr[2][3] = {{1, 2, 3}, {4, 5, 6}}; for (int i = 0; i \u003c 2; i++) { for (int j = 0; j \u003c 3; j++) { void *addr_ij = (void *) \u0026arr + (i * 3 + j) * sizeof(int); printf(\"Element at [%d][%d]: %d, Address: %p\\n\", i, j, arr[i][j], addr_ij); } } return 0; } SHOW OUTPUT Output Element at [0][0]: 1, Address: 0x7ff7b2c64170 Element at [0][1]: 2, Address: 0x7ff7b2c64174 Element at [0][2]: 3, Address: 0x7ff7b2c64178 Element at [1][0]: 4, Address: 0x7ff7b2c6417c Element at [1][1]: 5, Address: 0x7ff7b2c64180 Element at [1][2]: 6, Address: 0x7ff7b2c64184 Why do most compilers use 0-based indexing? Take a 1-dimentional array as an example, the element access formula for a 0-based index is $\\text{Addr}_{A[i]} = B + i \\times W$. This formula requires two operations (multiplication and addition) to access each element in the array.\nIn contract, the formula for 1-based indexing is $\\text{Addr}_{A[i]} = B + (i - 1) \\times W$. This requires three operations (multiplication. subtraction, and addition). Compared to 0-based indexing, 1-based indexing introduces one additional operation, which becomes a significant overhead when dealing with large size arrays.\nString Matrix Linked List Stack Queue A Queue is a linear data structure that follows the First In, First Out (FIFO) principle, meaning elements are added to the back and removed from the front. There are four main types of queues: Simple Queue, Circular Queue, Double-Ended Queue (Deque), and Priority Queue.\nSimple Queue A Simple Queue is a basic type of queue data structure in which elements are added to the back and removed from the front, following the First In, First Out (FIFO) principle.\nImplementation of Simple Queue Array with a single pointer SHOW CODE Java class SimpleQueue { private final int[] queue; private final int capacity; private int rear; public SimpleQueue(int capacity) { this.queue = new int[capacity]; this.capacity = capacity; this.rear = -1; } public boolean isEmpty() { return rear == -1; } private boolean isFull() { return rear == capacity - 1; } public int size() { return rear + 1; } public void enqueue(int element) { if (this.isFull()) { System.out.println(\"Queue is full.\"); } else { rear++; queue[rear] = element; } } public int dequeue() { if (this.isEmpty()) { System.out.println(\"Queue is empty.\"); return -1; } int frontElement = queue[0]; // Shift all elements to the left for (int i = 0; i \u003c rear; i++) { queue[i] = queue[i + 1]; } rear--; return frontElement; } public int peek() { if (this.isEmpty()) { System.out.println(\"Queue is empty.\"); return -1; } return queue[0]; } } public class Main { public static void main(String[] args) { SimpleQueue queue = new SimpleQueue(5); queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); System.out.println(\"Front element: \" + queue.peek()); // Expected: 10 System.out.println(\"Dequeued: \" + queue.dequeue()); // Expected: 10 queue.enqueue(40); queue.enqueue(50); System.out.println(\"Queue size: \" + queue.size()); // Expected: 4 System.out.println(\"Dequeued: \" + queue.dequeue()); // Expected: 20 } } The implementation of a queue using an array with a single pointer (rear) is inefficient for deletion because the remaining elements need to be shifted left after every dequeue operation.\nArray with two pointers SHOW CODE Java class SimpleQueue { private final int[] queue; private final int capacity; private int front; private int rear; public SimpleQueue(int capacity) { this.capacity = capacity; queue = new int[capacity]; this.front = -1; this.rear = -1; } public boolean isEmpty() { return front == -1; } private boolean isFull() { return rear + 1 == capacity; } public int size() { if (this.isEmpty()) { return 0; } return rear - front + 1; } public void enqueue(int element) { if (this.isFull()) { System.out.println(\"Queue is full.\"); } else { // Set front to 0 when the first element is added if (front == -1) { front = 0; } rear++; queue[rear] = element; } } public int dequeue() { if (this.isEmpty()) { System.out.println(\"Queue is empty.\"); return -1; } else { int frontElement = queue[front]; // Reset both pointers to -1 when the queue has only one element if (front == rear) { front = -1; rear = -1; } else { // Move front to the next element front++; } return frontElement; } } public int peek() { if (this.isEmpty()) { System.out.println(\"Queue is empty.\"); return -1; } else { return queue[front]; } } } public class Main { public static void main(String[] args) { SimpleQueue queue = new SimpleQueue(5); queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); System.out.println(\"Front element: \" + queue.peek()); // Expected: 10 System.out.println(\"Dequeued: \" + queue.dequeue()); // Expected: 10 queue.enqueue(40); queue.enqueue(50); System.out.println(\"Queue size: \" + queue.size()); // Expected: 3 System.out.println(\"Dequeued: \" + queue.dequeue()); // Expected: 20 } } Implementing a queue using an array with two pointers (front and rear) is more efficient for deletion compared to using a single pointer (rear), as it eliminates the need to shift elements to the left after each dequeue operation. However, this approach has drawback: the space in front of the front pointer cannot be reused until the array is empty, leading to potential wasted memory.\nLinked List with a pointer SHOW CODE Java class Node { int data; Node next; public Node(int data) { this.data = data; this.next = null; } } class SimpleQueue { private Node front; private int size; public SimpleQueue() { front = null; size = 0; } // Check if the queue is empty public boolean isEmpty() { return size == 0; } // Get the current size of the queue public int size() { return size; } // Display the elements of the queue public void display() { if (isEmpty()) { System.out.println(\"Queue is empty.\"); return; } // Traverse through the queue and print its elements Node temp = front; // Use StringBuilder to efficiently build the string StringBuilder builder = new StringBuilder(); while (temp != null) { builder.append(temp.data).append(\"\u003c-\"); temp = temp.next; } // Remove the last \"\u003c-\" (extra arrow at the end) builder.setLength(builder.length() - 2); System.out.println(builder); } // Add an element to the rear (end) of the queue public void enqueue(int data) { Node node = new Node(data); // If the queue is empty, the new node becomes the front of the queue if (isEmpty()) { front = node; } else { Node temp = front; // Traverse the list to find the last node (rear of the queue) while (temp.next != null) { temp = temp.next; } temp.next = node; // Link the new node at the end of the queue } size++; // Increment the size of the queue } // Remove and return the element from the front of the queue public int dequeue() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } int dequeued = front.data; front = front.next; size--; return dequeued; } // Return the element from the front of the queue without removing it public int peek() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } return front.data; } } public class Main { public static void main(String[] args) { SimpleQueue queue = new SimpleQueue(); // Enqueue some elements into the queue queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); queue.enqueue(40); System.out.println(\"Queue after enqueuing elements:\"); queue.display(); // Display the current state of the queue // Dequeue two elements and print them System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Queue after dequeuing elements:\"); queue.display(); // Display the queue after dequeuing elements // Peek at the front element without removing it System.out.println(\"Peek front: \" + queue.peek()); // Print the current size of the queue System.out.println(\"Queue size: \" + queue.size()); } } Linked List with two pointers SHOW CODE Java // Node class representing each element in the queue class Node { int data; Node next; public Node(int data) { this.data = data; this.next = null; } } // SimpleQueue class implementing queue operations using a linked list class SimpleQueue { private Node front; private Node rear; private int size; // Constructor to initialize the queue public SimpleQueue() { front = rear = null; size = 0; } // Check if the queue is empty public boolean isEmpty() { return size == 0; } // Get the size of the queue public int size() { return size; } // Display the elements in the queue public void display() { if (isEmpty()) { System.out.println(\"Queue is empty.\"); return; } // Build a string representation of the queue StringBuilder builder = new StringBuilder(); Node temp = front; while (temp != null) { builder.append(temp.data).append(\"\u003c-\"); temp = temp.next; } // Remove the trailing \" \u003c- \" builder.setLength(builder.length() - 2); System.out.println(builder); } // Enqueue: Add an element to the rear of the queue public void enqueue(int data) { Node newNode = new Node(data); // If the queue is empty, both front and rear point to the new node if (isEmpty()) { front = rear = newNode; } else { // Add new node at the end and update the rear pointer rear.next = newNode; rear = newNode; } size++; } // Dequeue: Remove and return the element from the front of the queue public int dequeue() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } // Get the front element and update the front pointer int dequeuedData = front.data; front = front.next; // If the queue becomes empty, reset the rear to null if (front == null) { rear = null; } size--; return dequeuedData; } // Peek: Get the front element without removing it public int peek() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } return front.data; } } // Main class to test the queue implementation public class Main { public static void main(String[] args) { SimpleQueue queue = new SimpleQueue(); // Enqueue elements into the queue queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); queue.enqueue(40); // Display the queue after enqueuing elements System.out.println(\"Queue after enqueuing elements:\"); queue.display(); // Dequeue elements from the queue System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Dequeued: \" + queue.dequeue()); // Display the queue after dequeuing elements System.out.println(\"Queue after dequeuing elements:\"); queue.display(); // Peek the front element and show the queue size System.out.println(\"Peek front: \" + queue.peek()); System.out.println(\"Queue size: \" + queue.size()); } } Circular Queue A Circular Queue is a variation of the standard queue data structure that reuses the space freed by dequeue operations by connecting the last position back to the front position. It overcomes the limitation of a simple fixed-size queue, where the space at the front of the queue cannot be reused after dequeueing elements.\nArray Implementation SHOW CODE Java class CircularQueue { private final int[] queue; private int front; private int rear; private final int capacity; private int size; public CircularQueue(int capacity) { this.capacity = capacity; queue = new int[capacity]; front = rear = -1; // Initialize both front and rear as -1 to indicate the queue is empty size = 0; } // Check if the queue is empty public boolean isEmpty() { return size == 0; } // Check is the queue is full public boolean isFull() { return size == capacity; } // Get the current size of the queue public int size() { return size; } // Display the elements of the queue public void display() { if (isEmpty()) { System.out.println(\"Queue is empty.\"); return; } StringBuilder builder = new StringBuilder(); for (int i = 0; i \u003c size; i++) { builder.append(queue[(front + i) % capacity]); if (i != size - 1) { builder.append(\"\u003c-\"); } } System.out.println(builder); } public void enqueue(int data) { if (isFull()) { throw new IllegalStateException(\"Queue is full.\"); } if (isEmpty()) { front = 0; } // Move the rear pointer in a circular manner rear = (rear + 1) % capacity; // Add the data to the rear of the queue queue[rear] = data; // Increase the size size++; } public int dequeue() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } int dequeued = queue[front]; if (front == rear) { // If the queue become empty, reset both front and rear to -1 front = rear = -1; } else { // Move the front pointer in a circular manner front = (front + 1) % capacity; } size--; // Decrease the size return dequeued; } public int peek() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } return queue[front]; } } public class Main { public static void main(String[] args) { CircularQueue queue = new CircularQueue(5); queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); queue.enqueue(40); queue.enqueue(50); System.out.println(\"Queue after enqueuing 5 elements:\"); queue.display(); // Attempt to enqueue an element to a full queue (throws exception) try { queue.enqueue(60); } catch (IllegalStateException e) { System.out.println(e.getMessage()); } // Dequeue two elements System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Queue after dequeuing 2 elements:\"); queue.display(); // Enqueue two more elements queue.enqueue(60); queue.enqueue(70); System.out.println(\"Queue after enqueuing 2 more elements:\"); queue.display(); // Peek at the front element System.out.println(\"Front element: \" + queue.peek()); // Display the current size of the queue System.out.println(\"Queue size: \" + queue.size()); } } Linked List Implementation SHOW CODE Java class Node { int data; Node next; public Node(int data) { this.data = data; this.next = null; } } class CircularQueue { private Node front; private Node rear; private int size; public CircularQueue() { front = rear = null; size = 0; } // Check if the queue is empty public boolean isEmpty() { return size == 0; } // Get the size of the queue public int size() { return size; } // Display the elements of the queue public void display() { if (isEmpty()) { System.out.println(\"Queue is empty.\"); return; } Node temp = front; StringBuilder builder = new StringBuilder(); do { builder.append(temp.data).append(\"\u003c-\"); temp = temp.next; } while (temp != front); // Loop until reach the front newNode again builder.setLength(builder.length() - 2); System.out.println(builder); } // Add an element to the queue public void enqueue(int data) { Node newNode = new Node(data); // Both front and rear will point to the new node if queue is empty if (isEmpty()) { front = rear = newNode; } else { rear.next = newNode; // Connect the current rear to the new node rear = newNode; // Move the rear to the new node } rear.next = front; // Connect the rear's next to the front size++; } // Remove the front element in the queue public int dequeue() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty\"); } int dequeued = front.data; // Set both front and rear to null if there is only one element if (front == rear) { front = rear = null; } else { front = front.next; // Move the front node to the next rear.next = front; // Maintain the circular link } size--; return dequeued; } // Get the front element without removing it public int peek() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } return front.data; } } public class Main { public static void main(String[] args) { CircularQueue queue = new CircularQueue(); // Enqueue elements queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); queue.enqueue(40); // Display queue elements System.out.println(\"Queue after enqueuing elements:\"); queue.display(); // Dequeue elements System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Dequeued: \" + queue.dequeue()); // Display queue elements after dequeueing System.out.println(\"Queue after dequeuing elements:\"); queue.display(); // Peek front element System.out.println(\"Peek front: \" + queue.peek()); // Display the size of the queue System.out.println(\"Queue size: \" + queue.size()); } } Double Ended Queue Priority Queue Tree Graph A graph is a fundamental data structure used to represent the connections or relationships between entities. It consists of vertices (also called node) and edges (also called arcs). A vertex represents a single entity in the graph, while an edge represents a connection or relationship between two vertices. Edges may have additional properties, such as weight (to indicate the cost or distance of the connection) or direction (to indicate the direction of the relationship).\nTypes of Graph Undirected Graph vs. Directed Graph In an undirected graph, the connection between two vertices is bidrectional. For example, if there is an edge between vertex A and vertex B, traversal is possible from A to B and from B to A. In contrast, in a directed graph, the relationships are one-way. For instance, if there is an edge from vertex A to vertex B, traversal is possible from A to B, but not from B to A unless there is a separate edge in the opposite direction.\nUnweighted Graph vs. Weighted Graph In an unweighted graph, the relationships between vertices have no additional properties, and all edges are treated equally. In contrast, a weighted graph assigns a weight to each node, which can represent attributes such as distance, time, cost, eetc. The weight provides more information about the connection between vertices and is often used in problems like shortest path or network flow.\nCyclic Graph vs. Acyclic Graph A cyclic graph contains at least one cycle, which is a path that starts and ends at the same vertex. In contrast, an acyclic graph doest not contain any cycles. A special case of an acyclic graph is the directed acyclic graph (DAG), which has directed edges and no cycles.\nConnected Graph vs. Disconnected Graph A connected graph is a graph in which there is a path between every pair of vertices. In contrast, a disconnected graph is a graph where at least one pair of vertices is not connected by any path.\nGraph Terminology The degree of a vertex is the number of edges incident to that vertex. In an undirected graph, the degree is simply the number of edges connected to the vertex. In a directed graph, the degree is the sum of the in-degree (number of incoming edges) and the out-degree (number of outgoing edges) of the vertex.\nA path is a sequence of vertices where each consecutive pair of vertices is connected by an edge.\nA cycle is a path that starts and ends at the same vertex, with no repeated vertices except for the starting or ending vertex. For example, in a cycle with $A \\rightarrow B \\rightarrow C \\rightarrow D \\rightarrow A$, the path starts and ends at the same vertex $A$, but each of the other vertices $(B, C, and D)$ is visited exactly once.\nConnectivity refers to whether there exists a path between any pair of vertices in the graph.\nA subgraph is a graph formd by a subset of the vertices and edges of the original graph.\nA component is a subgraph where there is a path between every pair of vertices in that subgraph.\nGraph Representation Adjacency Matrix An Adjacency Matrix ia a 2-dimentional array where each element at position [i][j] represents an edge between vertex i and j. In a weighted graph, the value at position [i][j] stores the weight of the edge between the two vertices. In an unweight graph, the value at position [i][j] typically stores 1 to indicate an edge exists between the vertices, and 0 to indicate no edge exists. The space complexity of an adjacency matrix is $O(V^2)$, where $V$ is the number of vertices, as it requires a matrix of size $V \\times V$ to represent the graph.\nAdjacency List An Adjacency List is a collection of lists, where each position i stores a list of nerighbors of vertex i. In a weighted graph. each element in the list typically represents a pair (neighbor, weight), where neighbor is a vertex connected to i, and weight is the weight of the edge between i and neighbor. The space complexity of an adjacency list is $O(V + E)$, where $V$ is the number of vertices and $E$ is the number of edges. This is because each vertex has a list of neighbors, and the total number of entries in all lists is proportional to the number of edges.\nEdge List An Edge List is a collection of pairs, where each pair (i, j) represents an edge between vertex i and vertex j. In a weighted graph. each element may also include the weight of the edge. typically represented as (i, j, weight). The space complexity of an edge list is $O(E)$, where $E$ is the number of edges, as each edge is stored as a separate entry in the list.\nGraph Traversal Breadth First Search Breadth-First Search (BFS) explores all the neighbors of a vertex before moving on to their neighbors. It proceeds level by level, ensuring that all vertices at a given distance from the starting vertex are visited before moving on to vertices at a greater distance. BFS is commonly used to find the shortest path in an unweighted graph.\nDepth First Search Depth-First Search (DFS) explores as far as possible alone a branch of the graph before backtracking to explore other branches. It follows a path from the starting vertex to a dead end, then retrace its steps and explores alternative paths. DFS is useful for finding all paths between vertices, detecting cycles, or performing topological sorting in directed acyclic graphs (DAGs).\nSpanning Tree A spanning tree is a subset of a graph that includes all the vertices and contains exactly $V - 1$ edges, where $V$ is the number of vertices in the graph. A connected graph can have multiple spanning trees, whereas a disconnected graph does not have a spanning tree because there is at least one pair of vertices that are not connected, making it impossible to form a tree that spans all the vertices.\nMinimum Spanning Tree (MST) A minimum spanning tree is a type of spanning tree that connects all the vertices of a graph with the smallest possible total edge weight, compared to all other possible spanning trees.\nPrim\u0026rsquo;s Algorithm Prim\u0026rsquo;s Algorithm is used to find the minimum spanning tree (MST) that connects all the vertices of a graph without forming a cycle, while minimizing the total edge weight. This algorithm is efficient for solving problems related to undirected, weighted graphs. The algorithm steps are as follows:\nInitialize an inMST array to track the vertices included in the MST, and a priority queue (min-heap) to process the edges with the smallest weight. Select an arbitrary starting vertex. Add all edges connected to this vertex into the priority queue and mark the vertex as included in the inMST array. Extract the edge with the minimum weight from the priority queue. If the destination vertex of this edge is not yet in the inMST array, include it, and add all edges connected to this newly included vertex (whose destination is not in the MST) to the priority queue. Repeat step 3 until all vertices are included in the MST. SHOW CODE Java import java.util.*; /** * @author Signal Yu * @since 2024-12-1 */ class Edge implements Comparable\u0026lt;Edge\u0026gt; { int src; int dest; int weight; public Edge(int src, int dest, int weight) { this.src = src; this.dest = dest; this.weight = weight; } @Override public int compareTo(Edge other) { // Sort edges based on weight return this.weight - other.weight; } } class Graph { int vertices; int edges; List\u0026lt;List\u0026gt;Edge\u0026gt;\u0026gt; adjacencyList; public Graph(int vertices) { this.vertices = vertices; adjacencyList = new ArrayList\u003c\u003e(); for (int i = 0; i \u003c vertices; i++) { adjacencyList.add(new ArrayList\u0026lt;\u0026gt;()); } } void addEdge(int src, int dest, int weight) { // Add edge for undirected graph Edge edge1 = new Edge(src, dest, weight); Edge edge2 = new Edge(dest, src, weight); adjacencyList.get(src).add(edge1); adjacencyList.get(dest).add(edge2); } void primMST() { // Step 1: Initialize an `inMST` array to track the vertices // included in the MST, and a priority queue (min-heap) to // process the edges with the smallest weight. boolean[] inMST = new boolean[vertices]; Queue priorityQ = new PriorityQueue\u003c\u003e(); // Step 2: Select an arbitrary starting vertex. Add all edges // connected to this vertex into the priority queue and mark // the vertex as included in the `inMST` array. int start = 0; for (Edge edge : adjacencyList.get(start)) { priorityQ.offer(edge); } inMST[start] = true; // Step 4: Repeat step 3 until all vertices are included in the MST. while (!priorityQ.isEmpty()) { // Step 3: Extract the edge with the minimum weight from the // priority queue. If the destination vertex of this edge is // not yet in the `inMST` array, include it, and add all edges // connected to this newly included vertex (whose destination // is not in the MST) to the priority queue. Edge edge = priorityQ.poll(); int u = edge.src, v = edge.dest; if (!inMST[v]) { System.out.println(u + \"---[\" + edge.weight + \"]---\" + v); inMST[v] = true; // Add all edges from the newly included vertex (whose destination // is not included in `inMST`) to the priority queue for (Edge nextEdge : adjacencyList.get(v)) { if (!inMST[nextEdge.dest]) { priorityQ.offer(nextEdge); } } } } } } public class Solution { public static void main(String[] args) { int vertices = 4; // Number of vertices in the graph Graph graph = new Graph(vertices); // Create a graph with specified vertices // Add edges to the graph graph.addEdge(0, 1, 10); graph.addEdge(0, 2, 6); graph.addEdge(0, 3, 5); graph.addEdge(1, 3, 15); graph.addEdge(2, 3, 4); // Run Prim's algorithm to construct MST graph.primMST(); } } ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/data-structures-and-algorithms/algorithms/1-data-structure-and-algorithms/","summary":"Recursion Recursion is a programming technique where a function repeatedly calls itself until it reaches a base case, whcih stops the recursion and allows it to return a result. It is a way of breaking down complex problems into smaller, simpler subproblems that are eaiser to solve.\nHead Recursion Head Recursion is a type of recursion where a function makes its recursive call first, immediately after checking the base case, and performs all other operations only after the recursive call returns.","title":"Data Structure \u0026 Algorithms"},{"content":"JUnit assertEquals In JUnit, assertEquals is a method used to check if the expected value and the actual value are equal in unit tests.\nSHOW CODE Java import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class UnitTest { @Test void addition() { Calculator calculator = new Calculator(); int result = calculator.add(1, 1); assertEquals(2, result, \"The result of 1 + 1 should be 2\"); } } assertTure \u0026amp; assertFalse In JUnit, the assertTrue and the assertFalse methods are used to validate boolean expressions in unit tests.\nSHOW CODE Java import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertFalse; import static org.junit.jupiter.api.Assertions.assertTrue; public class UnitTest { @Test void testIsOdd() { int n = 5; assertTrue(n % 2 == 1, \"Number should be an odd\"); assertFalse(n % 2 == 0, \"Number should not be an even\"); } } @BeforeEach \u0026amp; @AfterEach In JUnit, the @BeforeEach and @AfterEach annotations are used to specify methods that should run before or after each test method, respectively. These annotations are useful for setting up resources before each test and cleaning up resources after each test.\nSHOW CODE Java import org.junit.jupiter.api.AfterEach; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class UnitTest { private Calculator calculator; @BeforeEach void setup() { calculator = new Calculator(); } @Test void testAddition() { assertEquals(2, calculator.add(1, 1), \"The result of 1 + 1 should be 2.\"); } @AfterEach void teardown() { calculator = null; } } @BeforeAll \u0026amp; @AfterAll In JUnit, the @BeforeAll and @AfterAll annotations are used to specify methods that run once before and after all the test methods in a test class, respectively. These methods are commonly used for expensive setup and cleanup.\nSHOW CODE Java import org.junit.jupiter.api.AfterAll; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.Test; public class UnitTest { @BeforeAll public static void setUpBeforeClass() { System.out.println(\"Executed before all tests are run.\"); } @AfterAll public static void tearDownAfterClass() { System.out.println(\"Executed after all tests are run.\"); } @Test public void testMethod1() { System.out.println(\"Test 1 executed.\"); } @Test public void testMethod2() { System.out.println(\"Test 2 executed.\"); } } SHOW OUTPUT Output Executed before all tests are run. Test 1 executed. Test 2 executed. Executed after all tests are run. assertArrayEquals \u0026amp; assertNotEquals In JUnit, the assertArrayEquals and assertNotEquals methods are used to check if both arrays are equal in sizeand whether each corresponding element is equal or not. For arrays containing objects, JUnit will use the equals method of the objects for the comparison.\nSHOW CODE Java import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertArrayEquals; import static org.junit.jupiter.api.Assertions.assertNotEquals; public class UnitTest { @Test void testArrayEquality() { int[] expected = {1, 2, 3}; int[] actual = {1, 2, 3}; assertArrayEquals(expected, actual, \"Arrays should be equal\"); String[] expected2 = {\"apple\", \"banana\", \"cherry\"}; String[] actual2 = {\"apple\", \"banana\", \"cherry\"}; // Compare arrays of objects (Strings in this case) assertArrayEquals(expected2, actual2); } @Test void testArrayNotEquality() { int[] expected = {1, 2, 3}; int[] actual = {1, 2, 4}; assertNotEquals(expected, actual, \"Arrays should not be equal\"); } } assertThrows In Junit, the assertThrows is a method used to assert that a specific exception is throwing during the execution of a piece of code.\nSHOW CODE Java import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertThrows; public class UnitTest { @Test void testDivision() { Calculator calculator = new Calculator(); ArithmeticException exception = assertThrows(ArithmeticException.class, () -\u003e { calculator.divide(1, 0); }); assertEquals(\"/ by zero\", exception.getMessage()); } } assertTimeout \u0026amp; assertTimeoutPreemptively In JUnit, the assertTimeout and assertTimeoutPreemptively methods are used to ensure that a unit test finishes within a specified time limit. The key difference between them is that the assertTimeoutPreemptively method will terminate the test as soon as the excution time exceeds the specified limit. In contrast, the assertTimeout method allows the test to complete before checking if the time limit was exceeded.\nSHOW CODE Java import org.junit.jupiter.api.Test; import java.time.Duration; import static org.junit.jupiter.api.Assertions.*; public class UnitTest { @Test void testExecutionWithinTimeoutPreemptively() { assertTimeoutPreemptively(Duration.ofMillis(1000), () -\u003e { // Simulate a task that takes more time than allowed Thread.sleep(1500); // Task that takes more than 1000ms }); } @Test void testExecutionWithinTimeout() { assertTimeout(Duration.ofMillis(1000), () -\u003e { // Simulate a task that takes some time Thread.sleep(500); // Task that takes less than 1000ms }); } } Parameterized Tests In JUnit, Parameterized Tests allow a test to be run with different parameters and expected results, which reduces repetitive code and increases test coverage. Common parameter sources include @ValueSource, which passes a group of values to the test; @CsvSource, which allows passing multiple values separated by commmas; @MethodSource, which generates values dynamically from a method; and @EnumSource, which passes enum constants from an enum class.\nSHOW CODE Java import org.junit.jupiter.params.ParameterizedTest; import org.junit.jupiter.params.provider.CsvSource; import org.junit.jupiter.params.provider.EnumSource; import org.junit.jupiter.params.provider.MethodSource; import org.junit.jupiter.params.provider.ValueSource; import java.util.stream.Stream; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertTrue; public class UnitTest { @ParameterizedTest @ValueSource(strings = {\"apple\", \"banana\", \"cherry\"}) void testWithStringParameter(String fruit) { assertTrue(fruit.length() \u003e 3); } @ParameterizedTest @CsvSource({ \"apple, 5\", \"banana, 6\", \"cherry, 6\" }) void testWithCsvSource(String fruit, int length) { assertEquals(fruit.length(), length); } static Stream\u0026lt;String\u0026gt; stringProvider() { return Stream.of(\"apple\", \"banana\", \"cherry\"); } @ParameterizedTest @MethodSource(\"stringProvider\") void testWithMethodSource(String fruit) { assertTrue(fruit.length() \u003e 3); } enum FRUIT {APPLE, BANANA, CHERRY} @ParameterizedTest @EnumSource(FRUIT.class) void testWithEnumSource(FRUIT fruit) { assertTrue(fruit.name().length() \u003e 3); } } Mockito System Under Test The System Under Test (SUT) refers to the specific part of the software being tested in a given test case. It can range from a single method in unit testing to larger components in integration or system testing based on different context. The SUT is typically isolated using mocking and stubbing to test its behavior independently.\nSHOW CODE Java public class Calculator { public int add(int a, int b) { return a + b; } } public class CalculatorTest { @Test void testAdd() { Calculator calculator = new Calculator(); // SUT int result = calculator.add(2, 3); // The add method is the System Under Test assertEquals(5, result); } } Mocking vs. Stubbing In unit testing, Mocking and Stubbing are used to simulate and control the behavior of external dependencies. Mocking is commonly used for behavior verification, where objects are created to simulate the behavior of real-world components in a controlled manner. On the other hand, Stubbing is typically used to isolate the SUT by controlling the return values or responses from dependencies.\nSHOW CODE: Mocking Java public class Calculator { private Logger logger; public Calculator(Logger logger) { this.logger = logger; } public int add(int a, int b) { int result = a + b; logger.log(\"Addition performed: \" + result); return result; } } @Test void testAdd() { Logger mockLogger = mock(Logger.class); Calculator calculator = new Calculator(mockLogger); calculator.add(2, 3); // Verifying the interaction with the mock: was log method called? verify(mockLogger).log(\"Addition performed: 5\"); } SHOW CODE: Stubbing Java public class Calculator { private DatabaseService databaseService; public Calculator(DatabaseService databaseService) { this.databaseService = databaseService; } public int getProductPrice(int productId) { Product product = databaseService.getProduct(productId); return product.getPrice(); } } @Test void testGetProductPrice() { // Stub the DatabaseService to return a fixed product DatabaseService stubbedService = mock(DatabaseService.class); Product stubProduct = new Product(1, \"Laptop\", 1000); when(stubbedService.getProduct(1)).thenReturn(stubProduct); Calculator calculator = new Calculator(stubbedService); int price = calculator.getProductPrice(1); assertEquals(1000, price); } mock(), when().thenReturn(), verify() In Mockito, the mock() method is used to create a mock object, which allows simulating the behavior of an object without invoking its real methods. The when() method is used to define the behavior of a mock object\u0026rsquo;s method when it is called with specific arguments. The thenReturn() method specifies the return value of a mocked method. The verify() method is used to check whether a specified method on a mock object was called during the test execution.\nSHOW CODE Java import org.junit.jupiter.api.Test; import java.util.List; import static org.junit.jupiter.api.Assertions.assertTrue; import static org.mockito.Mockito.*; public class UnitTest { @Test public void testMockingBehavior() { // Create a mock List object List\u0026lt;String\u0026gt; mockList = mock(List.class); // Specify behavior for when add() is called when(mockList.add(\"Hello\")).thenReturn(true); // Return true when \"Hello\" is added // Call the mock method boolean result = mockList.add(\"Hello\"); // Verify the behavior assertTrue(result); // The add method should return true verify(mockList).add(\"Hello\"); // Verify that add(\"Hello\") was called // Verify that add(\"World\") was never called verify(mockList, never()).add(\"World\"); } } Argument Matchers In Mockito, argument matchers are used to specify conditions for method arguments when stubbing methods. They are commonly used in the when() and thenReturn() methods when the exact method argument is not critical. Some commonly used argument marchers include:\nany(): Matches any argument of the specified type. eq(): Matches a specified argument. anyString(): Matches any argument of type String. anyInt(): Matches any argument of type Integer. isA(): Matches an argument of a specified class type. argThat(): Allows for custom argument matching logic. SHOW CODE Java import org.junit.jupiter.api.Test; import java.util.List; import static org.junit.jupiter.api.Assertions.*; import static org.mockito.ArgumentMatchers.anyInt; import static org.mockito.Mockito.*; public class UnitTest { @Test public void testAnyMatcher() { List mockList = mock(List.class); // Stub behavior using argument matcher when(mockList.get(anyInt())).thenReturn(\"Signal\"); // Verify that any argument passed to get will return \"Signal\" assertEquals(\"Signal\", mockList.get(9)); assertEquals(\"Signal\", mockList.get(999)); } @Test public void testEqMatcher() { Calculator calculator = mock(Calculator.class); when(calculator.add(eq(1), eq(1))).thenReturn(2); assertEquals(2, calculator.add(1, 1)); assertNotEquals(3, calculator.add(1, 1)); } @Test public void testAnyStringMatcher() { // Create a mock List List\u0026lt;String\u0026gt; mockList = mock(List.class); // Stub the method to return \"Hello\" for any string argument when(mockList.contains(anyString())).thenReturn(true); // Verify that the mock returns true for any string passed as an argument assertTrue(mockList.contains(\"Test\")); // Matches any string assertTrue(mockList.contains(\"Hello\")); // Matches any string assertTrue(mockList.contains(\"World\")); // Matches any string } @Test public void testAnyIntMatcher() { // Create a mock List List mockList = mock(List.class); // Stub the method to return \"Found\" for any integer argument when(mockList.get(anyInt())).thenReturn(\"Found\"); // Verify that the mock returns \"Found\" regardless of the argument assertEquals(\"Found\", mockList.get(1)); // Matches any integer assertEquals(\"Found\", mockList.get(999)); // Matches any integer } @Test public void testArgThatMatcher() { // Create a mock List List\u0026lt;String\u0026gt; mockList = mock(List.class); // Use argThat to match arguments that are not null and have length greater than 3 when(mockList.add(argThat(argument -\u003e argument != null \u0026\u0026 argument.length() \u003e 3))) .thenReturn(true); // Verify that the mock behaves correctly assertTrue(mockList.add(\"Hello\")); // Matches: length \u003e 3 assertFalse(mockList.add(\"\")); // Does not match: empty string } } Essential Mockito Annotaitons The key annotations in Mockito are @Mock, @InjectMocks, @ExtendWith, and @Captor. The @Mock annotation is used to create mock objects. The @InjectMocks annotation injects the objects, created with @Mock, into the specified class under test. The @ExtendWith annotation specifies a custom test runner to use when executing the test. The @Captor annotation is used to create an ArgumentCaptor instance, which captures and verifies the arguments passed to mocked methods.\nSHOW CODE Java import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.ArgumentCaptor; import org.mockito.Captor; import org.mockito.InjectMocks; import org.mockito.Mock; import org.mockito.junit.jupiter.MockitoExtension; import java.util.List; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.mockito.Mockito.verify; @ExtendWith(MockitoExtension.class) public class UnitTest { @Mock private List\u0026lt;String\u0026gt; mockList; // Mocked dependency @InjectMocks private MyClass myClass; // Class under test @Captor private ArgumentCaptor\u0026lt;String\u0026gt; captor; // Captures arguments passed to the mock @Test void testAddItem() { // Perform the action under test myClass.addItem(\"Test Item\"); // Verify that the mockList's add method was called with the argument \"Test Item\" verify(mockList).add(captor.capture()); // Capture and assert the argument String capturedArgument = captor.getValue(); System.out.println(\"capturedArgument = \" + capturedArgument); // Assert the captured item is correct assertEquals(\"Test Item\", capturedArgument); } static class MyClass { private final List\u0026lt;String\u0026gt; list; public MyClass(List\u0026lt;String\u0026gt; list) { this.list = list; } public void addItem(String item) { list.add(item); } } } Mockit Spy Mockito\u0026rsquo;s spy is a partial mock, typically created using @Spy, where real methods are used by default, and only the specified methods are stubbed.\nSHOW CODE Java import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.Mock; import org.mockito.Spy; import org.mockito.junit.jupiter.MockitoExtension; import java.util.ArrayList; import java.util.List; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.mockito.Mockito.doReturn; import static org.mockito.Mockito.verify; @ExtendWith(MockitoExtension.class) public class UnitTest { // Create a spy for the class under test @Spy private MyClass myClass = new MyClass(); // Inject the mock dependency into the class under test @Mock private List\u0026lt;String\u0026gt; mockList; @Test public void testAddItemWithSpy() { // Use the real method to add an item myClass.addItem(\"Test Item\"); // Verify that the mock's addItem method is called with the argument // Fail the test: Actually, there were zero interactions with this mock. verify(mockList).add(\"Test Item\"); // Stub the method for testing doReturn(\"Mocked Response\").when(myClass).getGreeting(); // Now the method getGreeting() will return the mocked response String response = myClass.getGreeting(); System.out.println(response); // Output: Mocked Response // Assert the mocked behavior assertEquals(\"Mocked Response\", response); } // Class under test static class MyClass { private final List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); public void addItem(String item) { list.add(item); } public String getGreeting() { return \"Hello, World!\"; } } } In the above code, the statement verify(mockList).add(\u0026quot;Test Item\u0026quot;); will fail because mockList is a partial mock. By default, real methods are called on a spy object, and since the real method is not stubbed or tracked. the verification cannot succeed.\nMockito and SpringBoot Example SHOW CODE: pom.xml pom.xml \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;project xmlns=\u0026quot;http://maven.apache.org/POM/4.0.0\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xsi:schemaLocation=\u0026quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026quot;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.4.0\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;!-- lookup parent from repository --\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;groupId\u0026gt;dev.signalyu\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springtest\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;springtest\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;springtest\u0026lt;/description\u0026gt; \u0026lt;url/\u0026gt; \u0026lt;licenses\u0026gt; \u0026lt;license/\u0026gt; \u0026lt;/licenses\u0026gt; \u0026lt;developers\u0026gt; \u0026lt;developer/\u0026gt; \u0026lt;/developers\u0026gt; \u0026lt;scm\u0026gt; \u0026lt;connection/\u0026gt; \u0026lt;developerConnection/\u0026gt; \u0026lt;tag/\u0026gt; \u0026lt;url/\u0026gt; \u0026lt;/scm\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;17\u0026lt;/java.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.mockito/mockito-core --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mockito\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mockito-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.14.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.4.0\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.18.34\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.4.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-commons --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.data\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-data-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.4.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!--\t\u0026lt;build\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;plugins\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;plugin\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;configuration\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;annotationProcessorPaths\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;path\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/path\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/annotationProcessorPaths\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/configuration\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/plugin\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;plugin\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;configuration\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;excludes\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;exclude\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/exclude\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/excludes\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/configuration\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/plugin\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/plugins\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/build\u0026gt;--\u0026gt; \u0026lt;/project\u0026gt; SHOW CODE Java import lombok.AllArgsConstructor; import lombok.Data; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.data.repository.CrudRepository; import org.springframework.stereotype.Repository; import org.springframework.stereotype.Service; import org.springframework.test.context.bean.override.mockito.MockitoBean; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.result.MockMvcResultMatchers; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; import static org.mockito.Mockito.when; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; @Data class User { private Long id; private String name; } @Repository interface UserRepository extends CrudRepository\u0026lt;User, Long\u0026gt; { } @Service @Data class UserService { @Autowired private final UserRepository userRepository; public String getUserById(Long id) { User user = userRepository.findById(id).orElse(null); return user == null ? \"User not found\" : user.getName(); } } @RestController @AllArgsConstructor class UserController { private final UserService userService; @GetMapping(\"/user/{id}\") public String getUser(@PathVariable Long id) { return userService.getUserById(id); } } @SpringBootTest @AutoConfigureMockMvc public class UnitTest { @Autowired private MockMvc mockMvc; @MockitoBean private UserService userService; @Test public void testGetUser() throws Exception { Long userId = 1L; String mockResponse = \"Signal Yu\"; when(userService.getUserById(userId)).thenReturn(mockResponse); mockMvc.perform(get(\"/user/{id}\", userId)) .andExpect(status().isOk()) .andExpect(MockMvcResultMatchers.content().string(mockResponse)); } } ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/framework-and-tools/framework/backend/unit-testing/1-junit-and-mockito-notes/","summary":"JUnit assertEquals In JUnit, assertEquals is a method used to check if the expected value and the actual value are equal in unit tests.\nSHOW CODE Java import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class UnitTest { @Test void addition() { Calculator calculator = new Calculator(); int result = calculator.add(1, 1); assertEquals(2, result, \"The result of 1 + 1 should be 2\"); } } assertTure \u0026amp; assertFalse In JUnit, the assertTrue and the assertFalse methods are used to validate boolean expressions in unit tests.","title":"Junit \u0026 Mockito Notes"},{"content":"Synchronous Messaging VS. Asynchronous Messaging Synchronous Messaging and Asynchronous Messaging are two commnucation paradigms used in distributed systems. In synchronous messaging, the sender will not continue executing until it receives the acknowledged message from the receiver. This paradigm is commonly used in situations that require immediate feedback to continue operations, such as parments or transaction processing.\nThe advantages of this paradigm include ease of implementation and usefulness in situations where immediate feedback is needed. How ever, the drawbacks are also obvious: it may lead to performance bottlenecks when the receiver is slow or unavailable, and it can also limit scalability.\n--- title: Synchronous Messaging --- sequenceDiagram participant Sender participant MessageBus participant MessageListener Sender-\u003e\u003eMessageBus: MessageBusUtil.sendSynchronousMessage() MessageBus-\u003e\u003eMessageListener: destination.send() MessageListener--\u003e\u003eMessageBus: return response note over Sender: (block and wait) MessageBus--\u003e\u003eSender: return response In asynchronous messaging, the sender doesn\u0026rsquo;t block after sending the message, meaning it can continue processing without waiting for the response from the receiver. It is commonly used in situations where systems can tolerate delays in response, like message notification after a successful payment. Compared to synchronous messaging, asynchronous messaging is more complex to implement. Additionaly, the sender has no guarantee of immediate feedback. It requires extra techniques, such as callback functions or message listeners, to handle the response.\nsequenceDiagram participant Sender participant MessageBus as Message Bus participant MessageListener1 as Message Listener 1 Sender-\u003e\u003eMessageBus: MessageBusUtil.sendMessage() MessageBus-\u003e\u003eMessageListener: destination.send() MessageListener--\u003e\u003eMessageBus: return response Sender-\u003e\u003eSender: (continue with processing) MessageBus--\u003e\u003eSender: return response RabbitMQ Introduction to RabbitMQ RabbitMQ is a message broker that facilitates asynchronous communication between distributed systems. Its working mechnism involves four key components:\nProducer: Responsible for sending messages Exchange: Handles the routing of messages to the appropriate queues. Queue: Stores messages until they are consumed. Consumer: Processes the messages from the queue. --- title: Introduction to RabbitMQ --- graph LR P((P)) --\u003e|send| Q[[Queue]] --\u003e|receive| C((C)) Example: Hello RabbitMQ SHOW CODE Producer Consumer import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; import java.nio.charset.StandardCharsets; public class Producer { // Name of the queue where the message will be sent private final static String QUEUE_NAME = \"hello\"; public static void main(String[] argv) throws Exception { // Create a connection factory to configure and connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Configure RabbitMQ server address (default is localhost) factory.setHost(\"localhost\"); // Configure the port for RabbitMQ (default is 5672) factory.setPort(5672); // Use try-with-resource to automatically close the connection and channel after use try (Connection connection = factory.newConnection(); // Establish a connection to RabbitMQ Channel channel = connection.createChannel()) { // Create a communication channel // Declare a queue with the specified name channel.queueDeclare(QUEUE_NAME, false, false, false, null); String message = \"Hello RabbitMQ!\"; // Publish the message to the queue channel.basicPublish(\"\", QUEUE_NAME, null, message.getBytes(StandardCharsets.UTF_8)); System.out.println(\" [P] Sent '\" + message + \"'\"); } } } import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; import com.rabbitmq.client.DeliverCallback; import java.nio.charset.StandardCharsets; public class Consumer { private final static String QUEUE_NAME = \"hello\"; public static void main(String[] argv) throws Exception { // Create a connection factory to configure and connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Configure RabbitMQ server address (default is localhost) factory.setHost(\"localhost\"); // Configure the port for RabbitMQ (default is 5672) factory.setPort(5672); // Establish a connection to RabbitMQ Connection connection = factory.newConnection(); // Create a communication channel Channel channel = connection.createChannel(); // Declare a queue with the specified name channel.queueDeclare(QUEUE_NAME, false, false, false, null); System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\"); // Define the callback function to handle incoming message DeliverCallback deliverCallback = (consumerTag, delivery) -\u003e { // Retrieve the message body and convert it to a string using UTF-8 encoding String message = new String(delivery.getBody(), StandardCharsets.UTF_8); System.out.println(\" [C] Received '\" + message + \"'\"); }; // Start consuming messages from the queue channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -\u003e { // No action required for cancellation in this example }); } } Message Acknowledgment In RabbitMQ, message acknowledgement is a mechanism that ensures messages have been received and processed successfully. There are two main types of message acknowledgement: auto ack and manual ack.\nIn auto-ack mode, RabbitMQ considers the message acknowledged as soon as it is delieved to the consumer. The consumer does not need to explictly send an acknowledgement. However, this can be risky. If the consumer fails due to a connection issue or channel break, the message may be lost, meaning it hasn\u0026rsquo;t been processed successfully.\nboolean autoAck = true; channel.basicConsume(queueName, autoAck, consumer); In manual ack mode, the consumer must send an acknowledgement back to RabbitMQ once the message has been processed successfully. If RabbitMQ does not receive the acknowledgement from the consumer within a specified time (30 minutes by default), it will redeliver the message to another consumer or the same consumer, depending on the configuration.\n// Acknowledging a message manually boolean autoAck = false; channel.basicConsume(queueName, autoAck, new DefaultConsumer(channel) { @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { String message = new String(body, \u0026#34;UTF-8\u0026#34;); // Process the message here channel.basicAck(envelope.getDeliveryTag(), false); // Acknowledge the message } }); Message Durability In RabbitMQ, message durability refers to the ability to ensure that a message will not be lost in case of a broker failure. It involves saving both the queue and message to disk so they can be recovered after a system restart. To guarantee durability, two key components need to be considered: durable queues and persistent messages.\nWhen a queue is declared as durable, it is saved to disk. The queue will still exist even if the broker fails.\nboolean durable = true; channel.queueDeclare(\u0026#34;myQueue\u0026#34;, durable, false, false, null); To ensure a message\u0026rsquo;s persistence after a broker restart, it must be marked as persistent by setting the delieveryMode to 2 (persistent). This ensures that the message is saved to disk. However, it\u0026rsquo;s important to note that marking a message as persistent does not fully guarantee that it won\u0026rsquo;t be lost. There is still a short window in which RabbitMQ has accepted the message but has not yet saved it to disk. Additionaly, RabbitMQ does not call fsync(2) for every message, meaning it may store the message in cache rather than writing it to disk immediately. Therefore, the durability guerantee is not strong.\n// Publish the message to the queue channel.basicPublish(\u0026#34;\u0026#34;, TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, // delieveryMode = 2 message.getBytes(\u0026#34;UTF-8\u0026#34;)); Prefetch When a consumer subscribes to a message queue, RabbitMQ begins delivering messages. By default, RabbitMQ uses a Round Robin Dispatching strategy, which evenly distributes messages across multiple consumers. However, if one of the consumers processes tasks slowly, it may lead to message buildup and memory pressure.\nIn RabbitMQ, the prefetch mechnism controls the maximum number of messages a consumer can hold at a time. When the number of messages a consumer holds reaches the prefetch limit, RabbitMQ will stop sending additional messages to that consumer until it acknowledges some of the messages. This mechanism helps prevent message accumulation and reduces memory pressure.\n--- title: Worker Queue - prefetch --- graph LR P((P)) --\u003e|send| Q[[Worker]] --\u003e|prefetch = 1| C1((C1)) Q --\u003e|prefetch = 1| C2((C2)) SHOW CODE Producer Worker import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; import com.rabbitmq.client.MessageProperties; public class Producer { private static final String TASK_QUEUE_NAME = \"task_queue\"; public static void main(String[] argv) throws Exception { // Create a connection factory to configure and connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Configure RabbitMQ server address (default is localhost) factory.setHost(\"localhost\"); // Configure the port for RabbitMQ (default is 5672) factory.setPort(5672); // Use try-with-resource to automatically close the connection and channel after use try (Connection connection = factory.newConnection(); // Establish a connection to RabbitMQ Channel channel = connection.createChannel()) { // Create a communication channel // Declare a queue with the specified name channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null); String message = \"Hello RabbitMQ!\"; // Publish the message to the queue channel.basicPublish(\"\", TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(\"UTF-8\")); System.out.println(\" [P] Sent '\" + message + \"'\"); } } } import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; import com.rabbitmq.client.DeliverCallback; public class Worker { // Name of the queue where the message will be sent private static final String TASK_QUEUE_NAME = \"task_queue\"; public static void main(String[] argv) throws Exception { // Create a connection factory to configure and connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Configure RabbitMQ server address (default is localhost) factory.setHost(\"localhost\"); // Establish a connection to RabbitMQ final Connection connection = factory.newConnection(); // Create a communication channel final Channel channel = connection.createChannel(); // Declare a queue with the specified name channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null); System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\"); // Specify the prefetch count channel.basicQos(1); // Define a callback to process incoming messages DeliverCallback deliverCallback = (consumerTag, delivery) -\u003e { String message = new String(delivery.getBody(), \"UTF-8\"); System.out.println(\" [C] Received '\" + message + \"'\"); try { try { // Simulate task processing Thread.sleep(1000); } catch (InterruptedException _ignored) { Thread.currentThread().interrupt(); } } finally { // Acknowledge the message after work is completed System.out.println(\" [C] Done\"); channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false); } }; // Start consuming messages with manual acknowledgment channel.basicConsume(TASK_QUEUE_NAME, false, deliverCallback, consumerTag -\u003e { }); } } Publish/Subscribe Publish/Subscribe is a communication pattern where a message is sent by a producer to multiple consumers. In RabbitMQ, this pattern is implemented using Exchanges and Queues.\nIn the Publish/Subscribe pattern in RabbitMQ, the producer sends a message to an Exchange, which then routes the message to multiple queues that are bound to it. There are four types of exchanges in RabbitMQ:\nfanout: Routes messages to all queues bound to it, without considering any routing key. direct: Routes messages to queues based on an exact match with the routing key. topic: Routes messages to queues based on pattern matching of the routing key. headers: Routes messages based on the attributes of message headers. Fanout Exchange --- title: Publish/Subscribe - fanout --- graph LR P((P)) --\u003e|send| Ex{{fanout}} --\u003e|binding| Q1[[Q1]] Ex --\u003e|binding| Q2[[Q2]] Q1 --\u003e C1((C1)) Q2 --\u003e C2((C2)) SHOW CODE: Fanout Exchange Publisher Subscriber import com.rabbitmq.client.BuiltinExchangeType; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; public class EmitLog { private static final String EXCHANGE_NAME = \"logs\"; public static void main(String[] argv) throws Exception { // Create a new connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); // Use try-with-resource to ensures automatic resource management try (Connection connection = factory.newConnection(); // Establish a connection Channel channel = connection.createChannel()) { // Create a channel // Declare an exchange of type 'fanout' which sends messages to all bound queues channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT); String message = argv.length \u003c 1 ? \"info: Hello World!\" : String.join(\" \", argv); // Publish the message to the exchange with an empty routing key (for fanout exchange) channel.basicPublish(EXCHANGE_NAME, \"\", null, message.getBytes(\"UTF-8\")); System.out.println(\" [x] Sent '\" + message + \"'\"); } } } import com.rabbitmq.client.*; public class ReceiveLogs { private static final String EXCHANGE_NAME = \"logs\"; public static void main(String[] argv) throws Exception { // Create a new connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); // Establish a connection and create a new channel for communication Connection connection = factory.newConnection(); Channel channel = connection.createChannel(); // Declare the exchange with the same name as in the emitter (logs) and of type 'fanout' channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT); // Bind the queue to the exchange with an empty routing key (for fanout exchange) String queueName = channel.queueDeclare().getQueue(); channel.queueBind(queueName, EXCHANGE_NAME, \"\"); System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\"); // Define the callback function to process incoming messages DeliverCallback deliverCallback = (consumerTag, delivery) -\u003e { String message = new String(delivery.getBody(), \"UTF-8\"); System.out.println(\" [x] Received '\" + message + \"'\"); }; // Consume messages from the queue channel.basicConsume(queueName, true, deliverCallback, consumerTag -\u003e { }); } } Direct Exchange --- title: Publish/Subscribe - direct --- graph LR P((P)) --\u003e|send| Ex{{direct}} --\u003e|error| Q1[[Q1]] Ex --\u003e|info| Q2[[Q2]] Ex --\u003e|warn| Q2[[Q2]] Ex --\u003e|error| Q2[[Q2]] Q1 --\u003e C1((C1)) Q2 --\u003e C2((C2)) SHOW CODE: Direct Exchange Publisher Subscriber import com.rabbitmq.client.BuiltinExchangeType; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; public class EmitLogDirect { private static final String EXCHANGE_NAME = \"direct_logs\"; public static void main(String[] argv) throws Exception { // Create a new connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); //Use try-with-resource for automatic resource management try (Connection connection = factory.newConnection(); // Establish a new connection Channel channel = connection.createChannel()) { // Create a new channel // Declare an exchange with type of 'direct' channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT); // Get the severity level (routing key) from the command-line arguments String severity = getSeverity(argv); // Get the message content from the command-line arguments String message = getMessage(argv); // Publish the message to the exchange with given severity as the routing key channel.basicPublish(EXCHANGE_NAME, severity, null, message.getBytes(\"UTF-8\")); System.out.println(\" [x] Sent '\" + severity + \"':'\" + message + \"'\"); } } private static String getSeverity(String[] strings) { if (strings.length \u003c 1) { return \"info\"; } return strings[0]; } private static String getMessage(String[] strings) { if (strings.length \u003c 2) { return \"Hello World!\"; } return joinStrings(strings, \" \", 1); } private static String joinStrings(String[] strings, String delimiter, int startIndex) { int length = strings.length; if (length == 0) { return \"\"; } if (length \u003c= startIndex) { return \"\"; } StringBuilder words = new StringBuilder(strings[startIndex]); for (int i = startIndex + 1; i \u003c length; i++) { words.append(delimiter).append(strings[i]); } return words.toString(); } } import com.rabbitmq.client.*; public class ReceiveLogsDirect { private static final String EXCHANGE_NAME = \"direct_logs\"; public static void main(String[] argv) throws Exception { // Create a new connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); // Establish a new connection Connection connection = factory.newConnection(); // Create a new channel Channel channel = connection.createChannel(); // Declare a direct exchange, where messages will be routed based on the routing key channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT); String queueName = channel.queueDeclare().getQueue(); // Exit the program if no arguments are passed (no routing keys provided) if (argv.length \u003c 1) { System.err.println(\"Usage: ReceiveLogsDirect [info] [warning] [error]\"); System.exit(1); } for (String severity : argv) { // Bind the queue to the exchange with a specific routing key channel.queueBind(queueName, EXCHANGE_NAME, severity); } System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\"); // Define the callback function for processing the received messages DeliverCallback deliverCallback = (consumerTag, delivery) -\u003e { String message = new String(delivery.getBody(), \"UTF-8\"); System.out.println(\" [x] Received '\" + delivery.getEnvelope().getRoutingKey() + \"':'\" + message + \"'\"); }; // Consume messages from the queue channel.basicConsume(queueName, true, deliverCallback, consumerTag -\u003e { }); } } Topic Exchange In RabbitMQ, the Topic Exchange is a type of exchange that routes messages to queues based on pattern matching of the routing key. The routing key in a topic exchange is typically a string of words separated by dots (.). The routing key can also contain wildcards like * and #. The * wildcard matches exactly one word, while the # wildcard matches zero or more words. Compared to the direct exchange, the topic exchange offers greater flexibility and efiiciency in routing messages to queues based on more complex patterns.\nSHOW CODE: Topic Exchange Publisher Subscriber import com.rabbitmq.client.BuiltinExchangeType; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; public class EmitLogTopic { private static final String EXCHANGE_NAME = \"topic_logs\"; public static void main(String[] argv) throws Exception { // Create a connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); // Use try-with-resource for automatic management try (Connection connection = factory.newConnection(); // Establish a new connection Channel channel = connection.createChannel()) { // Create a new channel // Declare a topic exchange with specified name channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC); String routingKey = getRouting(argv); String message = getMessage(argv); // Publish the message to the exchange channel.basicPublish(EXCHANGE_NAME, routingKey, null, message.getBytes(\"UTF-8\")); System.out.println(\" [x] Sent '\" + routingKey + \"':'\" + message + \"'\"); } } private static String getRouting(String[] strings) { if (strings.length \u003c 1) return \"anonymous.info\"; return strings[0]; } private static String getMessage(String[] strings) { if (strings.length \u003c 2) return \"Hello World!\"; return joinStrings(strings, \" \", 1); } private static String joinStrings(String[] strings, String delimiter, int startIndex) { int length = strings.length; if (length == 0) return \"\"; if (length \u003c startIndex) return \"\"; StringBuilder words = new StringBuilder(strings[startIndex]); for (int i = startIndex + 1; i \u003c length; i++) { words.append(delimiter).append(strings[i]); } return words.toString(); } } import com.rabbitmq.client.*; public class ReceiveLogsTopic { private static final String EXCHANGE_NAME = \"topic_logs\"; public static void main(String[] argv) throws Exception { // Create a new connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); // Establish a new connection Connection connection = factory.newConnection(); // Create a new channel Channel channel = connection.createChannel(); // Declare a topic exchange with the specified name channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC); String queueName = channel.queueDeclare().getQueue(); if (argv.length \u003c 1) { System.err.println(\"Usage: ReceiveLogsTopic [binding_key]...\"); System.exit(1); } for (String bindingKey : argv) { channel.queueBind(queueName, EXCHANGE_NAME, bindingKey); } System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\"); // Define the callback function for process received messages DeliverCallback deliverCallback = (consumerTag, delivery) -\u003e { String message = new String(delivery.getBody(), \"UTF-8\"); System.out.println(\" [x] Received '\" + delivery.getEnvelope().getRoutingKey() + \"':'\" + message + \"'\"); }; // Consume messages from the queue channel.basicConsume(queueName, true, deliverCallback, consumerTag -\u003e { }); } } Reliability: Publisher Publisher Retry Publisher Retry in RabbitMQ refers to the mechanism where the publisher reconnects to RabbitMQ after a network issue. This mechanism improves the likelihood of a successful connection when the network is unstable. However, the retry process is executed in blocking manner, which may lead to performance issues during reconnection. Below are the relavant configurations for application.properties.\nspring.rabbitmq.listener.simple.retry.enabled=false # Whether or not publishing retries are enabled. spring.rabbitmq.listener.simple.retry.initial-interval=1000 # Interval between the first and second attempt to deliver a message. spring.rabbitmq.listener.simple.retry.max-attempts=3 # Maximum number of attempts to deliver a message. spring.rabbitmq.listener.simple.retry.max-interval=10000 # Maximum interval between attempts. spring.rabbitmq.listener.simple.retry.multiplier=1.0 # A multiplier to apply to the previous delivery retry interval. spring.rabbitmq.listener.simple.retry.stateless=true # Whether or not retry is stateless or stateful. Publisher Confirm \u0026amp; Publisher Return RabbitMQ provides two types of message confirmation mechanisms between the publisher and the broker: Publisher Confirm and Publisher Return. The Publisher Confirm mechanism allows the publisher to receive an ack from the broker when the message is successfully delivered to the broker. The Publisher Return mechanism enables the broker to notify the publisher when a message cannot be routed to any queue.\nWhen a message is sent to the broker, if the message type is temporary and can be successfully routed to the specified queue, the broker will return an ack to the publisher. If the message type if durable and the message can be delievered to the queue and successfully saved to disk, the broker will return an ack. Otherwise, the broker will return an nack (negative acknowledgement) to the publisher.\nspring.rabbitmq.publisher-confirms=false # Enable publisher confirms. spring.rabbitmq.publisher-returns=false # Enable publisher returns. The Publisher Confirm mechanism provides two types of confirmation: synchronous mode (simple) and asynchronous mode (correlated). Synchronous mode offers a strict acknowledgement process but may lead to performance issues in high-throughput environments. It is typically used when reliability is the top priority. On the other hand, aschronous mode improves throughput but requires that the acknowledgement process be handled in the background.\nIt is important to note that using Publisher Confirm and Publisher Return mechanism incurs additional network and system resource costs. Therefore, these mechnisms should be used with caution in production systems. If they must be used, it\u0026rsquo;s recommended to rely on Publisher Confirm only, as routing issues are often caused by business logic problems, and Publisher Return is less commonly needed. Additionally, for messages that are negatively acknowledged (nack), retry them within a limited time window to avoid an infinite retry loop. If retried continue to fail, record the exception logs instead of attempting retries indefinitely.\nReliability: Broker Data Persistency LazyQueue ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/asynchronous-messaging/1-asynchronous-messaging/","summary":"Synchronous Messaging VS. Asynchronous Messaging Synchronous Messaging and Asynchronous Messaging are two commnucation paradigms used in distributed systems. In synchronous messaging, the sender will not continue executing until it receives the acknowledged message from the receiver. This paradigm is commonly used in situations that require immediate feedback to continue operations, such as parments or transaction processing.\nThe advantages of this paradigm include ease of implementation and usefulness in situations where immediate feedback is needed.","title":"Asynchronous Messaging"},{"content":"Introduction to DBMS A Database Management System (DBMS) is software that provides an interface for users to interact with databases. It enables the management, storage, and manipulation of data within databases. DBMS can be broadly classified into two main types: Relational DBMS and NoSQL DBMS.\nIn a Relational DBMS, data is stored in structured tables and is manipulated using SQL (Structured Query Language). Examples of relational DBMS inlcude MySQL, Oracle, and PostgreSQL.\nIn a NoSQL DBMS, data is typically unstructured or semi-structured, offering flexibility to handle diverse data types. Examples of NoSQL DBMS include MongoDB and Redis.\nMySQL MySQL is a relational database management system (RDBMS) that uses Structured Query Language (SQL) to interact with databases. It stores data in tables made up of rows and columns, allowing for efficient organization, retrival, and manipulation of data.\nSQL Commands SQL Commands are used to interact with relational databases. These commands can be classified into five types: DDL, DQL, DML, DCL, and TCL.\nSQL Commands DDL (Data Definition Language): Used to define and manage the structure of database instances, such as creating, altering, and deleting tables, and defining constraints. DQL (Data Query Language): Used to retrive data from the database, primarily through the SELECT statement. DML (Data Manipulation Language): Used to manipulate data within tables, such as inserting, updating, and deleting records. DCL (Data Control Language): Used to control access to data, manage user priviledges, and ensure data security. It includes commands like GRANT and REVOKE. TCL (Transaction Control Language): Used to manage transactions, ensuring data consistency. It includes commands like COMMIT, ROLLBACK, and SAVEPOINT. SQL Query Execution Order MySQL Execution Order: In MySQL, the execution order of an SQL query differs from the order in which components (e.g., SELECT, FROM, WHERE) are written in the query. MySQL begins by identifying the tables or views specified in the FROM clause. If there are any JOIN operation, MySQL performs the joins first and applies the ON condition. After completing the join operations, MySQL filters the based on the conditions specified in the WHERE clause.\nIf a GROUP BY clause is present, MySQL groups the rows based on the specified column(s) and then executes any aggregation functions (e.g., SUM(), COUNT(), etc.). Following the grouping, if a HAVING clause is provided, MySQL further filters the grouped results based on the specified condition.\nAfter filtering grouped results, MySQL selects the specified columns in the SELECT clause. If the DISTINCT keyword is used, MySQL removes duplicate rows from the selected result. Once the rows are selected and duplicates are removed, MySQL sorts the result set according to the rules defined in the ORDER BY clause.\nFinally, if a LIMIT or OFFSET clause is included, MySQL limits the number of rows returned, starting from the specified OFFSET.\nSQL Query Execution Order Select Find Customer Referee SHOW PROBLEM Table: Customer\nColumn Name Type id int name varchar referee_id int The id column is the primary key. Each row represents a customer, their name, and the id of the customer who referred them. If a customer wasn\u0026rsquo;t referred by anyone, the referee_id is NULL. Problem:\nFind the names of customers who were not referred by the customer with id = 2.\nThe result can be returned in any order.\nExample:\nInput: Customer table:\nid name referee_id 1 Will NULL 2 Jane NULL 3 Alex 2 4 Bill NULL 5 Zack 1 6 Mark 2 Output:\nname Will Jane Bill Zack Go to Leetcode 🔗 SHOW CODE MySQL SELECT name FROM Customer WHERE referee_id != 2 OR referee_id IS NULL; SHOW NOTES In SQL, NULL is not equal to any value, including 2. Therefore, the condition referee_id != 2 will exclude records where referee_id is NULL, because comparisons with NULLalways result in an unknownNULLvalue, which is neitherTRUEnorFALSE`. It is crucial to consider the handling of NULL values when working with databases.\nArticle Views I SHOW PROBLEM Table: Views\nColumn Name Type article_id int author_id int viewer_id int view_date date There is no primary key in this table, and the table may contain duplicate rows. Each row indicates that a viewer viewed an article, where the article is written by an author, on a specific date. If author_id and viewer_id are the same, it indicates that the author viewed their own article. Problem:\nWrite a query to find the IDs of authors who have viewed at least one of their own articles.\nReturn the result table sorted by author_id in ascending order.\nExample:\nInput:\nViews table:\narticle_id author_id viewer_id view_date 1 3 5 2019-08-01 1 3 6 2019-08-02 2 7 7 2019-08-01 2 7 6 2019-08-02 4 7 1 2019-07-22 3 4 4 2019-07-21 3 4 4 2019-07-21 Output:\nid 4 7 Go to Leetcode 🔗 SHOW CODE MySQL SELECT DISTINCT author_id AS id FROM Views WHERE author_id = viewer_id ORDER BY id ASC; SHOW NOTES In SQL, the DISTINCT keyword is used to remove duplicate records from the result set, ensuring that only unique values are returned. It is commonly used in scenarios such as aggregating distinct values and ensuring uniqueness in join queries.\n# Aggregating unique values SELECT DISTINCT product_id FROM Order_Items; # Ensuring unique results in join queries SELECT DISTINCT c.customer_id, c.name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id; Baisc Joins LEFT JOIN: Replace Employee ID With The Unique Identifier In MySQL, LEFT JOIN is used to combine rows from two or more tables based on a related column between them. It returns all rows from the left table and the matching rows from the right table. If there is no match, the result will include NULL values for the column from the right table.\nSHOW PROBLEM Tables:\nEmployees\nColumn Name Type id int name varchar id is the primary key for this table. Each row represents an employee in the company, containing their id and name. EmployeeUNI\nColumn Name Type id int unique_id int (id, unique_id) is the primary key, meaning the combination of id and unique_id is unique across the table. Each row represents an employee\u0026rsquo;s id and their corresponding unique_id in the company. Task:\nWrite a SQL query that returns the unique_id of each employee from the Employees table. If an employee does not have a corresponding unique_id, return NULL for that employee.\nQuery Requirements:\nIf an employee has a unique_id, show it. If an employee does not have a unique_id, return NULL. The result should display the unique_id and the name of each employee. The results can be returned in any order.\nExample:\nInput:\nEmployees table:\nid name 1 Alice 7 Bob 11 Meir 90 Winston 3 Jonathan EmployeeUNI table:\nid unique_id 3 1 11 2 90 3 Output:\nunique_id name NULL Alice NULL Bob 2 Meir 3 Winston 1 Jonathan Explanation:\nAlice and Bob do not have a unique_id, so NULL is shown for both. Meir has a unique_id of 2. Winston has a unique_id of 3. Jonathan has a unique_id of 1. Go to Leetcode 🔗 SHOW CODE MySQL SELECT euni.unique_id, e.name FROM Employees e LEFT JOIN EmployeeUNI euni ON e.id = euni.id; LEFT JOIN: Confirmation Rate SHOW PROBLEM Table: Signups\nColumn Name Type user_id int time_stamp datetime user_id is a unique identifier for each user. Each row represents the signup time for the user identified by user_id. Table: Confirmations\nColumn Name Type user_id int time_stamp datetime action ENUM The primary key is a combination of user_id and time_stamp. user_id is a foreign key referencing the Signups table. action is an ENUM with two possible values: 'confirmed' or 'timeout'. Each row represents a confirmation request made by the user with user_id, indicating whether the confirmation message was confirmed ('confirmed') or timed out ('timeout'). Problem Description\nThe confirmation rate of a user is calculated as the ratio of 'confirmed' actions to the total number of confirmation requests. If a user has not made any confirmation requests, the confirmation rate is 0. The rate should be rounded to two decimal places.\nGoal\nWrite a SQL query to find the confirmation rate for each user.\nReturn the result in any order.\nInput\nSignups table:\nuser_id time_stamp 3 2020-03-21 10:16:13 7 2020-01-04 13:57:59 2 2020-07-29 23:09:44 6 2020-12-09 10:39:37 Confirmations table:\nuser_id time_stamp action 3 2021-01-06 03:30:46 timeout 3 2021-07-14 14:00:00 timeout 7 2021-06-12 11:57:29 confirmed 7 2021-06-13 12:58:28 confirmed 7 2021-06-14 13:59:27 confirmed 2 2021-01-22 00:00:00 confirmed 2 2021-02-28 23:59:59 timeout Output\nuser_id confirmation_rate 6 0.00 3 0.00 7 1.00 2 0.50 Explanation:\nUser 6 did not request any confirmation messages, so their confirmation rate is 0. User 3 made two confirmation requests, but both timed out, so their confirmation rate is 0. User 7 made three requests, and all were confirmed, so their confirmation rate is 1.00. User 2 made two requests: one confirmed and one timed out, so their confirmation rate is 1/2 = 0.50. Go to Leetcode 🔗 SHOW CODE MySQL SELECT user_id, ROUND(IFNULL(SUM(action = 'confirmed') / COUNT(1), 0), 2) AS confirmation_rate FROM SignUps LEFT JOIN Confirmations USING (user_id) GROUP BY 1; SELECT s.user_id, CASE WHEN c.user_id IS NULL THEN 0.00 ELSE ROUND(SUM(CASE WHEN action = 'confirmed' THEN 1 ELSE 0 END) / COUNT(*),2) END AS confirmation_rate FROM Signups s LEFT JOIN Confirmations c ON c.user_id = s.user_id GROUP BY s.user_id SHOW NOTES SUM(action = 'confirmed'): action = 'confirmed' returns 1 for confirmed actions and 0 for 'timeout' action. COUNT(1): Counts the total number of rows. (Use COUNT(*) for counting rows is more clear and idiomatic). LEFT JOIN Confirmations USING (user_id): Joins the Signups table with the Confirmations table on the user_id column. GROUP BY 1: A shorthand for GROUP BY user_id. It groups the results by the first column in the SELECT list, which is user_id in this case. INNER JOIN: Product Sales Analysis I In MySQL, the INNER JOIN is used to combine rows from two or more tables based on a related column between them. It only returns rows where there is a match in all the joined tables.\nSHOW PROBLEM Tables:\nSales\nColumn Name Type sale_id int product_id int year int quantity int price int (sale_id, year) is the primary key, meaning this combination of columns is unique. product_id is a foreign key referencing the Product table. Each row represents a sale of a product identified by product_id in a particular year. The price is per unit of the product. Product\nColumn Name Type product_id int product_name varchar product_id is the primary key for this table. Each row represents a product with its product_name. Task:\nWrite a SQL query to report the product_name, year, and price for each sale in the Sales table.\nQuery Requirements:\nReturn the product_name from the Product table, corresponding to the product_id in the Sales table. Include the year and price from the Sales table for each sale. The result can be returned in any order. Example:\nInput:\nSales table:\nsale_id product_id year quantity price 1 100 2008 10 5000 2 100 2009 12 5000 7 200 2011 15 9000 Product table:\nproduct_id product_name 100 Nokia 200 Apple 300 Samsung Output:\nproduct_name year price Nokia 2008 5000 Nokia 2009 5000 Apple 2011 9000 Explanation:\nFrom sale_id = 1, we can conclude that Nokia was sold for 5000 in 2008. From sale_id = 2, we can conclude that Nokia was sold for 5000 in 2009. From sale_id = 7, we can conclude that Apple was sold for 9000 in 2011. Go to Leetcode 🔗 SHOW CODE MySQL SELECT p.product_name, s.year, s.price FROM Sales s INNER JOIN Product p ON s.product_id = p.product_id; LEFT JOIN: Customer Who Visited but Did Not Make Any Transactions SHOW PROBLEM Table: Visits\nColumn Name Type visit_id int customer_id int visit_id is the unique identifier for each visit. This table contains information about the customers who visited the mall. Table: Transactions\nColumn Name Type transaction_id int visit_id int amount int transaction_id is the unique identifier for each transaction. This table contains information about the transactions made during each visit. Task:\nWrite a SQL query to find the IDs of customers who visited the mall without making any transactions, and count how many times they made these visits.\nThe result should include:\ncustomer_id — the ID of the customer. count_no_trans — the number of visits where no transaction was made. Query Requirements:\nReturn the result sorted in any order. Input:\nVisits table:\nvisit_id customer_id 1 23 2 9 4 30 5 54 6 96 7 54 8 54 Transactions table:\ntransaction_id visit_id amount 2 5 310 3 5 300 9 5 200 12 1 910 13 2 970 Output:\ncustomer_id count_no_trans 54 2 30 1 96 1 Explanation:\nCustomer with id = 23 visited once and made a transaction during the visit with id = 12. Customer with id = 9 visited once and made a transaction during the visit with id = 13. Customer with id = 30 visited once and did not make any transactions. Customer with id = 54 visited three times. During two visits, they did not make any transactions, and during one visit, they made three transactions. Customer with id = 96 visited once and did not make any transactions. In the output, customers with id = 30, id = 96, and id = 54 (for two of their visits) made visits without transactions.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT v.customer_id, COUNT(v.visit_id) as count_no_trans FROM Visits v LEFT JOIN Transactions t ON v.visit_id = t.visit_id WHERE t.transaction_id IS NULL GROUP BY v.customer_id; SHOW NOTES In the above SQL query, MySQL first identifies the Visits table and performs a LEFT JOIN with the Transactions table based on the condition v.visit_id = t.visit_id. The LEFT JOIN operation combines the two tables and fills NULL in rows where there is no match in the Transactions table. The result looks like this:\nSELECT * FROM Visits v LEFT JOIN Transactions t ON v.visit_id = t.visit_id; visit_id customer_id transaction_id visit_id amount 1 23 12 1 910 2 9 13 2 970 4 30 null null null 5 54 9 5 200 5 54 3 5 300 5 54 2 5 310 6 96 null null null 7 54 null null null 8 54 null null null After joining the tables, MySQL applies the WHERE clause to filter rows where t.transaction_id IS NULL, which means visits without any transactions.\nSELECT * FROM Visits v LEFT JOIN Transactions t ON v.visit_id = t.visit_id WHERE t.transaction_id IS NULL; visit_id customer_id transaction_id visit_id amount 4 30 null null null 6 96 null null null 7 54 null null null 8 54 null null null Next, MySQL groups the filtered rows by customer_id and calculates the number of visits per customer using the COUNT(v.visit_id) function.\nSELECT *, COUNT(v.visit_id) FROM Visits v LEFT JOIN Transactions t ON v.visit_id = t.visit_id WHERE t.transaction_id IS NULL GROUP BY v.customer_id; visit_id customer_id transaction_id visit_id amount COUNT(v.visit_id) 4 30 null null null 1 6 96 null null null 1 7 54 null null null 2 Finally, MySQL selects the desired columns and renames the COUNT(v.visit_id) column using the AS clause.\nSELECT v.customer_id, COUNT(v.visit_id) AS count_no_trans FROM Visits v LEFT JOIN Transactions t ON v.visit_id = t.visit_id WHERE t.transaction_id IS NULL GROUP BY v.customer_id; customer_id count_no_trans 30 1 96 1 54 2 SELF JOIN: Rising Temperature In MySQL, a self join is an operation where a table joins itself. It is commonly used when comparing rows within the same table based on a specific condition or when working with hierarchical data, such as relating employees to their managers.\nSHOW PROBLEM Table: Weather\nColumn Name Type id int recordDate date temperature int id is a column with unique values. There are no duplicate rows for the same recordDate. This table contains information about the temperature on specific dates. Problem Statement\nWrite a solution to find the id of all dates where the temperature is higher compared to the previous day (yesterday).\nReturn\nReturn the result table in any order. Input:\nWeather Table:\nid recordDate temperature 1 2015-01-01 10 2 2015-01-02 25 3 2015-01-03 20 4 2015-01-04 30 Output:\nid 2 4 Explanation:\nOn 2015-01-02, the temperature was higher than the previous day (10 -\u0026gt; 25). On 2015-01-04, the temperature was higher than the previous day (20 -\u0026gt; 30). Go to Leetcode 🔗 SHOW CODE MySQL SELECT w1.id FROM Weather w1 JOIN Weather w2 ON DATE_ADD(w2.recordDate, INTERVAL 1 DAY) = w1.recordDate WHERE w1.temperature \u003e w2.temperature; SHOW NOTES In the above query, the DATE_ADD(w2.recordDate, INTERVAL 1 DAY) = w1.recordDate condition ensures that the recordDate of w1 matches the day following w2\u0026rsquo;s recordDate.\nSELECT * FROM Weather w1 JOIN Weather w2 ON DATE_ADD(w2.recordDate, INTERVAL 1 DAY) = w1.recordDate id recordDate temperature id recordDate temperature 1 2015-01-01 10 2 2015-01-02 25 1 2015-01-01 10 3 2015-01-03 20 2 2015-01-02 25 4 2015-01-04 30 3 2015-01-03 20 4 2015-01-04 30 Result of the Join:\nid recordDate temperature id recordDate temperature 2 2015-01-02 25 1 2015-01-01 10 3 2015-01-03 20 2 2015-01-02 25 4 2015-01-04 30 3 2015-01-03 20 when id equals to 2, 25 \u0026gt; 10, so it is selcted. when id equals to 3, 20 \u0026lt; 25, so it is not selcted. when id equals to 4, 25 \u0026gt; 10, so it is selcted. Therefore, the result will be:\nid 2 4 Example: Relating Employees to Their Managers\nEmployees Table:\nid name manager_id 1 Alice NULL 2 Bob 1 3 Charlie 1 4 David 2 SELECT e1.name AS Employee, e2.name AS Manager FROM Employees e1 JOIN Employees e2 ON e1.manager_id = e2.id; Result of the Join:\nid name manager_id id name manager_id 2 Bob 1 1 Alice NULL 3 Charlie 1 1 Alice NULL 4 David 2 2 Bob 1 Final Result:\nEmployee Manager Bob Alice Charlie Alice David Bob SELF JOIN: Managers with at Least 5 Direct Reports SHOW PROBLEM Problem Description\nTable: Employee\nColumn Name Data Type Description id int Unique identifier for each employee. name varchar Name of the employee. department varchar Department to which the employee belongs. managerId int ID of the employee\u0026rsquo;s manager. If managerId is null, the employee does not have a manager. id is the primary key, ensuring each value is unique. Each row represents an employee, including their name, department, and their manager’s ID. If managerId is null, the employee does not report to any manager. An employee cannot be their own manager. Task\nWrite a query to find the managers who have at least five direct reports.\nReturn the result in any order.\nInput:\nEmployee Table:\nid name department managerId 101 John A null 102 Dan A 101 103 James A 101 104 Amy A 101 105 Anne A 101 106 Ron B 101 Output:\nname John Go to Leetcode 🔗 SHOW CODE MySQL SELECT b.name FROM Employee a JOIN Employee b ON a.managerId = b.id GROUP BY b.id HAVING COUNT(*) \u003e= 5 SHOW NOTES Table: Employee:\nid name department managerId 101 John A null 102 Dan A 101 103 James A 101 104 Amy A 101 105 Anne A 101 106 Ron B 101 Perform a self join, the table becomes:\nSELECT * FROM Employee a JOIN Employee b ON a.managerId = b.id Table: Slef Joined Result:\nid name department managerId id name department managerId 106 Ron B 101 101 John A null 105 Anne A 101 101 John A null 104 Amy A 101 101 John A null 103 James A 101 101 John A null 102 Dan A 101 101 John A null Group the self joined result:\nSELECT * FROM Employee a JOIN Employee b ON a.managerId = b.id GROUP BY b.id Table: Grouped Result:\nid name department managerId id name department managerId 106 Ron B 101 101 John A null Filter grouped result:\nSELECT * FROM Employee a JOIN Employee b ON a.managerId = b.id GROUP BY b.id HAVING COUNT(*) \u0026gt;= 5 Table: Filtered Grouped Result:\nid name department managerId id name department managerId 106 Ron B 101 101 John A null Select the specified column(s):\nSELECT b.name FROM Employee a JOIN Employee b ON a.managerId = b.id GROUP BY b.id HAVING COUNT(*) \u0026gt;= 5 Final Result:\nname John SELF JOIN: Average Time of Process per Machine SHOW PROBLEM Table: Activity\nColumn Name Type machine_id int process_id int activity_type enum timestamp float The table records user activities for machines on a factory website. The combination of (machine_id, process_id, activity_type) is the primary key, ensuring uniqueness in the table. machine_id is the ID of the machine. process_id is the ID of the process running on the machine with ID machine_id. activity_type is an ENUM type with values 'start' and 'end', representing the start and end of a process. timestamp is a float value representing the time (in seconds) the event occurred. The 'start' timestamp is always earlier than the 'end' timestamp for each (machine_id, process_id) pair. It is guaranteed that each (machine_id, process_id) pair has a corresponding 'start' and 'end' timestamp. Problem:\nThere are several machines on a factory website, and each machine runs the same number of processes. Your task is to write a SQL query that calculates the average time each machine takes to complete a process.\nThe time to complete a process is the difference between the 'end' timestamp and the 'start' timestamp. The average time for each machine is calculated by dividing the total time for all processes on that machine by the number of processes. The result should contain the following columns:\nmachine_id — the ID of the machine. processing_time — the average processing time, rounded to 3 decimal places. Input:\nActivity table: |------------|------------|---------------|-----------| | machine_id | process_id | activity_type | timestamp | |------------|------------|---------------|-----------| | 0 | 0 | start | 0.712 | | 0 | 0 | end | 1.520 | | 0 | 1 | start | 3.140 | | 0 | 1 | end | 4.120 | | 1 | 0 | start | 0.550 | | 1 | 0 | end | 1.550 | | 1 | 1 | start | 0.430 | | 1 | 1 | end | 1.420 | | 2 | 0 | start | 4.100 | | 2 | 0 | end | 4.512 | | 2 | 1 | start | 2.500 | | 2 | 1 | end | 5.000 | |------------|------------|---------------|-----------| Output:\n|------------|-----------------| | machine_id | processing_time | |------------|-----------------| | 0 | 0.894 | | 1 | 0.995 | | 2 | 1.456 | |------------|-----------------| Explanation:\nMachine 0:\nProcess 0: End time 1.520, Start time 0.712 → Time taken = 1.520 - 0.712 = 0.808 Process 1: End time 4.120, Start time 3.140 → Time taken = 4.120 - 3.140 = 0.980 Average time = (0.808 + 0.980) / 2 = 0.894 Machine 1:\nProcess 0: End time 1.550, Start time 0.550 → Time taken = 1.550 - 0.550 = 1.000 Process 1: End time 1.420, Start time 0.430 → Time taken = 1.420 - 0.430 = 0.990 Average time = (1.000 + 0.990) / 2 = 0.995 Machine 2:\nProcess 0: End time 4.512, Start time 4.100 → Time taken = 4.512 - 4.100 = 0.412 Process 1: End time 5.000, Start time 2.500 → Time taken = 5.000 - 2.500 = 2.500 Average time = (0.412 + 2.500) / 2 = 1.456 Go to Leetcode 🔗 SHOW CODE MySQL SELECT machine_id, ROUND(AVG(end_time - start_time), 3) AS processing_time FROM ( SELECT a.machine_id, a.process_id, a.timestamp AS start_time, b.timestamp AS end_time FROM Activity a JOIN Activity b ON a.machine_id = b.machine_id AND a.process_id = b.process_id AND a.activity_type = 'start' AND b.activity_type = 'end' ) AS process_times GROUP BY machine_id; SHOW NOTES In the following SQL query, the condition a.activity_type = 'start' and b.activity_type = 'end' ensures that the start and end timestamp are correctly matched for the same process on the same machine.\nSELECT * FROM Activity a JOIN Activity b ON a.machine_id = b.machine_id AND a.process_id = b.process_id AND a.activity_type = \u0026#39;start\u0026#39; AND b.activity_type = \u0026#39;end\u0026#39; Result of the Join:\nmachine_id process_id activity_type timestamp machine_id process_id activity_type timestamp 0 0 start 0.712 0 0 end 1.52 0 1 start 3.14 0 1 end 4.12 1 0 start 0.55 1 0 end 1.55 1 1 start 0.43 1 1 end 1.42 2 0 start 4.1 2 0 end 4.512 2 1 start 2.5 2 1 end 5 The result is selected from of the joined result:\nSELECT machine_id, ROUND(AVG(end_time - start_time), 3) AS processing_time FROM ( SELECT a.machine_id, a.process_id, a.timestamp AS start_time, b.timestamp AS end_time FROM Activity a JOIN Activity b ON a.machine_id = b.machine_id AND a.process_id = b.process_id AND a.activity_type = \u0026#39;start\u0026#39; AND b.activity_type = \u0026#39;end\u0026#39; ) AS process_times GROUP BY machine_id; Final Result:\nmachine_id processing_time 0 0.894 1 0.995 2 1.456 CROSS JOIN: Students and Examinations In MySQL, a CROSS JOIN is a type of join that returns the Cartesian product of two tables. It combines each row from the first table with every row from the second table, without the need for a join condition. For example, consider two tables, Students and Subjects:\nTable 1: Students\nstudent_id student_name 1 Alice 2 Bob Table 2: Subjects\nsubject_name Math Physics When a Cross Join is performed between these two tables, the result will be:\nTable: Result of Cross Join\nstudent_id student_name subject_name 1 Alice Math 1 Alice Physics 2 Bob Math 2 Bob Physics SHOW PROBLEM Table: Students\nColumn Name Type student_id int student_name varchar student_id is the primary key (unique values) for this table. Each row represents a student with their unique ID and name. Table: Subjects\nColumn Name Type subject_name varchar subject_name is the primary key (unique values) for this table. Each row represents the name of a subject offered in the school. Table: Examinations\nColumn Name Type student_id int subject_name varchar There is no primary key for this table, and it may contain duplicates. Each row indicates that a student with student_id attended the exam for the subject subject_name. Every student takes every course from the Subjects table. Task:\nWrite a query to find the number of times each student attended each exam, ordered by student_id and subject_name.\nInput:\nStudents Table:\nstudent_id student_name 1 Alice 2 Bob 13 John 6 Alex Subjects Table:\nsubject_name Math Physics Programming Examinations Table:\nstudent_id subject_name 1 Math 1 Physics 1 Programming 2 Programming 1 Physics 1 Math 13 Math 13 Programming 13 Physics 2 Math 1 Math Output:\nstudent_id student_name subject_name attended_exams 1 Alice Math 3 1 Alice Physics 2 1 Alice Programming 1 2 Bob Math 1 2 Bob Physics 0 2 Bob Programming 1 6 Alex Math 0 6 Alex Physics 0 6 Alex Programming 0 13 John Math 1 13 John Physics 1 13 John Programming 1 Explanation:\nThe result table contains all students and all subjects.\nAlice attended the Math exam 3 times, the Physics exam 2 times, and the Programming exam 1 time. Bob attended the Math exam 1 time, the Programming exam 1 time, and did not attend the Physics exam. Alex did not attend any exams. John attended the Math exam 1 time, the Physics exam 1 time, and the Programming exam 1 time. Go to Leetcode 🔗 SHOW CODE MySQL SELECT s.student_id, s.student_name, sub.subject_name, COUNT(e.student_id) AS attended_exams FROM Students s CROSS JOIN Subjects sub LEFT JOIN Examinations e ON s.student_id = e.student_id AND sub.subject_name = e.subject_name GROUP BY s.student_id, s.student_name, sub.subject_name ORDER BY s.student_id, sub.subject_name; SHOW NOTES Table: Students\nstudent_id student_name 1 Alice 2 Bob 13 John 6 Alex Table: Subjects:\nsubject_name Math Physics Programming When a CROSS JOIN is performed between the Students and Subjects tables, the result will be:\nSELECT * FROM Students s CROSS JOIN Subjects sub Table: Result of Cross Join:\nstudent_id student_name subject_name 1 Alice Programming 1 Alice Physics 1 Alice Math 2 Bob Programming 2 Bob Physics 2 Bob Math 13 John Programming 13 John Physics 13 John Math 6 Alex Programming 6 Alex Physics 6 Alex Math Table: Examniations:\nstudent_id subject_name 1 Math 1 Physics 1 Programming 2 Programming 1 Physics 1 Math 13 Math 13 Programming 13 Physics 2 Math 1 Math Perform a LEFT JOIN on the cross-joined tables with the Examinations table:\nSELECT * FROM Students s CROSS JOIN Subjects sub LEFT JOIN Examinations e ON s.student_id = e.student_id AND sub.subject_name = e.subject_name Table: Left Join Result:\nstudent_id student_name subject_name student_id subject_name 1 Alice Programming 1 Programming 1 Alice Physics 1 Physics 1 Alice Physics 1 Physics 1 Alice Math 1 Math 1 Alice Math 1 Math 1 Alice Math 1 Math 2 Bob Programming 2 Programming 2 Bob Physics null null 2 Bob Math 2 Math 13 John Programming 13 Programming 13 John Physics 13 Physics 13 John Math 13 Math 6 Alex Programming null null 6 Alex Physics null null 6 Alex Math null null After grouping the left joined result and count the e.studentId, the table will look like:\nSELECT *, COUNT(e.student_id) AS attended_exams FROM Students s CROSS JOIN Subjects sub LEFT JOIN Examinations e ON s.student_id = e.student_id AND sub.subject_name = e.subject_name GROUP BY s.student_id, s.student_name, sub.subject_name Table: Grouped Result with Count:\nstudent_id student_name subject_name student_id subject_name attended_exams 1 Alice Programming 1 Programming 1 1 Alice Physics 1 Physics 2 1 Alice Math 1 Math 3 2 Bob Programming 2 Programming 1 2 Bob Physics null null 0 2 Bob Math 2 Math 1 13 John Programming 13 Programming 1 13 John Physics 13 Physics 1 13 John Math 13 Math 1 6 Alex Programming null null 0 6 Alex Physics null null 0 6 Alex Math null null 0 After selecting the specified columns, the result table becomes:\nSELECT s.student_id, s.student_name, sub.subject_name, COUNT(e.student_id) AS attended_exams FROM Students s CROSS JOIN Subjects sub LEFT JOIN Examinations e ON s.student_id = e.student_id AND sub.subject_name = e.subject_name GROUP BY s.student_id, s.student_name, sub.subject_name student_id student_name subject_name attended_exams 1 Alice Programming 1 1 Alice Physics 2 1 Alice Math 3 2 Bob Programming 1 2 Bob Physics 0 2 Bob Math 1 13 John Programming 1 13 John Physics 1 13 John Math 1 6 Alex Programming 0 6 Alex Physics 0 6 Alex Math 0 Sort the selcted table based on the condition s.student_id and sub.subject_name, return the final result:\nTable: Final Result:\nstudent_id student_name subject_name attended_exams 1 Alice Math 3 1 Alice Physics 2 1 Alice Programming 1 2 Bob Math 1 2 Bob Physics 0 2 Bob Programming 1 6 Alex Math 0 6 Alex Physics 0 6 Alex Programming 0 13 John Math 1 13 John Physics 1 13 John Programming 1 Basic Aggregate Functions Average Selling Price SHOW PROBLEM Table: Prices\nColumn Name Type product_id int start_date date end_date date price int The primary key for this table is the combination of (product_id, start_date, end_date), ensuring unique periods for each product. Each row represents the price of a product for a specific period, from start_date to end_date. For each product, no two periods will overlap. Table: UnitsSold\nColumn Name Type product_id int purchase_date date units int This table may contain duplicate rows. Each row represents the date, number of units, and product_id for a product sold on that date. Problem:\nWrite a SQL query to find the average selling price for each product. The average_price should be rounded to two decimal places. If a product does not have any sold units, its average selling price should be considered 0.\nReturn the result table in any order.\nInput:\nPrices table:\nproduct_id start_date end_date price 1 2019-02-17 2019-02-28 5 1 2019-03-01 2019-03-22 20 2 2019-02-01 2019-02-20 15 2 2019-02-21 2019-03-31 30 UnitsSold table:\nproduct_id purchase_date units 1 2019-02-25 100 1 2019-03-01 15 2 2019-02-10 200 2 2019-03-22 30 Output:\nproduct_id average_price 1 6.96 2 16.96 Explanation:\nFor product 1:\nFrom 2019-02-17 to 2019-02-28, 100 units were sold at a price of 5. From 2019-03-01 to 2019-03-22, 15 units were sold at a price of 20. Average price is calculated based on the total price and total units sold. For product 2:\nFrom 2019-02-01 to 2019-02-20, 200 units were sold at a price of 15. From 2019-02-21 to 2019-03-31, 30 units were sold at a price of 30. Average price is calculated based on the total price and total units sold. Go to Leetcode 🔗 SHOW CODE MySQL SELECT p.product_id, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date GROUP BY 1; SHOW NOTES: Right Answer MySQL Query Walkthrough:\nTable: Prices\nproduct_id start_date end_date price 1 2019-02-17 2019-02-28 5 1 2019-03-01 2019-03-22 20 2 2019-02-01 2019-02-20 15 2 2019-02-21 2019-03-31 30 3 2019-02-21 2019-03-31 30 Table: UnitsSold\nproduct_id purchase_date units 1 2019-02-25 100 1 2019-03-01 15 2 2019-02-10 200 2 2019-03-22 30 Join the two tables based on the product_id and the purchase_date, where the purchase_date falls between the start_date and the end_date:\nSELECT * FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date; product_id start_date end_date price product_id purchase_date units 1 2019-02-17 2019-02-28 5 1 2019-02-25 100 1 2019-03-01 2019-03-22 20 1 2019-03-01 15 2 2019-02-01 2019-02-20 15 2 2019-02-10 200 2 2019-02-21 2019-03-31 30 2 2019-03-22 30 3 2019-02-21 2019-03-31 30 null null null Group the joined result and then use aggregation functions to calculate the average price:\nSELECT *, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date GROUP BY 1; product_id start_date end_date price product_id purchase_date units average_price 1 2019-02-17 2019-02-28 5 1 2019-02-25 100 6.96 2 2019-02-01 2019-02-20 15 2 2019-02-10 200 16.96 3 2019-02-21 2019-03-31 30 null null null 0 Select the desired columns:\nSELECT p.product_id, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date GROUP BY 1; product_id average_price 1 6.96 2 16.96 3 0 SHOW NOTES: Wrong Answer # Wrong Answer SELECT p.product_id, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id WHERE purchase_date BETWEEN start_date AND end_date GROUP BY 1; Join the two tables based on the condition p.product_id = u.product_id:\nSELECT * FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id; product_id start_date end_date price product_id purchase_date units 1 2019-02-17 2019-02-28 5 1 2019-03-01 15 1 2019-02-17 2019-02-28 5 1 2019-02-25 100 1 2019-03-01 2019-03-22 20 1 2019-03-01 15 1 2019-03-01 2019-03-22 20 1 2019-02-25 100 2 2019-02-01 2019-02-20 15 2 2019-03-22 30 2 2019-02-01 2019-02-20 15 2 2019-02-10 200 2 2019-02-21 2019-03-31 30 2 2019-03-22 30 2 2019-02-21 2019-03-31 30 2 2019-02-10 200 3 2019-02-21 2019-03-31 30 null null null Filter out the rows that do not fall between start_date and end_date:\nSELECT * FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id WHERE purchase_date BETWEEN start_date AND end_date; product_id start_date end_date price product_id purchase_date units 1 2019-02-17 2019-02-28 5 1 2019-02-25 100 1 2019-03-01 2019-03-22 20 1 2019-03-01 15 2 2019-02-01 2019-02-20 15 2 2019-02-10 200 2 2019-02-21 2019-03-31 30 2 2019-03-22 30 Group the filtered result and then use aggregation functions to calculate average price:\nSELECT *, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id WHERE purchase_date BETWEEN start_date AND end_date GROUP BY 1; product_id start_date end_date price product_id purchase_date units average_price 1 2019-02-17 2019-02-28 5 1 2019-02-25 100 6.96 2 2019-02-01 2019-02-20 15 2 2019-02-10 200 16.96 Select the desired columns:\nSELECT p.product_id, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id WHERE purchase_date BETWEEN start_date AND end_date GROUP BY 1; product_id average_price 1 6.96 2 16.96 The correct answer is:\nproduct_id average_price 1 6.96 2 16.96 3 0 Summary: The LEFT JOIN operation will return NULL results for rows without without matching records in the UnitsSold table. In the condition p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date, the date range check is applied during the join operation, while WHERE purchase_date BETWEEN start_date AND end_date is applied after the join operation. The WHERE clause exlcudes rows with NULL values, which means products with no matching sales records (i.e., where purchase_date doesn\u0026rsquo;t match) will be excluded from the result. When grouping the result, no rows containing NULL values remain, leading to an incorrect result (missing product_id = 3 with average_price = 0).\nPercentage of Users Attended a Contest SHOW PROBLEM Table: Users\nColumn Name Type user_id int user_name varchar user_id is the primary key (a unique identifier) for this table. Each row in this table represents a user, with their unique ID and name. Table: Register\nColumn Name Type contest_id int user_id int (contest_id, user_id) is the primary key (a unique combination of columns) for this table. Each row in this table represents the registration of a user in a specific contest. Task\nWrite a solution to calculate the percentage of users registered for each contest, rounded to two decimal places.\nReturn the result table sorted by percentage in descending order. If there is a tie in percentage, order by contest_id in ascending order.\nInput:\nUsers table:\nuser_id user_name 6 Alice 2 Bob 7 Alex Register table:\ncontest_id user_id 215 6 209 2 208 2 210 6 208 6 209 7 209 6 215 7 208 7 210 2 207 2 210 7 Output:\ncontest_id percentage 208 100.0 209 100.0 210 100.0 215 66.67 207 33.33 Explanation:\nContests 208, 209, and 210 had 100% user registration. The results are sorted by contest_id in ascending order. Contest 215 had a registration rate of 66.67%, as Alice and Alex registered, out of a total of three users. Contest 207 had a registration rate of 33.33%, as only Bob registered, out of a total of three users. Go to Leetcode 🔗 SHOW CODE MySQL SELECT contest_id, ROUND(COUNT(user_id) * 100 / (SELECT COUNT(user_id) FROM Users),2) percentage FROM Register a GROUP BY contest_id ORDER BY percentage DESC,contest_id ASC; SHOW NOTES $$ \\text{percentage} = \\frac{\\text{number of users attended in the contest}}{\\text{total number of users}} \\times 100 \\% $$\nCompute the total number of users: SELECT COUNT(user_id) FROM Users Compute the number of users attended in the contest: Group the table based on the column contest_id, then count the number of users in each group. Queries Quality and Percentage SHOW PROBLEM Table: Queries\nColumn Name Type query_name varchar result varchar position int rating int This table may contain duplicate rows. It contains information collected from various queries executed on a database. The position column has a value ranging from 1 to 500. The rating column has a value between 1 and 5. Queries with a rating less than 3 are considered poor queries. Definitions:\nQuery quality: The average of the ratio between the query\u0026rsquo;s rating and its position. Poor query percentage: The percentage of queries with a rating less than 3. Objective: Write a solution to find:\nThe query_name, The quality of each query (rounded to 2 decimal places), The poor_query_percentage for each query (rounded to 2 decimal places). Input: Queries table:\nquery_name result position rating Dog Golden Retriever 1 5 Dog German Shepherd 2 5 Dog Mule 200 1 Cat Shirazi 5 2 Cat Siamese 3 3 Cat Sphynx 7 4 Output:\nquery_name quality poor_query_percentage Dog 2.50 33.33 Cat 0.66 33.33 Explanation:\nDog queries:\nQuality:\n$$ \\left( \\frac{5}{1} + \\frac{5}{2} + \\frac{1}{200} \\right) / 3 = 2.50 $$ Poor query percentage:\n$$ \\frac{1}{3} \\times 100 = 33.33 $$ Cat queries:\nQuality:\n$$ \\left( \\frac{2}{5} + \\frac{3}{3} + \\frac{4}{7} \\right) / 3 = 0.66 $$ Poor query percentage:\n$$ \\frac{1}{3} \\times 100 = 33.33 $$ Go to Leetcode 🔗 SHOW CODE MySQL SELECT query_name, ROUND(AVG(rating / position), 2) AS quality, ROUND(SUM(CASE WHEN rating \u003c 3 THEN 1 ELSE 0 END) / COUNT(*) * 100, 2) AS poor_query_percentage FROM Queries GROUP BY query_name; Monthly Transactions I SHOW PROBLEM Table: Transactions\nColumn Name Type id int country varchar state enum amount int trans_date date id is the primary key of this table. The table stores information about incoming transactions. The state column is an enum with values [\u0026ldquo;approved\u0026rdquo;, \u0026ldquo;declined\u0026rdquo;]. Task:\nFor each month and country, find the following information:\nThe total number of transactions (trans_count). The total amount of all transactions (trans_total_amount). The number of approved transactions (approved_count). The total amount of approved transactions (approved_total_amount). The results should be returned in any order.\nExample Input:\nid country state amount trans_date 121 US approved 1000 2018-12-18 122 US declined 2000 2018-12-19 123 US approved 2000 2019-01-01 124 DE approved 2000 2019-01-07 Example Output:\nmonth country trans_count approved_count trans_total_amount approved_total_amount 2018-12 US 2 1 3000 1000 2019-01 US 1 1 2000 2000 2019-01 DE 1 1 2000 2000 Go to Leetcode 🔗 SHOW CODE MySQL SELECT DATE_FORMAT(trans_date, '%Y-%m') AS month, country, COUNT(*) AS trans_count, SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END) AS approved_count, SUM(amount) AS trans_total_amount, SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END) AS approved_total_amount FROM Transactions GROUP BY month, country; SELECT DATE_FORMAT(trans_date, '%Y-%m') AS month, country, COUNT(*) AS trans_count, COUNT(IF(state = 'approved', 1, NULL)) AS approved_count, SUM(amount) AS trans_total_amount, SUM(IF(state = 'approved', amount, 0)) AS approved_total_amount FROM Transactions GROUP BY month, country; SHOW NOTES The DATE_FORMAT function in SQL is used to format a date into a specific string format. For example, DATE_FORMAT('2024-12-19', '%Y-%m') will output '2024-12', extracting the year and month from the date. The IF function in SQL returns one value if the condition is true and another value if the condition is false. For example, IF(amount \u0026gt; 1000, 1, 0) will return 1 if the amount is greater than 1000, otherwise, it will return 0. The CASE...WHEN...THEN...ELSE...END statement is similar to the switch statement in other programming languages like Java. It works like the IF function, but with the ability to handle multiple conditions. It checks each condition in sequence and returns the corresponding result for the first true condition. Immediate Food Delivery II SHOW PROBLEM Table: Delivery\nColumn Name Type delivery_id int customer_id int order_date date customer_pref_delivery_date date delivery_id is the unique identifier for each delivery. The table contains information about food deliveries, where customers place orders on a specific date and specify a preferred delivery date (either on the same day or later). If the customer_pref_delivery_date is the same as the order_date, the order is considered immediate; otherwise, it is scheduled. The first order of a customer is defined as the one with the earliest order_date. Each customer has exactly one first order. Task:\nFind the percentage of immediate orders among the first orders of all customers, rounded to two decimal places.\nThe result should follow the format shown below:\nExample Input:\ndelivery_id customer_id order_date customer_pref_delivery_date 1 1 2019-08-01 2019-08-02 2 2 2019-08-02 2019-08-02 3 1 2019-08-11 2019-08-12 4 3 2019-08-24 2019-08-24 5 3 2019-08-21 2019-08-22 6 2 2019-08-11 2019-08-13 7 4 2019-08-09 2019-08-09 Example Output:\nimmediate_percentage 50.00 Explanation:\nCustomer 1 has their first order with delivery_id 1, which is scheduled. Customer 2 has their first order with delivery_id 2, which is immediate. Customer 3 has their first order with delivery_id 5, which is scheduled. Customer 4 has their first order with delivery_id 7, which is immediate. Hence, 50% of the first orders are immediate.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT ROUND((SUM(IF(order_date = customer_pref_delivery_date, 1, 0)) / COUNT(*)) * 100, 2) AS immediate_percentage FROM (SELECT customer_id, MIN(order_date) AS first_order_date FROM Delivery GROUP BY customer_id) AS first_orders INNER JOIN Delivery AS d ON first_orders.customer_id = d.customer_id AND first_orders.first_order_date = d.order_date; Game Play Analysis IV SHOW PROBLEM Table: Activity\nColumn Name Type player_id int device_id int event_date date games_played int The combination of (player_id, event_date) is the primary key of this table, ensuring each player can only log in once per day. This table tracks the activity of players in games, where each record represents a player\u0026rsquo;s login and the number of games played (which could be zero) before logging out on a specific day using a particular device. Task:\nCalculate the fraction of players who logged in again on the day after their first login date. The result should be rounded to two decimal places.\nIn other words, identify the players who logged in on consecutive days starting from their first login date, then divide that count by the total number of players.\nExample Input:\nplayer_id device_id event_date games_played 1 2 2016-03-01 5 1 2 2016-03-02 6 2 3 2017-06-25 1 3 1 2016-03-02 0 3 4 2018-07-03 5 Example Output:\nfraction 0.33 Explanation:\nPlayer 1 logged in on 2016-03-01 and 2016-03-02, meaning they logged in for at least two consecutive days, starting from their first login. Player 2 did not log in again on the day after their first login. Player 3 did not log in on consecutive days, as there was a gap between their logins. Thus, only player 1 satisfies the condition, and the fraction is calculated as 1/3 = 0.33.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT ROUND( SUM(IF(DATEDIFF(event_date, min_event_date) = 1, 1, 0)) / COUNT(DISTINCT player_id), 2) AS fraction FROM ( SELECT player_id, event_date, MIN(event_date) OVER (PARTITION BY player_id) AS min_event_date FROM activity ) AS activity_with_min_date; SHOW NOTES The DATEDIFF function in MySQL calculates the difference in days between two dates. For example, DATEDIFF('2024-12-30', '2024-12-25') will output 5, indicating there are 5 days between the two dates. The PARTITION BY clause is used in window functions to divide the result ser into partitions (groups) based on a specified column. It applies window functions, such as RANK(), SUM(), ROW_NUMBER(), and others, to each partition. This works similarly to GROUP BY, but unlike GROUP BY, the PARTITION BY clause allows retaining the row-level data while applying the window functions. Input Table: employees\ndepartment_id employee_id salary 101 1 5000 101 2 4000 101 3 6000 102 4 4500 102 5 5500 102 6 4800 SELECT department_id, employee_id, salary, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank FROM employees; Output (Result of Query):\ndepartment_id employee_id salary salary_rank 101 3 6000 1 101 1 5000 2 101 2 4000 3 102 5 5500 1 102 6 4800 2 102 4 4500 3 Sorting and Grouping User Activity for the Past 30 Days I SHOW PROBLEM Table: Activity\nColumn Name Type user_id int session_id int activity_date date activity_type enum The activity_type column is an ENUM with values: \u0026lsquo;open_session\u0026rsquo;, \u0026rsquo;end_session\u0026rsquo;, \u0026lsquo;scroll_down\u0026rsquo;, \u0026lsquo;send_message\u0026rsquo;. This table logs user activities for a social media website, where each session is linked to exactly one user. The table may contain duplicate rows. Task:\nYou need to find the count of unique active users per day for the 30-day period ending on 2019-07-27, inclusive. A user is considered active on a particular day if they perform at least one activity on that day.\nExample:\nInput: Activity table\nuser_id session_id activity_date activity_type 1 1 2019-07-20 open_session 1 1 2019-07-20 scroll_down 1 1 2019-07-20 end_session 2 4 2019-07-20 open_session 2 4 2019-07-21 send_message 2 4 2019-07-21 end_session 3 2 2019-07-21 open_session 3 2 2019-07-21 send_message 3 2 2019-07-21 end_session 4 3 2019-06-25 open_session 4 3 2019-06-25 end_session Output:\nday active_users 2019-07-20 2 2019-07-21 2 Explanation:\nOnly the days with active users (those who performed at least one activity) are included in the output. For 2019-07-20, users 1 and 2 were active, and for 2019-07-21, users 2 and 3 were active. Go to Leetcode 🔗 SHOW CODE MySQL SELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users FROM Activity WHERE activity_date \u003c= '2019-07-27' AND DATEDIFF('2019-07-27', activity_date) \u003c 30 GROUP BY activity_date SELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users FROM Activity WHERE activity_date \u003c= '2019-07-27' AND activity_date\u003e DATE_SUB('2019-07-27',INTERVAL 30 day) GROUP BY activity_date SHOW NOTES In MySQL, both DATEDIFF and DATE_SUB are used for date calculations. DATEDIFF calculates the difference between two dates, returning the result in days. On the other hand, DATE_SUB is used to subtract a specified time interval (such as days, months, or years) from a given date.\nSELECT DATEDIFF(\u0026#39;2023-12-31\u0026#39;, \u0026#39;2023-01-01\u0026#39;); -- Result: 364 SELECT DATE_SUB(\u0026#39;2023-12-31\u0026#39;, INTERVAL 30 DAY); -- Result: \u0026#39;2023-12-01\u0026#39; SELECT DATE_SUB(\u0026#39;2023-12-31\u0026#39;, INTERVAL 2 MONTH); -- Result: \u0026#39;2023-10-31\u0026#39; Product Sales Analysis III SHOW PROBLEM Table: Sales\nColumn Name Type sale_id int product_id int year int quantity int price int The combination of sale_id and year is the primary key of this table, ensuring each record is unique for a given sale. product_id is a foreign key referencing the Product table. Each row in this table represents a sale of a specific product (product_id) in a given year. The price refers to the price per unit of the product. Table: Product\nColumn Name Type product_id int product_name varchar product_id is the primary key of this table, ensuring unique product identifiers. Each row represents the name of a product associated with the corresponding product_id. Task: Write a query to select the product_id, year, quantity, and price for the first year in which each product was sold.\nReturn the result in any order.\nExample:\nInput: Sales table\nsale_id product_id year quantity price 1 100 2008 10 5000 2 100 2009 12 5000 7 200 2011 15 9000 Product table:\nproduct_id product_name 100 Nokia 200 Apple 300 Samsung Output:\nproduct_id first_year quantity price 100 2008 10 5000 200 2011 15 9000 Explanation:\nFor product_id = 100, the first sale occurred in 2008 with a quantity of 10 and a price of 5000. For product_id = 200, the first sale occurred in 2011 with a quantity of 15 and a price of 9000. The query should return the first sale year for each product, along with the corresponding quantity and price.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT product_id, year AS first_year, quantity, price FROM Sales WHERE (product_id, year) IN ( SELECT product_id, MIN(year) AS year FROM Sales GROUP BY product_id ); SELECT product_id, first_year, quantity, price FROM ( SELECT product_id, year AS first_year, quantity, price, RANK() OVER (PARTITION BY product_id ORDER BY year) AS row_num FROM Sales ) subquery WHERE row_num = 1; SELECT s.product_id, s.year AS first_year, s.quantity, s.price FROM Sales s JOIN ( SELECT product_id, MIN(year) AS first_year FROM Sales GROUP BY product_id ) first_sale ON s.product_id = first_sale.product_id AND s.year = first_sale.first_year; SHOW NOTES Biggest Single Number SHOW PROBLEM Table: MyNumbers\nColumn Name Type num int This table may contain duplicates (i.e., there is no primary key in the SQL table). Each row contains an integer.\nProblem Description\nA single number is a number that appears only once in the MyNumbers table.\nThe task is to find the largest single number. If there is no single number, return null.\nExample 1:\nInput: MyNumbers table:\nnum 8 8 3 3 1 4 5 6 Output:\nnum 6 Explanation:\nThe single numbers are 1, 4, 5, and 6. Since 6 is the largest single number, we return it.\nExample 2:\nInput: MyNumbers table:\nnum 8 8 7 7 3 3 3 Output:\nnum null Explanation:\nThere are no single numbers in the input table, so we return null.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT MAX(num) AS num FROM ( SELECT num FROM MyNumbers GROUP BY 1 HAVING COUNT(1) = 1 ) AS t; SELECT IF(COUNT(num) = 1, num, null) AS num FROM MyNumbers GROUP BY num ORDER BY 1 DESC LIMIT 1; Advanced Select \u0026amp; Joins The Number of Employees Which Report to Each Employee SHOW PROBLEM Table: Employees\nColumn Name Type employee_id int name varchar reports_to int age int employee_id is the unique identifier for each employee in the table. This table stores information about employees and the ID of the manager they report to. Some employees may not report to anyone (reports_to is null). A manager is defined as an employee who has at least one other employee reporting to them. Problem Description\nYou are required to write a solution that reports the following information for each manager:\nThe manager\u0026rsquo;s employee_id and name. The number of employees directly reporting to the manager. The average age of these employees, rounded to the nearest integer. The results should be ordered by employee_id.\nExample 1:\nInput:\nEmployees table:\nemployee_id name reports_to age 9 Hercy null 43 6 Alice 9 41 4 Bob 9 36 2 Winston null 37 Output:\nemployee_id name reports_count average_age 9 Hercy 2 39 Explanation:\nHercy manages 2 employees (Alice and Bob). The average age of Alice and Bob is (41 + 36) / 2 = 38.5, which rounds to 39. Example 2:\nInput:\nEmployees table:\nemployee_id name reports_to age 1 Michael null 45 2 Alice 1 38 3 Bob 1 42 4 Charlie 2 34 5 David 2 40 6 Eve 3 37 7 Frank null 50 8 Grace null 48 Output:\nemployee_id name reports_count average_age 1 Michael 2 40 2 Alice 2 37 3 Bob 1 37 Explanation:\nMichael manages Alice and Bob. The average age of Alice and Bob is (38 + 42) / 2 = 40. Alice manages Charlie and David, with an average age of (34 + 40) / 2 = 37. Bob manages Eve, with an average age of 37. Go to Leetcode 🔗 SHOW CODE MySQL SELECT e1.employee_id, e1.name, COUNT(e1.employee_id) AS reports_count, ROUND(AVG(e2.age)) AS average_age FROM Employees e1 INNER JOIN Employees e2 ON e1.employee_id = e2.reports_to GROUP BY e1.employee_id ORDER BY e1.employee_id; Primary Department for Each Employee SHOW PROBLEM Table: Employee\nColumn Name Type employee_id int department_id int primary_flag varchar The combination of (employee_id, department_id) is the primary key for this table, meaning each employee can belong to multiple departments, but each (employee_id, department_id) pair is unique. employee_id: The ID of the employee. department_id: The ID of the department to which the employee belongs. primary_flag: A flag indicating whether the department is the primary department for the employee. It can be one of the following: 'Y': The department is the primary department. 'N': The department is not the primary department. Problem Description\nEmployees may belong to multiple departments, and when they do, they must designate one department as their primary. If an employee belongs to only one department, the primary_flag for that department will be 'N'.\nYou are tasked with reporting the primary department for each employee. If an employee has only one department, report that department as their primary.\nInput:\nEmployee table:\nemployee_id department_id primary_flag 1 1 N 2 1 Y 2 2 N 3 3 N 4 2 N 4 3 Y 4 4 N Output:\nemployee_id department_id 1 1 2 1 3 3 4 3 Explanation:\nFor employee 1, their only department is department 1, so it is reported as their primary department. Employee 2 belongs to two departments (1 and 2). The primary_flag for department 1 is 'Y', so department 1 is their primary department. Employee 3 only belongs to department 3, so it is reported as their primary department. Employee 4 belongs to three departments (2, 3, and 4). The primary_flag for department 3 is 'Y', so department 3 is reported as their primary department. Go to Leetcode 🔗 SHOW CODE sql SELECT employee_id, department_id FROM Employee WHERE primary_flag = 'Y' UNION SELECT employee_id, department_id FROM Employee GROUP BY employee_id HAVING COUNT(1) = 1; SHOW NOTES The UNION operator is used to combine the results of two or more SELECT queries into a single result set. By default, UNION removes duplicate rows, ensuring that the final result contains only distinct records. In contrast, UNION ALL includes all rows, even if they are duplicates. It\u0026rsquo;s important to note that each SELECT statement involved in a UNION operation must contain the same number of columns, and the corresponding columns must have compatable data types.\nTriangle Judgement SHOW PROBLEM Table: Triangle\nColumn Name Type x int y int z int Primary Key: (x, y, z)\nEach row in this table represents the lengths of three line segments. Task:\nDetermine whether the three line segments (x, y, z) from each row can form a triangle.\nReturn the result table in any order, including a column that specifies if the segments form a triangle.\nTriangle Formation Rule:\nThree segments can form a triangle if and only if the following conditions are met:\n$x + y \u0026gt; z$ $x + z \u0026gt; y$ $y + z \u0026gt; x$ Example:\nInput:\n**Triangle table: **\nx y z 13 15 30 10 20 15 Output:\nx y z triangle 13 15 30 No 10 20 15 Yes Go to Leetcode 🔗 SHOW CODE MySQL SELECT *, IF(x + y \u003e z AND x + z \u003e y AND y + z \u003e x, 'Yes', 'No') AS triangle FROM Triangle; SELECT *, CASE WHEN (x + y \u003e z) AND (x + z \u003e y) AND (y + z \u003e x) THEN 'Yes' ELSE 'No' END AS triangle FROM Triangle; Consecutive Numbers SHOW PROBLEM Table: Logs\nColumn Name Type id int num varchar id is the primary key for this table. The id column is an auto-increment column that starts from 1. Problem Statement:\nFind all numbers (num) that appear at least three times consecutively in the table.\nReturn the result table in any order.\nExample:\nInput:\nLogs table:\nid num 1 1 2 1 3 1 4 2 5 1 6 2 7 2 Output:\nConsecutiveNums 1 Explanation:\nThe number 1 is the only value that appears at least three times consecutively in the table.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT DISTINCT l1.num AS ConsecutiveNums FROM Logs l1 JOIN Logs l2 ON l1.id = l2.id - 1 JOIN Logs l3 ON l2.id = l3.id - 1 WHERE l1.num = l2.num AND l2.num = l3.num; SELECT DISTINCT l2.num AS ConsecutiveNums FROM Logs AS l1 JOIN Logs AS l2 ON l1.id = l2.id - 1 AND l1.num = l2.num JOIN Logs AS l3 ON l2.id = l3.id - 1 AND l2.num = l3.num; Product Price at a Given Date SHOW PROBLEM Table: Products\nColumn Name Type product_id int new_price int change_date date (product_id, change_date) is the primary key (a combination of columns with unique values) of this table. Each row indicates that the price of a product was changed to a new price on a specific date. Problem Statement\nWrite a query to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.\nReturn the result in any order.\nExample:\nInput:\nProducts table:\nproduct_id new_price change_date 1 20 2019-08-14 2 50 2019-08-14 1 30 2019-08-15 1 35 2019-08-16 2 65 2019-08-17 3 20 2019-08-18 Output:\nproduct_id price 2 50 1 35 3 10 Go to Leetcode 🔗 SHOW CODE MySQL WITH T AS (SELECT DISTINCT product_id FROM Products), P AS ( SELECT product_id, new_price AS price FROM Products WHERE (product_id, change_date) IN ( SELECT product_id, MAX(change_date) AS change_date FROM Products WHERE change_date \u003c= '2019-08-16' GROUP BY 1 ) ) SELECT product_id, IFNULL(price, 10) AS price FROM T LEFT JOIN P USING (product_id); WITH P AS ( SELECT p1.product_id, new_price, change_date FROM ( SELECT DISTINCT product_id FROM Products ) AS p1 LEFT JOIN Products AS p2 ON p1.product_id = p2.product_id AND p2.change_date \u003c= '2019-08-16' ), T AS ( SELECT *, RANK() OVER ( PARTITION BY product_id ORDER BY change_date DESC ) AS rk FROM P ) SELECT product_id, IFNULL(new_price, 10) AS price FROM T WHERE rk = 1; SHOW NOTES Last Person to Fit in the Bus SHOW PROBLEM Table: Queue\nColumn Name Type person_id int person_name varchar weight int turn int The person_id column contains unique values. This table holds information about people waiting to board a bus. The person_id and turn columns contain values from 1 to n, where n is the number of rows in the table. The turn column determines the order in which people will board the bus. A turn value of 1 indicates the first person to board, and turn = n indicates the last person to board. The weight column represents the person’s weight in kilograms. The bus has a weight limit of 1000 kilograms, so some people may not be able to board if the total weight exceeds this limit. The goal is to identify the name of the last person who can board the bus without exceeding the weight limit.\nOnly one person can board the bus at any given time, based on their turn. Input:\nQueue table:\nperson_id person_name weight turn 5 Alice 250 1 4 Bob 175 5 3 Alex 350 2 6 John Cena 400 3 1 Winston 500 6 2 Marie 200 4 Output:\nperson_name John Cena Explanation:\nThe following table shows the order in which people board the bus, ordered by the turn column for simplicity:\nTurn person_id person_name weight Total Weight 1 5 Alice 250 250 2 3 Alex 350 600 3 6 John Cena 400 1000 4 2 Marie 200 1200 5 4 Bob 175 ___ 6 1 Winston 500 ___ John Cena is the last person who can board the bus without exceeding the weight limit of 1000 kilograms.\nGo to Leetcode 🔗 SHOW CODE MySQL WITH T AS ( SELECT person_name, SUM(weight) OVER (ORDER BY turn) AS acumulated_weight FROM Queue ) SELECT person_name FROM T WHERE acumulated_weight \u003c= 1000 ORDER BY acumulated_weight DESC LIMIT 1; Count Salary Categories SHOW PROBLEM Table: Accounts\nColumn Name Type account_id int income int The account_id column is the primary key, meaning it contains unique values for each row. Each row represents the monthly income of a specific bank account. Task:\nWrite a solution to calculate the number of bank accounts in each salary category. The salary categories are defined as:\n\u0026ldquo;Low Salary\u0026rdquo;: Salaries strictly less than $20,000. \u0026ldquo;Average Salary\u0026rdquo;: Salaries in the inclusive range [$20,000, $50,000]. \u0026ldquo;High Salary\u0026rdquo;: Salaries strictly greater than $50,000. The result table should contain all three categories. If no accounts fall into a category, return 0 for that category.\nThe result can be returned in any order.\nInput:\nAccounts table:\naccount_id income 3 108939 2 12747 8 87709 6 91796 Output:\ncategory accounts_count Low Salary 1 Average Salary 0 High Salary 3 Explanation:\nLow Salary: Account 2 has an income of $12,747, which is below $20,000. Average Salary: There are no accounts with an income between $20,000 and $50,000. High Salary: Accounts 3, 6, and 8 have incomes above $50,000. Go to Leetcode 🔗 SHOW CODE MySQL WITH S AS ( SELECT 'Low Salary' AS category UNION SELECT 'Average Salary' UNION SELECT 'High Salary' ), T AS ( SELECT CASE WHEN income \u003c 20000 THEN 'Low Salary' WHEN income \u003e 50000 THEN 'High Salary' ELSE 'Average Salary' END AS category, COUNT(1) AS accounts_count FROM Accounts GROUP BY category ) SELECT category, IFNULL(accounts_count, 0) AS accounts_count FROM S LEFT JOIN T USING (category); Subqueries Exchange Seats SHOW PROBLEM Table: Seat\nColumn Name Type id int student varchar id is the primary key for this table. Each row represents a student\u0026rsquo;s name and their seat ID. The id starts from 1 and increases consecutively. Problem Description:\nWrite a query to swap the seat IDs of every two consecutive students in the Seat table. If the number of students is odd, the last student\u0026rsquo;s seat ID should remain unchanged.\nThe result should be ordered by the id column in ascending order.\nInput:\nSeat table:\nid student 1 Abbot 2 Doris 3 Emerson 4 Green 5 Jeames Output:\nid student 1 Doris 2 Abbot 3 Green 4 Emerson 5 Jeames Explanation:\nThe students Abbot and Doris swap places, as well as Emerson and Green. Since there are an odd number of students, Jeames\u0026rsquo;s seat remains unchanged. Go to Leetcode 🔗 SHOW CODE MySQL SELECT CASE WHEN id % 2 = 1 AND id \u003c (SELECT MAX(id) FROM Seat) THEN id + 1 WHEN id % 2 = 0 THEN id - 1 ELSE id END AS id, student FROM Seat ORDER BY id; Movie Rating SHOW PROBLEM Table: Movies\nColumn Name Type movie_id int title varchar movie_id is the primary key (column with unique values) for this table. title is the name of the movie.\nTable: Users\nColumn Name Type user_id int name varchar user_id is the primary key (column with unique values) for this table. The column \u0026rsquo;name\u0026rsquo; has unique values.\nTable: MovieRating\nColumn Name Type movie_id int user_id int rating int created_at date (movie_id, user_id) is the primary key (column with unique values) for this table. This table contains the rating of a movie by a user in their review. created_at is the user\u0026rsquo;s review date.\nProblem:\nFind the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name. Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name. Result format:\nThe result should contain two columns:\nresults – containing the user name with the greatest number of movie ratings. results – containing the movie name with the highest average rating in February 2020. Input:\nMovies table:\nmovie_id title 1 Avengers 2 Frozen 2 3 Joker Users table:\nuser_id name 1 Daniel 2 Monica 3 Maria 4 James MovieRating table:\nmovie_id user_id rating created_at 1 1 3 2020-01-12 1 2 4 2020-02-11 1 3 2 2020-02-12 1 4 1 2020-01-01 2 1 5 2020-02-17 2 2 2 2020-02-01 2 3 2 2020-03-01 3 1 3 2020-02-22 3 2 4 2020-02-25 Output:\nresults Daniel Frozen 2 Explanation:\nDaniel and Monica have rated 3 movies (\u0026ldquo;Avengers\u0026rdquo;, \u0026ldquo;Frozen 2\u0026rdquo; and \u0026ldquo;Joker\u0026rdquo;), but Daniel is lexicographically smaller. \u0026ldquo;Frozen 2\u0026rdquo; and \u0026ldquo;Joker\u0026rdquo; both have an average rating of 3.5 in February, but \u0026ldquo;Frozen 2\u0026rdquo; is lexicographically smaller. Go to Leetcode 🔗 SHOW CODE MySQL ( SELECT name AS results FROM Users JOIN MovieRating USING (user_id) GROUP BY user_id ORDER BY COUNT(1) DESC, name LIMIT 1 ) UNION ALL ( SELECT title FROM MovieRating JOIN Movies USING (movie_id) WHERE DATE_FORMAT(created_at, '%Y-%m') = '2020-02' GROUP BY movie_id ORDER BY AVG(rating) DESC, title LIMIT 1 ); ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/database/database-management-system/1-database-management-system/","summary":"Introduction to DBMS A Database Management System (DBMS) is software that provides an interface for users to interact with databases. It enables the management, storage, and manipulation of data within databases. DBMS can be broadly classified into two main types: Relational DBMS and NoSQL DBMS.\nIn a Relational DBMS, data is stored in structured tables and is manipulated using SQL (Structured Query Language). Examples of relational DBMS inlcude MySQL, Oracle, and PostgreSQL.","title":"Database Management Systems"},{"content":"Introduction to Multithreading Program, Process, and Thread A program is a static set of instructions that stores on a disk. A process is an instance of a program that is currently being executed by the operating system. A thread is a small unit of process that can be scheduled and executed by the operating system. In simpler terms, a program is the code, a process is the excution of the code, a thread is a unit of execution within a process. Their relationships are illustrated in the following image:\nProgram, Process, and Thread Thread Life Cycle Within Concurrency A thread goes through various states in its life cycle, from creation to its termination. The life cycle of a thread typically includes five states: New, Runnable, Running, Blocked/Waiting, and Terminated.\nNew: This refers to the state where a thread instance is created but has not yet started running. In Java, this is commonly achieved by using new Thread(). Runnable: This refers to the state where a thread instance is ready to run but is waiting for CPU time. In Java, this is commonly achieved by ivoking start() on the thread instance. Running: This is refers to the state where the thread instance is actively executing its task. Blocked/Waiting: This refers to the state where a thread instance is waiting for other threads to complete their tasks, or it is waiting for a particular condition to be met. Terminated: This refers to the state where the thread instance has completed its task and has exited. Thread Life Cycle Within Concurrency Fork/Join Model The Fork/Join Model is an effective strategy commonly used in scenarios where a task can be recursively divided into multiple smaller, independent subtasks. This strategy typically involves the following steps:\nThe process begins with a single master thread. When it encounters a task that can be broken down into smaller subtasks, the master thread forks (spawns) multiple subsidiary threads, each of which takes on a portion of the task.\nOnce the subsidiary threads have completed their respective tasks, they join back with the master thread. Joining involves terminating the subsidiary threads and consolidating their results into the master thread. Afterward, the master thread continues its execution.\nFork/Join Model SHOW CODE Java import java.util.Arrays; import java.util.concurrent.RecursiveTask; import java.util.concurrent.ForkJoinPool; public class Solution { // RecursiveTask to compute the sum of a part of an array static class SumTask extends RecursiveTask { private final int[] array; private final int start; private final int end; // Threshold for splitting the task into smaller subtasks private static final int THRESHOLD = 1000; public SumTask(int[] array, int start, int end) { this.array = array; this.start = start; this.end = end; } @Override protected Long compute() { // If the task is small enough, calculate the sum directly if (end - start \u003c= THRESHOLD) { long sum = 0; for (int i = start; i \u003c end; i++) { sum += array[i]; } return sum; } // Otherwise, split the task into two subtasks int middle = (start + end) / 2; SumTask leftTask = new SumTask(array, start, middle); SumTask rightTask = new SumTask(array, middle, end); // Fork the subtasks leftTask.fork(); rightTask.fork(); // Join the results of the subtasks long leftResult = leftTask.join(); long rightResult = rightTask.join(); // Combine the results and return return leftResult + rightResult; } } public static void main(String[] args) { int[] array = new int[10000]; // Initialize all elements to 1 Arrays.fill(array, 1); // Create a ForkJoinPool to execute the tasks ForkJoinPool pool = new ForkJoinPool(); // Submit the task to the ForkJoinPool SumTask task = new SumTask(array, 0, array.length); long result = pool.invoke(task); System.out.println(\"Sum: \" + result); // Output the result } } SHOW OUTPUT Output Sum: 10000 Critical Section \u0026amp; Race Condition Critical Section refers to a portion of a program where shared resources are accessed and modified. A Race Condition occurs when the program\u0026rsquo;s behavior depends on the non-deterministic execution order of threads. Since multiple threads can access a critical section concurrently, it is essential to synchronize their access to avoid data inconsistency.\nFor example, suppose there are four threads trying to read a value of 20 from memory. Each thread increments the value by 1 and writes it back to memory. Without synchronization mechanisms, after all threads complete their writes, the final value might be 21 instead of the expected 24. This leads to an unexpected outcome, as illustrated below.\nCritical Section \u0026amp; Race Condition To resolve this issue, access to the critical section must be exclusive. This is commonly achieved by using mutexes, read/write locks, semaphores, conditional variables or barriers to ensure that only one thread can modify the shared resource at a time.\nSynchronization Mechanisms Synchronization Mechanisms are rules used to coordinate the execution of threads in a program, ensuring safe access to shared resources. These mechanisms can be primarily classified into five types: Mutexes, Read/Write Locks, Semaphores, Conditional Variables, and Barriers.\nMutex Mechanism The mutex mechanism ensures that only one thread can access the critical section at a time. Other threads will be blocked until the mutex is released. The key logic behind the mutex mechanism is as follows:\nLock lock = new ReentrantLock(); lock.lock(); // Acquire the lock try { // Critical section code } finally { lock.unlock(); // Release the lock } Mutex Mechanism SHOW CODE Java public class Mutex { private static int counter = 0; private static final Object lock = new Object(); public static void runExperiment(String experimentName, Runnable task) { counter = 0; Thread t1 = new Thread(task); Thread t2 = new Thread(task); t1.start(); t2.start(); try { t1.join(); t2.join(); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"Final counter value \" + experimentName + \": \" + counter + \"\"); } public static void incrementCounterWithMutex() { for (int i = 0; i \u003c 100; i++) { synchronized (lock) { int temp = counter; try { Thread.sleep(1); // Sleep for 1 millisecond } catch (InterruptedException e) { e.printStackTrace(); } counter = temp + 1; } } } public static void incrementCounterNoMutex() { for (int i = 0; i \u003c 100; i++) { int temp = counter; try { Thread.sleep(1); // Sleep for 1 millisecond } catch (InterruptedException e) { e.printStackTrace(); } counter = temp + 1; } } public static void main(String[] args) { runExperiment(\"With Mutex Experiment\", Mutex::incrementCounterWithMutex); runExperiment(\"No Mutex Experiment\", Mutex::incrementCounterNoMutex); } } SHOW OUTPUT Output Final counter value With Mutex Experiment: 200 Final counter value No Mutex Experiment: 100 Read/Write Lock Mechanism The Read/Write Lock Mechanism allows threads read the shared resources concurrently, but ensures exclusive access for write operations. This mechanism is useful in scenarios where there are many read operations and fewer write operations, such as caching systems or databases. The key logic behind the read/write lock mechanism is as follows:\nReadWriteLock rwLock = new ReentrantReadWriteLock(); rwLock.readLock().lock(); // Acquire read lock try { // Read operation } finally { rwLock.readLock().unlock(); // Release read lock } rwLock.writeLock().lock(); // Acquire write lock try { // Write operation } finally { rwLock.writeLock().unlock(); // Release write lock } Under the Read/Write Lock mechanism, multiple threads can access the critical section simultaneously without blocking each other. When a writer thread is accessing the critical section, other writer threads and reader threads are blocked. Similarly, when a reader thread is accessing the critical section, the writer thread is blocked.\nRead/Write Lock Mechanism SHOW CODE Java import java.util.ArrayList; import java.util.List; import java.util.concurrent.locks.ReentrantReadWriteLock; public class ReadWriteLock { private static volatile int counter = 0; private static final int TARGET_VALUE = 1000; private static final ReentrantReadWriteLock lock = new ReentrantReadWriteLock(); public static int incrementValue() { lock.writeLock().lock(); try { Thread.sleep(1); if (counter \u003c TARGET_VALUE) { counter++; } } catch (InterruptedException e) { e.printStackTrace(); } finally { lock.writeLock().unlock(); } return counter; } public static int readValue() { lock.readLock().lock(); try { Thread.sleep(1); return counter; } catch (InterruptedException e) { e.printStackTrace(); } finally { lock.readLock().unlock(); } return 0; } public static void main(String[] args) { long start = System.currentTimeMillis(); List readers = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u003c 8; i++) { readers.add(new Thread(() -\u003e { while (readValue() \u003c TARGET_VALUE) { try { Thread.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } } })); } List writers = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u003c 2; i++) { writers.add(new Thread(() -\u003e { while (incrementValue() \u003c TARGET_VALUE) { try { Thread.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } } })); } readers.forEach(Thread::start); writers.forEach(Thread::start); readers.forEach(t -\u003e { try { t.join(); } catch (InterruptedException e) { e.printStackTrace(); } }); writers.forEach(t -\u003e { try { t.join(); } catch (InterruptedException e) { e.printStackTrace(); } }); long end = System.currentTimeMillis(); System.out.println(\"Time taken: \" + (end - start) / 1000.0 + \" seconds\"); } } SHOW OUTPUT Output Time taken: 1.787 seconds In the above code, the readValue method uses a read lock, allowing multiple reader threads to access the counter (critical section) simultaneously without blocking each other. If the method used a write lock instead of a read lock, the execution time would be higher. This is because when a writer thread is accessing the counter, all other threads would be blocked.\npublic static int readValue() { // lock.readLock().lock(); lock.writeLock().lock(); try { Thread.sleep(1); return counter; } catch (InterruptedException e) { e.printStackTrace(); } finally { // lock.readLock().unlock(); lock.writeLock().unlock(); } return 0; } Time taken: 6.793 seconds # Use write lock Semaphore Mechanism The Semaphore mechanism uses an integer to manage a set of permits, allowing multiple threads to access shared resources simultaneously, but only up to a predetermined limit. There are two types of semaphores: Binary Semaphore and Counting Semaphore.\nBinary Semaphore: Similar to a mutex, it operates with two states (0 and 1), ensuring mutual exclusion in critical sections. Counting Semaphore: Allows a count greater than 1, permitting multiple threads to access shared resources concurrently, as long as the permit limit is not exceeded. Semaphores are useful in controlling access to a pool of resources, such as limiting the number of threads that can access a database connection or a server. The key logic behind the semaphore mechanism is as follows:\nSemaphore semaphore = new Semaphore(3); // Allow 3 threads at once semaphore.acquire(); // Acquire a permit try { // Critical section code } finally { semaphore.release(); // Release a permit } Semaphore Mechanism SHOW CODE Java import java.util.concurrent.Semaphore; import java.util.concurrent.atomic.AtomicInteger; public class SemaphoreTest { // Global shared resource // AtomicInteger allows multiple threads to read/write value of counter without requiring synchronization private static final AtomicInteger counter = new AtomicInteger(0); // Semaphore with a count of 5 private static final Semaphore semaphore = new Semaphore(5); private static final int TARGET_VALUE = 5000; public static void main(String[] args) { long startTime = System.currentTimeMillis(); Thread[] workers = new Thread[10]; for (int i = 0; i \u003c workers.length; i++) { workers[i] = new Thread(SemaphoreTest::worker); workers[i].start(); } for (Thread worker : workers) { try { worker.join(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Thread was interrupted\"); } } long endTime = System.currentTimeMillis(); System.out.println(\"Time taken: \" + (endTime - startTime) / 1000.0 + \" seconds\"); } private static void worker() { while (true) { try { semaphore.acquire(); // Acquire the semaphore if (counter.get() \u003e= TARGET_VALUE) { break; } counter.incrementAndGet(); // Atomically increments the counter Thread.sleep(1); // Simulate work } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Thread was interrupted\"); } finally { semaphore.release(); // Release the semaphore } } } } Conditional Variable Mechanism The Conditional Variable Mechanism allows a thread to suspend its execution until other threads signal that a certain condition has been met. It is often used in conjunction with mutexes to implement synchronization patterns, such as the producer-consumer pattern.\nIn this mechanism, a thread can wait on a condition variable until it is notified by other threads that the condition has been satisfied. When the condition is fulfilled, one or more threads can be signaled to wake up and proceed. Condition variables are commonly used in scenarios like the producer-consumer problem, where one thread produces data and another consumes it, with both threads needing to wait for each other under specific conditions.\nThe key logic behind the Conditional Variable Mechanism is as follows:\nsynchronized (lock) { while (!condition) { lock.wait(); // Wait until condition is true } // Proceed with critical section } synchronized (lock) { condition = true; lock.notify(); // Notify waiting threads } Conditional Variable Mechanism SHOW CODE Wait \u0026amp; Notify Busy Waiting public class ConditionalVariable { private static final Object mutex = new Object(); private static int sharedNumber; private static boolean ready = false; public static void producer() { synchronized (mutex) { sharedNumber = 9; // Producing a number ready = true; System.out.println(\"Producer has produced the number: \" + sharedNumber); mutex.notify(); // Notify the consumer } } public static void consumer() { synchronized (mutex) { while (!ready) { try { mutex.wait(); // Wait until the number is ready } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Consumer thread was interrupted.\"); } } System.out.println(\"Consumer has consumed the number: \" + sharedNumber); } } public static void main(String[] args) { Thread producerThread = new Thread(ConditionalVariable::producer); Thread consumerThread = new Thread(ConditionalVariable::consumer); producerThread.start(); consumerThread.start(); try { producerThread.join(); consumerThread.join(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Main thread was interrupted.\"); } } } public class Solution { private static final Object mutex = new Object(); private static int sharedNumber; private static boolean ready = false; private static void producer() { synchronized (mutex) { sharedNumber = 9; // Producing a number ready = true; System.out.println(\"Producer has produced the number: \" + sharedNumber); } } private static void consumer() { // Busy waiting loop while (true) { synchronized (mutex) { if (ready) { System.out.println(\"Consumer has consumed the number: \" + sharedNumber); break; } } try { Thread.sleep(1); // Sleep for a short time } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Thread was interrupted\"); } } } public static void main(String[] args) { Thread producerThread = new Thread(Solution::producer); Thread consumerThread = new Thread(Solution::consumer); producerThread.start(); consumerThread.start(); try { producerThread.join(); consumerThread.join(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Main thread was interrupted\"); } } } Barrier Mechanism The Barrier Mechanism allows threads to wait for each other at a specified point in their execution. It ensures that threads cannot proceed to the subsequent code until all threads have reached the barrier, as illustrated in the following image.\nBarrier Mechanism Barrier Mechanism are useful in parallel algorithms where multiple threads need to work in phases, and the next phase cannot begin until all threads complete the current one.\nThe key logic behind this mechanism is as follows:\nCyclicBarrier barrier = new CyclicBarrier(4, new Runnable() { public void run() { System.out.println(\u0026#34;All threads reached the barrier!\u0026#34;); } }); // Threads: barrier.await(); // Wait at the barrier SHOW CODE Java import java.util.concurrent.CyclicBarrier; class Barriers { private static final CyclicBarrier barrier = new CyclicBarrier(2, () -\u003e System.out.println(\"All threads have reached the barrier. Continue execution.\")); public static void main(String[] args) { Thread t1 = new Thread(Barriers::work); Thread t2 = new Thread(Barriers::work); // Start both threads. t1.start(); t2.start(); } private static void work() { System.out.println(\"Thread \" + Thread.currentThread().getName() + \" is waiting at the barrier\"); try { // Wait for the specified number of threads (2 in this case) to reach the barrier. barrier.await(); System.out.println(\"Thread \" + Thread.currentThread().getName() + \" is released\"); } catch (Exception e) { // Handle exceptions, if any. } } } SHOW OUTPUT Output Thread Thread-0 is waiting at the barrier Thread Thread-1 is waiting at the barrier All threads have reached the barrier. Continue execution. Thread Thread-1 is released Thread Thread-0 is released Thread Creation In Java Extending Thread Class SHOW CODE Java class MyThread extends Thread { @Override public void run() { System.out.println(this.getName() + \" is running.\"); } } public class Main { public static void main(String[] args) { MyThread myThread = new MyThread(); myThread.setName(\"MYTHREAD-0\"); myThread.start(); } } Implementing Runnable Interface SHOW CODE Java public class Main { public static void main(String[] args) { Thread thread = new Thread(() -\u003e System.out.println(Thread.currentThread().getName() + \" is running.\")); thread.start(); } } //class MyRunnable implements Runnable { // @Override // public void run() { // System.out.println(\"Thread is running\"); // } //} // //public class Main { // public static void main(String[] args) { // Thread thread = new Thread(new MyRunnable()); // thread.start(); // Starts a new thread // } //} Using the Callable Interface SHOW CODE Java import java.util.concurrent.*; public class Main { public static void main(String[] args) throws Exception { ExecutorService executor = Executors.newSingleThreadExecutor(); Future\u0026lt;String\u0026gt; future = executor.submit(() -\u003e Thread.currentThread().getName() + \" is running.\"); System.out.println(future.get()); executor.shutdown(); } } class MyCallable implements Callable\u0026lt;String\u0026gt; { // @Override // public String call() { // return \"Thread executed\"; // } //} // //public class Main { // public static void main(String[] args) throws Exception { // ExecutorService executor = Executors.newSingleThreadExecutor(); // Future\u0026lt;String\u0026gt; future = executor.submit(new MyCallable()); // System.out.println(future.get()); // Retrieves the result // executor.shutdown(); // } //} Using Executors SHOW CODE Java import java.util.concurrent.*; public class Main { public static void main(String[] args) { ExecutorService executor = Executors.newFixedThreadPool(2); Runnable task1 = () -\u003e System.out.println(Thread.currentThread().getName() + \" executed\"); Runnable task2 = () -\u003e System.out.println(Thread.currentThread().getName() + \" executed\"); executor.execute(task1); executor.execute(task2); executor.shutdown(); } } Thread Termination In Java Using a flag SHOW CODE Java class Task implements Runnable { // Use volatile to ensure visibility between thread private volatile boolean running = true; @Override public void run() { while (running) { System.out.println(\"Thread is running.\"); try { Thread.sleep(1000); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } } System.out.println(\"Thread is stopping.\"); } public void stop() { running = false; } } public class Main { public static void main(String[] args) throws InterruptedException { Task task = new Task(); Thread thread = new Thread(task); thread.start(); Thread.sleep(3000); // Allow thread to run for a while task.stop(); // Signal thread to stop } } Interrupting a Thread SHOW CODE Java public class Main { public static void main(String[] args) throws InterruptedException { Thread thread = new Thread(() -\u003e { try { while (!Thread.currentThread().isInterrupted()) { System.out.println(\"Thread is running\"); Thread.sleep(1000); } } catch (InterruptedException e) { System.out.println(\"Thread is interrupted\"); } }); thread.start(); Thread.sleep(3000); // Allow thread to run for a while thread.interrupt(); // Interrupt the thread } } Daemon Threads A daemon thread in Java is a low-priority thread that runs in the background, typically handling tasks such as garbage collection or other housekeeping operations. The JVM terminates when all non-daemon threads have completed execution, even if daemon threads are still active. To create a daemon thread, the setDaemon(true) method is used on a Thread object before it is started.\nSHOW CODE Java public class Main { public static void main(String[] args) { Thread daemonThread = new Thread(() -\u003e { while (true) { System.out.println(\"Daemon thread is running\"); try { Thread.sleep(1000); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } } }); daemonThread.setDaemon(true); // Mark as daemon daemonThread.start(); System.out.println(\"Main thread is ending\"); } } SHOW OUTPUT Output Main thread is ending Daemon thread is running Performance Optimization When it comes to multithreading, performance optimization typically focuses on two key areas: latency reduction and throughput improvement.\nLatency reduction refers to minimizing the time it takes to complete a single task, measured in time units. This is often achieved by breaking a task into smaller subtasks that can be executed concurrently by multiple threads.\nThroughput, on the other hand, measures the number of tasks completed within a specific time frame, typically expressed as tasks / time unit. Throughput improvement is commonly achieved by utilizing thread pooling, which reduces the overhead of creating and destroying threads for each task.\nSHOW CODE: Latency Reduction Java import javax.imageio.ImageIO; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class Main { private static final String SOURCE_FILE = \"src/main/resources/1-flower.jpg\"; private static final String DESTINATION_FILE = \"./out/1-flower.jpg\"; public static void main(String[] args) throws IOException { BufferedImage originalImage = ImageIO.read(new File(SOURCE_FILE)); BufferedImage resultImage = new BufferedImage(originalImage.getWidth(), originalImage.getHeight(), BufferedImage.TYPE_INT_RGB); long startTime = System.currentTimeMillis(); // recolorSingleThreaded(originalImage, resultImage); int numberOfThreads = 1; recolorMultithreaded(originalImage, resultImage, numberOfThreads); long endTime = System.currentTimeMillis(); long duration = endTime - startTime; File outputFile = new File(DESTINATION_FILE); File parentDir = outputFile.getParentFile(); if (parentDir != null \u0026\u0026 !parentDir.exists()) { parentDir.mkdirs(); // Create the directory if it doesn't exist } ImageIO.write(resultImage, \"jpeg\", outputFile); System.out.println(\"duration = \" + duration); } public static void recolorMultithreaded(BufferedImage originalImage, BufferedImage resultImage, int numberOfThreads) { List\u0026lt;Thread\u0026gt; threads = new ArrayList\u0026lt;\u0026gt;(); int width = originalImage.getWidth(); int height = originalImage.getHeight() / numberOfThreads; for(int i = 0; i \u003c numberOfThreads ; i++) { final int threadMultiplier = i; Thread thread = new Thread(() -\u003e { int xOrigin = 0 ; int yOrigin = height * threadMultiplier; recolorImage(originalImage, resultImage, xOrigin, yOrigin, width, height); }); threads.add(thread); } for(Thread thread : threads) { thread.start(); } for(Thread thread : threads) { try { thread.join(); } catch (InterruptedException e) { } } } private static void recolorSingleThreaded(BufferedImage originalImage, BufferedImage resultImage) { recolorImage(originalImage, resultImage, 0, 0, originalImage.getWidth(), originalImage.getHeight()); } private static void recolorImage(BufferedImage originalImage, BufferedImage resultImage, int leftCorner, int topCorner, int width, int height) { for (int x = leftCorner; x \u003c leftCorner + width \u0026\u0026 x \u003c originalImage.getWidth(); x++) { for (int y = topCorner; y \u003c topCorner + height \u0026\u0026 y \u003c originalImage.getHeight(); y++) { recolorPixel(originalImage, resultImage, x, y); } } } private static void recolorPixel(BufferedImage originalImage, BufferedImage resultImage, int x, int y) { int rgb = originalImage.getRGB(x, y); int red = getRed(rgb); int green = getGreen(rgb); int blue = getBlue(rgb); int newRed; int newGreen; int newBlue; if (isShadeOfGray(red, green, blue)) { newRed = Math.min(255, red + 10); newGreen = Math.max(0, green - 80); newBlue = Math.max(0, blue - 20); } else { newRed = red; newGreen = green; newBlue = blue; } int newRGB = createRGBFromColors(newRed, newGreen, newBlue); setRGB(resultImage, x, y, newRGB); } public static void setRGB(BufferedImage image, int x, int y, int rgb) { image.getRaster().setDataElements(x, y, image.getColorModel().getDataElements(rgb, null)); } public static boolean isShadeOfGray(int red, int green, int blue) { return Math.abs(red - green) \u003c 30 \u0026\u0026 Math.abs(red - blue) \u003c 30 \u0026\u0026 Math.abs(green - blue) \u003c 30; } public static int createRGBFromColors(int red, int green, int blue) { int rgb = 0; rgb |= blue; rgb |= green \u003c\u003c 8; rgb |= red \u003c\u003c 16; rgb |= 0xFF000000; return rgb; } public static int getRed(int rgb) { return (rgb \u0026 0x00FF0000) \u003e\u003e 16; } public static int getGreen(int rgb) { return (rgb \u0026 0x0000FF00) \u003e\u003e 8; } public static int getBlue(int rgb) { return rgb \u0026 0x000000FF; } } SHOW IMAGE: BEFORE PROCESSING SHOW IMAGE: AFTER PROCESSING Single Threaded VS. Multithreaded SHOW CODE: Throughput vs. Threads Throughput vs. Threads import com.sun.net.httpserver.HttpExchange; import com.sun.net.httpserver.HttpHandler; import com.sun.net.httpserver.HttpServer; import java.io.IOException; import java.io.OutputStream; import java.net.InetSocketAddress; import java.nio.file.Files; import java.nio.file.Paths; import java.util.concurrent.Executor; import java.util.concurrent.Executors; public class ThroughputHttpServer { private static final String INPUT_FILE = \"./resources/war_and_peace.txt\"; private static final int NUMBER_OF_THREADS = 8; public static void main(String[] args) throws IOException { String text = new String(Files.readAllBytes(Paths.get(INPUT_FILE))); startServer(text); } public static void startServer(String text) throws IOException { HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0); server.createContext(\"/search\", new WordCountHandler(text)); Executor executor = Executors.newFixedThreadPool(NUMBER_OF_THREADS); server.setExecutor(executor); server.start(); } private static class WordCountHandler implements HttpHandler { private String text; public WordCountHandler(String text) { this.text = text; } @Override public void handle(HttpExchange httpExchange) throws IOException { String query = httpExchange.getRequestURI().getQuery(); String[] keyValue = query.split(\"=\"); String action = keyValue[0]; String word = keyValue[1]; if (!action.equals(\"word\")) { httpExchange.sendResponseHeaders(400, 0); return; } long count = countWord(word); byte[] response = Long.toString(count).getBytes(); httpExchange.sendResponseHeaders(200, response.length); OutputStream outputStream = httpExchange.getResponseBody(); outputStream.write(response); outputStream.close(); } private long countWord(String word) { long count = 0; int index = 0; while (index \u003e= 0) { index = text.indexOf(word, index); if (index \u003e= 0) { count++; index++; } } return count; } } } SHOW IMAGE: Throughput VS. Threads Problems Linear Search with Finding One Occurrence SHOW PROBLEM Problem Statement:\nThe input consists of a large array (or list) of elements and a target value to search for. The goal is to utilize multiple threads to divide the search space and concurrently search for the target value, ultimately returning the index of the first occurrence of the target or -1 indicating that the target is not present.\nRequirements:\nMultithreading: Divide the array into multiple segments, with each thread searching a specific segment of the array. Each thread should operate independently and search its assigned segment. Return First Occurrence: Once the target value is found by any thread, it should return the index of the first occurrence, and other threads should stop searching. Constraints:\nThe array can be large (millions of elements). The number of threads used should be adjustable. The target value may appear multiple times in the array, but only the index of the first occurrence should be returned. SHOW CODE Java public class Solution { private static final int SIZE = 280000; private static final int NUM_THREADS = 4; private static final Object mtx = new Object(); // Mutex for controlling access to foundIndex private static volatile int foundIndex = -1; private static void linearSearch(int threadId, int[] arr, int key) { int chunkSize = arr.length / NUM_THREADS; int start = threadId * chunkSize; int end = (threadId == NUM_THREADS - 1) ? arr.length : start + chunkSize; for (int i = start; i \u003c end; ++i) { // Early exit if foundIndex is set by another thread synchronized (mtx) { if (foundIndex != -1) { break; } } if (arr[i] == key) { synchronized (mtx) { if (foundIndex == -1) { foundIndex = i; break; // Exit after setting foundIndex } } } } } public static void main(String[] args) { // Fill array with random numbers between 0-99 int[] arr = new int[SIZE]; for (int i = 0; i \u003c SIZE; ++i) { arr[i] = (int) (Math.random() * 100); } Thread[] threads = new Thread[NUM_THREADS]; int key = 9; for (int i = 0; i \u003c NUM_THREADS; ++i) { final int threadId = i; threads[i] = new Thread(() -\u003e linearSearch(threadId, arr, key)); threads[i].start(); } for (Thread thread : threads) { try { thread.join(); } catch (InterruptedException e) { e.printStackTrace(); } } if (foundIndex == -1) { System.out.println(\"Element not found in the array.\"); } else { System.out.println(\"Element found at index: \" + foundIndex); } } } Linear Search for All Occurrences SHOW PROBLEM Problem Statement:\nThe input consists of a large array (or list) of elements and a target value to search for. The goal is to utilize multiple threads to divide the search space and concurrently search for the target value, ultimately returning the index of all occurrences of the target or an empty list indicating that the target is not present.\nRequirements:\nMultithreading: Divide the array into multiple segments, with each thread searching a specific segment of the array. Each thread should operate independently and search its assigned segment. Return All Occurrences: Once the target value is found, the thread should store the index. All threads should continue searching, and their results (all indices of the target’s occurrences) should be combined and returned. Constraints:\nThe array can be large (millions of elements). The number of threads used should be adjustable. The target value may appear multiple times in the array, and all indices where the target is found should be returned. SHOW CODE Java import java.util.ArrayList; import java.util.List; import java.util.Random; public class Solution { private static final int SIZE = 4000; private static final int NUM_THREADS = 4; // Mutex for controlling access to foundPlaces private static final Object lockObj = new Object(); private static List\u0026lt;Integer\u0026gt; foundPlaces = new ArrayList\u0026lt;\u0026gt;(); private static void linearSearch(int threadId, int[] arr, int key) { int chunkSize = arr.length / NUM_THREADS; int start = threadId * chunkSize; int end = (threadId == NUM_THREADS - 1) ? arr.length : start + chunkSize; for (int i = start; i \u003c end; ++i) { if (arr[i] == key) { synchronized (lockObj) { // Lock when modifying foundPlaces foundPlaces.add(i); // Append the index to foundPlaces } } } } public static void main(String[] args) { // Create an array and fill it with random numbers between 0 and 99 int[] arr = new int[SIZE]; Random random = new Random(); for (int i = 0; i \u003c SIZE; ++i) { arr[i] = random.nextInt(100); } Thread[] threads = new Thread[NUM_THREADS]; // List to hold the threads int key = 9; // Element to find // Start the threads for (int i = 0; i \u003c NUM_THREADS; ++i) { final int threadId = i; threads[i] = new Thread(() -\u003e linearSearch(threadId, arr, key)); threads[i].start(); } // Join the threads with the main thread for (Thread thread : threads) { try { thread.join(); } catch (InterruptedException e) { e.printStackTrace(); } } // Display the result if (foundPlaces.isEmpty()) { System.out.println(\"Element not found in the array.\"); } else { System.out.print(\"Element found at indices: \"); synchronized (lockObj) { // Lock when reading from foundPlaces for (int index : foundPlaces) { System.out.print(index + \" \"); } } System.out.println(); } } } SHOW NOTES The synchonization block can be removed when reading values from foundPlaces, as no threads modify the foundPlaces after the join() method is called.\n// Display the result if (foundPlaces.isEmpty()) { System.out.println(\u0026#34;Element not found in the array.\u0026#34;); } else { System.out.print(\u0026#34;Element found at indices: \u0026#34;); // No need for synchronization here, as no threads are modifying foundPlaces now // synchronized (lockObj) { // Lock when reading from foundPlaces for (int index : foundPlaces) { System.out.print(index + \u0026#34; \u0026#34;); } // } System.out.println(); } Linear Search with Indices and Occurrences SHOW PROBLEM Problem Statement:\nYou are given a large array (or list) of elements and a target value to search for. Your task is to implement a linear search that finds all occurrences of the target value in the array using multiple threads. Each thread should search a specific segment of the array, and the results (indices where the target is found) should be stored in a shared collection (e.g., a list). Additionally, a shared variable should keep track of the count of occurrences of the target value.\nRequirements:\nMultithreading: Divide the array into equal segments based on the number of threads. Each thread should independently search its assigned segment for the target value. The number of threads should be adjustable to optimize performance depending on the size of the array. Return: A list of integers representing the indices of all occurrences of the target value. An integer representing the total count of occurrences of the target value. Constraints:\nThe array can be very large, potentially containing millions of elements. The number of threads used should be adjustable, allowing the program to scale with the size of the array and the system\u0026rsquo;s available resources. The target value may appear multiple times, and all occurrences should be included in the final result. SHOW CODE Java import java.util.ArrayList; import java.util.List; import java.util.Random; public class Solution { private static final int SIZE = 4000; private static final int NUM_THREADS = 4; private static final List\u0026lt;Integer\u0026gt; foundIndices = new ArrayList\u0026lt;\u0026gt;(); // Shared list to store the indices of all occurrences private static int occurrencesCount = 0; // Shared variable to store the count of occurrences private static final Object indicesLock = new Object(); // Lock for synchronizing access to foundIndices private static final Object countLock = new Object(); // Lock for synchronizing access to occurrencesCount // Function executed by each thread to search for indices and occurrences private static void searchIndicesOccurrences(int threadId, int[] arr, int key) { int chunkSize = arr.length / NUM_THREADS; int start = threadId * chunkSize; int end = (threadId == NUM_THREADS - 1) ? arr.length : start + chunkSize; List\u0026lt;Integer\u0026gt; localIndices = new ArrayList\u0026lt;\u0026gt;(); int localCount = 0; for (int i = start; i \u003c end; ++i) { if (arr[i] == key) { localIndices.add(i); localCount++; } } if (!localIndices.isEmpty()) { synchronized (indicesLock) { foundIndices.addAll(localIndices); } } if (localCount \u003e 0) { synchronized (countLock) { occurrencesCount += localCount; } } } public static void main(String[] args) { // Create an array and fill it with random numbers between 0 and 99 int[] arr = new int[SIZE]; Random random = new Random(); for (int i = 0; i \u003c SIZE; ++i) { arr[i] = random.nextInt(100); } Thread[] threads = new Thread[NUM_THREADS]; // Array of threads int key = 9; // Element to find // Start the threads for (int i = 0; i \u003c NUM_THREADS; ++i) { int threadId = i; threads[i] = new Thread(() -\u003e searchIndicesOccurrences(threadId, arr, key)); threads[i].start(); } // Wait for all threads to complete for (Thread thread : threads) { try { thread.join(); } catch (InterruptedException e) { e.printStackTrace(); } } // Output the results if (foundIndices.isEmpty()) { System.out.println(\"Element not found in the array.\"); } else { System.out.print(\"Element found \" + occurrencesCount + \" times at indices: \"); for (int index : foundIndices) { System.out.print(index + \" \"); } System.out.println(); } } } Min/Max/Sum SHOW PROBLEM Problem Statement:\nThe input consists of a large array (or list) of elements. The goal is to efficiently calculate the minimum, maximum, and sum of elements in the array using multithreading. The array is divided into multiple segments, with each thread processing a specific segment. The threads will then return partial results (minimum, maximum, and sum for their respective segments), which will be combined to compute the final values for the entire array.\nRequirements:\nMultithreading: Divide the array into multiple segments, with each thread processing a specific portion of the array. Each thread should independently compute the minimum, maximum, and sum for its assigned segment.\nCombine Results: Once each thread has finished processing, their partial results (min, max, and sum for the segment) should be combined to compute the final minimum, maximum, and sum for the entire array.\nEfficiency: The program should use multithreading to optimize the processing time, especially when dealing with large arrays containing millions of elements. The number of threads should be adjustable for optimal performance.\nConstraints:\nThe array can be large (millions of elements).\nThe number of threads used should be adjustable based on the size of the array and the system’s capabilities.\nThe array can contain both positive and negative numbers, and the minimum, maximum, and sum should be computed accurately, including for arrays with all negative values.\nSHOW CODE Java import java.util.Random; public class Solution { private static final int DATA_SIZE = 100; private static final int NUMBER_OF_THREADS = 4; private static int[] data = new int[DATA_SIZE]; private static int[] threadResultsSum = new int[NUMBER_OF_THREADS]; private static int[] threadResultsMin = new int[NUMBER_OF_THREADS]; private static int[] threadResultsMax = new int[NUMBER_OF_THREADS]; public static void main(String[] args) throws InterruptedException { // Initialize data array Random random = new Random(); for (int i = 0; i \u003c DATA_SIZE; i++) { data[i] = random.nextInt(500); } Thread[] threads = new Thread[NUMBER_OF_THREADS * 3]; // Start threads for sum, min, and max calculations for (int i = 0; i \u003c NUMBER_OF_THREADS; i++) { final int threadId = i; final int start = threadId * (DATA_SIZE / NUMBER_OF_THREADS); final int end = (threadId + 1) * (DATA_SIZE / NUMBER_OF_THREADS); threads[threadId] = new Thread(() -\u003e threadedSum(threadId, start, end)); threads[threadId + NUMBER_OF_THREADS] = new Thread(() -\u003e threadedMin(threadId, start, end)); threads[threadId + NUMBER_OF_THREADS * 2] = new Thread(() -\u003e threadedMax(threadId, start, end)); threads[threadId].start(); threads[threadId + NUMBER_OF_THREADS].start(); threads[threadId + NUMBER_OF_THREADS * 2].start(); } // Wait for threads to finish for (Thread thread : threads) { thread.join(); } // Aggregate results from threads int totalSum = 0; for (int sum : threadResultsSum) { totalSum += sum; } int min = Integer.MAX_VALUE; for (int minResult : threadResultsMin) { min = Math.min(min, minResult); } int max = Integer.MIN_VALUE; for (int maxResult : threadResultsMax) { max = Math.max(max, maxResult); } System.out.println(\"Sum is \" + totalSum); System.out.println(\"Min is \" + min); System.out.println(\"Max is \" + max); } private static void threadedSum(int threadId, int start, int end) { int sum = 0; for (int i = start; i \u003c end; i++) { sum += data[i]; } threadResultsSum[threadId] = sum; } private static void threadedMin(int threadId, int start, int end) { int min = Integer.MAX_VALUE; for (int i = start; i \u003c end; i++) { min = Math.min(min, data[i]); } threadResultsMin[threadId] = min; } private static void threadedMax(int threadId, int start, int end) { int max = Integer.MIN_VALUE; for (int i = start; i \u003c end; i++) { max = Math.max(max, data[i]); } threadResultsMax[threadId] = max; } } Pi Calculation SHOW PROBLEM Problem Statement\nThe problem is to estimate the value of Pi using the Monte Carlo simulation method. In this method, we randomly generate points within a square and check how many of these points fall inside a circle inscribed within the square. The ratio of points inside the circle to the total points generated provides an approximation of Pi.\nRequirements:\nRandom Point Generation:\nGenerate a large number of random points within a square. The square should have side lengths of 2 (i.e., points with coordinates ranging from -1 to 1 on both the x and y axes). Each point has coordinates $(x, y)$, where $x$ and $y$ are randomly generated floating-point values between -1 and 1. Circle Inside the Square:\nA circle is inscribed within the square, with a radius of 1 and centered at the origin (0, 0). A point $(x, y)$ lies inside the circle if the following condition is true: $$ x^2 + y^2 \\leq 1 $$ Monte Carlo Estimation of Pi:\nCount how many of the generated points fall inside the circle. The ratio of the points inside the circle to the total number of points can be used to estimate Pi. Specifically, the approximation of Pi is given by: $$ \\pi \\approx 4 \\times \\frac{\\text{points inside the circle}}{\\text{total number of points}} $$ Multithreading:\nTo speed up the simulation, divide the task of generating points and checking whether they lie inside the circle into multiple threads. Each thread should be responsible for generating a subset of points and counting how many fall inside the circle. Once all threads finish their work, their results should be combined to compute the final approximation of Pi. Output:\nReturn the estimated value of Pi based on the simulation. Constraints:\nThe number of points to generate can be very large (millions of points). The number of threads used should be adjustable. The accuracy of the approximation improves with more points, but the simulation should be efficient enough to handle large numbers of points and multiple threads. SHOW CODE Java import java.util.Random; public class Solution { private static final int NUM_THREADS = 10; private static final int NUMBER_OF_TOSSES = 100000000; private static int[] results = new int[NUM_THREADS]; public static void main(String[] args) throws InterruptedException { Thread[] threads = new Thread[NUM_THREADS]; for (int i = 0; i \u003c NUM_THREADS; i++) { final int threadId = i; threads[i] = new Thread(() -\u003e { Random rand = new Random(); int start = threadId * NUMBER_OF_TOSSES / NUM_THREADS; int end = (threadId + 1) * NUMBER_OF_TOSSES / NUM_THREADS; int count_in_circle = 0; for (int j = start; j \u003c end; j++) { double x = rand.nextDouble() * 2 - 1; // Random x in range [-1, 1] double y = rand.nextDouble() * 2 - 1; // Random y in range [-1, 1] if (x * x + y * y \u003c= 1) { // If point is inside the circle count_in_circle++; } } results[threadId] = count_in_circle; }); threads[i].start(); } for (Thread thread : threads) { thread.join(); } // Compute final estimate of Pi int total_inside = 0; for (int result : results) { total_inside += result; } double pi_estimate = 4.0 * total_inside / NUMBER_OF_TOSSES; System.out.println(\"PI = \" + pi_estimate); } } SHOW NOTES Introduction to Monte Carlo Estimation of $\\pi$\nSuppose a square with a circle inscribed inside it, as shown in the image below. The circle has a radius of $r$, and the square has side length $2r$. The area of the circle is $A_{\\text{circle}} = \\pi r^2$, and the area of the square is $A_{\\text{square}} = (2r)^2 = 4r^2$\nThe ratio of the area of the circle to the area of the square is $$ \\frac{A_{\\text{circle}}}{A_{\\text{square}}} = \\frac{\\pi r^2}{4 r^2} = \\frac{\\pi}{4} $$\nTherefore, the value of $\\pi$ can be estimated by the formula:\n$$ \\pi \\approx 4 \\times \\frac{\\text{Number of points inside the circle}}{\\text{Total number of points inside the square}} $$\nVisulization:\n","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/multithreading-and-concurrency/1-multithreading-and-concurrency/","summary":"Introduction to Multithreading Program, Process, and Thread A program is a static set of instructions that stores on a disk. A process is an instance of a program that is currently being executed by the operating system. A thread is a small unit of process that can be scheduled and executed by the operating system. In simpler terms, a program is the code, a process is the excution of the code, a thread is a unit of execution within a process.","title":"Multithreading \u0026 Concurrency"},{"content":"Introduction to System Design System Design is the process of defining the architecture, components, modules, interfaces, and data for a system to fulfill specific business requirements, while ensuring scalability, maintainability, and performance.\nLoad Balancing In System Design, Load Balancing refers to the practice of distributing incoming network traffic or workload across multiple servers or resources to optimize resource use and ensure high availability.\nLoad Balancing To fullly leverage scalability and redundency, load balancing can occur at different layers: between user and the web server, between web server and an internal platform serve, between internal platform server and database as illustrated in the following image:\nLoad Balancing at Different Layers The typical process of load balancing involves the following steps:\nThe load balancer recerves a request from the client. The load balancer evaluates the request and routes it to a server based on the chosen load balancing algorithm. The selected server or resource processes the request and sends the response back to the load balancer. The load balancer receives the response and forwards it to the client. --- title: Process of Load Balancing --- sequenceDiagram participant Client participant LoadBalancer participant Server Client-\u003e\u003eLoadBalancer: Sends Request LoadBalancer-\u003e\u003eLoadBalancer: Evaluates Request (Load Balancing Algorithm) LoadBalancer-\u003e\u003eServer: Routes Request to Selected Server Server-\u003e\u003eLoadBalancer: Sends Response LoadBalancer-\u003e\u003eClient: Forwards Response Load Balancing Algorithms A load balancing algorithm is a method used by a load balancer to determine how an incoming request should be distributed across multiple servers. Commonly used load balancing algorithms include Round Robin, Least Connections, Weight Round Robin, Weighted Least Connections, IP Hash, Least Response Time, Random, and Least Bandwidth.\nRound Robin The Round Robin algorithm distributes requests evenly across multiple servers in a circular manner. This algorithm does not consider the current load or capabilities of each server. It is commonly used in environments where servers have similar capacity and performance, or in applications where each request can be handled independently.\nRound Robin Load Balancing Algorithm Least Connections The Least Connections algorithm distributes requests to servers with the fewest active connections. It takes into account the server\u0026rsquo;s current workload, helping to prevent any single server from becoming overwhelmed. This algorithm is particularly useful in scenerios where traffic or workload is unpredictable, servers have varying capabilities, or maintaining session state is important.\nLeast Connections Load Balancing Algorithm Weighted Round Robin The Weighted Round Robin algorithm is an enhanced version of Round Robin, where each server is assigned a weight based on its capability and workload. Servers with higher weights process more requests, helping to prevent overloading less powerful servers. This algorithm is ideal for scenarios where servers have varying processing abilities, such as in a database cluster, where nodes with higher processing power can handle more queries.\nWeighted Round Robin Load Balancing Algorithm Weighted Least Connections The Weighted Least Connections algorithm is a combination of the Least Connections and the Weighted Round Robin algorithms. It takes into account the number of active connections of each server and the weight assigned to a server based on its capability. Requests are routed to servers based on the load factor, which is commonly calculated using the formular: the number of active connections of a server divided by its weight.\n$$ \\text{Load Factor} = \\frac{\\text{Number of Active Connections}}{\\text{Weight of the Server}} $$\nWeighted Least Connections Load Balancing Algorithm IP Hash The H+IP Hash algorithm routes requests to servers based on a hash of the client\u0026rsquo;s IP address. The load balancer applies a hash function to the client\u0026rsquo;s IP address to calculate the hash value, which is then used to determined which server will handle the current request. If the distribution of client IP addresses is uneven, some servers may receive more requests than others, leading to an imbalanced load. This algorithm is ideal for scenarios where maintaining state is important, such as online shopping carts or user sessions.\nIP Hash Load Balancing Algorithm Least Response Time The Least Response Time algorithm routes incoming requests to the server with the lowest response time, ensuring efficient resource utilization and optimal client experience. It is ideal for scenerios where low latancy and fast response times are crucial, such as online gaming and financial trading.\nLeast Response Time Load Balancing Algorithm Random The Random load balancing algorithm routes incoming requests to servers randomly. It is commonly used in scenarios where the load is relatively uniform and the servers have similar capabilities.\nRandom Load Balancing Algorithm Least Bandwidth The Least Bandwidth algorithm routes incoming requests to the server that is consuming the least amount of bandwidth. It is ideal for applications with high bandwidth usage, such as vedio streaming, file downloads, and large file transfers.\nLeast Bandwidth Load Balancing Algorithm Redundent Load Balancers The Single Point of Failure (SPOF) refers to any component in a system or infrastructure that, if it fails, causes the entire system or a significant portion of it to become unavailable. For instance, if a load balancer is responsible for routing all incoming requests to servers, its faulure would result in the entire system or application becoming inoperable. To mitigate this risk, redundent load balancers can be deployed.\nFor example, in an active-passive setup, two load balancers are used, where both are capable of routing traffic and detecting failures. The active load balancer handles all incoming requests, and if it fails, the passive load balancer takes over to ditribute requests, ensuring continuous availability. This approach helps prevent the system from being dependent on a single point of failure, as illustrated in the following diagram.\nLoad Balancer Cluster API Gateway An API Gateway is a server-side component that acts as a central entry point for clients to access as a collection of microservices. It recerves client requests, forwards them to the appropriate microservice, and then returns the response from the server to the client. The API Gateway is responsible for various tasks, such as request routing, authentication, rate limiting.\nAPI Gateway The key difference between an API Gateway and a load balancer lies in their core functions. An API Gateway focuses on routing requests to specific microservices. In contrast, a Load Balancer is responsible for distributing incoming traffic across multiple backend servers. Additionally, while an API Gateway typically deals with requests that target specific APIs identified by unique URLs, a load balancer generally handles requests directed to a single, well-known IP address, distributing those requests to one of serveral backend servers based on load-balancing algorithms.\nThe Difference Between API Gateway and Load Balancer Key Characteristics of Distributed System Network Essentials Domain Name System Caching Content Delivery Network (CDN) Data Partitioning Peoxies Redundency \u0026amp; Replication CAP Theorem Databases Indexes Bloom Filters ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/system-design/1-system-design/","summary":"Introduction to System Design System Design is the process of defining the architecture, components, modules, interfaces, and data for a system to fulfill specific business requirements, while ensuring scalability, maintainability, and performance.\nLoad Balancing In System Design, Load Balancing refers to the practice of distributing incoming network traffic or workload across multiple servers or resources to optimize resource use and ensure high availability.\nLoad Balancing To fullly leverage scalability and redundency, load balancing can occur at different layers: between user and the web server, between web server and an internal platform serve, between internal platform server and database as illustrated in the following image:","title":"System Design"},{"content":"食事 寿司 日本の寿司の種類と作り方 今日有名な寿司屋に行きました、沢山の寿司食べました。日本の寿司には、沢山の種類があります。代表的な物は、握り寿司、ちらし寿司、巻き寿司、稲荷寿司、箱寿司、そして回転寿司です。これらの寿司は、それぞれ異なる材料と作り方を使います。\nSHOW NOTES 沢山（たくさん）：a lot 種類（しゅるい）：variety, kind, type, category 代表的（だいひょうてき）：representitive 握り寿司（にぎりすし）：Nigiri-zushi is the most common type of sushi. It consists of a small mound of vinegared rice topped with a slice of fish or other seafood. ちらし寿司（ちらしずし）：Chirashi means \u0026ldquo;scattered,\u0026rdquo; and this sushi is made by scattering sushi ingredients, such as fish, vegetables, and egg over a bowl of sushi rice. 巻き寿司（まきずし）：Maki-zushi refers to sushi that\u0026rsquo;s rolled in sheet of nori (seaweed) with rice, fish, and vegetables inside. The roll is then sliced into bite-sized pieces. 稲荷寿司（いなりずし）：Inari-zushi consists of vinegared rice stuffed inside a pocket of sweet, marinated tofu skin called \u0026ldquo;aburaage\u0026rdquo;. It\u0026rsquo;s often served as a snack or appetizer. 箱寿司（はこずし）：Hako-zushi is a type of pressed sushi from the Kansai region. The ingredients (fish, vegetables, and rice) are arranged in a box and then pressed together to form a compact, rectangular shape. It\u0026rsquo;s sliced into blocks for serving. 回転寿司（かいてんずし）：Kaiten-zushi is a style of sushi restaurant where plates of sushi are placed on a rotating conveyor belt. Customers can pick the plates they want as they pass by. それぞれ：each, respectively 異なる（ことなる）：to be different, to vary 材料（ざいりょう）：materials, ingredients 作り方（つくりかた）：way of making まず、握り寿司は、小さなお米を手で握る方法で作ります。その上に新鮮な魚介類、例えばマグロやサーモン、鯛、烏賊などが乗せられます。海苔やわさびが付け合わせとして使われることもあります。お米は、特別な方法で炊く必要があります。炊き立てのお米に酢を混ぜて、寿司の材料と合わせます。\nSHOW NOTES お米（おこめ）：rice 握る（にぎる）：to grasp, to clutch 魚介類（ぎょかいるい）：marine products, seafood 例えば（たとえば）：for example, e.g. 鮪（マグロ）：tuna　サーモン：salmon　鯛（たい）：sea bream　烏賊（いか）：squid 海苔（のり）：Nori 山葵（わさび）：Wasabi 付け合わせ（つけあわせ）：garnish 特別（とくべつ）：special, particular 方法（ほうほう）：method, way 炊く（たく）：to cook 炊き立て（たきたて）：freshly boiled (rice), steaming 酢（す）：vinegar 混ぜ（まぜ）：to mix, to stir 合わせます（あわせます）：to mix, to combine 次に、ちらし寿司は、寿司のお米の上にたくさんの魚介類を散らして作ります。イクラや海胆、蛸や帆立もよく使われます。この寿司は見た目がとてもきれいで、食べるのが楽しいです。\nSHOW NOTES 散らし（ちらし）：scattering イクラ：salted salmon roe 海胆（うに）：sea urchin 蛸（たこ）：octopus 帆立（ほたて）：Japanese scallop 見た目（みため）：appearance, look ","permalink":"https://signalyu.github.io/posts/3-humanities/languages/learning-notes/japanese/1-japanese-vocabubulary/","summary":"食事 寿司 日本の寿司の種類と作り方 今日有名な寿司屋に行きました、沢山の寿司食べました。日本の寿司には、沢山の種類があります。代表的な物は、握り寿司、ちらし寿司、巻き寿司、稲荷寿司、箱寿司、そして回転寿司です。これらの寿司は、それぞれ異なる材料と作り方を使います。\nSHOW NOTES 沢山（たくさん）：a lot 種類（しゅるい）：variety, kind, type, category 代表的（だいひょうてき）：representitive 握り寿司（にぎりすし）：Nigiri-zushi is the most common type of sushi. It consists of a small mound of vinegared rice topped with a slice of fish or other seafood. ちらし寿司（ちらしずし）：Chirashi means \u0026ldquo;scattered,\u0026rdquo; and this sushi is made by scattering sushi ingredients, such as fish, vegetables, and egg over a bowl of sushi rice. 巻き寿司（まきずし）：Maki-zushi refers to sushi that\u0026rsquo;s rolled in sheet of nori (seaweed) with rice, fish, and vegetables inside.","title":"Japanese Vocabubulary"},{"content":"STAR The STAR method is a structured approach to answering behavioral questions, consisting of Situation, Task, Action, and Result. The Situation describes the context or challenge faced, while the Task explains the specific responsibility in that scenario. The Action outlines the steps taken to address the challenge, with a focus on personal actions. The Result highlights the outcome of those actions, emphasizing the positive impact and providing quantifiable results when possible.\nQuestion: Tell me about a time when you had to solve a challenging problem at work. Answer Situation: In my previous role, our team faced a situation where a critical system was frequently going down, causing delays in project delivery. Task: As a team member, I was tasked with finding the cause of the issue and implementing a solution to prevent future system downtime. Action: I conducted a thorough analysis of the system logs and identified a pattern where certain database queries were causing bottlenecks. I worked with the database team to optimize those queries and implemented monitoring to alert us when issues arose. Result: As a result, system downtime decreased by 80%, and project delivery improved on time. The team was able to handle tasks more efficiently, and client satisfaction increased. Questions Collaboration \u0026amp; Teamwork Question 1 Can you provide an example of when you had to work with a difficult team member? How did you handle the situation?\nWell, in a previous project, I worked with a team member who frequently missed deadlines, which affected the team\u0026rsquo;s overall progress. I approached him privately and understand the reason for the delays. He was struggling with some personal issues and felt overwhelmed. I offered my support and suggested breaking his tasks into smaller, maageable one. This approach helped him get back on track, and our teamwork improved significantly.\nQuestion 2 Describe a situation where you had to resolve a conflict between team members. How did you handle it, and what was the result?\nWell, in a previous role, I noticed two team members were not communicating effectively, causing delays and misunderstandings. I took the initialtive to arrange a meeting with both of them to address the issue. During the meeting, I identified the communication gaps and emphasized the importance of candid and clear communication. This intervention improved their collaboration and the team\u0026rsquo;s workflow became much smoother.\nQuestion 3 Tell me about a time when you had to work with a remote team or under a remote work setup. How did you ensure effective communication and collaboration?\nWell, in a previous project, I often needed to discuss project progress and upcoming tasks with my colleagues remotely. To ensure effective collaboration, I scheduled regular video calls to keep everyone aligned and foster a sense of connection. I also used project management tools and shared documents to keep everyone informed about the project status. This approach helped us stay coordinated and maintain productivity.\nQuestion 4 Why do you want to quit your current job?\nWell, to be honest. I\u0026rsquo;ve been doing pretty well in my last job. But I found there\u0026rsquo;s no much room for further growth, and I prefer working in an environment that\u0026rsquo;s more open and direct, as I value candid and clear communication and I\u0026rsquo;m always upfront about my ideas and don\u0026rsquo;t like beating around the bush. Besides, I have strong passion for coding, and I think my experience and skills align well with this role. So, it\u0026rsquo;s an exciting opportunity for me.\nAdaptibility Comunication Skills Problem Solving \u0026amp; Decision Making Time Management \u0026amp; Prioritization Initiative \u0026amp; Leadership Technical Competence \u0026amp; Quality Managing Constraints \u0026amp; Setback Work-life Balance \u0026amp; Personal Growth ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/interview/1-behavioral-interview/","summary":"STAR The STAR method is a structured approach to answering behavioral questions, consisting of Situation, Task, Action, and Result. The Situation describes the context or challenge faced, while the Task explains the specific responsibility in that scenario. The Action outlines the steps taken to address the challenge, with a focus on personal actions. The Result highlights the outcome of those actions, emphasizing the positive impact and providing quantifiable results when possible.","title":"Behavioral Interview"},{"content":"301-310 301. Which factors determine which university to attend? When choosing a university, people often consider the shcool\u0026rsquo;s reputation and its strengths in specific fields. They also think about the location of the university. In China, many people prefer universities in big cities like Beijing, Shanghai or Shenzhen because these cities offer more job opportunities after graduation, and they often plan their career paths around staying these major hubs.\n302. How important is a tertiary education in getting a job in your country? Well, in fields like technology, finance, or medicine, tertiary education is often a basic requirement in job hunting. Because it shows you have specialized knowledge and competence for the job. But, in recent years, there\u0026rsquo;s growing focus on skills and practical experience, especially in industries like IT.\n303. What do you think of the saying \u0026ldquo;Experience is the best teacher\u0026rdquo;? Well, it\u0026rsquo;s quite true, especially in computer science, if you want to work in the Internet field, then you have to get your hands dirty. I think experience can help you understand things on a deeper level because you\u0026rsquo;re dealing with challenges, making mistakes, and figuring out how to solve problems.\n304. Is your hometown a safety city? Yeah, my hometown is a pretty safe city. The crime rate is relatively low, and people generally feel comfortable walking around, even at night. Surveillance cameras are everywhere, where helps reduce theft, and the mobile payment is so popular in China that robberies have almost disppeared. But in some rural areas, there are still occasional cases of farm animals being stolen.\n305. Are there any parts of your city that are too dangerous to visit? Well, not really, my city is generally quite safe. There aren\u0026rsquo;t any areas that are considered too dangerous to visit. I would say, like any city, be cautious in less crowded places at night.\n306. Is it safe to walk outside alone at night? Yes, it\u0026rsquo;s generally safe to walk outside alone at night in my city. The streets are well-lit, and surveillance cameras are everywhere. But, in recent years, the economic situation hasn\u0026rsquo;t been very well, there are some isolated cases of unemployed indiciduals causing trouble out of frustration, but these incidents are extremely rare.\n307. Do you always lock your house and car? Yeah, I always lock my house and car. It\u0026rsquo;s more about being cautious than feeling unsafe. Even though my city is generally safe, it\u0026rsquo;s just a good habit to prvent any potential issues. Better safe than sorry!\n308. Could you compare blue-to white-collar crime? Well, blue-collar crime usually involves physical actions like theft or burglary, while white-collar crime is more about financial offenses, like fraud or insider trading. They are both harmful, but blue-collar crimes are typically easier to spot, while white-collar crimes can be more complex and harder to detect.\n309. Do you think abortion is a crime? Well, I think abortion is a crime because there are ways to prevent unwanted pregnancies, like using contraception. If an unexpected preganancy happens, I see it as gift from God. It may bring financial pressure, but it also brings joy and a sense of purpose. As humans, I believe we have a responsibility to embrace life and care for it.\n310. How concerned are you about terrorism? Well, I\u0026rsquo;m not overly concerned about terrorism because my country is generally quite safe. But I think it\u0026rsquo;s important to understand the impact terrorism has on some parts of the world. It\u0026rsquo;s something that governments and societies need to address together.\n311-320 311. Are you optimistic that in the future we will be living in a safer society? Yeah, I\u0026rsquo;m optimistic that we\u0026rsquo;ll be living in a safer society. In the future, with better surveillance systems, I think governments and communities will be able to prevent many crimes and address security issues more effectively.\n312. What are the characteristics of gangs in your country? Well, gangs are relatively uncommon in my country. But I\u0026rsquo;ve seen gangs in the movie, they are often involved in activities like illegal gambling or drug dealing. These gangs operate with strict rules and sometimes have informants within the police office.\n313. How could the government improve public safety in your country? Well, the government could improve public safety by increasing police patrols in areas where crime is more common. They can also educating citizens about safety measures, like emergency preparedness or online security. Additionally, addressing social issues like unemployment or poverty would help reduce crime rates in the long term.\n314. What rights should criminals have while in jail? Well, I think criminals should still have basic human rights while in jail, such as access to food, clean water, healthcare, and safety. They should also have the opportunity to improve themselves through education. At the same time, their rights like freedom of communication should be limited.\n315. How effective are the police in your country in preventing crime? Well, I\u0026rsquo;d say generally effective, especially in urban areas where they have better resources and surveillance systems. They’re usually quick to respond to incidents and have a good presence in high-crime areas.\n316. Where do you like to read? Well, since I’m working now, I usually read in my bedroom. But back in my school days, I loved going to the library to read. I really enjoyed the warm and cozy atmosphere there—it was the perfect place to focus and get lost in a book.\n317. What genre of books don\u0026rsquo;t you like? I\u0026rsquo;m not really a fan of horror books. I prefer stories with more positive or thoughtful themes, like personal growth, or inspiring stories. I enjoy books that make me reflect or offer a sense of hope and positivity.\n318. Do you ever read English books or magazines? Yeah, I read English books from time to time. I find it a good way to improve my language skills and expand my vocabulary. I\u0026rsquo;m a software engineer, so I mostly read books on topics related to Computer Science.\n319. Which star would you like to meet? Well, if I had the chance, I\u0026rsquo;d love to meet Arnold Schwarzenegger. He\u0026rsquo;s not only reach for his success in acting but also for his achievements in bodybuilding, business, and politics. I admire his determination and how he\u0026rsquo;s constantly reinvented himself throughout his career. I think it would be amazing to hear his stories and advice in person.\n320. Who\u0026rsquo;s a famous actor/singer from your country? Jay Chou is a very famous singer from my country. He\u0026rsquo;s known as the \u0026ldquo;King of Mandopop\u0026rdquo; and has been a hugh influence on Chinese music for years. His unique style blends traditional Chinese elements with modern pop. I really admire his talent for songwriting and composing, and his songs are classics for many people in my generation.\n321-330 321. What kind of star would you like to be? Well, to be honest, I don\u0026rsquo;t want to famous, I prefer a peaceful life. But if I had to choose, I\u0026rsquo;d love to be a star who inspires others to do good, like someone who raises awareness about socual issues using their platform.\n322. What effect, if any, does violence on TV and movies have on children? Well, I think violence in media can desensitize children to real-world violence, making it seem less serious or even acceptable. It might also make them more likely to act aggressively or imitate what they see especially if they don\u0026rsquo;t fully understand the consequences of those actions.\n323. How serious is the problem of pirated movies in your country? Well, in my country, pirated movies are still available online, and a lot of people continue to watch them, because they\u0026rsquo;re free and more convenient.\n324. What are the main causes of pollution in your area? Well, in my area, the main causes of pollution include industrial emissions and traffic. There are a lot of factories around, and their emissions contribute significantly to air pollution. Traffic is another big issue, especially during rush hour, as the number of vehicles has been steadily increasing, leading to more exhaust fumes and smog.\n325. How concerned are you about the environment? Well, I\u0026rsquo;m pretty concerned about the environment, especially with all the issues like climate change and pollution. The extreme weather events are becoming more obvious every year. I try to do my part by being more mindful of things like reducing waste and recycling. But I think we all need to take responsibility because these problems affect everyone.\n326. How noticeable is the problem of deforestation in your country? Well, in the past, the government focused on the development of economy, the problem of deforestation in my country is quite serious, especially in certain regions where forests are cleared for agriculture or urban expansion. But these years, there\u0026rsquo;s been more awareness about the issue, and the government has started taking steps to combat deforestation, like promoting reforestation projects and stricter regulations on land use.\n327. Is the government doing enough to protect the environment? Well, I think the government is making progress, but there\u0026rsquo;s still a long way to go. They\u0026rsquo;ve introduced some policies to protect the environment, like promoting clean energy, reducing pollution, and improving waste management. But sometimes enforcement can be inconsistent, especially with issues like illegal dumping or industrial pollution. I believe more needs to be done in terms of stricter regulations and raising awareness among the public.\n328. Which is more important, increasing the standard of living or protecting the environment? Well, I think both are important, but it\u0026rsquo;s about finding a balance. Increasing the standard of living is essential for improving people\u0026rsquo;s quality of life. But protecting the environment is just as crucial because, without a healthy environment, long-term improvements in living standards will be unsustainable.\n329. Who is responsible for protecting the environment, individuals or governments? Well, I think it\u0026rsquo;s a shared responsibility between both individuals and governments. But the government shares more responsibility. Because in China, we have a strong emphasis on collectivitism and the government plays a significant role in setting policies and enforcing environmental regulations.\n330. Are governments tough enough on companies which break environmental laws? Well, in China, there have been improvements in recent years, especially with stricter regulations and penalties for violations. But some companies still manage to bypass regulations, particularly in regions where economic development is prioritized. So I think the government could be tougher on companies that break environmental laws.\n331-340 331. What\u0026rsquo;s the difference between news from the radio and that from TV? Well, radio news relies purely on audio, so it\u0026rsquo;s more about the voice, tone, and sound effects to convey the story, you have to pay close attention to the details. It\u0026rsquo;s more focused on the narrative and can be easier to listen to on the go. But TV news often use both audio and visuals, to make the story more engaging and help you understand it better.\n332. Do you think people will become more or less healthy in the future? I’d say it depends. For people who value their health, they’ll likely become healthier in the future, especially with more awareness and resources available. But for others who have poor diets or unhealthy habits, their health might decline.\n333. What role does the media play? The media plays a significant role in shaping public opinion and influencing behavior. It can educate people through news, documentaries, and social media platforms. At the same time, it can shape perceptions by focusing on specific topics, which influences how we view issues or people. So, it\u0026rsquo;s a double-edged sword—it can inform and educate, but it can also manipulate.\n334. How can the media influence young people? Well, social media can shape young people\u0026rsquo;s views and behaviors. On the positive side, the media can empower them by raising awareness about important social issues and promoting positive values. On the negative side, it can create pressure to conform to unrealistic beauty standards or lead to constant comparisons with others.\n335. To what extent should we trust the media? We should be cautious about the media. Sometimes media can be a valuable source of information. But news can be influenced by various factors, like political agendas or commercial interests. So it\u0026rsquo;s important to recognize that not all media outlets are objective or free from bias.\n336. What news must people know about? What do they not need to know? Well, I think people should stay informed about news that affects their daily lives, such as health updates and environmental issues. But the sensational stories or celebrity gossip might be entertainment, but they don\u0026rsquo;t impact people\u0026rsquo;s daily lives, so people doesn\u0026rsquo;t need to pay too much attention to these topics.\n337. Do you ever play computer games? Well, back in my school days, I did enjoying playing computer games, it\u0026rsquo;s a fun way to relax and unwind. But now I\u0026rsquo;m working, I’m busier and prefer running to unplug from life.\n338. Are computers expensive in your country? Well, it depends on the brand and hardware configurations. International brands like Apple tend to have higher prices due to import taxes and brand premiums. High-end computers are more expensive, but there are more affordable options available from local brands like Lenovo.\n339. Do you have a camera? What kind? Well, I don\u0026rsquo;t have a camera. Actually, I don\u0026rsquo;t really get into photography. When I do take pictures, I usually just use my iPhone, it works well for casual shots.\n340. When and why do you take photos? Well, I take photos when I want to capture a memory, like at a family gathering. It\u0026rsquo;s not so much about taking perfect photos, but more about preserving moments that might slip away. I also take selfies during the Lunar New Year to capture the changes in my appearance over time.\n341-350 341. Are digital cameras better than cameras with film? Well, I would say it depends. Digital cameras are more convenient for everyday use because you can instantly see your shots and delete unwanted photos. Film cameras have a certain charm and nostalgia. The process of using film makes each shot feel more meaningful, and many people appreciate the unique quality of film photos.\n342. Why are mobile phones so popular? Mobile phones are so popular because they offer a ton of convenience. Smart phones are like mini computers, allowing us to browse the internet, check social media, and take photos on the go. They also keep us connected to friends and family through messaging and video call. Also, with features like GPS and online shopping, they\u0026rsquo;ve become essential tools for everyday life.\n343. Aside mobile phones, what other forms of communication do you use? Well, aside from mobile phones, I also use email and messaging apps like WeChat to stay in touch with people. For work, I usually use email to communicate with my colleagues, while for family and friends, I prefer WeChat. I also use social media platforms like Instagram to connect with people I’m interested in.\n344. What does your mobile phone look like? My phone is an iPhone 11. It’s black and has a sleek, simple design. The back features a dual-camera setup. It’s not too big, so it fits comfortably in my hand. The screen is clear and vibrant, and the overall look is quite minimalistic.\n345. Do you prefer sending a text message or talking on your mobile? I would say it depends. When I’m communicating with my boss, I prefer sending messages because it gives me time to consider the content. But for friends or family, I prefer talking on the phone or making video calls on messaging apps.\n346. What do you use the Internet for? Well, I use the internet for a variety of things. As a software engineer, I mostly use it for coding and collaborating with colleagues. I also use it for reading articles and occasionally keeping up with social media. Plus, it’s my go-to for learning new things, whether it\u0026rsquo;s watching online courses, reading tutorials, or browsing interesting topics.\n347. Have you ever bought anything from the Internet? Yeah, I’ve bought quite a few things from the internet. In China, the delivery service is really advanced. I mostly shop for food, clothes, and tech gadgets. Shopping online saves me the hassle of going to physical stores, and it’s super convenient.\n348. Do you think you spend too much time on the net? Well, I would say no. As a software engineer, I need to use the internet for work. But I’m not really into social media because it tends to take up a lot of time once you start using it—it’s like a rabbit hole, and it’s not productive.\n349. Have you ever been the member of a sports team? Well, When I was in school, I’ve never been a member of a sports team, but I do love sports and participated in running competitions. I also enjoyed playing football on weekend to clear my mind.\n350. Do you prefer to watch sporting events live or on TV? Well, I prefer watching sporting events on TV. It\u0026rsquo;s more comfortable since I can watch from home, and I get to enjoy the commentary and replays. I can also pause or rewind if I miss something. But I think watching live events would be amzing for the atmosphere and excitement, but it\u0026rsquo;s just not always practical.\n351-360 351. Do you prefer team or individual sports? Well, I prefer team sports, and I am a big fan of football, my favorite football team is Liverpool. I\u0026rsquo;ve been supporting them for several years. Watching their matches is always exciting and I really admire their style of play, attacking football fastly with a lot of intensity.\n352. What\u0026rsquo;s the most dangerous sport you\u0026rsquo;ve played? Well, I’m not really into dangerous sports, I prefer more relaxing sports like jogging. But a friend of mine loves bungee jumping. You jump off a high platform with a bungee cord tied to your ankles. You free-fall for a few seconds before the cord stretches and snaps you back up. It’s generally safe, but personally, I’m not a fan of it.\n353. Who is a famous sports person from your country? One famous sports person from China is Yao Ming. He\u0026rsquo;s a retired professional basketball player who played in the NBA for the Houston Rockets. Yao Ming is known for his incredible skill on the court. He helped raise the profile of the sport in the country and was a huge inspiration for many aspiring athletes.\n354. Which sport do you not like to watch or play? Well, I\u0026rsquo;m not really a fan of golf. I find it a bit too slow-paced, and honestly, it\u0026rsquo;s just not my thing. I prefer sports that are more dynamic and fast-paced like football. Golf requires a lot of patience, and I guess I\u0026rsquo;m just more into things that get my adrenaline going.\n355. Would you agree that sports star earn too much money? Well, it\u0026rsquo;s hard to say, to be honest. Sports star work really hard, and their training involve a lot of pressure and long hours. But at the same time, I think the money they make is often way higher than most people earn.\n356. What are the effects of parents who become too involved in their children\u0026rsquo;s sports activities? Well, I think it has both pros and cons. On the positive side, parents\u0026rsquo; care can boost their kids\u0026rsquo; confidence. But, if the involvement goes too far, it can lead to pressure, and kids might feel like they\u0026rsquo;re not playing for fun anymore but to meet their parents\u0026rsquo; expectations.\n357. What responsibilities do sports stars have to society? I think sports stars have a responsibility to set a good example, especially for youngsters. Because their actions can influence how yonger generations think and behave. They can use their platform to make a positive difference.\n358. Has sport become too commercialised these days? Yeah, I think sports have become too commertialised these years. Sponsorships and advertising are a huge part of the industry now, which is great for making the sport financially sustainable, but sometimes it feels like the focus is shifting more towards making money than on the game itself.\n359. Do you think would sporting events, like the Olympics, promote international understanding? Absolutely. They bring people from all over the world together, showcasing different cultures, values, and traditions. It provides an opportunity for countries to put aside their difference and focus on common ground, helping people feel more connected across borders.\n360. Do you think gambling on sporting events is acceptable? Well, I think gambling on sporting events is a bit of gray area. On one hand, it\u0026rsquo;s legal in many places and add excitement for fans. But it can also lead to addiction and financial issues, especially if people start betting more than they can afford to lose. Plus, it has the potential to affect the integrity of the sport, with issues like match-fixing.\n361-370 361. What should be the punishment for sports people who take performance-enhancing drugs? Well, I believe atheletes who use performance-enhancing drugs should face suspension or a competition ban, as it undermines the spirit of fair play. It\u0026rsquo;s not only unfair to other competitors but also sends a wrong message to fans, especially those who look up to these athletes.\n362. What does your government do to encourage people to lead a healthy lifestyle? Well, firstly, the government encourages physical activity through infrastructure, like building more parks and sports facilities in cities. They also run campaigns to raise aweness about the importance of exercise, balanced diets, and regular health checkups.\n363. How do you think sports and exercise may develop in the future? Well, in the future, I think technolgy will likely play a big role in sports and exercise. People may wear technical devices to track heath metrics in real-time. Virtual reality could also bring new ways to experience sports, making training and exercise more immersive.\n364. What are the benefits of having sports as part of the school curriculum? Well, firstly, it helps students stay physically active, which is important for their overall health. Regular exercise can also improve things like concentration, memory, and even academic performance. Plus, Sports teach life skills like teamwork, displine, and perseverance, which can be useful both in and out of the classroom.\n365. Is it customary to tip at restaurants in your country? Well, in China, tipping is not customary at restaurants, and it’s generally not expected. In fact, people tend to expect good service without the need for extra payment. But in some higher-end restaurants, service charges are sometimes included in the bill, but it\u0026rsquo;s not very common.\n366. Who usually pays for the meal when going out to eat in your country? Well, in China, it\u0026rsquo;s quite common for the person who invited others to eat to pay for the meal, especially in business or family settings. The host typically takes on the responsibility, as it\u0026rsquo;s seen as a gesture of hospitality. But among friends, it\u0026rsquo;s more common that everyone pays their share, or one person might pay and others will take turns next time.\n367. What do you think of health food? Well, I think health food is great way to support overall well-being. There\u0026rsquo;s a saying in England, \u0026lsquo;You are what you eat,\u0026rsquo; and I totally agree. Foods like fruits, vegetables, whole grains and lean proteins can improve digestion, energy levels, and even mood.\n368. Do you like food from other countries? Yeah, I really enjoy other countries! I think trying different cuisines is a fun way to experience new flavors and cultures. I\u0026rsquo;ve tried Japanese Sushi, it\u0026rsquo;s delicious—fresh fish, perfect rice, and soy sauce. I love how each piece is so simple but packed with taste.\n369. Do you often eat snacks between meals? Well, I eat really healthily, I don\u0026rsquo;t eat snacks between meals very often. But sometimes I\u0026rsquo;ll have somthing light if I\u0026rsquo;m hungry, and I usually prefer healthier options, like fruits and nuts.\n370. Have you ever had food poisoning? Yeah. There was a time when I visited my grandma during Lunar New Year, and I drank some fresh orange juce, and things took an awkward turn. The oranges were fresh, but I think the water might not have been clean.\n371-380 371. Would you agree that people eat more healthily than in the past? Well, I would say it depends. Some people are becoming more aware of healthy eating. There\u0026rsquo;s a lot more information available about nutrition and people are paying more attention to what they eat. But for those who enjoy junk food, like processed foods and sugary beverages, I think they\u0026rsquo;re eating less healthily compared to the past. But overall, I\u0026rsquo;d say people are eating more healthily than before.\n372. How important is it to you to have a balanced diet? Well, I eat really healthily, and I think having a balanced diet is pretty important to me. For breakfast, I usually have whole grains, dried berries, nuts, milk, and supplements like Vitamin D and probiotics. For lunch and dinner, I enjoy protein-rich foods like beef, eggs, and salmon. Of course, I don\u0026rsquo;t always stick to it perfectly, especially when eating out with family or friends.\n373. What are the main differences between Asian and Western food? The main differences between Asian and Western food lie in ingredients, cooking styles, and flavors. In asian cuisine, there\u0026rsquo;s often a focus on rice, noodles, and fresh vegetables, with ingredients like soy sauce, ginger, garlic, and a variety of spices. The flavors tend to be more umami, with a balance of salty, sweet, sour, and spicy. As far as I know, western food often includes more meat-heavy dishes, like steaks or burgers, and uses ingredients like potatoes, bread, and dairy.\n374. What significance does food have in your culture? Well, food holds a lot of significance in Chinese culture. It\u0026rsquo;s not just about nourishment; it\u0026rsquo;s deeply tied to traditions and celebrations. Certain dishes symbolize good luck and prosperity. For example, dumplings are often eaten during Lunar New Year for wealth, and fish represents abundance.\n375. Do some cultures have a healthier diet than others? Yeah, some cultures have a healthier diet than others, often due to locally available ingredients. For example, Mediterranean diets, which focus on whole grains, vegetables, fruits, olive oil, and fish, which is rich in healthy animal fat like Omega-3.\n376. How often do you have a health check-up? Well, I try to get a health check-up once a year, just to make sure everything is in order. It\u0026rsquo;s a good way to catch any potential issues early and stay on top of my health.\n377. Are gyms and health spas popular in your country? Yeah, gyms and health spas have become quite popular in China, especially in bigger cities like Beijing, Shanghai, and Shenzhen. As people are becoming more health-conscious, many are joining gyms to stay fit or work out regularly.\n378. Are you afraid of dentists? Well, I would say no. Actually, I have never been to see a dentist. But I did have an uncomfortable experience in the past, I know the toothache is really terrible and I always make sure to take care of my teeth.\n379. Have you ever tried traditional Chinese medicine? Yeah, I\u0026rsquo;ve tried traditional Chinese medicine a few times. I\u0026rsquo;ve used herbal remedies for mild aches. I found the traditional Chinese medicine is interesting, it focuses on balancing the body\u0026rsquo;s energy, or \u0026ldquo;Qi,\u0026rdquo; and treating the root causes of ailments, not just the symptoms.\n380. Do you prefer western or natural medicine? Well, I would say it depends. For mild issues, I prefer traditional Chinese herbal remedies, I think it\u0026rsquo;s great for prevention and supporting the body in a more holistic way. But for serious health issues or emergencies, I dedinitely trust Western medicine, as it\u0026rsquo;s more research-driven and effective.\n381-390 381. How do you deal with stress? Well, Regarding stress management, I have my own methods. I enjoy jogging or walking around the city on weekends. Besides, meditation is also my daily routine, I meditate 15 minutes each day before bedtime to clear my mind and relax my body. When I feel overwhelmed, I like to listen to music, watch movies, and read books. I also call my family for support when I\u0026rsquo;m feeling stressed.\n382. How do you relaxed after work or studying? Well, after work or studying, I like to relax by watching a movie or listening to music. If the weather is nice, I might go for a run or take a walk around the city. I also enjoy hanging out with friends, whether it\u0026rsquo;s grabbing a bite at a restaurant or catching a movie together.\n383. Where is the best place to go to relax in your town/city? Well, in Shenzhen, the best place to relax has to be Shenzhen Bay Park. It\u0026rsquo;s a beautiful spot where you can enjoy the lovely view of the water and the skyline. It\u0026rsquo;s a great place to clear your mind and enjoy some peace away from the hustle and bustle of the city.\n384. Do you have enough relaxation time? Well, I try to make time for relaxation, but it can be a bit challenging sometimes, especially when work gets busy. I do my best to balance everything by setting aside moments for downtime, like taking a quick walk, watching something light, or just chilling with music.\n385. Have you ever broken a bone? Yeah, I broke my right hand once when I was younger. I was riding my bike and took a pretty hard fall. It wasn\u0026rsquo;t too serious, but I had to wear a cast for a few weeks. During that period, I actually learned how to use chopsticks with my left hand, which was a fun challenge.\n386. Who looks after you when you are sick? When I’m sick, my family usually takes care of me. They make sure I’m comfortable, bring me food, and sometimes give me medicine if needed. It’s nice to have that support when you’re not feeling your best.\n387. Do you often take days off sick from work or studies? I don’t get sick very often, and I don\u0026rsquo;t usually take days off sick from work unless I\u0026rsquo;m really not feeling well. I try to push through when I can, but if it\u0026rsquo;s something serious, I\u0026rsquo;ll definitely take a day to rest and recover. I think it\u0026rsquo;s important to listen to your body, so I don\u0026rsquo;t mind taking a sick day if I need it.\n388. What is traditional remedy for a cold in your culture? Well, in China, a traditional remedy for a cold often involves drinking hot ginger tea with honey. Ginger is believed to help warm the body, while honey soothes the throat. Some people also drink a bowl of warm, savory soup, like chicken or lean pork soup, which is thought to boost immunity and help with recovery. Additionally, herbal teas made from ingredients like chrysanthemum or mint are commonly used to clear the nose and ease symptoms.\n389 Describe an unhealthy habit you have. Well, one unhealthy habit I have is occasionally sleeping in, especially when I stay up late the night before. It messes up my sleep schedule, and I end up feeling sluggish for the rest of the day. Even though I know it\u0026rsquo;s better to stick to a consistent routine, sometimes I just end up hitting snooze a few too many times. It\u0026rsquo;s something I\u0026rsquo;m working on, as I know it affects my energy and productivity.\n390. What responsibilities do doctors have? Well, firstly, doctors need to listen to patients, understand their symptoms, and perform necessary tests to determine the cause of health issues. They also prescribe medications or treatments, and give advice on healthy lifestyle choices. Additionally, they have to maintain patient confidentiality and keep accurate medical records.\n391-400 391. What is the role of the government in healthcare? Well, the government manages public health systems, regulates healthcare services, and creates policies that promote public health. They also responsible for setting healthcare standards, ensuring safety and quality, and addressing health disparities. Additionally, they provide health insurance or subsidies to help people afford medical care.\n392. Do you agree that doctors are underpaid? Well, I would say it depends. In some places, doctors are well-compensated for their work. But in regions where there\u0026rsquo;s a shortage of healthcare professionals, doctors may feel underpaid relative to the amount of work they have.\n393. How has the media contributed to globalisation? Well, nowadays, our world is a digital one. We can use social media to connect with people from all over the world. Through the media, we can learn from each other and share ideas. The media also promotes international business, tourism, and cultural exchange, making it easier for people to access different ideas and experiences.\n394. Would you travel back to a place you have been to before and stay there again? Well, actually, I\u0026rsquo;ve never revisited a place, but I’d like to try it. It sounds interesting. It’s nice to go back to places that left a positive impression on you—it makes you feel both nostalgic and excited at the same time.\n395. Do you have a driver\u0026rsquo;s licence? Well, I don\u0026rsquo;t have a driver\u0026rsquo;s license, and I don\u0026rsquo;t plan to get one. In China, public transportation is really convenient, and taking it is more eco-friendly. Plus, I believe autonomous vehicles will become more popular in the future, and I\u0026rsquo;m just not that interested in cars, so I don\u0026rsquo;t feel the need to drive.\n396. What is the most popular form of public transportation in your town/city? In Shenzhen, the most popular form of public transportation is the subway. It\u0026rsquo;s fast, convenient, and connects almost major part of the city, making it the go-to choice for daily commuters. The subway system is well-developed, clean, and affordable. During peak hours, it can get crowded, but it\u0026rsquo;s still one of the most efficient ways to travel in the city.\n397. What mode of transportation do you think is the safest? Well, I would say the subway. Because the stations are typically equipped with safety features like emergency exits and surveillance cameras. Additionally, it\u0026rsquo;s usually well-regulated and it\u0026rsquo;s underground, there\u0026rsquo;s less risk of accidents compared to cars and buses.\n398. What is interesting/special about your culture? Well, I would say the food culture. Because it\u0026rsquo;s diverse, with each region offering unique flavors and dishes. From spicy Sichuan cuisine to the delicate dim sum of Guangdong, there\u0026rsquo;s always something new to try.\n399. What don\u0026rsquo;t you like about your culture? Well, one thing I don\u0026rsquo;t particularly like about my culture is the pressure to constantly work hard and achieve success, which can sometimes lead to burnout. There\u0026rsquo;s a strong emphasis on academic performance and career success. I think ambition is great, but it can sometimes make it diffiuclt to maintain a healthy work-life balance.\n400. How can the government attract more tourists to your country? Well, to attract more tourists, the government can focus on improving infrastructure, such as modernizing airports and public transportation, making travel easier and more convenient. They could also offer visa-free access to more countries to simplify the process for tourists.\n","permalink":"https://signalyu.github.io/posts/3-humanities/languages/speaking/english/6-english-speaking-ielts-301-400/","summary":"301-310 301. Which factors determine which university to attend? When choosing a university, people often consider the shcool\u0026rsquo;s reputation and its strengths in specific fields. They also think about the location of the university. In China, many people prefer universities in big cities like Beijing, Shanghai or Shenzhen because these cities offer more job opportunities after graduation, and they often plan their career paths around staying these major hubs.\n302. How important is a tertiary education in getting a job in your country?","title":"English Speaking: IELTS (301-400)"},{"content":"201-210 201. Do you think it\u0026rsquo;s better to learn in a coeducational or single sex school? Well, definitely the coed school. Because in a coed environment, students have the opportunity to interact with peers of both genders, it\u0026rsquo;s helpful to develop their social skills. Single-sex schools might provide a more focused learning environment, but life is not just about acquiring book knowledge, is about learning a wide range of things.\n202. What\u0026rsquo;s the best way to punish students if they have broken a school rule? Well, to address rule-breaking in schools, we should focus on education. It\u0026rsquo;s important to help students understand the consequences of their actions, make them aware of the responsibility they hold when taking actions, and teach them what is cannot be tolerated.\n203. What are the advantages and disavantages of school uniforms? Well, the pros of school uniforms include reducing visible differences in socioeconomic status, help to prevent peer pressure related to clothing. Uniforms can also create a sense of school identity, fostering displine and minimizing distractions in the classroom. The cons include limiting students\u0026rsquo; freedom of expression and individuality. It also may affect students\u0026rsquo; self-esteem to some extent.\n204. Would you aggree that exams are the best way to measure what a student has learnt. I would say no. Because I think exams are a common way to measure what a student has learnt. they mainly evaluate a student\u0026rsquo;s ability to recall information, but they can\u0026rsquo;t capture other important aspects of learning, such as project-based work, presentations, and teamwork, which are essential for a more well-rounded evaluation.\n205. Which subjects at school are becoming increasingly important? Well, subjects that focus on developing critical thinking skills are becoming increasingly important, typically include Science, Mathematics, and Logic. Additionally, subjects like foreign languages are becoming more valuable in our interconnected world, as they help students communicate and collaborate with people from all over the world.\n206. How has education changed over the past 50 years in your country? Well, the biggest shift has been the increased use of electronical and technical devices in teaching. In the past, education relies heavily on traditional methods, such as textbooks and chalkboards, but now, digital tools like computer, tablets and online resources have become integral to the learning process. Another major change is the emphasis on developing soft skills, such as critical thinking, creativity, and collaboration.\n207. How will education will change in the future? Well, in the future, education is likely to become more personalized and technology-driven. AI will play a significant role as a supportive tool in the learning process. The role of teachers may evolve from traditional lecturers to facilitators, guiding students through interactive projects and collaborative work. Additionally, the boundaries of education will likely expand beyond the classroom, lifelong learning will become the norm.\n208. Describe a school rule that you don\u0026rsquo;t like or disagree with? One school rule I don\u0026rsquo;t like is the strict dress code. While it may help create a more focused learning environment, it limits students\u0026rsquo; freedom of expression and individuality. Additionally, An overly strict dress code could also affect students\u0026rsquo; self-esteem to some extent.\n209. Describe what crimes affect the area you live in. Well, I rarely hear about crimes in my community. Some common incidents might inculde theft, such as stealing electric bicycles. In recent years, as the economic situation has not been very good, there have been cases where some unemployed people resort to social retaliation out of frustration.\n210. Describe what makes a good police officer. Well, I think a good police officer should have strong communication skills, because this allow them to build trust with the commnunity. They should also have a sense of fairness, and treat everyone with respect. Additonally, a good police officer should be physically fit, mentally sharp, and able to make quick and sound decisions under pressure.\n211-220 211. Describe a crime that you have heard about. Well, I’ve heard about some fraud cases from people around me. About two years ago, telecom fraud was really rampant, and my friend’s cousin was scammed out of 20,000 yuan.\n212. How have crimes changed over the last 50 years in your country? Well, in the past, traditional crimes like theft and robbery were more prevalent. But now mobile payments in China are really popular, we rarely use cash for our daily transactions, so robbery crime have nearly disappeared. Additionaly, the survailance cameras are everywhere, which contribute to a decrease in theft cases. But the telocom crime has become more rampant these years, and it\u0026rsquo;s difficult to solve because the criminals are often based aboroad, particularly in countries like Myanmar and the Philippines.\n213. How will crimes will change in the future? Well, I think telecom fraud will become more rampant as the world becomes more interconnected, and it\u0026rsquo;s harder to solve multinational crimes. Additionaly, money laundering could become more widespread, as criminals may use cryptocurrencies like Bitcoin to facilitate illegal activities.\n214. Why do people become criminals? Well, I think one major reason is economic hardship. When people are struggling with poverty or unemployment, they might resort to crime to improve their financial situation. Additionally, people who lack education are more likely to commit crimes.\n215. Is it possible to change a criminal into a law-abiding citizen? Yeah, I think it\u0026rsquo;s possible. We can help former criminals build new life skills and a sense of belonging in society. People can change if they get the right support. With help from family and the community, many people can turn their lives around.\n216. Do you think there is link between drugs and crime? Yeah, I do think there is link between drugs and crime. Many crimes are related to drug use or drug trafficking. For example, people may commit crime to feed their addiction, and drug dealers may be involved in organized violent crimes as part of their illegal business.\n217. What do you think of gambling? Well, for some people, gambling can be an enjoyable social activity. But for others, gambling can lead to addiction, financial ruin, and even criminal behavior.\n218. What can you do in the evening? Well, in the evening, I usually read books at home. Actually, I\u0026rsquo;ve been rereading the little prince in English recently. I get new insights everytime I read it. I also love watching movies and TV shows. Additionaly, meditation is also my daily routine, I meditate 15 minutes before bed to clear my mind.\n219. Do you enjoy dancing? Well, I don\u0026rsquo;t know about dancing, to be honest. But I’d love to learn if someone’s willing to teach me. I’m really into staying healthy, and dancing is great for that.\n220. Have you ever tried Karaoke? Yeah. I live in Shenzhen for work. During holoidays, I always return my hometown to celebrate with my family. We usually go to karaoke, and I really enjoy it.\n221-230 221. Do you know any amusement parks? Yeah, I completed my education in Guangzhou, and I\u0026rsquo;ve been to Chimelong with my friends. It has a lot of attractions, like the Ocean Kingdom, the Safari Park, and the Resort area. I particularly love the Safari Park because I’m really into animals.\n222. What\u0026rsquo;s the best museum or art gallery? Well, I seldom go to museums or art galleries. But I\u0026rsquo;ve been to the China Hakka Museum in Meizhou. Inside, you can see a lot of agricultural tools, because Meizhou plays a significant role in agriculture, especially in rice and tea. You can also see traditonal Hakka architecture models and other cultural artifacts like clothing and pottery. I think the best part of museums is that by appreciating these artifacts, you can give a glimpse into their way of life over the centuries.\n223. Which form of entertainment do you enjoy the most? I\u0026rsquo;d say I enjoy watching movies the most. It’s a great way to unwind. I love how films can tell powerful stories through visual imagery, music, and performance. I also enjoy exploring how directors use cinematography to convey emotions and ideas. It\u0026rsquo;s a medium that really speaks to me, and I find it both entertaining and thought-provoking.\n224. Do you think movie stars and actors earn too much money? It\u0026rsquo;s hard to say, to be honest. Movie stars and actors work really hard, and their jobs involve a lot of pressure and long hours. But at the same time, I think the money they make is often way higher than most people earn.\n225. How much influence do celebrities have on youngsters? Well, Celebrities have a big influence on youngsters. A lot of them look up to movie stars and try to imitate their style or even lifestyle choices. Sometimes it\u0026rsquo;s positive, like promoting fitness, but it can also have negative effects like setting unrealistic expectations or encouraging unhealthy habits.\n226. What are the disadvantages of fame and success? Well, one big disadvantage is the lack of privacy. Celebrities often have their lives under the spotlight, which can be exhausting and stressful. Additionally, because of anonymity, there are full of simps who can ruin their day by sending unpleasant messages.\n227. Which is most important to you, fame, success, or wealth? I don\u0026rsquo;t really want to be famous, to be honest, as I enjoy peaceful life. I think doing something meaningful and feeling accomplished is far more important than chasing fame or money.\n228. Why are we so interested in the private lives of celebrities? I think it\u0026rsquo;s because celebrities are often seen as larger-than-life figures, and it feels like a way to connect with them. Sometimes, their lives seem so different from ours, which sparks our curiosity. It\u0026rsquo;s a mix of fascination and maybe even envy.\n229. What responsibilities do famous people have to society and children in particular? I think celebrities have a responsibility to set a good example, especially for youngsters. Because their actions can influence how yonger generations think and behave. They can use their platform to make a positive difference.\n230. Should movies be censored? Well, I think movies should be regulated, but not heavily censored. When it comes to things like violence or racial discrimination, some viewers, particlarly youngsters, might not be able to handle it, but too much censorship can limit artistic expression. So it\u0026rsquo;s important to strike a balance between freedom of expression and ensuring that content is apporaciate.\n231-240 231. Are you afraid of bugs? I\u0026rsquo;m not afraid of bugs. I mean, they can be a bit annoying sometimes, especially when they show up in the house, but I wouldn\u0026rsquo;t say I\u0026rsquo;m scared of them. Actually, when I was a little boy, soemtimes bees would get into the house at night, it\u0026rsquo;s pretty annoying, you know, the buzzing sound they made, I usually just caught them and let them go outside.\n232. Do you like watching animals in the wild? Well, I really love animals. I never been out into the wild to watch animals. But I\u0026rsquo;ve been to safari park when I was studying in Guangzhou. I also enjoy watching wildlife ducumentaries, and I\u0026rsquo;d love to actually experience it in person someday, like going on a safari.\n233. How often do you enjoy nature? I would say as often as I can. Because I\u0026rsquo;m usually busy with work, but when I do have the chance, I love going for walks in the park or hiking in the mountains. It\u0026rsquo;s a great way to unplug from life and clear my mind. During holidays, I always go back to my hometown to celebrate with my family, and we commonly go hiking together.\n234. What are some places tourists can visit to enjoy nature in your country? Well, first, I would recommend Yangshuo, located in Guangxi. It\u0026rsquo;s famous for its stunning limestone karst landscapes and the Li River. You can take a boat cruise along the river and enjoy the breathtaking views of mountains and caves. Other great spots include Zhangjiajie in Hunan and Jiuzhaigou Valley in Sichuan, both of which are definitely worth a visit.\n235. Does your country often suffer from natural disasters? Yeah, There are frequent floods. especially during the summer months due to heavy rainfall, particularly along the Yangtze River. Typhoons are also a concern, particularly in coastal areas, like Guangdong and Fujian.\n236. What do you do if there is a typhoon or earthquake? Well, for a typhoon, I\u0026rsquo;d stay indoors, secure windows and doors, avoid going outside, and prepare emergency supplies like water, food, and a flashlight. For an earthquake, I\u0026rsquo;d take cover under a sturdy piece of furniture, and hold on until the shaking stops. Afterward, I\u0026rsquo;d stay away from glass windows, and check for any potential gas leaks.\n237. Describe an environmental issue in your city. Well, one major issue in Shenzhen is air pollution. Due to rapid urbanization and industrialization, the air quality can often be poor. Emissions from vehicles and factories contribute to the smog, whcih can be harmful to health. There\u0026rsquo;s been a growing awareness of the issue, and the government has implemented the pocilies like promoting electric vehicles and green initiatives to address it.\n238. Describe a natural disaster that has occurred in your country. One significant natural disaster in China was the Wenchuan Earthquake, which occurred on May 12, 2008, in Sichuan Province. The earthquake killed over 80,000 people and left millions homeless. The disaster also caused severe damage to infrastructure, including roads, schools and hospitals.\n239. Describe a place of natural beauty in your country. One place of natural beauty in China is Yangshuo, located in Guangxi Province. It\u0026rsquo;s known for it\u0026rsquo;s stunning limestone karst landscapes and the Li River. There are breathtaking views of towering peaks with lush green countryside. The Li River presents picturesque landscape of the mountains and riverside villages. Visitors can enjoy activities like boat cruises, cycling, and hiking. It\u0026rsquo;s truly a place that worth visiting.\n240. Describe a type of public transport in your city. Well, in Shenzhen, subways are popular and efficient. The subway system is well-developed, with multiple lines connecting different parts of the city, including areas like the business districts, residential neighborhoods, and popular tourist spots. The trains are modern, clean, and air-conditioned. It\u0026rsquo;s a comfortable option, especially during the hot summer months. The system is also affordable, with easy-to-use electronic tickets and mobile apps for navigation. It\u0026rsquo;s a quick way to avoid traffic and get around the city.\n241-250 241. What are the environmental effects of urbanization? Well, on the negative side, one major impact is air pollution. As cities grow, the number of vehicles and industrial activities increases, leading to higher emissions of harmful gases and particulate matter. This contributes to smog and affects public health. Another issue is deforestation, as natural areas are cleared to make way for buildings and infrastructure. On the positive side, urbanization can promote energy efficiency through public transportation and improved infratructure. It also opens up opportunities for green technologies, like renewable energy sources.\n242. How can we strike a balance between development and protection? Well, we can focus on sustainable development by using eco-friendly technologies, like renewable energy. We can also regulate industries to reduce pollution and waste, and encourage things like public transport to cut down on traffic emissions.\n243. What are some alternative energy sources that can be developed more? Well, I think the most promissing is solar energy, we can harnesses the power of the sun using solar panels. It’s great for the environment since it has zero carbon emissions. Another source is wind energy, it can be used in coastal and high-altitude areas.\n244. What are the pros and cons of alternative energy such as solar power? Well, the benefits of solar power are that it\u0026rsquo;s clean, renewable, and affordable. Because it doesn\u0026rsquo;t produce harmful emissions or deplete natural resources. It\u0026rsquo;s also pretty low maintainence once the panels are set up. But it depends on the weather, so on cloudy days or at night, it’s not as effective. Also, to make it truly efficient, the area needs to have enough sunlight to make it practical.\n245. What dangers are there in the production of nuclear power? Well, one of the biggest risks is nuclear accidents, like the ones at Chernobyl and Fukushima. The radiation leaks contaminates the environment and causes long-term health issues for humans and wildlife. Another concern is the disposal of nuclear waste, which remains radioactive for thousands of years and requires safe storage to prevent contamination. Also, the technology could be misused for weapons development.\n246. Should the government make the environment a priority? Well, I would say yes. Because protecting the environment is crucial for the well being of current and future generations. If we don\u0026rsquo;t take action, we risk facing severe consequences like climate change and pollution. I think the government should focus on sustainable development and renewable energy to create a more eco-friendly environment.\n247. Why are people interested in the news? Well, I think one reason is that people like certainty—reading the news keeps them informed about what\u0026rsquo;s happening in the world, making them feel more connected. Also, news can be a source of entertainment, especially when it covers celebrity updates.\n248. Should you always keep up with the latest news? Well, I would say no. Actually, I seldom watch the news, to be honest. Because I find a lot of it can be misleading and irrelavant to my daily life. But sometimes I read international news in English, because it helps improve my English reading comprehension.\n249. Where do you get your news from? TV? Radio? Internet? I usually get the news from the Internet. Actually, I seldom watch the news, to be honest. Because I find a lot of it can be misleading and irrelavant to my daily life. But sometimes I read international news in English, because it helps improve my English reading comprehension.\n250. Can you understand the English news on TV? Well, I would say it depends. I can understand the English news on TV when the language is clear or there are captions. But if the news is fast-paced or involves specialized vocabulary, it can be little tricky for me.\n251-260 251. Is the news too shocking now? Well, we’re living in an intense digital world now, and the competition in the news industry is more fierce than ever before. Some news can be quite shocking because news outlets often try to boost readership and attract traffic, so they tend to exaggerate the details. This can make the news feel more shocking than they actually are.\n252. Is there too much advertising on the TV and radio? Yeah, today\u0026rsquo;s world is a commercial one. There are too many commercial breaks, and sometimes it feels like there are more ads than actual content. But advertising is necessary for supporting media, so it\u0026rsquo;s a bit of trade-off.\n253. Why does the media often come under scrutiny for stories they publish? Well, this is because the media plays a significant role in shaping public opinion. Scrutiny ensures that the published stories are truthful, ethical, and appropriate for all audiences, and helps prevent deceptive practices. When stories are biased or sensationalized, it can mislead the public or create unnecessary panic.\n254. Do you think tabloids should be banned? Well, I don\u0026rsquo;t think tabloids should be banned, but they need to be more regulated. Tabloids are commonly focus on sensational stories, they can also spread misinformation. I think enforcing stronger journalistic standards would be a better option.\n255. When did you learn to use a computer? Well, I used a computer for the first time in university because there were courses that required using the computer, like word processing and Excel. But now, I\u0026rsquo;m a software engineer, I’m much more advanced with computers compared to before.\n256. How did you learn to use a computer? Well, in university, I took courses that involved using computers for tasks like writing papers and creating presentations. Since I’m interested in computer science, I also self-learned Python and Java. Also, Online tutorials and forums have been really helpful in mastering computer skills.\n257. What do you use a computer for? Well, first, since I’m a software engineer, I use a computer for work, like writing requirement documents and coding. Outside of work, I use a computer for personal activities, like browsing the web, watching videos, and keeping in touch with friends.\n258. How well can you type? Well, I\u0026rsquo;m comfortable typing at a decent speed, especially for coding. But when I\u0026rsquo;m writing something important, I might slow down a bit to make sure everything\u0026rsquo;s correct.\n259. How have computers changed our lives? Well, The first is that computers have made communication more accessible. We use social media in daily life to stay connected with anyone, anywhere in the world. Computers also have revolutionized education. In the past, education relied heavily on traditional methods, such as textbooks and chalkboards, but now, computers have become integral to the learning process.\n260. What effect have mobile phones had on our lives? Well, mobile phones have made communication more accessible. We use social media in daily life to stay connected with anyone, anywhere in the world. But they also have negative effects, especially with watching short videos, as it takes up a lot of time. Once you start watching, it feels like a rabbit hole, which can make our lives less productive.\n261. How important is it that each child has access to a computer? Well, I think it\u0026rsquo;s really important for children to have access to a computer. Because today\u0026rsquo;s world is a digital one. A computer opens up so many opportunities for learning and it has been an essential part to the learning process. It also helps kids stay connected with the world, learning how to use computers early is benefitial for their future careers.\n262. Could you explain why the Internet is unsafe for young kids? Well, first of all, there’s a lot of inappropriate content on the Internet, like violence and explicit material, which isn’t good for children’s development. Also, kids can easily become addicted to the Internet, and spending too much time online can affect their mental and physical health, leading to isuues like poor sleep or a lack of physical activity.\n263. What responsibilities do parents have to protect their children from the dangers of the Internet? Well, parents can use parental controls to block harmful content. They can also set clear rules about online usage, such as what websites are appropriate and how much time kids can spend online. It\u0026rsquo;s also important for parents to educate their children about the risks of the Internet, like the dangers of sharing personal information on the internet.\n264. How could the Internet be made safer? Well, to make the Internet safer, we can develop content moderation tools to filter out harmful or inappropriate material. We can also implement policies like age verification on social meida platform to ensure the content are suitable for children. Also, educating people about online safety and privacy can make a difference.\n265. Do you think children need mobile phones? Well, I’d say it depends. Since we live in a digital world, mobile phones can help parents stay in touch with their kids. They can also be useful for learning, as sometimes children need to browse online content for educational purposes. but, mobile phones also have negative effects—they can introduce distractions, expose kids to inappropriate content, and encourage unhealthy screen time habits. So, I believe children should only have mobile phones if there’s a specific need for them.\n266. How serious is the problem of phone abuse in school time by students? Well, it\u0026rsquo;s fairly serious. Many students get easily distracted by their phones, using them for social media, games, and messaging during lessons, this can affect their academic performance. Also, excessive phone use during school can lead to social isolation, as students may prefer interacting with their phones rather than engaging with their peers.\n267. How has technology aided education and learning? Well, technology provides access to a wealth of resources online, making learning more flexible and self-paced. For example, when learning a language, we can make video calls with people from all over the world. Also, technology helps educators tailor lessons to individual needs, improving overall teaching effectiveness.\n268. What right does the government have to censor the Internet? Well, the government has the right to censor the Internet to protect national security and public safety. For example, they can block harmful content such as hate speech or content promotes terrorism. They may also regulate the Internet to prevent the spread of misinformation or rumors.\n269. What are the benefits of mobile phones? Well, mobile phones have made communication more accessible. We use social media in daily life to stay connected with anyone, anywhere in the world. They also make our life more convenient, we can use them for daily payments, topping up accounts, and handling transactions. Also, They bring more fun to our life, we can use them for entertainment, like watching videos, playing games, and listening to music.\n270. What are the advantages and disadvantages of email? Well, the pros of email include being quick and cost-effective—you can send messages instantly with almost no cost. But, it can also feel overwhelming, especially with all the spam and constant notifications. Plus, you won’t always get an immediate response if the other person doesn’t check their inbox often.\n271-280 271. What sports are you good at? Well, I\u0026rsquo;m a big fan of sports. I\u0026rsquo;d say I\u0026rsquo;m pretty good at football. I\u0026rsquo;ve been playing it since middle school, so I\u0026rsquo;ve got the hang of shooting and passing. I\u0026rsquo;m not a pro or anything, but I enjoy playing in a casual way with friends. I find it\u0026rsquo;s a great way to stay active and I like how they help me clear my mind after a busy day.\n272. What sports is your country famous for? Well, in China, ping pong is definitely the most famous sport. Actually, it\u0026rsquo;s considered the national sport. We\u0026rsquo;ve had so many world champions over the years, like Ma Long, Zhang Jike. It\u0026rsquo;s played everywhere, from schoolyards to professtional tournaments.\n273. What sporting or exercise facilities do you have in your community? Well, in my community, there\u0026rsquo;s a public gym with a variety of equipment, people can do weight training or cardio there. We also have an outdoor basketball court, which is pretty popular, especially in the evenings. Also, there\u0026rsquo;s a running track in the local park, and I usually go for a jog on weekends if the weather is nice.\n274. What leisure activities do you enjoy? Well, I really enjoy watching movies, especially action movies. I love how films can tell powerful stories through visual imagery, music, and performance. I also enjoy exploring how directors use cinematography to convey emotions and ideas. It\u0026rsquo;s a medium that really speaks to me, and I find it both entertaining and thought-provoking. I also like jogging. It\u0026rsquo;s a great way to unplug from life and clear my mind. On weekends, I like to go for a jog if the weather is nice.\n275. Do you have enough leisure time? Well, I would say it depends. Usually, I have a decent amount of leisure time. But sometimes work can get busy, so I have to squeeze in activities when I can. On days when things are a bit calmer, I try to keep weekends more relaxed, like reading or watching movies.\n276. Is it easy to find places to relax in your neighbourhood? Yeah. My neighbourhood is a peaceful and beautiful place, it\u0026rsquo;s by the river, and I usually go for a jog along the river to unwind. There\u0026rsquo;s also a basketball court, and it\u0026rsquo;s pretty popular, especially in the evenings. If you\u0026rsquo;re into more relaxing activities like walking or doing Taijiquan, then the park is a great place to spend some time.\n277. Describe a leisure activity that you enjoy. Well, I really enjoy watching movies, especially action movies, and I love how films can tell powerful stories through visual imagery, music, and performance. I also enjoy exploring how directors use cinematography to convey emotions and ideas. It\u0026rsquo;s a medium that really speaks to me, and I find it both entertaining and thought-provoking.\n278. Which customs are dying out in your country? Well, one custom that\u0026rsquo;s slowly disappearing is the traditional tea-drinking ceremony. Tea is a big part of our culture, and we commonly offer hot tea when people visit us. Nowadays, fewer people drink tea, and the formal ceremony are becoming rare. Also, many people tend to drink coffee or milky tea becaused of the fast paced life. Another is the way of festival celebration, in the past, traditional festivals involved a lot of family gatherings, but now people focus more on having a quick meal or just exchanging gifts.\n279. Describe a dangerous sport. Well, I’m not really into dangerous sports, but a friend of mine loves bungee jumping. You jump off a high platform with a bungee cord tied to your ankles. You free-fall for a few seconds before the cord stretches and snaps you back up. It’s generally safe, but personally, I’m not a fan of it.\n280. Describe a famous sportsperson you know. Well, a famous sportsperson I know is Messi. He\u0026rsquo;s an argentinian footballer and has amazing skill set, like dribbling and goal-scoring ability. He spent most of his career at FC Baecelona, where he won numerous titles, including multiple Ballon d\u0026rsquo;Or Awards. What makes Messi stand out is not just his talent, but his humility and dedication to the sport.\n281-290 281. What kinds of desserts are popular in your country? Well, there are a lot of desserts in China, because China is a big country with diverse nationaities. In my homwtown, sesame balls are quite popular. They\u0026rsquo;re deep-fried dough balls filled with sweet red bean paste and coated with sesame seeds. They\u0026rsquo;re crispy on the outside and soft on the inside. They\u0026rsquo;re often eaten during festivals or even funerals. Another well-known dessert is mooncake, which is traditionally eaten during the Mid-Autumn Festival. The filling usually consists of lotus seed paste and salted egg yolk.\n282. What kinds of fruit and vegetables are grown in your country? Well, China is a large country with diverse climates and geography, so a wide range of fruits and vegetables are grown here, such as apples, pears, oranges, chesnuts, eggplants, etc. One popular fruit in my homwtown is pomelo. It\u0026rsquo;s similar to grapefruit but larger and sweeter. Pomelo is especially popular in southern regions, like Guangdong and Fujian. Actually, my hometown is often considered the hometown of pomelo.\n283. What food from your country would you miss the most if you were living abroad? Well, If I were living abroad, I\u0026rsquo;d probably miss Dongpo Pork the most. It\u0026rsquo;s slow-cooked with soy sauce, sugar, and spices. It literally melts in your mouth. Actually, When I was a little boy, I always get excited when there was a local event because it means I can enjoy my favorite dish.\n284. What food from your country would you suggest a foreigner try? Well, China is a big country with diverse nationalities. We have a lot of cuisines. I highly recommend the Dongpo pork, It\u0026rsquo;s slow-cooked with soy sauce, sugar, and spices. It literally melts in your mouth. It\u0026rsquo;s definitely worth a try.\n285. Do you prefer to eat at a restaurant or at home? Well, I prefer eating at home because I eat really healthily. The food in restaurants is delicious, but it\u0026rsquo;s often salty and oi–ly, which isn\u0026rsquo;t great for our health. But, sometimes, like when celebrating holidays or birthdays, I\u0026rsquo;ll go to a restaurant with my family or friends.\n286. What are the benefits of travel? Well, first, it broadens your perspective. When you travel, you experience different cultures, languages, and ways of life, which can make you more open-minded. Travel also gives you the chance to disconnect from daily routines and recharge both your mental and physical energy. Finally, it provides a sense of adventure and excitement, making life feel more spontaneous and enriching.\n287. Do you eat food now that you didn\u0026rsquo;t eat as a child? Yeah, when I was little boy, I was pretty picky. I preferred eating sweet things and didn\u0026rsquo;t like bitter food. But now, I actually enjoy bitter gourd, especially when it\u0026rsquo;s fried with eggs. I think probably because I\u0026rsquo;m older, have experienced more, and have started to apperate the bitter flavor.\n288. Is vegetarianism popular in your country? Well, I would say no. Overall, Chinese people tend to eating meat. I\u0026rsquo;m from Guangdong Province, and there\u0026rsquo;s a saying here: \u0026ldquo;Anything that flies in the sky, runs on the ground, or swims in the water can be eaten.\u0026rdquo; But, in some big cities like Beijing, Shanghai, and Shenzhen, vegetarianism is gaining popularity, especially among younger generations.\n289. Do you eat regular meals? Yeah, I usually eat regular meals and try to stick to three meals a day. For breakfast, I often have whole wheat, milk, dried berries, nuts and supplements like Vitamin D and probiotics. For lunch and dinner, I typically eat rice with vetegables and protein-rich foods. Of course, when things get busy, I might have a smaller meal or snack. But generally, I try to eat regularly.\n290. Do diets work or are they just a quick way for some business-minded people to make money? Well, I would say it depends. Some diets can work if they\u0026rsquo;re well-balanced and sustainable. For example, diets that focus on whole foods and balanced nutrition can have positive effect. But many \u0026ldquo;fad diets\u0026rdquo; can just be a quick fix, without addressing the root cause of unhealthy eating habits. These types of diets sometimes create a cycle of weight loss and gain, which isn\u0026rsquo;t sustainable for long-term health.\n291-300 291. What are the effects of an unhealthy diet? Well, consuming too many calories can lead to weight gain and increase the risk of obesity. Overtime, this can contribute to chronic diseases like diabetes and high blood pressure. It can also weaken the immune system. Additionally, poor nutrition is linked to mental health issues like depression and anxiety, as the brain doesn\u0026rsquo;t get the essential nutrients it needs to function properly.\n292. What can the government do to encourage a healthy lifestyle among its citizens? Well, the government can educate people on the importance of a balanced diet, regular exercise, and good-quality sleep. They can also make healthy food options more affordable and accessible, especially in low-income areas. Additionally, they can creating more public spaces like parks to encourage more physical activity.\n293. How have eating habits changed over the past 50 years? Well, one of the biggest shifts has been the rise of fast food. In today\u0026rsquo;s fast-paced world, people are opting for fast food instead of cooking from scratch, leading to higher consumption of sugary snacks and soft drinks. Also, because of the widespread use of chemical fertilizers and pesticides, more people are now opting for organic food.\n294. What explanations can you provide for the growing popularity of organic food? One reason is that more people are becoming aware of the potential health risks of consuming food with pesticides, chemicals, and artificial additives, so they see organic food as a safer and cleaner option. Another reason is the growing concern about the environment. Organic farming practices are generally more sustainable and have a smaller impact on soil and water quality.\n295. What are the pros and cons of being vegetarian? Well, the pros of being vegetarian include health benefits, as a well-balanced vegetarian diet is typically high in fiber, vitamins, and antioxidants, which can help reduce the risk of chronic diseases like diabetes and high blood pressure. It\u0026rsquo;s also more eco-friendly, as plant-based foods generally require fewer resources compared to animal products. On the downside, vegetarian can easily lack certain nutrients that mostly found in animal products. It can also be more diffcult to maintain a balanced diet compared to a regular diet.\n296. Do you suffer from an allergy? No, I don\u0026rsquo;t suffer from any allergies. But I know some people can have allergies to things like pollen, dust, certain foods, or even pet dander. It can cause sysptoms like sneezing, itchy eyes, or skin reactions.\n297. What dangers are there of taking medicine? Well, one danger is the potential for side effects, which commonly include mild issues like headaches or dizziness. Another concern is drug interactions; some medications can interfere with others, reducing their effectiveness or causing harmful side effects. Additionally, overusing medication can be dangerous and may lead to addiction or long-term health problems.\n298. How often do you travel abroad or intercity? Well, I would say as often as I can. With work keeping me busy, I don’t get many chances, but when I do, I enjoy exploring new places and experiencing different cultures. On weekends, if the weather is nice, I might take some time to walk around the city and relax.\n299. Do you prefer to travel alone or in a group? Well, I prefer to travel alone. It gives me the freedom to plan my itinerary the way I like and move at my own pace. I enjoy having some quiet time to explore places, reflect, and fully immerse myself in the experience. Travelling alone also feels more flexible since I don\u0026rsquo;t worry about compromising on what to do or where to go.\n300. Do you have a good sense of direction? Well, I\u0026rsquo;d say most of the time. Once I\u0026rsquo;ve been to a place, I can usually remember how to get back. But in completely unfamiliar areas, I might rely on navigation app to find my way. Sometimes, getting lost can actually be interesting because you might stumble upon unexpected scenery.\n","permalink":"https://signalyu.github.io/posts/3-humanities/languages/speaking/english/5-english-speaking-ielts-201-300/","summary":"201-210 201. Do you think it\u0026rsquo;s better to learn in a coeducational or single sex school? Well, definitely the coed school. Because in a coed environment, students have the opportunity to interact with peers of both genders, it\u0026rsquo;s helpful to develop their social skills. Single-sex schools might provide a more focused learning environment, but life is not just about acquiring book knowledge, is about learning a wide range of things.","title":"English Speaking: IELTS (201-300)"},{"content":"101-110 101. Are people isolating themselves from society these days? Yeah, many people have become addicted to social media, they prefer staying home and interacting online instead of engaging in face-to-face conversations. And the fast-paced modern life also makes people feeling disconnected.\n102. What responsibilities do citizens of a nation have? Th first is attending school; in China, everyone is required to complete nine years of compulsory education. The second is, Citizens must obey the law, as following legal regulations helps maintain social stability. And, Participating in national defense is also crucial, in China, men between the ages of 18 to 24 are subject to millitary service.\n103. Why do people emigrate? Generally, The key reason for emigration is that people tend to move to a place for better job oppotunities and make more money. The convenient trasportation and high standard healthcare and educational systems also attract people to emigrate. And people who have suffered from war also move to peaceful places for safety and stability.\n104. What kind of problems may immigrants experience when they arrive in a new country? The main concerns are language barriers and cultural differences. When people move to a new country. if they don\u0026rsquo;t know well the local language, they will have difficulty in communication, this will affect daily activities like shopping and work. Immigrants may also experience culture shock, this may lead to feelings of isolation.\n105. Does immigration threaten local culture or enhance it? I think legal immigration will enhance a community\u0026rsquo;s culture. Because immigrants bring new ideas, traditions, and food to the new place, it can enrich the local culture, making the community more vibrant and diverse.\n106. What can be done about illegal immigration? To address illegal immigration, we can strengthen border security and improving legal pathways for immigration. The governments can also focus on enforcing immigration laws, such as deportation.\n107. Does immigration have a positive or negative effect on the economy? Well, immigration generally has a positive effect on the economy. Immigrants help fill labor gaps and stimulate demand for goods and services, they also create new businesses and pay taxes. And skilled immigrants can drive innovation and boost productivity.\n108. What can the government do to ensure the equal distribution of wealth? The first is progressive taxation, where higher income people are taxed at a higher rate. The government can also increase the minimum wage and enforce labor rights for all workers. And for the elderly in poor regions, the government can help cover part of medical expenses, especially for those with serious illnesses.\n109. What can we do to assist developing countries? To help developing countries, We can provide finicial aid in key sectors like education, healthcare, and infrastructure. Additionaly, we can offer technical skills and build factories in the local to boost their economy.\n110. What are the causes of poverty in a nation? I believe the root of poverty is a lack of education. Because without proper education, people may struggle to find well-paying jobs, it will perpetuate the cycle of poverty. Another cause is economic inequality, as the majority of wealth is owned by a few people, leading many without access to essential resources.\n111-120 111. How do you travel to work? The public transportation in Shenzhen is quite convenient. I usually take subways to work. as it\u0026rsquo;s just a short walk from my community. and during my commute, I like to listen to music and read books, it\u0026rsquo;s quite relaxing.\n112. When would you like to retire? I would say it depends. My goal is to retire in my 50s, but if I manage to make enough money early, I might consider retiring in my 40s. Since I enjoy travelling, I would love to explore the world and experience different cultures.\n113. Describe a typical day in your job? I start the day by checking emails and prioritizing tasks. Then, I spend most of my time coding, including developing new features, writing unit tests, and fixing bugs. I also work with other developers, attend meetings and perform code reviews.\n114. What do you find most difficult about your job? Well, the most difficult part about my job is debugging complex issues. The problem can be tricky sometimes, especially when it\u0026rsquo;s related to performance, because it requires a lot of patience and attention.\n115. What other jobs would you be interested in? It would be a quantitive analyst role. Actually, I have a bachelor\u0026rsquo;s degree in economics, and I prefer work that focuses on logic and analysis. So, a quantitive analyst position would be a great fit for me, as it would allow me to apply programming to analyze financial markets, and create algorithms for trading.\n116. Which job wouldn\u0026rsquo;t you like to do? I wouldn\u0026rsquo;t like to work in a job that involves a lot of repetitive tasks, such as roles that only require administrative work. Because these types of jobs don\u0026rsquo;t allow me to use my skill set and I find them quite boring.\n117. Whould you like a job in which you could travel? Yeah. I definitely love this type of job. Travelling for work can offer a chance to experience different cultures and broaden my perspective. Although it can sometimes be overwhelmed, it\u0026rsquo;s really exciting, and I really enjoy exploring new places.\n118. What training do you need for your job? I\u0026rsquo;m a software engineer. the essential training includes a solid foundation in Java. We also need to familiar with the frameworks like Spring Boot, Spring MVC and MyBatis. It\u0026rsquo;s necessary to be skilled in working with databases like MySQL, MongoDB, and Version Control Tools like git and SVN. In addition to technical skills, continuous learning is also crucial to keep up with this ever-changing field.\n119. Is your company a good one? Yeah, I think my company is a good one. My colleagues are friendly and nice, and I really enjoy the open and direct culture, as I\u0026rsquo;m always upfront from about my ideas, and don\u0026rsquo;t like beating around the bush.\n120. Would you like to run your own business? Currently not, Because I want to gain more experience before taking that step. But I would like to run my own business someday. running my own business would allow me to apply my skills in a more flexible way, and I really enjoy challenges.\n121-130 121. What is ideal work environment? For me, an ideal work environment must be open and direct, as I enjoy candid and clear communication. I always upfront about my ideas and don\u0026rsquo;t like beating around the bush. Additionally, colleagues should be kind and friendly, as a comfortable atmosphere helps me work efficiently and feel at ease.\n122. Do you like your boss? Yeah, I do like my boss. They are approachable and supportive. I appreciate how they provide clear direction. They are also understanding when it comes to work-life balance. They encourage my professional growth, which makes me feel motivated.\n123. What\u0026rsquo;s the best way to prepare for a job interview? The first is understanding the company\u0026rsquo;s products and culture. The second is reviewing the job responsibilities and reuqirements, and preparing for common questions like \u0026ldquo;Tell me about yourself\u0026rdquo; and \u0026ldquo;Why do you want to work here?\u0026rdquo;. If the role requires specific knowledge, such as for a software engineer position, then it\u0026rsquo;s necessary to practice some coding problems or relavant technical tasks.\n124. Do you prefer male or female bosses? I don\u0026rsquo;t have a preference for male or female bosses, to be honest. What matters to me is their leadership style and how they interact with the team. I prefer candid and clear communication, as I\u0026rsquo;m always upfront about my ideas and don\u0026rsquo;t like beating around the bush.\n125. Do women usually work after they get married in your country? Well, in China, many women continue to work after marriage, especially in urban areas. But some women may choose to focus on family life after marriage. It usually depends on personal preferences and financial needs.\n126. Is it easy to find a job in your country? Well, I would say it depends. In metropolis like Shenzhen, there are more job opportunities, particularly in tech and finance. But the economic situation is not very well these years, so it\u0026rsquo;s harder to find a satisfied job compared to before.\n127. Describe a successful company you know. One successful company I know is Alibaba Group. It started as an e-commerce platform and has grown into a global giant. The company offers a wide range of services, including cloud computing, digital payments, and logistics. Its founder, Jack Ma, with his great vision and leadership, has played a key role in shaping the company’s success.\n128. Describe the kind of boss you like. I like the boss who is approachable and supportive. A good boss should be candid and clear in communication, as I\u0026rsquo;m always upfront about my ideas and don\u0026rsquo;t like beating around the bush. I also appreciate a boss who provides opportunities for their employees\u0026rsquo; professional development.\n129. Describe what makes a good employee. A good employee is reliable, responsible, and proactive. They consistently meet deadlines and deliver quality work. They are also adaptable, able to handle complicate situations. They can express ideas clearly, listen carefully, and collaborate effectively with others.\n130. Describe a memorable day you had at work. One memorable day at work was when we successfully completed a major project after several months of hard work. We had been developing a new feature for our platform, and there were many challenges along the way. But on that day, everything came together, and it felt rewarding to see our efforts pay off.\n131-140 131. How much respect does the younger generation in your country have towards your culture and customs? Well, the younger generation still respects traditional culture, but there\u0026rsquo;s a noticeable shift in how they express that respect. For example, during traditional festivals, younger people may celebrate through social media, which is more modern approach compared to traditional ways. This change is likely influenced by the fast-paced and tech-driven lifestyle.\n132. What are the benefits and shortcomings of being a manager? Well, on the plus side, it offers a sense of authority, which can be rewarding. There\u0026rsquo;s also the potential for career growth and higher pay. But, it can also be stressful, because higher position come with greater reponsibility. And, managing a team requires balancing multiple tasks, handling conflicts, and making tough decisions, which can sometimes lead to burnout.\n133. How important is teamwork? Teamwork is incredibly important, because it allows people to combine their strengths and ideas, often resulting in better outcomes——like 1 plus 1 being greater than 2. Additionaly, working together also fosters creativity and makes tasks simpler.\n134. What problems does unemployment cause? Well, for individuals, unemployment often leads to financial stress, because it\u0026rsquo;s harder to meet basic needs without a steady income. This can also affect mental health, causing feelings of anxiety and depression. On a larger scale, unemployment can lead to social unrest, as people may feel disconnected from society. It can also lead to higher crime rate and hinder economic growth.\n135. What can be done about the problems that unemployment causes? To address the problems caused by unemployment, the government can offer incentives for businesses to hire more workers, such as tax breaks or subsidies. Additionally, the government can create more job opportunities through investment in public services. And, mental health support is also important, because unemployed people may experience anxiety and depression, the goverment can offer community support programs to help them cope with these challenges.\n136. Why is it difficult to find a good job? Well, nowadays, the competition is fierce, especially in technical fields. Many people have similar qualifications, so it\u0026rsquo;s harder to stand out. And, the economic situation is not very well these years, there are fewer job opportunities, it\u0026rsquo;s tougher to find a satisfying job.\n137. Which is more important, a good salary or a job you enjoy? I think a job I enjoy is more important. Although a good salary provides financial stability and improve my quality of life, doing work I don\u0026rsquo;t like feels like a chore and can be quite boring. And a job I\u0026rsquo;m passionate about contribute to better mental health and is crucial for long-term hapiness.\n138. Why do many people become workaholics? Well, There are many reasons for this. For some people, it\u0026rsquo;s driven by the desire for financial success or career promotion, pushing them to work long hours to achieve their goals. Additionally, the competition is fierce these years, some people may overwork to keep up with colleagues, contributing to a \u0026ldquo;rat race\u0026rdquo; culture. The last is that some people are really passionate about their jobs, they find fulfillment in their work, making it harder to set boundaries.\n139. What factors influences job choice? Well, I think salary and job security are maior factors. Salary is commonly a key concern when choosing a job, because financial stability is important for most people. Job security is also crucial, as many people perfer stable employment over uncertain opportunities. Other factors, such as commute time, company culture, and job flexibility also play a role in decision making when choosing a job.\n140. How important is job interest? I think job interest is very important. Because if you are passionate about your job, it doesn\u0026rsquo;t feel like a chore, and you\u0026rsquo;re more likely to be motivated and productive. It also contributes to better mental health, as people who enjoy their jobs are less likely to experience burnout or stress.\n141-150 141. What are the perfect work conditions? Well, personally, I prefer working in an open and direct company. I enjoy candid and clear communication, because I\u0026rsquo;m always upfront about my ideas and don\u0026rsquo;t like beating around the bush. I also appreciate working with friendly colleagues and approachable bosses, as a comfortable atmosphere helps me feel at ease and work effciently.\n142. How serious is the problem of unfair labour practices? Well, unfair labor practices, such as long hours with low pay and unsafe conditions, can be harmful to worker\u0026rsquo;s health and damage the reputation of businesses. On a large scale, it may contribute to social unrest. Because some people may retaliate against socity when they experience unfair treatment.\n143. How could the government improve employment conditions in your country? Well, to protect worker\u0026rsquo;s rights, the government can implement stronger labor laws, such as increasing minimum wages and setting reasonable working hours. This can improve workers\u0026rsquo; overall well-being. It can also improve access to healthcare, because this would reduce financial stress when workers face serious illnesses.\n144. Which job are considered prestigious in your country and why? Well, in my coutry, jobs in fields like medicine, law, and engineering are often considered prestigious. Because these professions require years of education and training. Engineers, for example, they are admired for their contribution to technological innovation and infrastructure development. These professions are seen as symbols of hard work, intellectual ability, and social responsibility, that\u0026rsquo;s why they hold such high regard in society.\n145. Is work discrimination a problem in your country? Yeah, work discrimination can still be a problem in my country. It can occur based on gender or age. For example, women might face challenges in certain industries or leadership roles. In the tech industry, if you\u0026rsquo;re over 35, there are often fewer job opportunities, as hiring younger ones is seen as a way to reduce costs.\n146. How are female bosses different from male bosses? Well, based on my experience, I think female bosses are more empathetic, they often focus on team building and clear communication. While Male bosses tend to be more task-oriented and assertive, they often focus on achieving results and making quick decisions.\n147. Do men\u0026rsquo;s job differ from women\u0026rsquo;s in your country? Well, the gender gap in employment has been narrowing. Several decades ago, professions like engineering or construction were considered \u0026ldquo;men\u0026rsquo;s jobs,\u0026rdquo; but many women have entered these fields in recent years. At the same time, more men are pursuing careers in female-dominated fields like nursing. So, the distinctions are becoming less pronounced.\n148. How have jobs changes over the past 50 years in your country? Well, the changes have been significant. Fifty years ago, China was a poorer country, many people worked in argriculture and manufacturing, with a strong focus on manual labor. Today, China is the world\u0026rsquo;s second-largest economy by GDP, and the job market has shifted to be more tech-oriented, mainly focus on industries like technology, finance, and healthcare.\n149. How will jobs change in the future? Well, in the future, AI will take over many repetitive and manual tasks. Jobs in fields like data analysis, cybersecurity, sustainable development are likely to increase, while traditional roles in manufacturing and manual labor may decline.\n150. Does the education system in your country adquately prepare people for the workforce? Well, the education system does prepare enough people for the workforce, but many gradutes lack of hands-on experience or soft skills like communication and teamwork. Additionally, due to technological advancements, the education system struggles to keep up with the skills required by emerging industries, making the job market more competitive.\n151-160 151. Do employers prefer degrees from foreign universities or local ones in your country? Well, it depends on the specific role. Degrees from well-known foreign universities can be an advantage in fields like finance, technology, and management, or for roles in multinational companies that require global knowledge and communication skills. And, local degrees from reputable universities are also respected, especially in industries like government, education and healthcare.\n\u0026ndash;\n152. Why are you studying English? The reason I study English is that I aspire to work for a foreign company. I really like the open and direct culture. I enjoy candid and clear communication, as I\u0026rsquo;m always upfront about my ideas and don’t like beating around the bush.\n153. Why do you need IELTS? The first reason is that I find learning language interesting. And passing IELTS exam is an important step to meet the language requirements of foreign companies. Because I really like the open and direct culture, and I enjoy candid and clear communication. Additionally, having an IELTS certificate will open up more job opportunities for me.\n154. What do you find most difficult about learning a language? The most difficult part is building a strong vocabulary and use it effectively. It\u0026rsquo;s easy to learn the basics and common phrases. but expanding vocabulary and applying it in different contexts takes a lot of time and practice.\n155. What is your strength in English? Well, my strength in English is reading comprehension. Due to my work, I need to read a lot of English materials in my daily life, and I enjoy reading. It feels comfortable for me.\n156. Did you learn a foreign language at primary or high school? Yeah, I did. Actually, I started learning English from grade 3. In primary school, I began with basic vocabulary, grammar, and simple conversations. By high school, the focus became more advanced, including reading, writing, and speaking.\n157. Describe a teacher who has influenced you. Well, the teacher who influenced me was my middle school Chinese teacher. There was a time in my middle school years, I felt lost and kind of disliked studying. My teacher helped me get through that difficult period and encouraged me to pursue my dreams.\n158. Describe something you have learnt that is very useful. One thing I\u0026rsquo;ve learned that is useful is time management. I learned how to break large tasks into smaller and manageable steps, it\u0026rsquo;s really helpful in increasing productivity. This skill helps me balance work and life, and allows me to stay organized.\n159. Describe something that you would love to learn. I would love to learn a new language, like Japanese and Spanish. Because I\u0026rsquo;m curious about different cultures. Learning a new language would allow me to explore different cultures, and open up more opportunities for communication with people from all over the world. Additionally, it\u0026rsquo;s also helpful in job markets when persuing my career.\n160. Describe a memorable day you had at school. A memorable day at school was the day we had the sports day. I participated in the 200-meter running competition and won the championship. It was so exciting because I had put in a lot of effort to train for it, and all that hard work paid off.\n161-170 161. Have you ever seen a crime? No, I haven’t witnessed a crime myself, but I’ve heard about some fraud cases from people around me. About two years ago, telecom fraud was rampant, and my friend’s cousin was scammed out of 20,000 yuan.\n162. What would you do if you heard a burglar in your home? Safety is the top priority. Since burglars can be dangerous, I would avoid confrontation and look for an opportunity to call the police.\n163. Have you ever been the victim of a crime? No, I\u0026rsquo;ve never been the victim of a crime, but I’ve heard about some fraud cases from people around me. About two years ago, telecom fraud was rampant, and my friend’s cousin was scammed out of 20,000 yuan.\n164. Do you think police should be allowed to carry guns? Yeah, police should be allowed to carry guns, but there should be strict regulations to ensure that force is not misused. Officers should only use firearms when it\u0026rsquo;s absolutely necessary.\n165. Do you think the punishment for violent crimes should be the same for juveniles? No, because juveniles are still developing emotionally and psychologically, and their actions may stem from immaturity. Punishment should focus more on education and rehabilitation rather than harsh penalties.\n166. Why are movies popular? Well, movies are an engaging form of entertainment, when people watching movies, they often feel deeply immersed in the experice. Movie also evoke a wide range of emotions, such as joy, sadness, and excitement. Additionally, watching movies can be a social activity, it brings people together, and discussing films often sparks interesting conversations.\n167. What is the difference between watching a movie at home and at the theatre? Well, at the theater, it feels more immersed, especially for 3D movies. At home, it\u0026rsquo;s way more laid-back—you can pause whenever you want, enjoy your favorite snacks, and watch in your pajamas. It\u0026rsquo;s also cheaper, because you\u0026rsquo;re not going to paying for tickets and overpriced popcorn.\n168. How much TV do people watch? I would say it depends. Older generation tend to stick to scheduled programs, while younger people may prefer streaming platforms over traditional TV. Things like popular shows, live sports, or personal routines can influence how much time is spent on TV.\n169. What kind of programme do you enjoy watching on TV? Actually, I prefer streaming platforms over traditional TV. Since I love food and culture, I really enjoy documentaries that explore those topics. I\u0026rsquo;m also a big fan of football, so I often watch live football matches whenever I can.\n170. Can TV help you learn English? Yeah, TV can be a great tool for learning English. Watching shows or movies in English helps improve listening skills, pronounciation, and vocabulary. You also get to hear how native speakers use expressions in real-life contexts. So, it\u0026rsquo;s a fun way to learn without feeling like you\u0026rsquo;re studying.\n171-180 171. How has entertainment changed over the past 50 years? Entermainment has changed dramatically over the past 50 years. In the past, people relied on radios, balck-and-white TVs, and live performance for fun. Today, there are many more options, like going to cinemas, theaters, or theme parks. Additionally, the internet has made entertainment more accessible and social, people can watch and share content anytime, anywhere.\n172. How will entertainment will change in the future? Well, I think entertainment will become more immersive and interactive. AI could generate personalized content tailored to individual preferences, making it more engaging. Additionally, entertainment might blend with areas like education, fitness, or even work, creating new ways to interact with content.\n173. What\u0026rsquo;s the difference between reading a book and watching the movie? Well, books allow you to imagine the characters and settings, giving you the freedom to explore the every detail at your own pace. Movies are more subjective, it brings the story to life visually with a faster pace, making them more engaging for some people.\n174. Do you think TV is educational? Yeah, I totally agree. Actually, I\u0026rsquo;ve been learning languages by watching TV shows, and it\u0026rsquo;s been really helpful. Watching TV helps improve listening skills, pronounciation, and vocabulary. You also get to hear how native speakers use expressions in real-life contexts. So, that\u0026rsquo;s why I think TV is educational.\n175. How can parents ensure that children only watch suitable material on TV? Well, parents can use parental controls to block inappropriate channels. They can also spend time watching TV with their children to monitor the content, and have discussions about what they are watching.\n176. What can you learn from museums? Well, museums are great places to learn about history, art, and culture. There are many artifacts and artworks, you can learn about ancient civilization and culture traditions. Museums help you understand how things evolved, broden your perspective and deepens your appreciation for the world.\n177. What types of pollution are there in your country? Well, in China, air pollution is a majoy issue, especially in metropolis, like Beijing, Shanghai, and Shenzhen. This pollution is commonly caused by vehicle emissions and burning fossil fuels. Water pollution is also a concern, many rivers and lakes are affected by industrial waste.\n178. Are you educated about protecting the environment at school? Yeah, schools often cover topics like recycling, energy conservation and reducing waste to raise student\u0026rsquo;s awareness about protecting the environment. Back in my school days, I participated in tree planting and cleaning up local areas.\n179. What do you do to protect the environment? Well, in my daily life, I recycle whenever possible and make sure to turn off lights when not in use. When I go shopping, I try to choose sustainable products. For my daily commute, I prefer public transportation, because it\u0026rsquo;s convenient and helps reduce my carbon footprint.\n180. What animals can you see in your country? Well, China is a big country, so you can see a wide variety of animals. In Sichuan, you can see China\u0026rsquo;s unique animal—the giant panda, it\u0026rsquo;s a black-and-white furry animal, and it\u0026rsquo;s very cute. In my hometown, the wild boars and birds are very common.\n181-190 181. How has the environment changed since you were a child? When I was little boy, the rivers were very polluted. This was because the country focused on economic development, and a lot of industrial waste was dumped into the rivers, causing many fish to die. In recent years, the situation has improved. As the country became the second-largest econnomy by GDP, it now focus more on environmental management.\n182. Are you optimistic about the future of our environment? Yeah, I believe the environment will become more eco-friendly. There\u0026rsquo;s growing awareness and action to tackle issues like pollution and climate change. More countries are investing in renewable energy, and there\u0026rsquo;s a stronger focus on sustainability and conservation.\n183. Which are you more interested in, local or international news? Well, actually, I seldom watch the news, to be honest. Because I find a lot of it can be misleading and irrelavant to my daily life. But sometimes I read international news in English, because it helps improve my English reading comprehension.\n184. What don\u0026rsquo;t you like about the news? One thing I don’t like about the news is that it can sometimes be biased, focusing more on conflict than on facts. It can also be exaggerated just to grab attention.\n185. Should the media be censored? Well, I think the media should be regulated, but not heavily censored. It\u0026rsquo;s important to strike a balance between freedom of expression and ensuring that content is responsible. Everyone has the freedom to express their opinions, but there should be regulations in place to prevent the spread of misinformation, hate speech, or harmful content.\n186. Why does the media sensationalise the news? The media sensationalizes the news because it helps grab attention and boost readership. Sensationalism can increase engagement, drive traffic, and generate more revenue through ads.\n187. Describe a communication tool you use? Well, I use WeChat for daily communication. Strictly speaking, WeChat is not just a communication tool—it\u0026rsquo;s also a financial tool. Mobile payments are very advanced in China, so aside from communication, we also use WeChat for daily payments, topping up accounts, paying bills, and making transactions.\n188. Describe a memorable photo you have? One memorable photo I have is from a trip to the mountains with my granny. It was taken during a sunrise hike, and there\u0026rsquo;s a stunning view of the valleys. My granny passed away two years ago, and the photo always reminds me of the warm moments I shared with her.\n189. Describe an electronic device you would like to learn more about? Well, I would love to learn more about unmanned aerial vehicles, because they will have a wide range of applications in the future. I\u0026rsquo;m curious about how they are able to fly autonomously and carry out complex tasks. I\u0026rsquo;m also interested in how they will make delivery services more efficient.\n190. How will the Internet develop in the future? Well, in the future, with 5G or 6G technology, the internet connection will be faster and more reliable. The Internet of Things will grow, connecting more devices and making everyday objects smarter. Cybersecurity will also become increasingly important, as more personal data is shared online.\n191-200 191. What are the dangers of swimming at the beach? I think swimmer should be careful of strong currents, because they can quickly pull swimmers away form shore. Another concern is marine life, like jellyfish or sharks, which can be dangerous in some areas. Additionaly, the water quality can be a concern, especially near industrial areas, where polutants can affect health.\n192. How has globalisation affected your culture? Well, Globalization have affected our culture a lot. It have made our culture more diverse and open minded. We have access to global media, food, and fashion, which enriched our daily lives and broadened our perspectives.\n193. What food can\u0026rsquo;t you stand? I really can\u0026rsquo;t stand stinky tofu, a traditional food from Changsha. The smell is incredibly strong and overwhelming. Even though many people love it, I just can\u0026rsquo;t handle the aroma. It\u0026rsquo;s one of those foods that tends to divide people—either you love it or you can\u0026rsquo;t stand it!\n194. How often do you eat dinner with your family? Well, I live in Shenzhen for work, while my parents are in my hometown. During holidays, I usually return to my hometown and have dinner with my family.\n195. Describe a restaurant you like. One of my favorite restaurants serves traditional Chinese hotspot. It\u0026rsquo;s located in Futian, and the atmosphere is comfortable and inviting. I really enjoy their specialty, coconut stewed chicken. The chicken is tender and smooth, and the soup is sweet and delicious.\n196. Is child obesity a problem in your country? Yeah, child obesity is becoming an increasing concern in my country. With the rise of fast food and sugary drinks, many children are struggling with weight issues. Additionally, less physical activity and the increased use of electronic devices also contribute to child obesity.\n197. What do you do to stay healthy? Well, I eat really healthily, including plenty of fruits, vegetables, protein-rich meats and whole grains. I\u0026rsquo;m also a big fan of sports, back in my school days, I almost exercise every day, but now I\u0026rsquo;m working, I exercised less, usually two or three times a week. I sleep early, about 7 to 9 hours a night. Medidation is also my daily routine—I medidate 15 minutes before bedtime to clear my mind.\n198. What can the government do to improve health conditions for the elderly? Well, the government can provide better access to affordable healthcare services, such as regular check-ups and preventive care. The government can also support community programs that encourage physical activity and social engagement for the elderly.\n199. Which countries have you been to? Well, I haven\u0026rsquo;t been to any foreign countries. But I would like to go to Japan in the future. Actually, I have been learning Japanese recently. I’m really curious about Japanese culture. I also love watching Japanese manga and anime.\n200. Do you prefer to travel by bus, train, ship, plane or car? I prefer traveling by train because, while riding a train, you can enjoy the landscape along the journey. But on a plane, all you see are just the clouds. Additionally, compared to buses and cars, trains are a more eco-friendly option, helping to reduce my carbon footprint.\n","permalink":"https://signalyu.github.io/posts/3-humanities/languages/speaking/english/4-english-speaking-ielts-101-200/","summary":"101-110 101. Are people isolating themselves from society these days? Yeah, many people have become addicted to social media, they prefer staying home and interacting online instead of engaging in face-to-face conversations. And the fast-paced modern life also makes people feeling disconnected.\n102. What responsibilities do citizens of a nation have? Th first is attending school; in China, everyone is required to complete nine years of compulsory education. The second is, Citizens must obey the law, as following legal regulations helps maintain social stability.","title":"English Speaking: IELTS (101-200)"},{"content":"1. Order Food in Restaurant https://youtu.be/_izDbJ45Q5I SHOW NOTES I'm still working on it. This sentence expresses that an action is ongoing and not yet completed. It also suggests that more time is needed to finish it. Did you finish reading? — I\u0026rsquo;m still working on it. Did you fix my car? — I\u0026rsquo;m still working on it. Coke and Fries This refers to a popular combination of fast food: Coca-cola and French Fries. Complimentary This word is used to describe something that is free of charge or offered as a gift. For example: The hotel offers complimentary breakfast. (The breakfast is free of charge.) I'll go with This phrase means to choose or select something from available options. For example: I\u0026rsquo;ll go with pizza. (Pizza is the chosen option over others.) Grab This word means to qucikly take hold of something or pick something up in a hurry. For example: On your way home, can you grab some muld? Wait for me, please. I need to grab my coat. Let\u0026rsquo;s grab a cup of coffee. 2. Calling in Sick https://youtu.be/UCtpnO9r7pQ SHOW NOTES I'm feeling quite ill today. This phrase indicates that the person is experiencing discomfort or sickness. I'm coming down with the flu. This sentence means the person is starting to get sick with the flu. \u0026ldquo;Coming down with\u0026rdquo; is an informal way to say that someone is begining to show symptoms of disease. Calling in sick This phrase is commonly used to notify the employer by phone or email that the person will be absent due to illness. I was hoping to take the day off. This sentence means that the person wants to have a break from work for the day, usually because of personal reasons or illness. 3. Describe Someone\u0026rsquo;s Appearance https://youtu.be/KRysx-guzlw SHOW NOTES Description of Someone's Appearance: He\u0026rsquo;s good looking, he\u0026rsquo;s quite tall, around 6'1. He\u0026rsquo;s in his early 30s, and he get the most beautiful dark brown eyes. Heard is the past tense of the verb hear, which means to listen or become aware of something through the sense of hearing. I heard you\u0026rsquo;re dating a new guy. Julie told me she heard that you\u0026rsquo;re pregnant. What! You got fired? I heard that you quit. Fill me in This phrase means to provide someone with the details or information about something, especially if they missed out on it. For example: Can you fill me in on what happened during the meeting? Career path refers to the direction of someone\u0026rsquo;s career over time. It\u0026rsquo;s the journey someone follows in their professional life. For example: She\u0026rsquo;s thinking about changing her career path and moving into marketing. Goodlooking is used to describe someone who is attractive. It\u0026rsquo;s more natural than handsome. Hot is an informal term used to describe someone who is very attractive, typically in a physical or sexual way. However, it\u0026rsquo;s important to note that it is not always appropriate to use it directly when describing someone, as it can be considered somewhat impolite. It is more commonly used among friends or in casual settings as a comment or complient. 4. Road Trip https://youtu.be/X8ch6GxkG7I SHOW NOTES Munchies refers to snacks or small amounts of food, often eaten casually or between meals. Fill up the tank means to fill the gas tank of a car with fuel. It\u0026rsquo;s often used when someone is getting ready to drive somewhere. A Pit Stop originally refers to a quick stop made by race cars during a race or refuel or change tires. In everyday language, it can refer to any quick stop made during a journey, such as for food, a bathroom break, etc. For example: Let\u0026rsquo;s make a pit stop for some coffee before we continue driving. We've got all our bases covered. This phrase means that all possible situations or needs have been thought about and planned for. For example: Don\u0026rsquo;t worry about the trip, we\u0026rsquo;ve got all our bases covered. We\u0026rsquo;ve got all our bases covered in case the Hurricane hits. Okay, I have my keys, wallet and passport, looks like I have all my bases covered. Let's get ... This is a common expression used to start something or make it happen. It can be used in many contexts, such as starting a project, meal, or activity. For example: I have a chicken, so let\u0026rsquo;s get cooking. This house is really scary, let\u0026rsquo;s get out of here. I have another meeting in 20 minutes, so let\u0026rsquo;s get down to business. Are we ready to go? This is a question asking if everything is prepared and if it\u0026rsquo;s time to start or leave. It\u0026rsquo;s often used when you\u0026rsquo;re about to start a trip, a task, or an activity. For example: Are we ready to go? The car is packed! It's all set. This means that everything is prepared or ready to go. It suggests that no further work is needed and everything is in order. For example: Don\u0026rsquo;t worry about the meeting, it\u0026rsquo;s all set. 5. Computer Viruses https://youtu.be/1Ic3G-KyEzQ SHOW NOTES Froze refers to something especially a computer or software that suddenly stopped responding and is no longer working, For example: My computer froze when I was trying to open the file. Infected file refers to a file on a computer that has been corrupted or infected by a virus or malware. Up to date means that something is current, recent, and has the latest information or updates. For example: I need to buy a new computer, because mine isn\u0026rsquo;t up to date. I can\u0026rsquo;t find the street, are you sure this map is up to date. Sarah has just finished the reports and all the information is up to date. I'll be right... It is an informal way to describe someone will return or be ready very soon. For example: Can you help me with my computer. — I\u0026rsquo;ll be right there. Come downstairs, dinner is ready. — I\u0026rsquo;ll be right down. Hurry up! I need to use the bathroom. — I\u0026rsquo;ll be right out. It turns out that This phrase is used to reveal a surprising or unexpected result or discovery. It often introduces new information. For example: Frank didn\u0026rsquo;t come to work today, and it turns out that he was sick. I\u0026rsquo;ve been feeling really sick recently, it turns out that I\u0026rsquo;m pregnant. It's acting up again. When something \u0026ldquo;acts up,\u0026rdquo; it means it\u0026rsquo;s behaving in an unusual or malfunctioning way. It is commonly used to describe a technical problem. For example: Oh great! That stupid computer froze again, that\u0026rsquo;s the third time today. 6. Embarrassing Situation https://youtu.be/yFAepMyEIWM SHOW NOTES In a bit of a hurry This phrase means that someone need to do something quickly. For example: Can you drive fast, I\u0026rsquo;m in a bit of a hurry. I can\u0026rsquo;t talk right now, I\u0026rsquo;m in a bit of a hurry. I\u0026rsquo;m in a bit of a hurry, so I\u0026rsquo;ll check these files later. Slipped my mind This means that someone forgot something unintentionally. For example: I\u0026rsquo;m sorry I forgot to respond to your email, it just slipped my mind. I meant to call youm but it completely slipped my mind. Don\u0026rsquo;t you know what day is it today? — Oh, it\u0026rsquo;s your birthday. It completely slipped my mind. around here This refers to the local area or the place where someone is currently. For example: Are there any good restaurants around here? Is there a bank around here? Extention: Los Angeles is a great city, I used to live around there. terrible with This means someone is not good at something. For example, You\u0026rsquo;re terrible with numbers, you can\u0026rsquo;t even remember your own telephone number. I\u0026rsquo;m teribble with directions, I\u0026rsquo;m always getting lost. I\u0026rsquo;m teribble with faces, I can never remember what people look like. how's it going? This sentence is a casual, native way to greet someone. For example, How\u0026rsquo;s it going? Everything is going well. 7. Watch a Movie https://youtu.be/8LwCV7IHgss SHOW NOTES inconsiderate This word describes someone who is thoughtless or doesn\u0026rsquo;t consider how their actions affect others. For example: It was inconsiderate of him to interrupt during the meeting. keep it down This phrase is used to ask someone to lower the volume or make less noise. For example: I\u0026rsquo;m trying to study, do you mind keeping it down? not such a big deal This phrase is used to suggest that something is not as important or serious as it may seem. For example: Don\u0026rsquo;t worry about the mistake; it\u0026rsquo;s not such a big deal. I can\u0026rsquo;t get these files to you by tomorrow. — It\u0026rsquo;s OK, it\u0026rsquo;s not such a big deal. switch it off This means to turn something off, usually referring to electronics or devices. For example: Please switch it off when you\u0026rsquo;re done using the computer. can't hear a thing This phrase means that it is so noisy that it is impossible to hear anything clearly. For example: What? This music is too loud, I can\u0026rsquo;t hear a thing. Do you mind... This is a polite way to ask if someone is okay with something or if something would be a problem. For example: Do you mind holding my coat for me? I forgot my wallet. Do you mind paying for dinner? Do you mind turning off your phone? 8. In Debt https://youtu.be/QHeOq0D4zjU SHOW NOTES recession refers to a period of economic decline when businesses slow down and unemployment rises. For example: The country is going through a recession, and many people are losing their jobs. mortgagerefers to a loan taken out to buy property, where the property itself serves as collateral until the loan is paid off. For example: He has a mortgage on his house, and he\u0026rsquo;s paying it off monthly. hit me pretty hard This phrase means something had a strong, negative impact on someone emotionally or financially. For example: My divorce hit me pretty hard, I\u0026rsquo;m so depressed. This cold hit me pretty hard, I\u0026rsquo;ve been in bed for a week. The news of Fluffy\u0026rsquo;s death hit me pretty hard, I\u0026rsquo;ve been crying for days. what can I do for you: This is a polite way to ask how to help someone or what they need. I'm sorry to trouble you This is a polite way of apologizing for causing inconvenience or bothering someone. For example: Can I trouble you for a moment, I just need you to sign this form for me. I\u0026rsquo;m sorry to trouble you, but may I go home early today. Can I trouble you for a pen, mine is not working anymore. On top of all that This phrase is commonly used to add something additional to make things worse, but it can also be used in positive things. For example: Today I lost my job, my car got stolen, and on top of all that, my girl friend broke up with me. Today was a really great day, it was my birthday and all my friends came to visit me, and on top of all that, I received a surprising gift! 9. In a Rush https://youtu.be/DjgpFzIWCRs SHOW NOTES step on it This phrase means to go faster or speed up, especially when driving or in a hurry. For example: We\u0026rsquo;re running late, step on it. have a fit This means to become very angry, upset, or emotional about something. For example: Jeez, you don\u0026rsquo;t need to have a fit, nothing is going to happen if we\u0026rsquo;re five minutes late. My boss is going to have a fit if I don\u0026rsquo;t finish this on time. I almost had a fit when my boss told me I had to work this weekend. cut through means to go through a path that helps save time or provides a shortcut, often through an area that isn\u0026rsquo;t typically a main route. For example: I\u0026rsquo;ll cut through the park to get to the other side of the neighborhood faster. make a left/right/U-turn: These are driving directions. For example: Make a left at the light, then a right at the next stop sign. I missed my exit. I need to make a U-turn. are you nuts This is a casual, humorous, shocked way to ask if someone is crazy or acting irrationally. For example: You want to get married now? Are you nuts? You only met her 3 weeks ago. Are you nuts? I\u0026rsquo;m not going to cheat on the exam, what if I get caught? Let's take a side street/Wilson Avenue/the freeway These phases are used to suggest an alternative route or road. For example: The main road is too congested. Let\u0026rsquo;s take a side street to avoid the traffic. We can get there faster if we take Wilson Avenue. Let\u0026rsquo;s take the freeway to avoid getting stuck in traffic. 10. Visiting the Eye Doctor https://youtu.be/lJLgLQWmpBI SHOW NOTES 2020 vision refers to the normal vision in United States. It\u0026rsquo;s often used to indicate perfect or ideal eyesight. Far-sighted/Near-sighted Far-sighted refers to hyperopia, a condition where distant objects are clear, but nearby objects appear blurry. People with this condition have difficulty seeing things close up. Near-sighted refers to myopia, a condition where nearby objects are clear, but distant objects appear blurry. People with this condition have trouble seeing things far away. make out means to be able to see or understand something, especially when it is difficult to do so. For example: I can barely make out the words on the sign. If you look carefully , you almost make out a few of the stars in the sky. Can you see what\u0026rsquo;s written on the sign there — No, I can\u0026rsquo;t quite make it out. Blind as a bat is a fugurative expression used to describe someone who has very poor vision or is unable to see well. What seems to be the problem/matter/trouble These are used to ask what the issue or difficulty is. What seems to be the problem? (asking about a difficulty or issue) What seems to be the matter? (asking about what is troubling someone) What seems to be the trouble? (asking about a specific difficulty or issue) head on/in/out/up are informal expressions that typically refer to moving or going in a certain direction. head on in: It’s getting late; let’s head on in. head on out: We’ll head on out after lunch. head on up: We’re going to head on up to the second floor. 11. Scheduling an Appointment https://youtu.be/E8vH3YpcFfg SHOW NOTES double check means to verify or check something again to make sure it si correct or accurate. For example: I\u0026rsquo;ll double check my schedule to make sure I\u0026rsquo;m free tomorrow. scheduled means that something has been planned or arranged to happen at a specific time. For example: I have a meeting scheduled for 2 PM. booked solid means that all available time slots are taken, and there are no open appointments or spaces left. For example: I can\u0026rsquo;t get a hotel room, they\u0026rsquo;re booked solid until after the New Year. I\u0026rsquo;m pretty sorry there are no seats available on this flight, we booked solid over the Christmas holidays. Sorry, I can\u0026rsquo;t meet you today, I\u0026rsquo;m booked solid. Sentence Collecting: Appointment: I\u0026rsquo;m calling to arrange an appointment with Ms Mcneely. Please book an appointment for next week. Please schedule an appointment for next week. Dialogue: A: How\u0026rsquo;s Thursday? Does she have any time available then? B: Unfortunately, she\u0026rsquo;s booked solid on Thursday. How does next Monday woek for you? A: Actually, I\u0026rsquo;ve got something scheduled on Monday. Can she do Tuesday? B: Let me see, sure, Tuesday\u0026rsquo;s perfect. 12. Going Out to Eat https://youtu.be/VpsxLnJ52ME SHOW NOTES food poisoning refers to an illness caused by consuming food or drink that is contaminated with harmful bacteria, viruses, or toxins. For example: I think I have food poisoning from the salad I ate yesterday. allergic refers to having an allergy, which is an immunue system reaction to certain substances, such as food, pollen, or pet dander. For example: She is allegic to peanuts, so she has to be careful about what she eats. check out This phrase usually means to look at or examine something, or visit a place. For example: Have you been to new cafe next door. — Yeah, I checked it out yesterday, the food was great. I\u0026rsquo;m going to check out that new shopping mall this weekend. bistro refers to a small, casual restaurant or cafe, often offering simple, home-style meals. For example: We went to a charming bistro for dinner last night. not all that crazy about is an informal expression that means not very interested in or not particularly fond of something. Do you want to go shopping with me tomorrow? — I\u0026rsquo;m not all that crazy about shopping, I don\u0026rsquo;t like spending money. I\u0026rsquo;m not all that crazy about Jazz music. Can I change this song? in the mood for This expression means desiring or wanting something at a particular moment, usually referring to food or activities. For example: We always eat hanburgers for dinner, I\u0026rsquo;m in the mood for something different. Let\u0026rsquo;s watch movie. How about Texas Chainsaw Massacre. — I\u0026rsquo;m not in the mood for a horrible movie. Sentence Collecting Ask Suggestions Do you have any suggestions? Do you have any ideas? Do you have any thoughts? Giving Suggestions I\u0026rsquo;d recommend giving it a try. You\u0026rsquo;ve gotta give them a try. You could give them a try. 13. Cancelling an Appointment https://youtu.be/lcZA5FeM2_I SHOW NOTES reschedule means to change the time or date of an event or appointment to a later time. For example: We need to reschedule the meeting for next week. postpone means to delay or push something to a later time, often with a specific future date in mind. For example: The concert was postponed due to the rain. can't make it is a casual way of saying that attending or participating in an event or meeting is not possible. For example: I\u0026rsquo;m sorry, I can\u0026rsquo;t make it to the party tonight. this thing came up This phrase is used to explain that something unexpected or urgent has happened, preventing attendence or participation in a planned activity. I\u0026rsquo;m sorry that I\u0026rsquo;m late this thing came up at work, and I had to stay to take care of it. I can\u0026rsquo;t talk right now, something came up. The meeting at 3 PM had to be rescheduled because this thing came up at work. Sentence Collecting What\u0026rsquo;s up? — Not much./Nothing. 14. Asking for More Time https://youtu.be/IKm6ceWu1IU SHOW NOTES press kit refers to a collection of materials, such as photos, press releases, or information about a company, product, or event, that is given to journalists or media for publicity purpose. deadline/extension deadline is the final date by which something must be completed or submitted. For example: The deadline for the report is Friday at 5 PM. extension is an extra period of time given to complete something after the original deadline. For example: She requested an extension on the project deadline. ran into means to unexpectedly meet someone or experience something, usually a problem. For example: We ran into a storm on our way home. If you\u0026rsquo;re not careful now, you\u0026rsquo;re going to run into a lot of problems later. I ran into some trouble with my computer. I've been meaning to... This is used to express an intention to do something that has not yet been done. For example: I\u0026rsquo;m sorry I haven\u0026rsquo;t called you yet, I\u0026rsquo;ve been meaning to but I\u0026rsquo;ve been busy. I\u0026rsquo;ve been meaning to tell you but John quit yesterday. I\u0026rsquo;ve been meaning to see that film for a while. beyond my control refers to something that cannot be influenced or changed by the person, usually an event or situation. For example: The delay was beyond my control because of the weather. put this off means to delay or postpone something to a later time. For example: I\u0026rsquo;ve been putting off this project for a week, and it\u0026rsquo;s due tomorrow. Can we put off our meeting till next week, I\u0026rsquo;m too busy right now. I\u0026rsquo;ve been putting off my email all day, and now I have 50 messages to respond to. 15. Complimentary Upgrade https://youtu.be/vJlvav_HThc SHOW NOTES under the name refers to something that is registered or listed in someone\u0026rsquo;s name. For example: Do you have a reservation under the name Smith? mix up means to confuse or mistake one thing for another. For example: There was a mix up at the airport, and my bags were sent to Antarctica. I\u0026rsquo;m sorry sir, there\u0026rsquo;s been a terrible mix up with giving you the wrong baby. overlooked means more reservations or tickets have been sold than there is capacity to accommodate. For example: The hotel was overbooked, and they didn\u0026rsquo;t have a room for us when we arrived. complimentary upgrade refers to a free improvement. For example: We received a complimentary upgrade to a presidential suite at the hotel. 16. Cutting in Line https://youtu.be/79cfTb94tHU SHOW NOTES there's no way... This phrase is used to express that something is impossible to happen. For example: There\u0026rsquo;s no way I can have those reports finished today. The stadium is so crowded that there\u0026rsquo;s no way we\u0026rsquo;ll find a seat. Do you think Michael\u0026rsquo;s gonna buy that house? — There\u0026rsquo;s no way he has enough money to buy it. cut in line means to move ahead of others in a line or queue, usually in an unfair or rude manner. For example: Excuse me, I\u0026rsquo;m really late, can I cut in line, please? I hate it when people cut in line at the bank, it\u0026rsquo;s so rude. I think it\u0026rsquo;s okay when a pregnant woman cuts in line. sue me is a casual or somewhat sarcastic expression used to suggest that someone is free to take legal action, often when the speaker does not care about the consequences. It can also be used humorously when someone is being accused of something. For example: I forgot your birthday. Sue me! (Used in a joking way) 17. Wedding Day https://youtu.be/MCtwK8KGtBk SHOW NOTES it's about time. is commonly used to express that something finally happens after a long wait. For example: Dinner\u0026rsquo;s ready. — It\u0026rsquo;s about time, I\u0026rsquo;m starving. Guess what. I finally got a job. — It\u0026rsquo;s about time, you\u0026rsquo;ve been unemployeed for two years. We almost there, just a couple more minutes. — It\u0026rsquo;s about time, we\u0026rsquo;ve been driving for 12 hours. bridesmaids are women who are chosen to assist the bride on her wedding day. flower girl is a young girl who walks down the aisle before the bride, scattering flower petals. ring bearer is a young boy who carries the wedding rings down the aisle. gorgeous is a uni-sex adjective, it can be used to describe both people and things. For example: She looks gorgeous in that dress. The sunset was absolutely gorgeous. Common Mistake Wrong: Let\u0026rsquo;s marry. Right: Let\u0026rsquo;s get married. Flower Girl \u0026amp; Ring Bearer 18. Asking for Time Off https://youtu.be/Ds5zwyfLyqI SHOW NOTES notice refers to the information that gived someone in advance about something, often referring to leaving a job or ending an agreement. For example: If you want to quit your job, make sure you give enough notice, you\u0026rsquo;ll need to tell us four weeks in advance. You didn\u0026rsquo;t give me enough notice about this project, I didn\u0026rsquo;t have enough time to finish it. Sentence Collecting: Do you have a sec/second/minute? — Sure, what can I do for you? Would you be okay with that? — I\u0026rsquo;m fine with that. Are you alright with that? / Will you Ok with this? I was just wondering/thinking/hoping... is more polite than I want to... 19. Hiring an Assistant https://youtu.be/JZFIdKbnZCU SHOW NOTES understaffed means that there are not enough employees or workers to handle the work or tasks. For example: Our team is understaffed right now, so we need to delay the project deadline. the timing is just not right means that it\u0026rsquo;s not the right moment or situation to do something. For example: I was gonna sell my house, but the timing is just not right. Honey, I think we should have a baby. — The timing is just not right. weight off my shoulders phrase means feeling relieved from stress or worry. After I finished my final exam, it felt like a weight was off my shoulders. give me a hand is an informal way of asking for help. For example: Can you give me a hand with these boxes. Neil, I\u0026rsquo;ll need you to give me a hand with the sales reports. Let me give you a hand with your suitcase. keep our costs down means to reduce or control expenses. We need to keep our costs down if we want to make a profit this quarter. 20. Bargain https://youtu.be/I4ivQUabfyo SHOW NOTES bargain refers to a good deal or something you buy at a lower price than usual. It can also refer to negotiating for a better price. For example: I found a great bargain on these shoes—they were 50% off! price range refers to the range of prices within which something is available, or the amount someone is willing to pay. For example: I\u0026rsquo;m looking for a new phone, but my price range is between $200 and $400. shop around means to look at different stores or options to compare prices before making a purchase. For example: Before you buy that jacket, shop around and see if you can find a better deal at another store. Can you give me a better deal? This is a request for a lower price or a better offer, often used during negotiations. For example: I really like this shirt, but it\u0026rsquo;s too expensive. Can you give me a better deal? Can you give me a better price on this car, I really don\u0026rsquo;t have that much money. That's still more than I wanted to spend. This is commonly used in situations where the price is still to high even after trying to negotiate or considering different options. For example: I know the dress is on sale, but that\u0026rsquo;s still more than I wanted to spend. That's my last offer This is commonly used in situations where the final price someone is willing to accept; no further negotiations will be made. For example: I can\u0026rsquo;t go lower than $500 for the laptop. That\u0026rsquo;s my last offer. 21. Watching Basketball https://youtu.be/O-BvPcJfX1w SHOW NOTES foul refers to a violation of the rules in a sport, usually resulting in a penalty. For example: He committed a foul by pushing the opponent during the game. ref is short for referee, refers to an official who oversees a game or match to enforce the rules. For example: The ref called a foul on that play because the defender hit the shooter. free throw refers to a shot taken from the free-throw line without any defense, usually awarded after a foul. For example: She made both of her free throws after the foul was committed. make the shot means to successfully score by getting the ball into the hoop or goal. For example: If Gretzky make a shot, they\u0026rsquo;re gonna win the Stanley Cup. 3-pointer refers to a basketball shot taken from beyond the three-point line, worth three points if successful. For example: He hit a 3-pointer to tie the game in the final seconds. travel refers to a vilation in basketball where a player takes too many steps without dribbling the ball. For example: The ref called a travel because the player took five steps without dribbling. beer run informally refers to going to get beer, usually in a group or as part of a social activity. For example: We\u0026rsquo;re running out of drinks—time for a beer run. screw up means to make a mistake or do something badly, often in a way that causes problems or difficulties. For example: Jill, you really screwed up this time, you\u0026rsquo;re fired. This game is important, if you screw it up again, we\u0026rsquo;re out of the finals. I\u0026rsquo;m sorry, I know I screwed up, will you forgive me? 22. Ending a Relationship https://youtu.be/HjXbEHvwskM SHOW NOTES get a hold of means to contact or reach someone. For example: I tried calling her all day, but I couldn\u0026rsquo;t get a hold of her. stood me up means to fail to meet someone as planned, especially when they were expecting you. For example: I waited for an hour, but she stood me up and never showed. priority refers to something that is considered more important to be done or dealt with first. For example: Getting the report finished is my top priority today. heading is commonly used to express the future direction, outcome, or progress. For example: I don\u0026rsquo;t know where our relationship is heading. Where is this bus heading? Where is this project heading? Do you have any idea...? This is commonly used to ask if someone knows or has any information about something. For example: You forgot my birthday. Do you have any idea how angry I am? Julie kiss my borfriend, does she have any idea how mean that was? I just broke up with my boyfriend, don\u0026rsquo;t you have any idea how sad I am? I've heard it all before. This phrase is used when someone is tired of hearing the same things or excuses. For example: You say you\u0026rsquo;ll change, but I\u0026rsquo;ve heard it all before. I\u0026rsquo;m not buying it. 23. New Year\u0026rsquo;s Resolution https://youtu.be/I9k50oVZPHA SHOW NOTES transform means to change something completely in appearance, form, or nature, often for the better. For example: She used to be shy, but the experience completely transformed her. stuffed means to be very full, especially after eating too much. For example: I ate so much pizza, I\u0026rsquo;m completely stuffed! stick to it means to continue with something especially when it\u0026rsquo;s difficult. For example: I can\u0026rsquo;t solve this math problem. — Stick to it. I\u0026rsquo;m sure you\u0026rsquo;ll get it. I mean it. This phrase emphasizes seriousness in what someone is saying. For example: If you don\u0026rsquo;t finish your homework by tonight, there will be consequences. I mean it! cut out means to remove something entirely. For example: It\u0026rsquo;s time for me to focus on my work, I\u0026rsquo;m going out to cut out everything else from my life. You have to cut out the salt and carbon from your diet, no more chips, no more French fries, no more popcorn. 24. Ordering Pizza https://youtu.be/yaeLbz_NK4U SHOW NOTES pepperoni is a type of specy Italian sausage made from cured pork and beef, often used as a topping for pizza. olives are small, oval-shaped fruits that are typically green or black. They are often used in salads, pasta dishes, or as pizza toppings. martini is a classic cocktail typically made with gin and vermouth, garnished with an olive or a twist of lemon peel. thick crust / thin crust Thick crust is soft and doughy, while thin crust is crispy and light. ham is a type of cured or smoked meat, often made from the thigh of a pig. It is commonly used as a topping for pizzas or in sandwiches. Regina Margarita is a variation of the famous Margherita pizza, typically with tomato, mozzarella, and basil, but may also include other toppings or slightly different variations depending on the restaurant. This is Marty speaking. This is a way to introduce oneself on the phone, letting the other person know who is speaking. For example: Hello, this is Marty speaking. How can I help you? 2 for 1 special is a promotional offer where customers get two items for the price of one. This is commonly seen in restaurants, stores, or fast-food promotions. 25. Receptionist https://youtu.be/sgxrbqyGonE SHOW NOTES May I take your name? This is a polite way of asking for someone\u0026rsquo;s name, typically when answering the phone or greeting someone in an office or service setting. Miss Stevens will be with you momentarily. This is a polite way to inform someone that Miss Stevens will arrive or be ready to speak with them shortly. For example: Please take a seat. Miss Stevens will be with you momentarily. Miss Stenvens is ready for you now. This is used to inform someone that the person they are waiting to see is now available to meet them. For example: Miss Stevens is ready for you now. Please follow me. I'll show you to her office. This is used to guide someone to another person\u0026rsquo;s office or location. For example: Please follow me. I\u0026rsquo;ll show you to her office. right this way is a polite way of directing someone to go in a certain direction. watch your step is a cautionary phrase used to warn someone to be careful of their footing, often when walking on uneven ground or stairs. 26. Swimming https://youtu.be/kGopb2awYiM SHOW NOTES anchor the boat means to secure a boat in place by dropping an anchor into the water, preventing it from drifting. For example: We need to anchor the boat before we go swimming. doggy padding is a simple swimming stroke where the swimmer uses a paddling motion with their arms and legs, similar to how a dog swims. It is often used by beginners as it\u0026rsquo;s an easy and natural way to stay afloat. breaststroke is a swimming stroke where the swimmer moves their arms in a half-circle motion while pulling their legs in a frog-like kick. backstroke is a swimming stroke done on the back, where the swimmer alternates arm strokes in a circular motion while kicking their legs. take a dip means to go into the water for a quick swim. For example: It\u0026rsquo;s such a hot day; let\u0026rsquo;s take a dip in the pool to cool off. for a little while means for a short period of time. I\u0026rsquo;m going to take a dip for little while before the sunset. 27. Eggs Preparation https://youtu.be/e-z7jc3B4zg SHOW NOTES picky means being very selective or particular, especially when it comes to food, preferences, or choices. He\u0026rsquo;s really picky about his food—he doesn\u0026rsquo;t like vegetables. yolk/egg white yolk is the yellow part of an egg, which is surrounded by the egg white. egg white is the clear part of an egg that surrounds the yolk sunny side up is a way of cooking eggs where the egg is fried on one side only, leaving the yolk exposed and not flipped. soft/hard boiled eggs soft boiled egg is an egg that has been boiled for a short time, resulting in a runny yolk and slightly firm white. hard boiled egg is an egg that has been boiled for a longer period, making both the yolk and white firm. eggs and soldiers is a British dish where soft-boiled eggs are served with strips of toast (called soldiers) for dipping into the yolk. I feel like... This is often used to express a desire, mood, or inclination to do something. I feel like baking. I feel like eating pizza. drives me crazy means to cause frestration or annoyance, often in a way that is hard to ignore. This music is driving me crazy, turn it down. Don\u0026rsquo;t leave garbage in my car, it drives me crazy. Your mom is driving me crazy, she keeps calling me. 28. At the Bar https://youtu.be/l-IL4mtzye0 SHOW NOTES on tap refers to beverages, especially beer, that are available from a keg. When something is \u0026ldquo;on tap\u0026rdquo;, it means that it\u0026rsquo;s being served from a tap at a bar or restaurant. happy hour refers a time when drinks and appetizers are sold at discounted, usually in the late afternoon or early evening. a special refers to a discounted item, usually in a restaurant or bar. Today\u0026rsquo;s special is a burger and fries for only $5. pint is a unit of measurement for liquids, commonly for beer. a pint = 473 milliliters appetizer is a small dish served before the main course to stimulate appetite. Nachos /ˈnɑːtʃoʊz/ is a popular snack made from tortilla chips covered with melted cheese and often topped with things like salsa, guacamole, sour cream, etc. Heineken /ˈhaɪnɪkən/ is a popular brand of beer originally from the Netherlands. Budweiser /ˈbʌdˌwaɪzər/ is a well-known American beer brand. Mozzarella /ˌmɑːtsəˈrɛlə/ is an Italian cheese that is soft, white, and commonly used in salads, pizzas, and pasta dishes. how/what about are used to suggest or inquire about something. What about these dirty clothes, you said you would wash them days ago. What about going to the mall instead. I\u0026rsquo;m tired of going to the movies. How about we go to the new restaurant tonight? 29. Fingers https://youtu.be/y-eo1VNedcQ SHOW NOTES pinky, ring finger, middle finger, index finger, thumb pinky: The smallest finger ring finger: The fourth finger, typically where a ring is worn. middle finger: The third finger, located in the center of the hand. index finger: The second finger, next to the thumb, often used for pointing. thumb: The first and thickest finger, opposable to the other fingers, making grasping objects easier. may this ring be blessed This phrase refers to a wish or prayer for the ring to be blessed or sactified, often said during a wedding ceremony. abide in peace This phrase means to live or remain in peach, suggesting calmness and harmony. with this ring, I thee wed This is a traditional phrase spoken during a wedding ceremony, where one person declares their intention to marry the other by placing a ring on their finger. wear it as a symbol of our love and commitment This phrase explains that the ring represents the love and promise made between two people in marriage. 30. Math https://youtu.be/8uLJQnZROyI SHOW NOTES teacher's pet refers to a student who is overly favored by the teacher, often because they try to please the teacher. It common have a negative connotation, implying that the student is trying too hard to gain the teacher\u0026rsquo;s approval. scuk up means someone who is overly flattering someone, usually a person in power, like a teacher or boss, in an insincere way to gain favor. smarty pants is a playful or teasing way to describe someone who is very clever or shows off their intelligence, often in a way that annoys others. know-it-all refers to a person who believes they know everything. It\u0026rsquo;s usually used in negative or sarcastic way to describe someone who is seen as arrogant about their knowledge. 31. Sci-fi https://youtu.be/hdcGDXFFiq4 SHOW NOTES blaster is a type of weapon, often seen in science fiction or action movies. break through means to make progress or succeed after overcoming obstacles, which can refer to physical barriers like wall, or more abstract challenges like tough problems. After 15 minutes, the workers broke through the wall, and rescued everyone from the fire. He is such a good player, he broke through the entire defense. They are breaking through our impenetrable wall. settle this means to solve a disagreement or issue. It can be used when there\u0026rsquo;s need to come to a final decision or conclusion about something. I\u0026rsquo;m fed up with arguing about this, let\u0026rsquo;s just settle the argument once and for all. tractor beam is a concept from science fiction, usually referring to a powerful beam used to pull or attract objects toward a spacecraft. no longer be means that something is no longer happening, or someone is no longer in a particular role. I\u0026rsquo;ll no longer be your boyfriend. know nothing of This phrase is often used to express that someone is ignorant or uninformed about a topic. You think you can understand what I\u0026rsquo;m going through, but you know nothing of the struggles I\u0026rsquo;ve faced. once and for all means to finally resolve or finish something, often in a definitive or conclusive way. He claims that his photographs prove once and for all that UFOs do exist. I told him once and for all that I don\u0026rsquo;t want to be his girlfriend anymore. 32. Barber Shop/Hair Salon https://youtu.be/l4jdN_P3UjE SHOW NOTES trim means to cut something or small adjustments, usually to hair. silky is commonly used to describe hair that very soft and smooth to touch. shiny is used to describe something that has a bright, smooth surface, such as shiny hair or a shiny car. grow out means to let something, such as hair or nails, become longer naturally without cutting them. sideburn is the strip of hair that grows along the sides of the face, in front of the ears. take a little off the top is commonly used when someone wants to trim a small amount of hair from the top part of their head. nothing too fancy means something is simple, not elaborate, or not showing off. don't just stand there is used to tell people to take action instead of staying still or doing nothing. Don\u0026rsquo;t just stand there, help me take these boxes into the house. The house is on fire, don\u0026rsquo;t just stand there, call the fire department. look like a million buck means to look very attractive, stylish, or impressive. It\u0026rsquo;s a compliment often used when someone is well-dressed or appears confident and radiant. Mullet is a hairstyle where the front of the hair is short, and the back is left long. It bacame popular in the 1980s. Hockey Hair is a term for a hairstyle similar to the mullet, often associated with hockey players. It’s characterized by long hair in the back and shorter hair in the front. Afro refers to a hairstyle where the hair is naturally grown out and styled into a rounded shape, often associated with African heritage. Mohawk is a hairstyle where the hair is shaved or very short on the sides, with a strip of longer hair running from the front to the back of the head. Flat Top is a hairstyle where the hair is cut short on the sides and top, creating a flat, even surface. crew cut is very short and simple style where the hair on the sides and top is cut short and uniform in length. Dreadlocks is a hairstyle where the hair is matted or twisted into long, rope like strands. It is often associated with various cultures, especially in the Caribbean and African communities. 33. Pharmacy/Drug Store/Chemist https://youtu.be/5J2cwx5gHUI SHOW NOTES price check refers to checking the price of an item, usually at a store or supermarket. Can you do a price check on this shirt? I\u0026rsquo;m not sure if it\u0026rsquo;s on sale. capsule is a medication enclosed in a soft or hard shell, usually made of gelatin. tablet is a solid form of medication that is typically swallowed. overdose means to take more than the recommended or safe amount of a drug. eyedrops means a liquid medication that is applied to the eyes. Prozac is a brand name for the medication fluoxetine, which is used to treat depression, anxiety, and other disorders. be sure` means to be certain about something. Be sure not to forget your unbrella, it\u0026rsquo;s raining today. hang on generally means to wait for a short time or hold something tightly. wait: Hang on, I\u0026rsquo;ll be right there. hold: Hang on to the railing while going down the stairs. 34. Baseball https://youtu.be/Uc1GjEKoPZI SHOW NOTES national anthem is a patriotic song officially recognized by a country, often sung at the begining of public events like sports games. hymn is a religous song, typically sung during religious ceremonies or services. pitcher is a player in baseball who throws the ball to the batter from the pitcher\u0026rsquo;s mound. outfielder is a player in baseball who is positioned in the outfield (the area fartest from the home plate) and is responsible for catching fly balls and making throws back to the infield. line drive is a type of hit in baseball where the ball is hit sharply and traight, usually at a low angle. scrambling refers to a player in baseball quickly and awkwardly to avoid being tagged or to regain control of the ball. inning is a division of a baseball game where both teams have a chance to bat and field. The game went into extra innings, and the home team won in the 12th inning. up to bat refers to the player who is currently batting or next in line to the bat in a baseball game. It\u0026rsquo;s your turn, you\u0026rsquo;re up to bat now. strike one refers to a term used in baseball when the batter misses a pitched ball, or doesn\u0026rsquo;t swing at a ball that\u0026rsquo;s in the strike zone. curve ball is a type of pitch in baseball that curves or breaks as it approaches the batter, making it harder to hit. Also used figuratively to mean something unexpected. The pitcher threw a curve ball, and the batter couldn\u0026rsquo;t hit it. My boos threw me a curve ball today, so I have to stay and work late. hit a home run A home run is a term from baseball that refers to a hit in which the batter hits the ball out of the playing field, typically over the outfield fence, without it being caught. In a figurative sense, it means achieving a significant success or accomplishing something exceptionally well. Great job on that sales presentation, you rally hit home run. Our sales team hit a home run this month by doubling our revenue. 35. Confess Love https://youtu.be/74FmjXrg0t8 SHOW NOTES here's the thing is used to introduce something important or to explain a situation. Here\u0026rsquo;s the thing, we need to leave in 10 minutes if we want to catch the train. I can't take it anymore is used when someone feels overwhelmed, frustrated, or exhausted by a situation and can no longer handle it. The man next door has been so loud, I can\u0026rsquo;t take it anymore. My boss always yells at me, I can\u0026rsquo;t take it anymore. I can\u0026rsquo;t take it anymore, I\u0026rsquo;m going to quit. are you serious is similar to really, it\u0026rsquo;s often used when something is surprising, unbelievable, or hard to believe. Are you serious? You just won the lottery?! have the guts means having the courage to do something difficult, dangerous, or challenging. I don\u0026rsquo;t think I have the guts to go skydiving. I don\u0026rsquo;t have the guts to give a speech. I\u0026rsquo;ve never had the guts to say no to my boss. just for the two of us means something is emant for only two people, often implying exclusivity or intimacy. I booked a small table at the restaurant, just for the two of us. give me a shot means to give someone a chance to try or attempt something. I know I can do this drawing better, just give me a shot. The HR manager wasn\u0026rsquo;t going to hire me, but he decided to give me a shot. 36. Back In 1950 https://youtu.be/9Ox9lC_Jbuk SHOW NOTES A Sock Hop is a type of informal dance event that was popular in the 1950s and 1960s. A Sadie Hawkins Dance is a type of dance where girls ask the boys to be their dates, instead of the traditional way where boys ask girls. I'm swell is an old-fashioned, informal way of saying \u0026ldquo;I\u0026rsquo;m doing great\u0026rdquo; or \u0026ldquo;I\u0026rsquo;m fine.\u0026rdquo; It was popular in the 1930s and 1940s. How are you feeling today?—I\u0026rsquo;m swell. cool it means to relax or calm down, especially if someone is getting overly excited or angry. It\u0026rsquo;s a way to tell someone to take it easy. Just cool it. Now is not the right time to get angry. You need to cool it and stop yelling at me. knuckle sandwich is a humorous or exaggerated way of referring to a punch in the face. It\u0026rsquo;s a playful way of saying someone might get hit. If you keep talking like that, you might end up with a knuckle sandwich! pipsqueak is a playful term or slightly insulting term for someone who is small or weak, often used for children or someone who\u0026rsquo;s being annoying in a harmless way. Stop being such a pipsqueak and help me carry these boxes. It'll be blast means that something is going to be a lot of fun or exciting. Don\u0026rsquo;t worry, the party\u0026rsquo;s going to be a blast. have my eyes on means to be interested in or focused on something, whether it\u0026rsquo;s a person, a goal, or an object. I\u0026rsquo;ve had my eyes on that new phone for a while. ease off means to reduce the intensity, pressure, or effort being applied to something or someone. It’s used when someone is doing something too forcefully, and you suggest they should stop being so intense or give more space. You\u0026rsquo;re pushing Susie too much, you need to ease off a bit. You need to ease off the junk food. Matt is putting so much pressure on me these days, I wish he would ease off. Scok Hop Sadie Hawkins Dance 37. Back In 1970 https://youtu.be/lJqo8PYZbBc SHOW NOTES roller rink ia a place where people go to skate. A roller skate is a type of skate with four wheels arranged in two rows, like a small car\u0026rsquo;s wheels. A roller blade is a type of skate with wheels arranged in a single line. groovy is a slang term from the 1960s-70s meaning \u0026ldquo;cool\u0026rdquo; or \u0026ldquo;awesome\u0026rdquo;. far out ia slang term in 1970s meaning \u0026ldquo;amazing\u0026rdquo; or \u0026ldquo;incredible\u0026rdquo;. foxy is used to describe someone as very attractive or sexy. mellow out means to relax or calm down. You need to mellow out after a stressful day. right on is a phrase showing aggrement or excitement, similar to saying \u0026ldquo;exactly\u0026rdquo; or \u0026ldquo;that\u0026rsquo;s great\u0026rdquo;. Right on, you got a high score, that\u0026rsquo;s amazing. gravy is a slang for something extra good or easy, like a bonus. This raise was gravy on top of the promotion. to book is a casual way to say \u0026ldquo;leave quickly\u0026rdquo; or \u0026ldquo;run away\u0026rdquo;. We need to book before it gets too late. how's it hanging is a casual way of saying \u0026ldquo;how are you?\u0026rdquo; chat her up is a british slang phrase meaning to start a conversation with someone, usually flirting. hit someone up is a casual way to say \u0026ldquo;contact someone\u0026rdquo;, often to ask for something, either by calling, texting, or meeting. Can you believe Patrick, he came up to me a month ago, and tried to hit me up for some money. When I was a kid, I used to always hit my dead up for lunch money. This is the last time I lend you money, don\u0026rsquo;t even try to hit me up for more. grab some grub is a casual phrase meaning \u0026ldquo;get something to eat.\u0026rdquo; Grub is a slang term for food. Let\u0026rsquo;s grab some grub before the movie. 38. ","permalink":"https://signalyu.github.io/posts/3-humanities/languages/listening/english/1-learning-english-with-podcasts/","summary":"1. Order Food in Restaurant https://youtu.be/_izDbJ45Q5I SHOW NOTES I'm still working on it. This sentence expresses that an action is ongoing and not yet completed. It also suggests that more time is needed to finish it. Did you finish reading? — I\u0026rsquo;m still working on it. Did you fix my car? — I\u0026rsquo;m still working on it. Coke and Fries This refers to a popular combination of fast food: Coca-cola and French Fries.","title":"Learning English With Podcasts"},{"content":"IDEA Maven Introduction to Maven Maven is a build automation and project management tool primarily used for Java projects. It follows the concept of Project Object Model (POM), which is defined in an XML file (pom.xml) at the root of the project.\nsettings.xml Configuration ./ ├── bin/ │ ├── m2.conf │ ├── mvn* │ ├── mvn.cmd │ ├── mvnDebug* │ ├── mvnDebug.cmd │ └── mvnyjp* ├── boot/ │ ├── plexus-classworlds-2.7.0.jar │ └── plexus-classworlds.license ├── conf/ │ ├── logging/ │ │ └── simplelogger.properties │ ├── settings.xml # CUSTOMIZE DEFAULT BEHAVIOR IN THIS FILE │ └── toolchains.xml ├── ... The settings.xml file in Maven is typically used to customize the default behavior according to user needs. Common modifications include configuring repository locations, setting up mirrors, and defining profiles.\nSHOW CODE: Configuring Repository Location Configuring Repository Location \u0026lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: ${user.home}/.m2/repository \u0026lt;localRepository\u0026gt;/path/to/local/repo\u0026lt;/localRepository\u0026gt; --\u0026gt; \u0026lt;localRepository\u0026gt;/Users/signalfish/maven-repository\u0026lt;/localRepository\u0026gt; SHOW CODE: Setting Up Mirrors Setting Up Mirrors \u0026lt;mirrors\u0026gt; \u0026lt;!-- mirror | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;mirrorId\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;repositoryId\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;Human Readable Name for this Mirror.\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://my.repository.com/repo/path\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; --\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public/\u0026lt;/url\u0026gt; \u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; SHOW CODE: Defining Profiles Defining Profiles \u0026lt;profiles\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;env-dev\u0026lt;/id\u0026gt; \u0026lt;activation\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;target-env\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;dev\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/activation\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;tomcatPath\u0026gt;/path/to/tomcat/instance\u0026lt;/tomcatPath\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/profile\u0026gt; --\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;jdk-1.8\u0026lt;/id\u0026gt; \u0026lt;activation\u0026gt; \u0026lt;activeByDefault\u0026gt;true\u0026lt;/activeByDefault\u0026gt; \u0026lt;jdk\u0026gt;1.8\u0026lt;/jdk\u0026gt; \u0026lt;/activation\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;1.8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;1.8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;maven.compiler.compilerVersion\u0026gt;1.8\u0026lt;/maven.compiler.compilerVersion\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;jdk-17\u0026lt;/id\u0026gt; \u0026lt;activation\u0026gt; \u0026lt;activeByDefault\u0026gt;true\u0026lt;/activeByDefault\u0026gt; \u0026lt;jdk\u0026gt;17\u0026lt;/jdk\u0026gt; \u0026lt;/activation\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;17\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;17\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;maven.compiler.compilerVersion\u0026gt;17\u0026lt;/maven.compiler.compilerVersion\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;/profiles\u0026gt; GAVP In Maven, GAVP refers to four key components that are used to uniquely identify and describe an artifact (e.g., WAR, JAR, or POM) in a Maven repository.\nG stands for GroupID, which represents the organization or group responsible for the artifact. It typically follows the reverse domain name convention, such as \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; or \u0026lt;groupId\u0026gt;dev.signalyu\u0026lt;/groupId\u0026gt;. A stands for ArtifactID, which identifies the specific artifact within the group. It usually matches the project name or module name, such as \u0026lt;artifactId\u0026gt;my-app\u0026lt;/artifactId\u0026gt;. V stands for Version, which specifies the version of the artifact, such as \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt;. P stands for Packaging, which specifies the type of artifact. It tells Maven what kind of output to expect from the project, such as a JAR file for a library or a WAR file for a web application, such as \u0026lt;packaging\u0026gt;jar\u0026lt;/packaging\u0026gt;. Common Maven Commands mvn compile: Compiles the source code of the project. mvn test: Compiles the source code, runs unit tests, and reports the results. mvn package: Compiles the source code, runs unit tests, and packages the compiled code into desired artifact. mvn clean: Removes the previously compiled files and generated artifacts. mvn install: Compiles the source code, runs unit tests, packages the compiled code into an artifact, and installs it into local Maven repository. mvn deploy: Compiles the source code, runs unit tests, packages the compiled code into an artifact, and deploys the artifact to a remote repository. Maven Dependency Download Failure When Maven fails to download dependencies, follow these steps to resolve the issue:\nCheck the network connection: Ensure a stable internet connection. If an internal network is used, verify the mirror configuration in settings.xml to ensure it\u0026rsquo;s correctly set up. Verify the dependency version: Double-check the version of the dependency specified in pom.xml. Clean the local repository: If the previous steps don\u0026rsquo;t resolve the issue, try cleaning the local Maven repository or deleting the specific dependency directory in the repository. Invalidate caches in the IDE: In IntelliJ IDEA, navigate to File -\u0026gt; Invalidate Caches to clear any cached information that might be causing issues. Then, restart the IntelliJ IDEA. Dependency Inheritence In Maven, dependency inheritance refers to the ability to inherit dependencies from a parent project. This feature enables better management of dependencies in multi-module projects, where a child module can inherit dependency configurations from the parent POM.\nSHOW CODE Parent POM Child POM \u0026lt;project xmlns=\u0026quot;http://maven.apache.org/POM/4.0.0\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xsi:schemaLocation=\u0026quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026quot;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;parent-project\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;modules\u0026gt; \u0026lt;module\u0026gt;child-project1\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;child-project2\u0026lt;/module\u0026gt; \u0026lt;/modules\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.3.12\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- These dependencies can be inherited by child projects --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.commons\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-lang3\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.12.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; \u0026lt;project xmlns=\u0026quot;http://maven.apache.org/POM/4.0.0\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xsi:schemaLocation=\u0026quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026quot;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;parent-project\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;relativePath\u0026gt;../pom.xml\u0026lt;/relativePath\u0026gt; \u0026lt;!-- Path to the parent POM --\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;artifactId\u0026gt;child-project1\u0026lt;/artifactId\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- Child module can use the dependency inherited from the parent --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-core\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; In the above code, The spring-core dependency is inherited from the parent, and the version is automatically resolved by Maven from the parent’s dependencyManagement section. The commons-lang3 dependency from the parent is also inherited, but does not need to be re-declared in the child POM.\nThe difference between dependencyManagement and dependencies is that dependencies directly add dependencies to the project build, meaning they are included in the project\u0026rsquo;s final artifact. On the other hand, dependencyManagement specifies the version and configuration of dependencies for inheritance in child modules, without directly adding them to the project build.\nPostman ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/framework-and-tools/tools/1-idea-maven-postman-notes/","summary":"IDEA Maven Introduction to Maven Maven is a build automation and project management tool primarily used for Java projects. It follows the concept of Project Object Model (POM), which is defined in an XML file (pom.xml) at the root of the project.\nsettings.xml Configuration ./ ├── bin/ │ ├── m2.conf │ ├── mvn* │ ├── mvn.cmd │ ├── mvnDebug* │ ├── mvnDebug.cmd │ └── mvnyjp* ├── boot/ │ ├── plexus-classworlds-2.7.0.jar │ └── plexus-classworlds.","title":"Idea \u0026 Maven \u0026 Postman Notes"},{"content":"1-10 1. Do you work or do you study? I currently working. I finished my studies four years ago. So I\u0026rsquo;m currently working as a software engineer.\n2. Where do you currently work? I currently work in Shenzhen. I came in Shenzhen two years ago. I worked previously in Guangzhou where I completed my education.\n3. Why did you choose that carrer? Well, actually. I have a bachelor\u0026rsquo;s degree in economics. But I wasn\u0026rsquo;t really into a bank client manager role, I prefer work that focuses on logic and analysis. So I\u0026rsquo;m a software engineer now and I really love what I do.\n4. Do you enjoy your job? Yes, I do. Because it allows me to think logically. And the tech field is always evolving, there\u0026rsquo;s always something new to learn. and I really enjoy learning new things.\n5. How many hours do you usually sleep at night? It depends. During the week, I usually sleep around seven to eight hours, but on weekends, I can sleep in later, so it’s more like eight to nine hours.\n6. What\u0026rsquo;s your faviorite drink? My favorite drink is tea, actually, I drink green tea every day. In China, when people visit us, we usually serve tea and chat. and tea is rich in nutrients that are good for our health. So, I enjoy it a lot.\n7. What are your hobbies? Well, actually, I\u0026rsquo;m into a bunch of things. In my spare time, I enjoy watching movies, especially action movies. And my favorite movie is The Avengers. I also love reading books. and if the weather is nice, I like to go for a jog or walk around the city.\n8. What kind of music do you enjoy? Well, I\u0026rsquo;m pretty open when it comes to music! I enjoy pop and romantic songs, and my favorite band is Westlife. When I\u0026rsquo;m feeling stressed, I like to listen to instrumental music, like piano or violin.\n9. How do you usually spend your weekends? Well, on weekends, if the weather is nice, I usually go for a jog or walk around the city. If there are new movies I want to see, I\u0026rsquo;ll go to the cinema with my friends. I also like to stay at home to read or learn new things.\n10. Do you prefer winter or summer? I prefer summer. Because I grew up in a small town, and when I was a kid, I\u0026rsquo;d spend time swimming in the pond with my friends. We had so much fun! So, that\u0026rsquo;s my favorite season of the year.\n11-20 11. Do you like movies? Yes, I do love movies, especially action movies, and one of my favorite movies is The Avengers.\n12. How often do you eat fast food? Well, I try to eat really healthily. I don’t eat fast food very often, may be once or twice a month. But when I\u0026rsquo;m busy at work, I crave something quick and easy. So I have to grab a burger, or something like that, from McDonald\u0026rsquo;s or KFC.\n13. Do you prefer live in the city center or in the suburbs? Well, I prefer live in the city center because it\u0026rsquo;s a lot more convenient compared to the suburb. and I enjoy walking around on weekends, I think the environment is a lot more safer. So that\u0026rsquo;s why I prefer city life rather than suburbs.\n14. What\u0026rsquo;s your favorite holidy or festival? My favorite festival is the Rural New Year. It\u0026rsquo;s celebrated on the first day of the lunar calendar in China. It\u0026rsquo;s a celebration of the bountiful harvest. Every year, my family and relatives gather to celebreate and we have a lot of fun during this festival.\n15. What\u0026rsquo;s your favorite place to travel to? I think my favorite place to travel to is Yunnan. I like Yunnan because there is a lot of beautiful destinations, A lot of nature, waterfall, ancient town, and I really like to explore the nature and curious about the culture. So, yeah, I like Yunnan.\n16. What is your favorite celebrity? My favorite celebrity is an actor named Chenglong. He has made a lot of movies, especially action movies. He is a dedicated and professtional actor, and he inspired me to value hard work when pursuing my dreams.\n17. Do you want to become a celebrity? Well, I don\u0026rsquo;t want to become a celebrity, to be honest. I prefer a peaceful life and don\u0026rsquo;t want to do things I don\u0026rsquo;t like. But I would like to be good in my field and build a strong reputation for myself.\n18. Do you prefer cats or dogs? Definitely dogs. I love dogs because they are loyal, playful, and full of energy. It warms my heart when they greet me after a long day at work.\n19. Do you like to read? Yes, I do love reading. Actually, I\u0026rsquo;ve been rereading The Little Prince recently. It\u0026rsquo;s a fictional book. I get new insights every time I read it. I particularly love the quotes, like All grown-ups were once children, and The most beautiful things are felt with heart.\n20. Tell me about your hometown, please. I come from Meizhou, the hometown of the Hakka people. We have a great culture, like ancient architecture, Circular Dragon Houses, the buildings are oval-shaped, made of mud, wood, and tiles, commonly have a center courtyard and surrounded by the living quarters and a pond. We also have delicious cuisine, like salt-baked chicken and stuffed tofu.\n21-30 21. What book would you recommend to a friend? I would recommend The Little Prince, written by Saint-Exupéry. Actually, I\u0026rsquo;ve been rereading this book recently. The book explores the themes of love, friendship, and the importance of seeing with the heart. I get new insights every time I read it. The story is short and easy to read, so it\u0026rsquo;s suitable for anyone who enjoys a meaningful read.\n22. Do you like wearing hats? To be honest with you, I don\u0026rsquo;t really wear hats very often. But if I were to wear one, It would be on a holiday, at the beach, or when it\u0026rsquo;s really sunny.\n23. Which do you think is better to work in an office or work from home? I think it would depend. I think certain professions like IT, working from home can be quite benefitial. Especially if you live in a place that has a lot of traffic. The commute from home to the office eats up a lot of time. So working from home can help you spend your time productively.\n24. What\u0026rsquo;s your favorite food? Well, I am Chinese, and I like Chinese food. My favorite dish is Dongpo Pork. I enjoy its rich flavor and tender texture, It literally melts in your mouth. It is slow-cooked with soy sauce, sugar, and spices. It\u0026rsquo;s definitely one of my go-to comfort foods.\n25. How often do you read books? Well, I read books almost every day. On the weekdays, I often read on the subway during my commute. On weekends, if I stay at home, I often spend time reading books.\n26. Are there any negative aspects of using social media. Well, I think the biggest downside of social media is that it can distract you from your work or studies. It can also be quite addictive, it can take up several hours once you start using it. And because of ananymity, there are full of simps, and they can ruin your day by sending unpleasant messages.\n27. Where are you from? I grew up in Meizhou. I was born and raised here, and I really love my hometown.\n28. How often do you use social media? I would say every day. but I try to restrict myself to one hour per day, because it can be quite addictive. It feels like a rabbit hole once you start using it. It can easily take up several hours of your time, and it\u0026rsquo;s not very productive.\n29. Tell me about your home. I live in a detached house, it\u0026rsquo;s very nice. It has a spacious living room, where I spending time with my family. There\u0026rsquo;s also a beautiful garden outside, it\u0026rsquo;s a peaceful place, and I love spending time there when the weather is nice.\n30. Recently, many bookshops have had to close because of competition from online bookstores. Do you think that\u0026rsquo;s a good thing or a bad thing? I would say it\u0026rsquo;s a bad thing. Because I think buying a book on line feels like a chore. But go to the physical bookstore to read, smell the ink, it\u0026rsquo;s an exprience, and I really enjoy the warm and cozy atmosphere of the bookstore. So, I feel like it is a bad thing that the physical stores are closing and online stores are overtaking.\n31-40 31. How often do you exercise? Well, I\u0026rsquo;m a big fan of sports. Back in my school days, I used to exercise almost every day. But now I\u0026rsquo;m working, I don\u0026rsquo;t work out as often as before, may be two or three times a week. During the week, if I\u0026rsquo;m free, I usually go for a jog in the afternoon. On weekends, I prefer more active workouts like playing football with friends or hitting the gym.\n32. Do you have any animals in your home as pets? Well, I don\u0026rsquo;t have any pets at home right now because my community doesn\u0026rsquo;t allow them. But I do love pets, especially dogs. I used to have a dog named Ogi. He was loyal, playful, and full of energy. It always warmed my heart when he greeted me at the door after I got home from school.\n33. In your country, what drinks do you offer to your guests. Well, in China, we commonly offer tea when people visit us. Tea is a big part of our culture, and we usually serve it hot, sometimes with snacks like nuts and fruits. For children, we might offer beverages, like orange juice or Coca-Cola.\n34. In your country, do you offer foods to your guests who visit your home? Yes, in China, it\u0026rsquo;s common to offer foods when people visit us, because hospitality is a big part of our culture, so we often offer snacks like nuts, fruits, or pasteries. If it\u0026rsquo;s a formal visit or during meal time, we might prepare a full meal with traditional dishes to make our guests feel welcome.\n35. In your country, what food or drinks do they serve at weddings? In China, for drinks, we commonly serve Chinese liquor and beverages at weddings. For foods, I would say it depends, because China is a big country with diverse nationaities. In my hometown, we commonly serve Dongpo Pork, seafood, steamed fish, or something that symbolize good fortune and prosperity.\n36. Describe a problem in your city I live in Shenzhen, a vibrant and bustling metropolis. I think the biggest problem in my city is traffic congestion. During rush hours, the roads are often packed with cars, and public transportation tends to be overcrowded. I think this issue is mainly caused by the growing population and the increasing number of vehicles, as many people from all over the country come to Shenzhen for work. To address this issue, the government has introduced relavant policies, like restricting vehicle usage, adding more buses and metro lines, and promoting cycling to reduce the number of vehicles on the road.\n37. Are you optimistic that the situation will improve? Yeah, absolutely. I think the traffic congestion can be reduced significantly. With the implementation of smart city initiatives and autonmous driving technologies, transportation will become more efficient. Currently, the government is promoting AI-driven transportation in certain areas. Once the entire system is managed by AI, I\u0026rsquo;m confident traffic congestion will diminish in the future.\n38. Do you like the neighborhood that you live in? Yeah, I love it. It\u0026rsquo;s a beautiful place, and it\u0026rsquo;s by the river. Whenever I need to unplug from life, I just go for a jog along the river, it\u0026rsquo;s really restorative and calming.\n39. What\u0026rsquo;s your favorite sports team? Well, I am a big fan of football, and my favorite football team is Liverpool. I\u0026rsquo;ve been supporting them for several years. Watching their matches is always exciting and I really admire their style of play, attacking football fastly with a lot of intensity.\n40. Do you like art? Well, to be honest, I don\u0026rsquo;t know much about painting or sculpture. But I do love watching movies, and I think movie is also a form of art. I love how films can tell powerful stories through visual imagery, music, and performance. I also enjoy exploring how directors use cinematography to convey emotions and ideas. It\u0026rsquo;s a medium that really speaks to me, and I find it both entertaining and thought-provoking.\n41. Are open plan offices are good for productivity? Well, it depends on the nature of the work and the personal preferences of employees. For jobs that require a lot of collaboration, they can be highly effective. But for jobs that require deep concentration, I think a quieter room would be preferable. Personally, I prefer working in a quiet place, because I find it easy to get distracted in a noisy environment.\n42. Do you take public transportation or private transportation? Well, I moved to Shenzhen a few years age. The transportation here is very convenient. Compared to owning a car, I prefer public transportation, because I can\u0026rsquo;t stand the traffic confestion during rush hours. Additionally, taking public transportation also helps reduce carbon emissions.\n43. Is it easy to catch public transportation in your country? Yes, it\u0026rsquo;s quite easy and convenient. Especially in metropolis like Beijing, Shanghai, and Shenzhen. These cities have extensive buses and metro network, and the cost is also very affordable.\n44. At what time of year do you normally go on holiday? I usually go on holiday in Spring, around February or March. The weather is generally pleasant during these times, neither too hot nor too cold, and destinations are commonly less crowded.\n45. Do you think that people pay attention to adverts on TV. I would say it depends. Some people may pay attention to TV ads if they find them relevant to their needs. But many others may skip or ignore them. Personally, I prefer ignoring ads because I find them annoying and disruptive.\n46. How important are regulations on TV advertising? Well, Regulations on TV ads are very important. Because they ensures that ads are truthful, ethical and appropriate to all audiances. they also help prevent deceptive practices among advertizers.\n47. Would you say it is harder for people to make new friends as they get older? Yes, it can be harder for people to make new friends as they get older. Because adults often have busy schedules, more responsibilies, and less time to socialize. Additionally, as people get older, they may become more set in their ways, which makes more challenging to make new friends.\n48. What was your favorite subject in high school? Well, My faviorite subject in high school was math. Because I prefer subject that focus on logic and analysis. I enjoyed the logical thinking process and the satisfaction of finding the right answer.\n49. Do you prefer photos of yourself or other things? Well, I prefer photo of other things. I enjoy capturing moments, landscapes, and animals. I think photo of things hold more meaning for me, as they can evoke memories or emotions tied to a place or experience.\n50. When is the best time to visit your hometown? Well, the best time to visit my hometown is in winter, around December or January. During this time, the weather is mild because my hometown is located in a subtropical region, and there are many local traditional customs and activities, and the fresh pomelo is really delicious.\n51-60 51. Is there anything you don\u0026rsquo;t like about your hometown? Well, overall, I really love my homwtown. It\u0026rsquo;s a beautiful and peaceful place. But, one downside is the lack of public transportation, which can be inconvenient, especially for the elderly who don\u0026rsquo;t drive.\n52. Is your hometown big or small? My hometown is relatively small. It\u0026rsquo;s a beautiful and peaceful place. It has all the essentials like schools, shops, and parks. It\u0026rsquo;s the kind of place where everyone knows each other.\n53. Does any one famous come from your hometown? Yes, one famous person from my hometown is Cheong Fatt Tze. He was a prominent businessman and philanthropist in the late 19th century. He made his fortune in the trading industry and played a key role in Penang\u0026rsquo;s development. His former residence has become a historic landmark and a popular tourist destination in Malaysia.\n54. Could you describe the landscape of your hometown? My hometown, Meizhou, is located in Guangdong Province. It\u0026rsquo;s surrounded by lush green mountains. The rolling hills and verdant forests create a peaceful and picturesque environment. The city is also known for its rivers, and there are many parks and natural reserves, making it a great palce for outdoor activities like hiking and sightseeing.\n55. What is some of the history of your hometown? My hometown, Meizhou, was established during the Tang Dynasty. It became a hub for the Hakka people and is considered the cultural heart of Hakka heritage. The city played a significant role in agriculture, particularly in rice and tea cultivation. Meizhou is also renowned for its historical architecture, such as the Circular Dragon houses, which are oval-shaped, and typically surrounded by living quarters and a pond.\n56. What\u0026rsquo;s the best thing about your hometown? The best thing about my hometown is the food. I always get excited when there\u0026rsquo;s a local event because it means I can enjoy my favorite dish, Dongpo Pork. It\u0026rsquo;s slow-cooked with soy sauce, sugar, and spices. It literally melts in your mouth. I really love it.\n57. How do you think your hometwon will change in the future? I think my hometown will continue to modernize in the future. Actually, the government has been building a high-speed rail line recently, and there will likely be more investment in infrastructure and public services. It will be more convenient than before. But I hope the local culture and traditions will be preserved alongside this development.\n58. How long have you lived in your hometown? Well, I come from Meizhou, I was born and raised there. I lived there for 20 odd years, and then moved to Shenzhen. But I always return during holidays.\n59. Do you like your hometown? Yeah. I do love my hometown. It holds a lot of cherished memories for me. It\u0026rsquo;s a peaceful and beautiful place. The people are friendly, and there\u0026rsquo;s a strong sense of community.\n60. Would you rather live in your hometown or another city? I would say it depends. For work, I prefer to live in a city, as it offers more career opportunities and amenities. But, for a more relaxed life, I would choose my hometown, because I feel it is more at ease and connected.\n61-70 61. What\u0026rsquo;s the difference between your hometown and other cities in your country? In my opinion, the main difference between them is the pace of life. My hometown is much more peaceful and comfortable. The people are friendly, and there\u0026rsquo;s a strong sense of community. In contrast, bigger cities tend to be more modern, bustling, and crowded, offering more job opportunities. But the pace of life there is much faster, especially on busy days.\n62. Which is more important, educational qualifications or work experience? I would say it depends. Educational qualifications provide a strong foundation of knowledg and skills, especially in specialized fields. They can open doors to many job opportunities. On the other hand, work experience is also crucial, because it demonstrates practical skills and problem-solving abilities, and these abilities are very improtant in real-world situations, especially in technical fields.\n63. Do you think artificial intelligence will ever replace teachers in the classrooms? Well, I don\u0026rsquo;t think AI will replace teachers. I believe AI can be a great tool to assist with learning, but it can\u0026rsquo;t provide something like human connection and empathy. Besides, teachers also play a key role in fostering creativity, critical thinking, and social skills. So, I believe AI will enhance the learning experience but it won\u0026rsquo;t replace teachers.\n64. Should students be allowed to use AI to help them with their homework? I think it\u0026rsquo;s okay. Because AI can provide valuable asistance, like offering explanations and suggesting ideas. But it shouldn\u0026rsquo;t replace the process of learning. Students shouldn\u0026rsquo;t use AI to simply complete tasks, they should view it as a supporting tool instead of a shortcut.\n65. Could you speculate on how cities will develop in the future? Well, in the future, with the help of AI, I think cities will become smarter. Transportation could be transformed with autonomous cars and even flying taxis, and we might see many unmanned aerial vehicles in the sky. Buildings might become more eco-friendly, with green roofs and integrated renewable energy sources.\n66. Could you describe how noticeable the gap between the rich and the poor is in your country? Well, in China, the gap between the rich and the poor is quite noticeable. In metropolis like Beijing, Shanghai, and Shenzhen, local residents enjoy better healthcare and educational resources. But, in some rural areas, many people even do not have health insurance, and if they face serious illnesses, they have to wait for the worst. Besides, the income gap has widened, and low-income people often struggle to keep up with the development in urban areas.\n67. How worried are you about rising world temperatures? Well, the effects of global warming are alreay becoming apparent, such as extreme weather events like El Niño. Many places around the world are facing more frequent heatwaves, hurricanes, and flooding. This not only threatens the environment but also may pose serious diseases. So, we must strive to live in harmony with our nature.\n68. Do you think young people are becoming less and less hard-working? I don\u0026rsquo;t think so. But, their approach to work has changed a lot compared to previous generations. Many young people today are driven by their passion and interests, and they tend to seek a better work-life balance, which can sometimes be seen as a lack of hard work. At the same time, the rise of technology has made it easier to work efficiently, but they are still working hard, just in a different context.\n69. Is your home in a convenient location? Yeah, it\u0026rsquo;s near public transportation, there are bus stops and a metro station just a short walk away, so commuting to work is quite convenient. And, there are several shops, restaurants, and other essential services nearby, so it\u0026rsquo;s easy to buy daily necessities.\n70. What is your city famous for? I live in Shenzhen. It\u0026rsquo;s famous for being a major hub of technology and innovation. It\u0026rsquo;s often referred to as China\u0026rsquo;s \u0026ldquo;Silicon Valley\u0026rdquo;. It\u0026rsquo;s the home to some of the big tech companies, like Huawei and Tencent. Additionaly, Shenzhen is also known for its cultural diversity, because it\u0026rsquo;s a young city, and there are many people from all over the country come to shenzhen for work.\n71-80 71. What would you like to change about your city? One thing I want to change about Shenzhen is the traffic congestion. The number of cars on the road has increased significantly over the years, as many people from all over the country come to shenzhen for work. I think adding more buses and metro lines could alleviate this issue.\n72. How can you make your city better? I think improving public transportation would make our city better. Although Shenzhen already has a good transportation system, expanding the transportation network could reduce traffic congestion and make commuting more convenient for everyone.\n73. What should a tourist do if they visit your country? Well, if they are interested in Chinese culture, they should visit iconic landmarks like the Great Wall, the Forbidden City in Beijing, and the Terracotta Army in Xi\u0026rsquo;an. For those curious about nature and ancient towns, I would recommend Yunnan, especially places like Lijiang and Dali. If they want to experience modern China, Shanghai, Shenzhen are great options, where they\u0026rsquo;ll find cutting-edge architecture, vibrant shopping districts, and lively nightlife.\n74. What are the main industries in your city? Well, Shenzhen is a city with a highly diverse economy. It\u0026rsquo;s often referred as China\u0026rsquo;s Sillicon Valley. It\u0026rsquo;s the home to some of the big tech companies, like Huawei and Tancent. Shenzhen is also a significant financial center in China, there are many banks, investment firms, and insurance companies. Additionally, the city has a strong manufacturing sector, particularly in electronics and high-tech products like smartphones and computer components.\n75. What kinds of amenities does your city offer? Shenzhen offers a wide range of amenities. It has a highly efficient transportation network, including buses, taxis, and metro lines. The city also has many shoping malls like Mixc Mall and COCO Park. There are many entertainment options, including restaurants, cinemas, and nightlife scenes. Additionally, Shenzhen has modern hospitals and high standard healthcare facilities.\n76. Do you think that many public holidays are losing their significance nowadays? Yeah, I totally agree. One reason is that, nowadays, people are often busy with work, and they may need to travel to different cities for their jobs, making it difficult to truly celebrate holidays. Additionally, holidays have become somewhat commercialized, people focus more on shopping, rather than on the cultural or historical significance of holidays.\n77. How has your city has developed over the past few decades? Well, Shenzhen has experienced tremendous development over the past few decades. At first, it was a small fishing village. In the 1980s, it became a Special Economic Zone. Now, it has grown into a bustling metropolis. There are many skyscrapers, and it\u0026rsquo;s often referred as China\u0026rsquo;s Sillicon Valley, it\u0026rsquo;s the home to some of the big tech companys, like Huawei and Tencent. The infrastructure has also improved greatly, including metrolines, high-speed rail, and modern airports. The population has also grown exponentially, as many people from all over the country come to shenzhen for work.\n78. Why do people move to the city? Well, compared to rural areas, cities offer better job oppotunities, higher salaries, and more chances for career growth. Additionally, cities provide better education, healthcare, and more entertainment options. The convenience of public transportation and modern infrastructure also makes cities more attractive to people.\n79. Describe the geography of your country? Well, China is a big country with a diverse geography. To the east, it has a long coastline along the Pacific Ocean. To the west, there are many towering mountains and plateaus. In the North, there are vast deserts like Gobi desert. In the south, there are subtropical regions with lush forests. The country also has many major rivers, like the Yangtze and the Yellow River, which are crucial for both agriculture and transportation.\n80. What some social issues does your country have? The first one is income inequality. China has experienced rapid economic growth, the wealth gap between urban and rural areas has widened, and many people come to cities for work often struggle to keep up with the development. Another challenge is the aging population, which puts pressure on the healthcare system and the workforce. Air pollution is also a significant issue, because it affects public health and quality of life.\n81-90 81. What are some global issues? One major issue is climate change. It\u0026rsquo;s leading to extreme weather events, like El Niño, and many places around the world are facing more frequent heatwaves, hurricanes, and flooding. Another issue is wealth inequality. Many countries in Africa face shortages of food and education, while developed Western nations have an abundance of food. The last is the ongoing conflicts and wars, such as those in Ukraine and Middle East.\n82. What can you do to make the world a better place to live? Well, personally, I try to reduce my carbon footprint by using public transportation more often. I believe the root of poverty is a lack of education, so supporting educational resources in underserved countries could help break the cycle of poverty. Lastly, spreading kindness and understanding, and encouraging others to do the same, can help create a more compassionate world for everyone.\n83. What\u0026rsquo;s the standard of living like in your country? Well, it depends on the areas. In metropolis like Beijing, Shanghai, and Shenzhen, the standard of living is higher, there are convenient transportation and high standard halthcare systems. Cities offer more job oppotunities and higher salaries. In contrast, rural areas tend to have a lower standard of living, there are fewer job opportunities and lower salaries, but the cost of living is also more affordable.\n84. How can you improve your quality of life? Well, I exercise regularly, when I need to unplug from life, I like to go for a jog outside. I eat really healthily and rarely have drunk food, may be once or twice a month. I also try to get enough sleep, usually around 7 to 9 hours a night. And before bed, I medidate for about 15 minutes to clear my mind. When I\u0026rsquo;m feeling stressd, I like to listen to instrumental music, like piano or violin.\n85. Describe where you would like to retire. I would like to live in Dali when I retire. It\u0026rsquo;s a beautiful and peaceful place in Yunnan Province. It\u0026rsquo;s surrounded by stunning natural scenery, there are a lot of lush mountains and waterfalls. The weather is mild year-round, making it a perfect spot for a comfortable retirement. Dali also has a rich cultural history, featuring ancient towns, temples, and vibrant local markets.\n86. Describe a famous place in your country. Well, one of the famous place in China is the Forbidden City, it\u0026rsquo;s located in Beijing. It was the imperial palace for over 500 years, it\u0026rsquo;s the home of Chinese emperors from the Ming to the Qing dynasties. The palace complex is massive, its architecture is an example of traditional Chinese design, there are beautiful wooden structures, golden roofs, and intricate carvings. Today, it\u0026rsquo;s a UNESCO World Heritage Site and a popular tourist destination, many visitors from all over the world come to Beijing to explore its rich history and cultural significance.\n87. Describe a place you often went to as a child. When I was a little boy, I often went to Dali, it\u0026rsquo;s a beautiful and peaceful place in Yunnan Province. It\u0026rsquo;s surrounded by stunning natural scenery, there are a lot of lush mountains and waterfalls. The weather is mild year-round and the air is quite fresh. Dali also has a rich cultural history, featuring ancient towns, temples, and vibrant local markets.\n88. Is the government doing enough to raise the standard of living? Yeah. the government has made significant efforts to raise the standard of living. Actually, the government has been building a high-speed rail line in my hometown recently, and there will likely be more investment in infrastructure and public services. It will be more convenient than before. Additionaly, the government also provides free health check-ups for the elderly. For those who with serious illnesses, the government covers part of medical expenses.\n89. How does a city shape who you are or become? Well, the pace of life in Shenzhen is fast, which has taught me to be adaptable and focused. There are people from all over the country, so I\u0026rsquo;m exposed to a variety of ideas and lifestyles, making me more open-minded.\n90. Which is more important, raising the standard of living or protecting the environment? Well, I think sustainable development would be more important. If we only focus on economic growth, it can lead to issues like pollution and resource depletion. If we balance both economic growth and enviomental protection, it will support a higher quality of life in the long run.\n91-100 91. What factors determine a country\u0026rsquo;s standard of living? One key factor is the economic situation, including GDP and income levels, as these affect people\u0026rsquo;s purchasing power. Access to high-quality healthcare and education systems is also crucial. Infrastructure, such as public transportation and communication networks, makes people\u0026rsquo;s lives more convenient. Environmental factors like air quality, clean water, and green spaces also have a significant impact on people\u0026rsquo;s satisfaction.\n92. What role does the UN play? The UN plays a key role in maintaining international peace, promoting human rights, and fostering global cooperation. The key responsibilities are mediating conflicts and working to prevent wars. It also addresses global challenges such as poverty, climate change, and health crises.\n93. Do you think the world becoming smaller? Yeah, I think the world is becoming smaller. With advancements in technology, it\u0026rsquo;s easier than ever to connect with people from all over the world. Actually, when I was preparing for my IELTS exam, I practiced my spoken English with people from various countries. I made some friends from places like Vietnam, Bangladesh, Russia, Japan, and Malaysia.\n94. What are the major differences between your country and other nations? Well, China places a strong emphasis on collectivism, where family and community are highly valued, but many western countries focus more on individualism. China is a large and diverse country, it has various regional cuisines, and when we sit down to eat, we commonly share food, but other countries like the U.S., typically don\u0026rsquo;t have the tradition of sharing food.\n95. What can you learn from other countries and cultures? Well, actually, I’ve been learning about Japan recently. The Japanese are very dedicated to their work and have a strong respect for nature. The streets are always clean, and people are known for being friendly and polite. Japanese also embraces minimalism and organization, they enjoy simple and focused life.\n96. How have cities in your country developed since your parents were young? Well, back then, my city was smaller, with limited infreastructure and fewer modern amenities. Over the years, the city has developed rapidly, there are high-speed rail, subways, and buses, making daily life more convenient. Modern buildings have replaced old houses, and there are many shopping malls and entertainment centers.\n97. What will cities be like in the future? In the future, cities will become smarter. Public transportation will be controlled by AI, with autonomous cars, unmanned aerial vehicles, and even flying taxis. Buildings will become more eco-friendly, featuring green roofs and integrated renewable energy sources.\n98. What is the cause of urbanisation? I think the cause of urbanization is driven by the desire for a better life. People tend to move to urban areas to find a better job and make more money. Additionaly, the convenient transportation and high standard healthcare service also attract people to the urban area. Over time, the urban area expand to accommodate the growing population, leading to further urbanization.\n99. What is the downside of urbanisation? One issue of urbanization is overpopulation, which puts excessive pressure on resources like housing, transportation, and healthcare. Another concern is environmental degradation, as growing traffic can lead to air pollution. Additionally, inefficient housing can result in the loss of green spaces. Urbanization also create social inequality, widening the gap between the rich and the poor.\n100. How is overpopulation caused? I think the key factor behind overpopulation is migration. Many people from all over the country come to cities for work, as cities offer more job opportunities and higher salaries. Additionally, the convenient transportation and high standard healthcare seivices also attract people to cities, which can lead to overpopulation.\n","permalink":"https://signalyu.github.io/posts/3-humanities/languages/speaking/english/2-english-speaking-ielts-1-100/","summary":"1-10 1. Do you work or do you study? I currently working. I finished my studies four years ago. So I\u0026rsquo;m currently working as a software engineer.\n2. Where do you currently work? I currently work in Shenzhen. I came in Shenzhen two years ago. I worked previously in Guangzhou where I completed my education.\n3. Why did you choose that carrer? Well, actually. I have a bachelor\u0026rsquo;s degree in economics.","title":"English Speaking: IELTS (1-100)"},{"content":"2024 Be cautious in both speech and action.\nFirst things first.\nAvoid living a life of suffering.\nOpportunity favors the prepared mind.\nFocus on your own matters, respect others\u0026rsquo; choices, and live in harmony with destiny.\nLife is the process of cultivating your soul.\nThink first, act later.\nSpeak less of what\u0026rsquo;s unnecessary, do less of what\u0026rsquo;s pointless, and waste less energy on what\u0026rsquo;s unimportant.\nIn times of peace, prepare for challenges.\nHope for the best, but always plan for the unexpected.\nLess is more.\n2025 If you don\u0026rsquo;t think clearly, you won\u0026rsquo;t write clearly.\n","permalink":"https://signalyu.github.io/posts/3-humanities/personal-growth/collections/1-mottos-and-quotes/","summary":"2024 Be cautious in both speech and action.\nFirst things first.\nAvoid living a life of suffering.\nOpportunity favors the prepared mind.\nFocus on your own matters, respect others\u0026rsquo; choices, and live in harmony with destiny.\nLife is the process of cultivating your soul.\nThink first, act later.\nSpeak less of what\u0026rsquo;s unnecessary, do less of what\u0026rsquo;s pointless, and waste less energy on what\u0026rsquo;s unimportant.\nIn times of peace, prepare for challenges.","title":"Mottos \u0026 Quotes"},{"content":"JSX JSX (JavaScript XML) is a syntax extension for JavaScript commonly used in React to describe what the UI should look like.\nSHOW CODE React import './App.css' const welcome = { greeting: 'Hey', title: 'React' }; function getName(name) { return name; } function App() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{welcome.greeting} {welcome.title}!\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;I am {getName('Signal')}!\u0026lt;/h1\u0026gt; \u0026lt;label htmlFor=\u0026quot;search\u0026quot;\u0026gt;Search: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026quot;search\u0026quot; type=\u0026quot;text\u0026quot;\u0026gt;\u0026lt;/input\u0026gt; \u0026lt;/div\u0026gt; ) } export default App List Rendering Rendering a List in React is a common task when dealing with dynamic or repeated data. This typically involves using the map() function. Providing a unique key prop for each rendered item is crucial to avoid unexpected behavior. For static content, the item\u0026rsquo;s index can be used as a key. To enhance redability, it is recommended to move complex inline logic to a seperate function.\nSHOW CODE React import React from \u0026quot;react\u0026quot;; const App = () =\u0026gt; { const users = [ { id: 1, name: \u0026quot;Alice\u0026quot;, age: 25 }, { id: 2, name: \u0026quot;Bob\u0026quot;, age: 30 }, { id: 3, name: \u0026quot;Charlie\u0026quot;, age: 35 }, ]; return ( \u0026lt;ul\u0026gt; {users.map((user) =\u0026gt; ( \u0026lt;li key={user.id}\u0026gt; {user.name} - Age: {user.age} \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; ); }; export default App; Event Handlers In React, event handlers are used to manage user interactions, such as clicks, input changes, or form submissions.\nSHOW CODE React const Example = () =\u0026gt; { const handleClick = () =\u0026gt; { console.log('Clicked'); }; return \u0026lt;button onClick={handleClick}\u0026gt;Click Me\u0026lt;/button\u0026gt;; }; const handleClick = (id) =\u0026gt; { console.log(`Button ${id} clicked`); }; \u0026lt;button onClick={() =\u0026gt; handleClick(1)}\u0026gt;Click Me\u0026lt;/button\u0026gt;; const handleSubmit = (e) =\u0026gt; { e.preventDefault(); console.log('Form submitted'); }; \u0026lt;form onSubmit={handleSubmit}\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt;; Props In React, props (short for properties) are used to pass data from a parent component to a child component. Props are immutable, meaning they cannot be modified by child components. The data flow in React is unidirectional, meaning a praent component can pass data down to its child component, but data cannot flow in the reverse direction.\nSHOW CODE React function ParentComponent() { return \u0026lt;ChildComponent message=\u0026quot;Hello, World!\u0026quot; /\u0026gt;; } function ChildComponent(props) { return \u0026lt;h1\u0026gt;{props.message}\u0026lt;/h1\u0026gt;; } function ChildComponent({ message }) { return \u0026lt;h1\u0026gt;{message}\u0026lt;/h1\u0026gt;; } State In React, state is a built-in object that enables a component to manage its own data. Unlike props, which are immutable, state is mutable, meaning it can be modified by the component itself. State is local to the component, allowing each component to have its own state. When the state changes, React triggers a re-render of the component to update the UI. In functional compoennts, state is typically managed using the useState hook, which takes an initial state value as a parameter and returns an array containing the current state and a function to update the state.\nSHOW CODE React import React, { useState } from 'react'; function Counter() { // Declare a state variable named \u0026quot;count\u0026quot; with an initial value of 0 const [count, setCount] = useState(0); // Function to increment the count const increment = () =\u0026gt; { setCount(count + 1); }; return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Count: {count}\u0026lt;/p\u0026gt; \u0026lt;button onClick={increment}\u0026gt;Increment\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } export default Counter; ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/framework-and-tools/framework/front-end/react/1-react-notes/","summary":"JSX JSX (JavaScript XML) is a syntax extension for JavaScript commonly used in React to describe what the UI should look like.\nSHOW CODE React import './App.css' const welcome = { greeting: 'Hey', title: 'React' }; function getName(name) { return name; } function App() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{welcome.greeting} {welcome.title}!\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;I am {getName('Signal')}!\u0026lt;/h1\u0026gt; \u0026lt;label htmlFor=\u0026quot;search\u0026quot;\u0026gt;Search: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026quot;search\u0026quot; type=\u0026quot;text\u0026quot;\u0026gt;\u0026lt;/input\u0026gt; \u0026lt;/div\u0026gt; ) } export default App List Rendering Rendering a List in React is a common task when dealing with dynamic or repeated data.","title":"React Notes"},{"content":"Core Concepts Loose Coupling Loose Coupling is a design principle that aims to reduce the dependencies between components within a system.\nInversion of Control (IoC) Inversion of Control is a design principle where the control of object creation and lifecycle management is transferred from the application code to an external container or framework.\nDependency Injection (DI) Dependency Injection is a design pattern commonly used in object-oriented programming, where the dependecies of a class are provided externally rather than being created within the class itself.\nBeans Beans are objects that are managed by the Spring framework.\nContainer A Spring Container is responsible for managing the life cycle, configuration, and dependencies injection of the beans in a Spring Application.\nLife Cycle of Beans Beans are objects that are managed by the Spring framework. Bean Definition includes configuration meta data required by the Spring container to create and manage the bean. Bean Configurations can be provided in various way, including XML configuration files, annotations, and Java-based configuration. Bean Instantiation $\\rightarrow$ Population of Properties $\\rightarrow$ Initialization $\\rightarrow$ Ready for Use $\\rightarrow$ Destruction The Difference between instantiation and initiation?\nInstantiation occurs when a new keyword is used to create an object. It focus on constructing the object\u0026rsquo;s structure and allocating memory. In contrast, initialization focus on assigning values to the object\u0026rsquo;s fields and setting up its initial state after instantiation.\nConstructor Injection \u0026amp; Setter Injection \u0026amp; Field Injection Constructor Injection Constructor Injection in Spring is a type of dependency injection where the Spring framework provides the required dependency to a class by invoking its constructor. Since dependencies are supplied via the constructor, they cannot be changed after object creation \u0026ndash; promoting immutability. However, this approach may cause circular dependency issues if two or more beans depend on each other in a circular manner.\nSHOW CODE Java @Component public class ServiceA { private final RepositoryA repositoryA; // Constructor injection @Autowired public ServiceA(RepositoryA repositoryA) { this.repositoryA = repositoryA; } } Setter Injection Setter Injection in Spring is a form of dependency injection where the Spring framework injects dependencies into a bean by calling the bean\u0026rsquo;s setter method. This approach is flexible and commonly used to inject optional dependencies or when the dependency might change after the object is initialized.\nSHOW CODE Java @Component public class ServiceB { private RepositoryB repositoryB; // Setter injection @Autowired public void setRepositoryB(RepositoryB repositoryB) { this.repositoryB = repositoryB; } } Field Injection Field Injection in Spring is a form of dependency injection where the Spring framework directly injects dependencies into a class\u0026rsquo;s fields. Like constructor injection, the dependencies remain immutable after being injected. Under the hood. Spring uses reflection to assign values to private fields.\nSHOW CODE Java @Component public class ServiceC { @Autowired private RepositoryC repositoryC; public void performAction() { repositoryC.doSomething(); } } @Component \u0026amp; @ComponentScan The @Component annotation in Spring is used to mark a class as spring-managed bean, allowing Spring to detect and register it as a bean in the application context. The @ComponentScan annotation is used to specify base packages that Spring should scan for @Component-annotated during configuration.\nSHOW CODE Java package com.example.myapp @Component public class MyService { public void performTask() { System.out.println(\"Task performed!\"); } } @Configuration @ComponentScan(basePackages = \"com.example.myapp\") public class AppConfig { } @Value \u0026amp; @Autowired \u0026amp; @Qualifier @Value The @Value annotation is used to inject values into fields, mathod parameters, and constructor arguments.\nSHOW CODE Java // Injects literal values @Value(\"Hello, World!\") private String message; // Injects from a properties file app.name=MySpringApp @Value(\"${app.name}\") private String appName; // Injects default values @Value(\"${app.version:1.0.0}\") private String appVersion; // Injects expression @Value(\"#{T(java.lang.Math).random() * 100}\") private double randomValue; @Autowired The @Autowired annotation is used for automatic dependency injection. It allows Spring resolve and inject the required bean into a class automatically by type.\nSHOW CODE Java // Field Injection @Component public class ServiceA { @Autowired private RepositoryA repositoryA; public void performTask() { repositoryA.doSomething(); } } // Setter Injection @Component public class ServiceB { private RepositoryB repositoryB; @Autowired public void setRepositoryB(RepositoryB repositoryB) { this.repositoryB = repositoryB; } } // Constructor Injection @Component public class ServiceB { private RepositoryB repositoryB; @Autowired public void setRepositoryB(RepositoryB repositoryB) { this.repositoryB = repositoryB; } } @Qualifier The @Qualifier annotation in Spring is used for resolve ambiguities when multiple beans of the same type are available in the application context.\nSHOW CODE Java @Component(\"repositoryImpl1\") public class RepositoryImpl1 implements Repository {} @Component(\"repositoryImpl2\") public class RepositoryImpl2 implements Repository {} @Component public class Service { @Autowired @Qualifier(\"repositoryImpl2\") private Repository repository; } Components of Spring Boot Spring Boot Starter: Simplifies dependency management by building commonly used dependencies, reducing the need for manual configuration.\nAuto Configuration: Automatically configures Spring Boot application beans and settings based on the libraries on the classpath, eliminating the need for extensive configuration in application.properties or XML files.\nSpring Boot Atuator: Provides production-ready features like monitoring, metrics, and health checks to ensure better application insights and management.\nEmbedded Server: Includes servers like Tomcat and Jetty, allowing applications to run as standalone programs, simplifying development and deployment.\nSpring Boot DevTools: A collection of tools that enhance the development experience by enabling features like hot reload and live reload for faster feedback.\nSpring Boot Auto Configuration Spring Boot looks for classes annotated with @Configuration and examines the dependencies in the classpath. The @Configuration annotation triggers the logic that looks for @Bean declarations within the class and registers those beans to be managed by the Spring container.\nIn a Spring Boot application, the main method typically calls the SpringApplication.run() method. This method takes the main application class (e.g., XXXApplication.class) as a parameter. The XXXAplication class is annotated with @SpringBootApplication which includes three key annotations: @SpringBootConfiguration, @EnableAutoConfiguration, and @ComponentScan.\n@SpringBootConfiguration is an alias for @Configurition. It indicates that the class contains Spring bean definitions, and Spring Boot will scan it for @Bean declarations.\n@EnableAutoConfiguration annotation tells Spring Boot to enable its auto-configuration mechanism. It looks for the file AutoConfiguration.imports inside the spring-boot-autoconfigure.jar dependency, which lists auto-configuration classes. Spring Boot automatically imports and executes every class that has the AutoConfiguration name at the end of the class name.\n# META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration org.springframework.boot.autoconfigure.aop.AopAutoConfiguration org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration ... @ComponentScan annotation tells Spring Boot to scan for Spring components (such as @Component, @Service, @Repository, etc.) in the specified packages or the entire classpath. By default, it scans from the package of the class that contains the annotation. To specify a different base package, the basePackages parameter can be set, like this:\n@ComponentScan(basePackages = {\u0026#34;com.mycompany\u0026#34;}) Common Annotations @Component vs. @Bean The @Component annotation is applied to a class to mark it as a bean managed by the Spring container. There are several specialized variants of this annotation: @Controller (for web controllers), @Service (for service layer components), and @Repository (for DAO layer components). In contrast, the @Bean annotation is used to mark a method within a class annotated with @Configuration, indicating that the method should return an object to be managed by the Spring container. This apporpach provides more control over bean creation and configuration, allowing for more explicit customization of the bean.\nSHOW CODE Java // Spring will detect UserService during classpath // scanning and manage it as a bean. @Component public class UserService { public String getUser() { return \"User\"; } } @Configuration public class AppConfig { @Bean public UserService userService() { // Explicitly creating and returning the bean return new UserService(); } } @ResposeBody The @ResponseBody annotation in Spring is used to indicate that a method\u0026rsquo;s return value should be written directly to the HTTP response body, rather than being treated as a view name, which is the default behavior in traditional Spring MVC controllers. The return value is automatically serialized into a format like JSON or XML, typically using Jackson, depending on the request\u0026rsquo;s Accept header.\nSHOW CODE Java @Controller public class MyRestController { @RequestMapping(\"/user\") @ResponseBody public User getUser() { return new User(\"John\", \"Doe\"); } } public class User { private String firstName; private String lastName; // Constructor, getters, and setters } In the above code, the User object will be automatically serialized into JSON format by Jackson when returned from the getUser() method. The @ResponseBody annotation ensures that the method\u0026rsquo;s return value is written directly to the HTTP response body, and Jackson handles the conversion to JSON.\n@Controller vs. @RestController The @Controller annotation is used to declare a class as a controller in Spring MVC. By default, methods within a @Controller-annotated class return a view name (e.g., home.jsp). If a method needs to return a value directly (such as JSON or XML), it should be annotated with @ResponseBody. In contrast, the @RestController annotation is a specialized version of @Controller used to define a controller for RESTful web services. It combines @Controller and @ResponseBody, meaning that the methods in a RestController-annotated class automatically return values written directly to the HTTP response body. This response is typically serialized into JSON or XML format by Jackson.\nSHOW CODE Java @Controller public class WebController { @RequestMapping(\"/home\") public String home() { return \"home\"; // returns home.jsp } } @Controller public class MyController { @RequestMapping(\"/greeting\") @ResponseBody public String greeting() { return \"Hello, World!\"; // The return value is written directly to the response body } } @RestController public class UserController { @RequestMapping(\"/api/user\") public User getUser() { return new User(\"Alice\", \"Smith\"); } } public class User { private String firstName; private String lastName; // Constructor, getters, and setters } @RequestBody, @RequestParam, @PathVariable The @RequestBody annotation is used to bind the body of an HTTP request to a method parameter. It is typically used with HTTP methods like POST, PUT, or PATCH to send data in formats such as JSON or XML. Spring automatically deserializes the request body into an obejct using a message converter, liek Jakson.\nSHOW CODE Java @RestController public class UserController { @PostMapping(\"/user\") public ResponseEntity\u0026lt;String\u0026gt; createUser(@RequestBody User user) { // User is automatically deserialized from the JSON request body return ResponseEntity.ok(\"User created: \" + user.getName()); } } The @RequestParam annotation binds a query parameter or form data to a method parameter. It is commonly used in GET or POST requests to retrive single query parameters. The annotation has optional attributes such as required (to specify if the parameter is mandatory) and defaultValue (to provide a default value when the parameter is absent).\nSHOW CODE Java @RestController public class SearchController { @GetMapping(\"/search\") public ResponseEntity\u0026lt;String\u0026gt; search(@RequestParam String query, @RequestParam(defaultValue = \"10\") int limit) { // query: the search term from the query string // limit: the number of results (defaults to 10 if not provided) return ResponseEntity.ok(\"Searching for: \" + query + \", Limit: \" + limit); } } The @PathVariable annotation binds a URL path variable to a method parameter, commonly used in RESTful web service to capture dynamic segments in the URL. For example, int the URL /user/{id}, the {id} part is dynamic, and the value of {id} will be extracted and passed to the method parameter.\nSHOW CODE Java @RestController public class UserController { // Regular expression to match both with and without the path variable @GetMapping(\"/user/{id:[a-zA-Z0-9]*}\") public ResponseEntity\u0026lt;String\u0026gt; getUser(@PathVariable(required = false) String id) { if (id == null) { return ResponseEntity.ok(\"Default User\"); } return ResponseEntity.ok(\"User ID: \" + id); } } Transformation between Object and Spring In Spring Boot, the transformation between objects and JSON is handled by the Jackson library which allows for easy serialization (converting an object to JSON) and deserialization (converting JSON to an object).\nSHOW CODE Java // When a controller returns an object, Spring Boot automatically // converts it to JSON @RestController public class UserController { @GetMapping(\"/user\") public User getUser() { return new User(1, \"John Doe\", \"john.doe@example.com\"); } } // When accessed via /user, the response is: { \"id\": 1, \"name\": \"John Doe\", \"email\": \"john.doe@example.com\" } // Spring Boot automatically converts the incoming JSON data into // an object when the object is a parameter in the controller method. @RestController public class UserController { @PostMapping(\"/user\") public String createUser(@RequestBody User user) { return \"User \" + user.getName() + \" created!\"; } } // Input JOSN: { \"id\": 2, \"name\": \"Jane Doe\", \"email\": \"jane.doe@example.com\" } ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/framework-and-tools/framework/backend/spring/1-spring-notes/","summary":"Core Concepts Loose Coupling Loose Coupling is a design principle that aims to reduce the dependencies between components within a system.\nInversion of Control (IoC) Inversion of Control is a design principle where the control of object creation and lifecycle management is transferred from the application code to an external container or framework.\nDependency Injection (DI) Dependency Injection is a design pattern commonly used in object-oriented programming, where the dependecies of a class are provided externally rather than being created within the class itself.","title":"Spring Notes"},{"content":"Virtual DOM A Virtual DOM is a lightweight, in-memory representation of the real DOM. Each Node in the Virtual DOM is represented as a plain JavaScript object with properties describing the element, its attributes, and its children. The Virtual DOM will be updated whenever an application\u0026rsquo;s state changes. It minimizes real DOM updates by batching changes and applying them through an optimized process. --- title: Virtual DOM --- graph TD B[\"\\{tag: 'div'\\}\"] B --\u003e C[\"\\{tag: 'div'\\}\"] B --\u003e D[\"\\{tag: 'div'\\}\"] B --\u003e E[\"\\{tag: 'div'\\}\"] C --\u003e F[\"\\{tag: 'ul'\\}\"] D --\u003e G[\"\\{tag: 'button'\\}\"] E --\u003e H[\"\\{tag: 'text'\\}\"] E --\u003e I[\"\\{tag: 'p'\\}\"] SHOW CODE Virtual DOM Node const vnode = { tag: 'div', // The HTML tag data: { id: 'container', class: 'main' }, // Attributes and properties children: [ { tag: 'p', data: { class: 'text' }, children: ['Hello, Virtual DOM!'], // Text content as a child }, { tag: 'button', data: { onClick: handleClick }, children: ['Click Me'], // Text content inside the button }, ], }; Data Binding The v-bind directive in Vue provides one-way data binding, allows dynamically binding an element\u0026rsquo;s attribute or property to a JavaScript expression. The shorthand for v-bind is a single colon (:).\nSHOW CODE Vue \u0026lt;!-- Full Syntax --\u0026gt; \u0026lt;div v-bind:attribute=\u0026quot;expression\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- Shorthand Syntax --\u0026gt; \u0026lt;div :attribute=\u0026quot;expression\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;img v-bind=\u0026quot;image\u0026quot; /\u0026gt; const app = Vue.createApp({ data() { return { image: { src: \u0026quot;image.jpg\u0026quot;, alt: \u0026quot;A beautiful image\u0026quot;, class: { cat: isVisible, image: !isVisible, } }, isVisible: true }; } }); app.mount('#app'); The v-model directive in Vue is used to create two-way data binding between input form elements and the component\u0026rsquo;s data. Modifiers such as trim and number can be applied to enhance its functionality. When the input data changes, the corresponding component data updates automatically.\nSHOW CODE Vue \u0026lt;input v-model.number=\u0026quot;age\u0026quot; /\u0026gt; \u0026lt;input v-model.trim=\u0026quot;username\u0026quot; /\u0026gt; \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt; \u0026lt;input v-model=\u0026quot;name\u0026quot; placeholder=\u0026quot;Enter your name\u0026quot; /\u0026gt; \u0026lt;p\u0026gt;Hello, {{ name }}!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const app = Vue.createApp({ data() { return { name: \u0026quot;\u0026quot; }; } }); app.mount('#app'); \u0026lt;/script\u0026gt; Iterate over Collections The v-for directive in Vue is used to iterate over collections such as arrays or objects in JavaScript. It is crucial that the value assigned to the key attribute is both unique and type of string or number. The key attribute allows Vue to efficently update the DOM by tracking each item, ensuring predictable behavior when the underlying data changes.\nSHOW CODE Vue \u0026lt;li v-for=\u0026quot;(item, index) in items\u0026quot; :key=\u0026quot;index\u0026quot;\u0026gt; {{ index + 1 }}. {{ item }} \u0026lt;/li\u0026gt; data() { return { items: [\u0026quot;Apple\u0026quot;, \u0026quot;Banana\u0026quot;, \u0026quot;Cherry\u0026quot;] }; } \u0026lt;li v-for=\u0026quot;(value, key) in user\u0026quot; :key=\u0026quot;key\u0026quot;\u0026gt; {{ key }}: {{ value }} \u0026lt;/li\u0026gt; data() { return { user: { name: \u0026quot;John\u0026quot;, age: 30, location: \u0026quot;USA\u0026quot; } }; } A common approach to ensure uniqueness is to assign a UUID value to the key attribute.\nAdding Event Listeners to Elements The v-on directive in Vue is used to add event listeners to elements. It listens for DOM events and executes the specified JavaScript function. The shorthand syntax for v-on is @. Vue also provides modifiers like .stop and .prevent to simplify handling common event-related tasks.\nSHOW CODE Vue \u0026lt;!-- Full syntax --\u0026gt; \u0026lt;button v-on:click=\u0026quot;handleClick\u0026quot;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;!-- Shorthand syntax --\u0026gt; \u0026lt;button @click=\u0026quot;handleClick\u0026quot;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026quot;handleClick('Hello')\u0026quot;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; export default { methods: { handleClick(message) { console.log(message); // Outputs: Hello } } } \u0026lt;/script\u0026gt; \u0026lt;button @click=\u0026quot;handleClick($event)\u0026quot;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; export default { methods: { handleClick(event) { console.log(event.target); // Logs the clicked element } } } \u0026lt;/script\u0026gt; \u0026lt;!-- Prevent default behavior --\u0026gt; \u0026lt;form @submit.prevent=\u0026quot;handleSubmit\u0026quot;\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;!-- keyboard-specific events --\u0026gt; \u0026lt;input @keydown.enter=\u0026quot;submitForm\u0026quot; placeholder=\u0026quot;Press Enter to Submit\u0026quot; /\u0026gt; Event Propagation: The DOM follows a tree-like structure. Events propagate in three phases: starting from the top-most element (document) during the capture phase, moving down to the target element, where the target phase occurs and any associated JavaScript code is executed (if defined), and then propagating back up during the bubbling phase. By default, event listeners in JavaScript and Vue operate in the bubbling phase. However, switching to the capture phase is possible by using the .capture modifier.\nSHOW CODE Vue \u0026lt;button @click.capture=\u0026quot;handleClick\u0026quot;\u0026gt;Click Me\u0026lt;/button\u0026gt; Conditional Rendering Conditional rendering in Vue is typically achieved using the v-if, v-else-if, v-else, and v-show directives. The v-if directive controls the visibility of an element by conditionally mounting or unmounting it from the DOM. The v-else-if and v-else directives are used alongside v-if to create more complex conditional redering logic. In contrast, the v-show directive is useful in scenarios where elements need to be toggled frequently. It works by toggling the CSS display property, meaning the element remains in the DOM even when the condition is false, but its visibility is controlled via CSS.\nSHOW CODE Vue \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt; \u0026lt;p v-if=\u0026quot;isVisible\u0026quot;\u0026gt;This is visible!\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026quot;toggleVisibility\u0026quot;\u0026gt;Toggle Visibility\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt; \u0026lt;p v-if=\u0026quot;status === 'success'\u0026quot;\u0026gt;Success!\u0026lt;/p\u0026gt; \u0026lt;p v-else-if=\u0026quot;status === 'loading'\u0026quot;\u0026gt;Loading...\u0026lt;/p\u0026gt; \u0026lt;p v-else\u0026gt;Something went wrong.\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026quot;changeStatus\u0026quot;\u0026gt;Change Status\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt; \u0026lt;p v-show=\u0026quot;isVisible\u0026quot;\u0026gt;This is visible!\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026quot;toggleVisibility\u0026quot;\u0026gt;Toggle Visibility\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; v-html The v-html directive is used to bind raw HTML to an element, enabling dynamic rendering of content. It is particularly useful for rendering rich text, such as HTML elements like \u0026lt;strong or \u0026lt;a\u0026gt;. However, using this directive can introduce security risks, as it allows untrusted content or malicoious code (including JavaScript within \u0026lt;script\u0026gt; tags) to be injected into the DOM, making the application vulnerable to XSS (Cross-Site Scripting) attacks. Therefore, it is essential to sanitize any dynamic HTML content before binding it with v-html to prevent such vulnerabilities.\nSHOW CODE Vue \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p v-html=\u0026quot;content\u0026quot;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { content: '\u0026lt;a href=\u0026quot;https://example.com\u0026quot;\u0026gt;Click here\u0026lt;/a\u0026gt; to visit our site.' }; } } \u0026lt;/script\u0026gt; v-text The v-text directive is used to display plain text by binding a value to an element\u0026rsquo;s text content. Unlike v-html, it escapes any HTML tags and renders the content as plain text. It is useful for text placeholders, as the predefined placeholder text will be replaced once the component has finished loading.\nSHOW CODE Vue \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p v-text=\u0026quot;message\u0026quot;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { message: 'Hello, \u0026lt;strong\u0026gt;Vue\u0026lt;/strong\u0026gt;!' }; } } \u0026lt;/script\u0026gt; SHOW OUTPUT Output \u0026lt;p\u0026gt;Hello, \u0026lt;strong\u0026gt;Vue\u0026lt;/strong\u0026gt;!\u0026lt;/p\u0026gt; SHOW CODE Vue \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p v-text=\u0026quot;message\u0026quot;\u0026gt;Placeholder Text\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { message: 'Hello, Vue!' }; } } \u0026lt;/script\u0026gt; The above code will render the application displaying Placeholder Text and will eventually replace it with Hello, Vue! received from message.\nv-once The v-once directive is used to render an element or a component only once. After the initial render, Vue will skip re-rendering it, even if its reactive data changes. This directive is useful for displaying static content, such as headers or footers, that do not change after the initial render.\nSHOW CODE Vue \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt; \u0026lt;h1 v-once\u0026gt;This header is static and won't re-render\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ message }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026quot;changeMessage\u0026quot;\u0026gt;Change Message\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Vue({ el: '#app', data: { message: 'Hello, Vue!' }, methods: { changeMessage() { this.message = 'Message changed!'; } } }); \u0026lt;/script\u0026gt; v-memo The v-memo directive, introduced in Vue 3, optimizes the rendering of DOM elements by memoizing their output based on specified dependencies. When the dependencies remain unchanged, the element will not be re-rendered, improving performance by avoiding unnecessary updates.\nSHOW CODE Vue \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt; \u0026lt;p v-memo=\u0026quot;[message]\u0026quot;\u0026gt;{{ message }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026quot;changeMessage\u0026quot;\u0026gt;Change Message\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Vue({ el: '#app', data: { message: 'Hello, Vue!' }, methods: { changeMessage() { this.message = 'Message changed!'; } } }); \u0026lt;/script\u0026gt; In the above code, \u0026lt;p\u0026gt; tag will not re-rendered unless the message changes.\nRegistering a Global Component In Vue, registering a global component allows it to be used across all instances without needing to import it every time. To register a global component, follow these steps:\nDefine the component – Create the component as a standalone file. Register the component – In the main.js or main.ts file, use app.component to globally register the component. Use the component – After registration, the component can be used in any Vue instance within the application without needing to import it again. SHOW CODE Vue \u0026lt;!-- Define the Component --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello from MyComponent!\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: 'MyComponent' } \u0026lt;/script\u0026gt; \u0026lt;!-- Register the component globally --\u0026gt; import { createApp } from 'vue' import App from './App.vue' import MyComponent from './components/MyComponent.vue' const app = createApp(App) // Register MyComponent globally app.component('MyComponent', MyComponent) app.mount('#app') \u0026lt;!-- Use the global component in any template --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;MyComponent /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: 'AnotherComponent' } \u0026lt;/script\u0026gt; ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/framework-and-tools/framework/front-end/vue/1-vue-notes/","summary":"Virtual DOM A Virtual DOM is a lightweight, in-memory representation of the real DOM. Each Node in the Virtual DOM is represented as a plain JavaScript object with properties describing the element, its attributes, and its children. The Virtual DOM will be updated whenever an application\u0026rsquo;s state changes. It minimizes real DOM updates by batching changes and applying them through an optimized process. --- title: Virtual DOM --- graph TD B[\"","title":"Vue Notes"},{"content":"Enum In Java, an enum (short for \u0026ldquo;enumeration\u0026rdquo;) is used to define a collection of constants, such as days of the week or months of the year. An enum provides a type-safe way to handle constant values, and it can be used in a switch statement or for comparison using ==. Compared to a final constant in Java, an enum can contain fields, methods, and constructors. The values() method is used to retrive all the constants in an enum, and the valueOf() method is used to convert a string into an enum constant.\nSHOW CODE Java enum Day { SUNDAY(1), MONDAY(2), TUESDAY(3), WEDNESDA(4), THURSDAY(5), FRIDAY(6), SATURDAY(7); private final int dayNum; Day(int dayNum) { this.dayNum = dayNum; } public int getDayNum() { return dayNum; } public static Day fromNumber(int num) { for (Day day : Day.values()) { if (day.getDayNum() == num) { return day; } } throw new IllegalArgumentException(\"Invalid day number: \" + num); } @Override public String toString() { return name() + \"(\" + dayNum + \")\"; } } public class Solution { public static void main(String[] args) { for (Day d : Day.values()) { System.out.print(d + \"\\t\"); } System.out.println(\"\\n\" + Day.fromNumber(1)); // System.out.println(Day.fromNumber(8)); // Converts a string to enum constant System.out.println(Day.valueOf(\"MONDAY\")); } } Generics In Java, Generics is a mechanism that allows writing classes, interfaces, and methods with type parameters, often represented by T, E, K, and V, and allows calling them with different type parameters. It provides strong type safety checks at compile time, enhances code reusability, and eliminates the need for casting.\nBasic Generics SHOW CODE Java interface Pair { K getKey(); V getValue(); } class SimplePair\u0026lt;K,V\u0026gt; implements Pair\u0026lt;K,V\u0026gt; { private final K key; private final V value; public SimplePair(K key, V value) { this.key = key; this.value = value; } @Override public K getKey() { return key; } @Override public V getValue() { return value; } @Override public String toString() { return \"(\" + key + \",\" + value + \")\"; } } public class Main { public static void main(String[] args) { SimplePair\u0026lt;String, Integer\u0026gt; pair = new SimplePair\u0026lt;\u0026gt;(\"Signal\", 27); System.out.println(\"pair = \" + pair); String key = pair.getKey(); System.out.println(\"key = \" + key); Integer value = pair.getValue(); System.out.println(\"value = \" + value); } } Bounded Type Parameters Bounded Type Parameters in Java allow restricting the range of types when writing generic code. It can be categorized into four types: Upper Bounded Type, Lower Bounded Type, Unbounded Type, and Multiple Bounds.\nUpper Bounded Type In Java, Upper Bounded Wildcards are used to define upper bounded types. The syntax for an upper bounded wildcard is \u0026lt;T extends SomeClassOrInterface\u0026gt;, which indicates that the argument type T must be a subclass of SomeClassOrInterface or SomeClassOrInterface itself.\nSHOW CODE Java import java.util.List; public class Main { // Method that accepts a list of elements that are of type Number or its subclasses public static void printNumbers(List\u0026lt;? extends Number\u0026gt; list) { for (Number number : list) { System.out.println(number); } } public static void main(String[] args) { List\u0026lt;Integer\u0026gt; intList = List.of(1, 2, 3, 4); List\u0026lt;Double\u0026gt; doubleList = List.of(1.1, 2.2, 3.3); printNumbers(intList); // Valid, Integer is a subclass of Number printNumbers(doubleList); // Valid, Double is a subclass of Number } } Lower Bounded Type In Java, Lower Bounded Wildcards are used to define lower bounded types. The syntax for a lower bounded wildcard is \u0026lt;T super SomeClassOrInterface\u0026gt;, which indicates that the argument type T must be a super class of SomeClassOrInterface or SomeClassOrInterface itself.\nSHOW CODE Java import java.util.ArrayList; import java.util.List; // Custom class Person class Person { String name; Person(String name) { this.name = name; } @Override public String toString() { return \"Person{name='\" + name + \"'}\"; } } // Subclass Employee extends Person class Employee extends Person { double salary; Employee(String name, double salary) { super(name); this.salary = salary; } @Override public String toString() { return \"Employee{name='\" + name + \"', salary=\" + salary + \"}\"; } } public class Main { // Method that accepts a list of Person or its superclasses (e.g., Object) // This method can add Employee objects to the list. public static void addEmployees(List\u0026lt;? super Employee\u0026gt; list) { list.add(new Employee(\"Alice\", 50000)); list.add(new Employee(\"Bob\", 60000)); list.add(new Employee(\"Charlie\", 70000)); } public static void main(String[] args) { // Create a list of Person, which is a superclass of Employee List\u0026lt;Person\u0026gt; personList = new ArrayList\u0026lt;\u0026gt;(); // Add Employee objects to the personList using the addEmployees method addEmployees(personList); // Print the list to see the added Employee objects for (Person person : personList) { System.out.println(person); } } } SHOW OUTPUT Output Employee{name='Alice', salary=50000.0} Employee{name='Bob', salary=60000.0} Employee{name='Charlie', salary=70000.0} Unbounded Type In Java, the Unbounded Type is represented by using the unbounded wildcard ?, which indicates that no restrictions are placed on the type of an argument passed to the method. It is commonly used when passing a collection of elements to a method where the specific type of the elements is not important. With an unbounded wildcard, elements can be read but cannot be added to the collection (except null) inside the methods.\nSHOW CODE Java import java.util.ArrayList; import java.util.List; class Person { private String name; private int age; public Person(String name, int age) { this.name = name; this.age = age; } @Override public String toString() { return \"Person(\" + name + \", \" + age + \")\"; } } public class Main { public static void printList(List\u0026lt;?\u0026gt; list) { // Iterate over the list and print each element list.add(null); // list.add(1); for (Object element : list) { System.out.println(element); } } public static void main(String[] args) { // Create lists of different types List\u0026lt;String\u0026gt; stringList = new ArrayList\u0026lt;\u0026gt;(); stringList.add(\"Hello\"); stringList.add(\"World\"); List\u0026lt;Integer\u0026gt; intList = new ArrayList\u0026lt;\u0026gt;(); intList.add(10); intList.add(20); List\u0026lt;Object\u0026gt; objectList = new ArrayList\u0026lt;\u0026gt;(); objectList.add(\"Some String\"); objectList.add(100); objectList.add(1.1); objectList.add('a'); objectList.add(true); objectList.add(new Person(\"Signal\", 18)); objectList.add(null); // Call the printList method for each list System.out.println(\"String List:\"); printList(stringList); // Works with List\u0026lt;String\u0026gt; System.out.println(\"\\nInteger List:\"); printList(intList); // Works with List\u0026lt;Integer\u0026gt; System.out.println(\"\\nObject List:\"); printList(objectList); // Works with List\u0026lt;Object\u0026gt; } } SHOW OUTPUT Output String List: Hello World Integer List: 10 20 Object List: Some String 100 1.1 a true Person(Signal, 18) null null Multiple Bounds In Java, a Multiple Bounds constraint allows the argument type T passed to a method to extend multiple types or implement multiple interfaces. This is commonly achieved using the \u0026amp; operator. The syntax for multiple bounds is \u0026lt;T extends classType \u0026amp; Interface1 \u0026amp; Interface2\u0026gt;, indicating that the argument type T must extend the class classType and implement both Interface1 and Interface2.\nSHOW CODE Java // Interface 1 interface CanFly { void fly(); } // Interface 2 interface CanSwim { void swim(); } // A base class for animals class Animal { String name; Animal(String name) { this.name = name; } } // Class that implements both interfaces class Duck extends Animal implements CanFly, CanSwim { Duck(String name) { super(name); } @Override public void fly() { System.out.println(name + \" is flying.\"); } @Override public void swim() { System.out.println(name + \" is swimming.\"); } } // A class that uses multiple bounds in its type parameter class AnimalAction\u0026lt;T extends Animal \u0026 CanFly \u0026 CanSwim\u0026gt; { T animal; AnimalAction(T animal) { this.animal = animal; } void performActions() { animal.fly(); animal.swim(); } } public class Main { public static void main(String[] args) { // Create a Duck object Duck duck = new Duck(\"Dodo\"); // Create an AnimalAction object for Duck, which extends Animal and implements CanFly and CanSwim AnimalAction\u0026ltDuck\u0026gt; action = new AnimalAction\u0026lt;\u0026gt;(duck); // Perform actions on the Duck action.performActions(); } } Reflection Reflection in Java is a feature that allows inspecting and manipulating the properties or behaviors of classes, methods, fields, and constructors at runtime. It is commonly used to examine class information, access private methods and fields, invoke methods dynamically, and create objects dynamically using the Java Reflection API. The Java Reflection API is provided by the java.lang.reflect package and the java.lang.Class class. Some of the key classes and methods in this API include:\nClass: Represents the class of an object and provides methods like getName(), getDeclaredMethods(), getDeclaredFields(), and others to examine the class\u0026rsquo;s metadata. Method: Represents a method of a class and allows invoking it dynamically using methods like invoke(). Field: Represents a field (variable) in a class and allows accessing or modifying its value dynamically. Constructor: Represents a constructor in a class and allows creating new instances dynamically using methods like newInstance(). SHOW CODE Java package dev.signalyu.warmup; import java.lang.reflect.*; class Person { private String name; private int age; public Person(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } private void sayHello() { System.out.println(\"Hello, \" + name); } @Override public String toString() { return \"Person{\" + \"name='\" + name + '\\'' + \", age=\" + age + '}'; } } public class Main { public static void main(String[] args) throws Exception { // Create a new Person object Person person = new Person(\"John\", 30); // Get the Class object associated with the Person class Class\u003c?\u003e clazz = person.getClass(); // Get class name System.out.println(\"Class name: \" + clazz.getName()); // Get declared methods Method[] methods = clazz.getDeclaredMethods(); for (Method method : methods) { System.out.println(\"Method: \" + method.getName()); } // Get declared fields Field[] fields = clazz.getDeclaredFields(); for (Field field : fields) { System.out.println(\"Field: \" + field.getName()); } // Accessing a private field via reflection Field field = clazz.getDeclaredField(\"name\"); field.setAccessible(true); // Make the private field accessible System.out.printf(\"Private field: 'name'=%s\\n\", field.get(person)); // Get the 'sayHello' method Method method = clazz.getDeclaredMethod(\"sayHello\"); // Make the private method accessible method.setAccessible(true); // Invoke the method on the 'person' object method.invoke(person); // Dynamically load the Person class Class\u003c?\u003e clazz2 = Class.forName(\"dev.signalyu.warmup.Person\"); // Get the constructor that takes a String argument Constructor\u003c?\u003e constructor = clazz2.getConstructor(String.class, int.class); // Create an instance of Person using reflection Person Signal = (Person) constructor.newInstance(\"Signal\", 18); System.out.println(\"Signal = \" + Signal); } } SHOW OUTPUT Output Class name: dev.signalyu.warmup.Person Method: getName Method: toString Method: setName Method: sayHello Method: getAge Field: name Field: age Private field: 'name'=John Hello, John Signal = Person{name='Signal', age=18} Annotations Annotations in Java are a form of metadata used to provide additional information that does not directly affect the execution of the code. They are commonly used to convey instructions to the compiler (such as detecting errors or supressing warnings) or to support runtime processing. Annotations are prefixed with the @ symbol and can be applied to classes, methods, firlds, and other program elements.\nCommon meta annotations, such as @Target adn @Retension, are used to specify how and where an annotation can be applied. The @Target annotation defines the valid program elements for an annotation, including:\nElementType.TYPE: The annotation can be applied to a class or interface. ElementType.METHOD: The annotation can be applied to a method. ElementType.FIELD: The annotation can be applied to a field. The @Retention annotation specifies the lifespan of the annotation. Foe example, using @Retention(RetentionPolicy).RUNTIME indicates that the annotation is available at runtime for reflection.\nTo customize an annotation in Java, the first step is to define its basic structure using the @interface keyword. Elements (parameters) can be included in the annotation, with or without default values, depending on the requirements.\nNext, meta-annotation such as @Target and @Retention are added to specify where the annotation can be applied and how long it will be retained.\nOnce the annotation is defined, it can be applied according to the specified @Target (e.g., on methods, classes, or fields).\nThe final step is to define the logic for processing the annotation, typically achieved through reflection at runtime.\nSHOW CODE: Login Interception Login Interception @Getter public enum ResultCodeEnum { LOGIN_AUTH(208, \"Not logged in\"); private final int code; private final String message; ResultCodeEnum(int code, String message) { this.code = code; this.message = message; } } public class RedisConstant { /** * The prefix for user login keys in Redis. */ public static final String USER_LOGIN_KEY_PREFIX = \"user:login:\"; } public class AuthContextHolder { private static final ThreadLocal\u0026lt;Long\u0026gt; userId = new ThreadLocal\u0026lt;\u0026gt;(); /** * Sets the user ID in the thread-local context. * * @param _userId The user ID to set. */ public static void setUserId(Long _userId) { userId.set(_userId); } /** * Gets the user ID from the thread-local context. * * @return The current user ID. */ public static Long getUserId() { return userId.get(); } /** * Removes the user ID from the thread-local context. */ public static void removeUserId() { userId.remove(); } } @Target({ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Inherited @Documented public @interface AppLogin { /** * Indicates if login is required for the annotated method. * Default is true. */ boolean required() default true; } @Aspect @Component public class AppLoginAspect { @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; /** * Intercepts methods annotated with @AppLogin to enforce login validation. * * @param joinPoint The proceeding join point for the intercepted method. * @param appLogin The AppLogin annotation instance. * @return The result of the intercepted method execution. * @throws Throwable If an error occurs during method execution. */ @SneakyThrows @Around(\"execution(* com.atApp.tingshu.*.api.*.*(..)) \u0026\u0026 @annotation(appLogin)\") public Object loginAspect(ProceedingJoinPoint joinPoint, AppLogin appLogin) { // Extract the token from the request header String token = getTokenFromRequest(); // Check login status in Redis String loginKey = RedisConstant.USER_LOGIN_KEY_PREFIX + token; UserInfoVo userInfoVo = (UserInfoVo) redisTemplate.opsForValue().get(loginKey); // If login is required and user is not authenticated, throw exception if (appLogin.required() \u0026\u0026 userInfoVo == null) { throw new AppException(ResultCodeEnum.LOGIN_AUTH); } // If user is authenticated, set the user ID in the thread-local context if (userInfoVo != null) { AuthContextHolder.setUserId(userInfoVo.getId()); } try { // Proceed with the method execution return joinPoint.proceed(); } finally { // Ensure that user ID is cleared after the method execution AuthContextHolder.removeUserId(); } } /** * Extracts the token from the HTTP request header. * * @return The token string. */ private String getTokenFromRequest() { RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes(); ServletRequestAttributes servletRequestAttributes = (ServletRequestAttributes) requestAttributes; HttpServletRequest request = servletRequestAttributes.getRequest(); return request.getHeader(\"token\"); } } Serialization \u0026amp; Deserialization In Java, Serialization and Deserialzation are processes used to convert objects into a byte stream and restore them back into objects, respectively. These processes are essential for storing objects in files, transmitting them over a network, or preserving their state.\nSerialization involves converting an object into a byte stream. To serialize an object, its class must implement the java.io.Serializable interface, which is a marker interface without any methods. The ObjectOutputStream class is used to write the serialized object to a file or another output stream. A serialVersionUID is automatically generated if not explicitly defined, but it is recommended to provide one manually to ensure compatibility during deserialization. Fields marked as transcient are not serialized. Additionally, any objects regerenced by the serialized object are also serialized, provided they implement the Serializable interface.\nDeserialization is the process of reconstructing a serialized object back into a Java object. For deserialization to succeed, the class must be available in the classpath. This process is performed using the ObjectInputStream class, which reads the byte stream and restores the object to its original state.\nSHOW CODE Java import java.io.*; // Define a Serializable class class Person implements Serializable { private static final long serialVersionUID = 1L; // Ensures class compatibility during deserialization private String name; private int age; // Transient field will not be serialized private transient String password; public Person(String name, int age, String password) { this.name = name; this.age = age; this.password = password; } @Override public String toString() { return \"Person{name='\" + name + \"', age=\" + age + \", password='\" + password + \"'}\"; } } public class Main { public static void main(String[] args) { Person person = new Person(\"Signal Yu\", 18, \"securePassword\"); // Serialize the object try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"person.ser\"))) { oos.writeObject(person); System.out.println(\"Object serialized successfully.\"); } catch (IOException e) { e.printStackTrace(); } // Deserialize the object try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"person.ser\"))) { Person deserializedPerson = (Person) ois.readObject(); System.out.println(\"Deserialized object: \" + deserializedPerson); } catch (IOException | ClassNotFoundException e) { e.printStackTrace(); } } } SHOW OUTPUT Output Object serialized successfully. Deserialized object: Person{name='Signal Yu', age=18, password='null'} Lambda Expression Runnable SHOW CODE Java public class Test { public static void main(String[] args) { // Java 8 之前 Runnable runnable = new Runnable() { @Override public void run() { System.out.println(\"Inside Runnable 1\"); } }; new Thread(runnable).start(); // Java 8 - Lambda 语法 Runnable runnableLambda = () -\u003e {System.out.println(\"Inside Runnable 2\");}; new Thread(runnableLambda).start(); new Thread(() -\u003e System.out.println(\"Inside Runnable 3\")).start(); } } Comparator SHOW CODE Java public class Test { public static void main(String[] args) { // JAVA 8 之前 Comparator\u0026lt;Integer\u0026gt; comparator = new Comparator\u0026lt;Integer\u0026gt;() { @Override public int compare(Integer o1, Integer o2) { /** * o1 \u003c o2 -\u003e -1 * o1 == o2 -\u003e 0 * o1 \u003e o2 -\u003e 1 */ return o1.compareTo(o2); } }; System.out.println(comparator.compare(1, 2)); // -1 /** * JAVA 8 */ // Comparator\u0026lt;Integer\u0026gt; comparatorLambda1 = (Integer a, Integer b) -\u003e a.compareTo(b); Comparator\u0026lt;Integer\u0026gt; comparatorLambda1 = Comparator.naturalOrder(); System.out.println(comparatorLambda1.compare(1, 2)); // -1 // Comparator\u0026lt;Integer\u0026gt; comparatorLambda2 = (a, b) -\u003e b.compareTo(a); Comparator\u0026lt;Integer\u0026gt; comparatorLambda2 = Comparator.reverseOrder(); System.out.println(comparatorLambda2.compare(1, 2)); // 1 int[] nums = new int[]{2, 1, 4, 3}; System.out.println(\"nums = \" + Arrays.toString(nums)); Arrays.sort(nums); // 默认为升序排序 // 倒序排序 Integer[] newNums = Arrays.stream(nums).boxed().toArray(Integer[]::new); Arrays.sort(newNums, Comparator.reverseOrder()); } } Local Variables in Lambda Expression SHOW CODE Java public class Test { public static void main(String[] args) { /** * 1. The variable used in a lambda expression must be effectively final, * meaning its value cannot change after it has been assigned. * 2. A lambda captures the values of local variables, not the variables * themselves. * 3. Local variables in a lambda cannot have the same name as variables * in the enclosing scope to avoid shadowing. */ int num = 10; // effectively final Runnable r = () -\u003e System.out.println(num); r.run(); // Error: Variable num is already defined in the scope // Runnable r = () -\u003e { // int num = 20; // Compile-time error // System.out.println(num); // }; } } Functional Interface Consumer SHOW CODE Java import java.util.Arrays; import java.util.List; import java.util.function.Consumer; public class Test { public static void main(String[] args) { List\u0026lt;String\u0026gt; items = Arrays.asList(\"One\", \"Two\", \"Three\"); /** * Consumer 接收一个参数并执行一些操作，不返回结果 * Consumer 有 accept 和 andThen 两个方法 * accept 用于接收参数，andThen 用于链接多个 Consumer */ // 示例1：定义一个 Consumer，它将打印传入的字符串 Consumer\u0026lt;String\u0026gt; printConsumer = s -\u003e System.out.println(\"打印消息: \" + s); printConsumer.accept(\"Hello, World!\"); // 输出: 打印消息: Hello, World! // 示例 2：Consumer 链式操作 Consumer\u0026lt;String\u0026gt; printItem = item -\u003e System.out.print(\"打印: \" + item + \"\\t\"); Consumer\u0026lt;String\u0026gt; printLength = item -\u003e System.out.println(\"长度: \" + item.length()); Consumer\u0026lt;String\u0026gt; combined = printItem.andThen(printLength); // 将两个 Consumer 组合在一起 // 使用 forEach 遍历集合并执行组合操作 items.forEach(combined); // items.forEach(item -\u003e { // System.out.print(\"打印: \" + item + \"\\t\"); // System.out.println(\"长度: \" + item.length()); // }); } } BiConsumer SHOW CODE Java import java.util.Arrays; import java.util.List; import java.util.function.BiConsumer; // 定义 Student 记录类，包含学生的姓名和活动列表 record Student(String name, List\u0026lt;String\u0026gt; activities) { } //class Student { // private final String name; // private final List\u0026lt;String\u0026gt; activities; // // public Student(String name, List\u0026lt;String\u0026gt; activities) { // this.name = name; // this.activities = activities; // } // // public String getName() { // return name; // } // // public List\u0026lt;String\u0026gt; getActivities() { // return activities; // } //} class StudentDataBase { // 提供学生数据，返回一个包含多个学生的列表 public static List\u0026lt;Student\u0026gt; getAllStudents() { return Arrays.asList( new Student(\"Alice\", Arrays.asList(\"Swimming\", \"Basketball\")), new Student(\"Bob\", Arrays.asList(\"Cycling\", \"Chess\")), new Student(\"Charlie\", Arrays.asList(\"Running\", \"Reading\")) ); } } class Test { public static void main(String[] args) { /** * BiConsumer 适用于对两个参数执行操作，但不需要返回结果的场景。 */ // BiConsumer 接口用于处理学生姓名和活动列表 BiConsumer\u0026lt;\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; studentBiConsumer = (name, activities) -\u003e System.out.println(name + \" : \" + activities); // 获取学生列表 List\u0026lt;Student\u0026gt; students = StudentDataBase.getAllStudents(); // 使用 forEach 遍历每个学生对象并输出其姓名和活动列表 students.forEach(student -\u003e studentBiConsumer.accept(student.name(), student.activities())); } } Predicate SHOW CODE Java import java.util.Arrays; import java.util.List; import java.util.function.Predicate; class Test { public static void main(String[] args) { /* Predicate 用于测试输入对象是否满足某种条件，常用于过滤、条件判断等场景 Predicate 提供了 and, or 和 negate 三个默认方法 Predicate 提供了 isEqual 和 not (Java 11) 两个静态方法 */ // 示例 1: Predicate\u0026lt;Integer\u0026gt; isEven = num -\u003e num % 2 == 0; List\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6); List\u0026lt;Integer\u0026gt; evenNumbers = numbers.stream() .filter(isEven) .toList(); System.out.println(\"偶数: \" + evenNumbers); // 输出: 偶数: [2, 4, 6] // 示例 2: Predicate\u0026lt;Integer\u0026gt; isOdd = num -\u003e num % 2 == 0; Predicate\u0026lt;Integer\u0026gt; isGreaterThanFive = num -\u003e num \u003e 5; // 使用 and() 方法组合两个条件 Predicate\u0026lt;Integer\u0026gt; isOddAndGreaterThanFive = isOdd.and(isGreaterThanFive); System.out.println(isOddAndGreaterThanFive.test(7)); // 输出: true System.out.println(isOddAndGreaterThanFive.test(3)); // 输出: false // 示例 3 List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"Alice\"); // 使用 isEqual 和 not 来筛选出不等于 \"Alice\" 的名字 List\u0026lt;String\u0026gt; filteredNames = names.stream() .filter(Predicate.not(Predicate.isEqual(\"Alice\"))) .toList(); System.out.println(filteredNames); // Output: [Bob, Charlie] } } BiPredicate SHOW CODE Java import java.util.function.BiPredicate; class Test { public static void main(String[] args) { // BiPredicate 适合需要对两个参数进行测试或判断的情况 // 示例 1 BiPredicate\u0026lt;Integer, Integer\u0026gt; isSumGreaterThanTen = (a, b) -\u003e (a + b) \u003e 10; BiPredicate\u0026lt;Integer, Integer\u0026gt; isProductEven = (a, b) -\u003e (a * b) % 2 == 0; BiPredicate\u0026lt;Integer, Integer\u0026gt; combined = isSumGreaterThanTen.and(isProductEven); System.out.println(combined.test(5, 6)); // 输出: true，因为和大于10且乘积为偶数 System.out.println(combined.test(5, 5)); // 输出: false，因为乘积为奇数 } } Function SHOW CODE Java import java.util.function.Function; class Test { public static void main(String[] args) { /** * Function 接受一个参数并返回一个结果 * apply(T t)：对给定的参数执行函数操作并返回结果 * andThen()：在当前函数之后执行另一个函数 * compose()：在当前函数之前执行另一个函数 */ // 示例 1 Function\u0026lt;Integer, Integer\u0026gt; squareFunction = x -\u003e x * x; Integer result = squareFunction.apply(5); System.out.println(\"5 的平方是: \" + result); // 示例 2 Function\u0026lt;Integer, Integer\u0026gt; multiplyBy2 = x -\u003e x * 2; Function\u0026lt;Integer, Integer\u0026gt; add3 = x -\u003e x + 3; // 使用 andThen：先乘以 2，再加 3 Integer result1 = multiplyBy2.andThen(add3).apply(5); System.out.println(\"(5 * 2) + 3 的结果是: \" + result1); // 使用 compose：先加 3，再乘以 2 Integer result2 = multiplyBy2.compose(add3).apply(5); System.out.println(\"(5 + 3) * 2 的结果是: \" + result2); } } BiFunction SHOW CODE Java import java.util.function.BiFunction; class Test { public static void main(String[] args) { // BiFunction takes two arguments and returns a result BiFunction\u0026lt;Integer, Integer, Integer\u0026gt; sum = (a, b) -\u003e a + b; int result = sum.apply(5, 3); // Returns 8 System.out.println(\"Result: \" + result); } } Method Reference SHOW CODE Java import java.util.Arrays; import java.util.List; import java.util.function.Function; import java.util.function.Supplier; public class Test { public static void main(String[] args) { /** * Method reference is a shortcut for writing the lambda function */ // 示例 1 List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); // 使用 Lambda 表达式 names.stream().map(name -\u003e name.toUpperCase()).forEach(name -\u003e System.out.println(name)); // 使用Method Reference names.stream().map(String::toUpperCase).forEach(System.out::println); /** * 构造器引用是Method Reference的特例 * 用法如下： * () -\u003e new Person() \u003c--\u003e Person::new; * (name) -\u003e new Person() \u003c--\u003e Person::new; */ // 示例 2 // Using () -\u003e new Person() Supplier\u0026lt;Person\u0026gt; personSupplier = () -\u003e new Person(); Person p1 = personSupplier.get(); System.out.println(p1); // Output: Person{name='Default'} // Using Person::new Supplier\u0026lt;Person\u0026gt; personSupplierRef = Person::new; Person p2 = personSupplierRef.get(); System.out.println(p2); // Output: Person{name='Default'} // 示例 3 // Using (name) -\u003e new Person(name) Function\u0026lt;String, Person\u0026gt; personFunction = (name) -\u003e new Person(name); Person p3 = personFunction.apply(\"Alice\"); System.out.println(p3); // Output: Person{name='Alice'} // Using Person::new Function\u0026lt;String, Person\u0026gt; personFunctionRef = Person::new; Person p4 = personFunctionRef.apply(\"Bob\"); System.out.println(p4); // Output: Person{name='Bob'} } } class Person { private String name; // Default constructor public Person() { this.name = \"Default\"; } // Constructor with a parameter public Person(String name) { this.name = name; } @Override public String toString() { return \"Person{name='\" + name + \"'}\"; } } Stream API Introduction to Stream API A Stream is a sequence of elements designed for processing in a functional and sequential manner. Stream operations are lazy, meaning they are not executed until a terminal operation (e.g., collect, forEach, reduce, count) is invoked. Streams are immutable, allowing access to elements without modifying the source. Java provides two types of streams: stream (for sequential processing) and parallel stream (for concurrent processing).\nCollections V.S. Stream\nIn Java, Collections are data structures designed for storing and manipulating data, whereas Streams are a sequence of elements which enable functional-style operations on data. Collections allow data modification, whereas Streams provide read-only access to elements. Operations on Collections are executed eagerly, while Streams operations are lazy and only executed when a terminal operation is invoked. Collections can be reused multiple times, but Streams are single-use and cannot be reused after processing. Debugging Streams: the peek() method can be used to inspect the intermediate results during stream operations.\nArrays.asList(\u0026#34;hello\u0026#34;, \u0026#34;hi\u0026#34;).stream() .peek(System.out::println) .filter(s -\u0026gt; s.length() \u0026gt; 2) .peek(s -\u0026gt; System.out.println(\u0026#34;Filtered: \u0026#34; + s)) .map(String::toUpperCase) .peek(s -\u0026gt; System.out.println(\u0026#34;Mapped: \u0026#34; + s)) .collect(Collectors.toList()); hello Filtered: hello Mapped: HELLO hi flatMap The flatMap method is used to transform each element in a stream into another stream and then flatten the resulting streams into a single stream.\nSHOW CODE Java import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; public class Test { public static void main(String[] args) { List\u0026lt;List\u0026lt;String\u0026gt; nestedList = Arrays.asList( Arrays.asList(\"A\", \"B\"), Arrays.asList(\"C\", \"D\"), Arrays.asList(\"E\", \"F\") ); List\u0026lt;String\u0026gt; flattenedList = nestedList.stream() .flatMap(List::stream) // Flatten the nested lists .map(String::toLowerCase) // Convert each string to lowercase .collect(Collectors.toList()); System.out.println(flattenedList); // Output: [a, b, c, d, e, f] } } The map method transforms each element into another type, while the flatMap method transforms and flaten streams into a single stream.\ndistinct(), count(), sorted() The distinct() method eliminates duplicate elements from the stream. The count() method calculates the total number of elements in the stream. The sorted() method sorts the elements of the stream.\nSHOW CODE Java List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Alice\", \"Charlie\"); long count = names.stream() .distinct() // Optional: Count unique elements .count(); System.out.println(count); // Output: 3 List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); List\u0026lt;String\u0026gt; sortedByLength = names.stream() .sorted(Comparator.comparingInt(String::length)) .collect(Collectors.toList()); System.out.println(sortedByLength); // Output: [Bob, Alice, Charlie] reduce() The reduce() method in Java 8 Streams is a terminal operation used to combine elements in a stream into a single result by repeatedly applying a binary operator.\nSHOW CODE Java // Summing numbers List\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3, 4, 5); int sum = numbers.stream().reduce(0, Integer::sum); System.out.println(sum); // Output: 15 // Finding maximum values List\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3, 4, 5); int max = numbers.stream().reduce(Integer.MIN_VALUE, Integer::max); System.out.println(max); // Output: 5 // Concatenating Strings List\u0026lt;String\u0026gt; words = Arrays.asList(\"Java\", \"Stream\", \"Reduce\"); String concatenated = words.stream().reduce(\"\", String::concat); System.out.println(concatenated); // Output: JavaStreamReduce // Product of numbers List\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3, 4); int product = numbers.stream().reduce(1, (a, b) -\u003e a * b); System.out.println(product); // Output: 24 limit(), skip() The limit() method retrieves a specified number of elements from a stream. The skip() method discards the first specified number of elements in a stream.\nSHOW CODE Java List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"); List\u0026lt;String\u0026gt; paginatedNames = names.stream() .skip(2) // Skip the first 2 elements .limit(2) // Take the next 2 elements .collect(Collectors.toList()); System.out.println(paginatedNames); // Output: [Charlie, David] allMatch(), anyMatch(), noneMatch() The allMatch() method verifies if all elements in a stream satisfy the given predicate. The anyMatch() method determines if any element in the stream matches the specified predicate. The noneMatch() method confirms if no element in the stream matches the specified predicate.\nSHOW CODE Java List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); // Check if all names are longer than 3 characters boolean allLongNames = names.stream().allMatch(name -\u003e name.length() \u003e 3); System.out.println(allLongNames); // Output: true // Check if any name starts with 'A' boolean anyStartsWithA = names.stream().anyMatch(name -\u003e name.startsWith(\"A\")); System.out.println(anyStartsWithA); // Output: true // Check if no name is shorter than 3 characters boolean noneShortNames = names.stream().noneMatch(name -\u003e name.length() \u003c 3); System.out.println(noneShortNames); // Output: true findAny(), findFirst() The findAny() method retrieves an arbitrary element from a stream, particularly useful for parallel processing. The findFirst() method fetches the first element from a stream based on its encounter order.\nSHOW CODE Java List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); Optional\u0026lt;String\u0026gt; anyName = names.stream().findAny(); System.out.println(anyName.orElse(\"No names found\")); // Output: Alice (or any other element) List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); Optional\u0026lt;String\u0026gt; firstName = names.stream().findFirst(); System.out.println(firstName.orElse(\"No names found\")); // Output: Alice Factory Methods: Of(), generate(), iterate() Stream.of() is used to create a stream from a fixed set of elements.\nSHOW CODE Java import java.util.stream.Stream; public class Main { public static void main(String[] args) { Stream\u0026lt;String\u0026gt; stream = Stream.of(\"Apple\", \"Banana\", \"Cherry\"); stream.forEach(System.out::println); } } Stream.generate() method is used to create an infinite stream of elements generated by a Supplier.\nSHOW CODE Java import java.util.stream.Stream; public class Main { public static void main(String[] args) { Stream\u0026lt;String\u0026gt; infiniteStream = Stream.generate(() -\u003e \"Hello\"); infiniteStream.limit(5).forEach(System.out::println); } } Stream.iterate() is used to create an infinite stream by applying a function repeatedly to a seed value.\nSHOW CODE Java import java.util.Random; Stream\u0026lt;Integer\u0026gt; randomNumbers = Stream.generate(() -\u003e new Random().nextInt(100)); randomNumbers.limit(5).forEach(System.out::println); When working with infinite streams, such as those created by Stream.generate() or Stream.iterate(), always use operations like limit() to prevent infinite processing.\nTerminal Operations: joining(), counting(), mapping() The joining method is a terminal operation used to concatenate the elements of a stream into a single String. By default, the elements are joined without a delimiter, but a custom delimiter, prefix, and suffix can also be specified.\nSHOW CODE Java import java.util.*; import java.util.stream.Collectors; public class JoiningExample { public static void main(String[] args) { List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); // Simple joining String result1 = names.stream().collect(Collectors.joining()); System.out.println(result1); // AliceBobCharlie // Joining with a delimiter String result2 = names.stream().collect(Collectors.joining(\", \")); System.out.println(result2); // Alice, Bob, Charlie // Joining with delimiter, prefix, and suffix String result3 = names.stream().collect(Collectors.joining(\", \", \"[\", \"]\")); System.out.println(result3); // [Alice, Bob, Charlie] } } The counting() method is a terminal operation used to count the number of elements in a stream and return the count as a long.\nSHOW CODE Java import java.util.*; import java.util.stream.Collectors; public class CountingExample { public static void main(String[] args) { List\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3, 4, 5); // Counting the elements in the stream long count = numbers.stream().collect(Collectors.counting()); System.out.println(count); // 5 } } The mapping() method is an intermediate collector that applies a function to the elements of a stream before passing the transformed elements to another collector for final processing.\nSHOW CODE Java import java.util.*; import java.util.stream.Collectors; public class MappingExample { public static void main(String[] args) { List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); // Convert names to uppercase and join them String result = names.stream() .collect(Collectors.mapping(String::toUpperCase, Collectors.joining(\", \"))); System.out.println(result); // ALICE, BOB, CHARLIE } } Terminal Operations: minBy(), maxBy(), groupingBy() The minBy() collector finds the minimum element in a stream based on a specified Comparator and returns the result as an Optional.\nSHOW CODE Java Optional min = Stream.of(3, 5, 1, 2) .collect(Collectors.minBy(Comparator.naturalOrder())); System.out.println(min.orElse(-1)); // Output: 1 The maxBy() collector finds the maximum element in a stream based on a specified Comparator and returns the result as an Optional.\nSHOW CODE Java Optional max = Stream.of(3, 5, 1, 2) .collect(Collectors.maxBy(Comparator.naturalOrder())); System.out.println(max.orElse(-1)); // Output: 5 The groupingBy() collector groups the elements of a stream based on a classification function and returns the grouped data as a Map.\nSHOW CODE Java Map\u0026lt;Integer, List\u0026lt;String\u0026gt;\u0026gt; groupedByLength = Stream.of(\"cat\", \"dog\", \"bird\", \"fox\") .collect(Collectors.groupingBy(String::length)); System.out.println(groupedByLength); // Output: {3=[cat, dog, fox], 4=[bird]} Numeric Stream A Numeric Stream in Java is a specialized type of stream that operates specifically on numeric values. There are three types of numeric streams: IntStream, LongStream, and Double Stream, which handle int, long, and double values, respectively. Numeric streams eliminate the overhead of autoboxing and provide commonly used methods such as sum() and max() for performing operations on numeric data, making them more efficient compared to regular Stream types.\nSHOW CODE Java IntStream.range(1, 5).forEach(System.out::println); // Output: 1 2 3 4 IntStream.rangeClosed(1, 5).forEach(System.out::println); // Output: 1 2 3 4 5 long count = IntStream.range(1, 10).count(); System.out.println(count); // Output: 9 int sum = IntStream.range(1, 5).sum(); System.out.println(sum); // Output: 10 (1 + 2 + 3 + 4) OptionalInt max = IntStream.range(1, 5).max(); max.ifPresent(System.out::println); // Output: 4 OptionalInt min = IntStream.range(1, 5).min(); min.ifPresent(System.out::println); // Output: 1 OptionalDouble average = IntStream.range(1, 5).average(); average.ifPresent(System.out::println); // Output: 2.5 List\u0026lt;String\u0026gt; numbers = Arrays.asList(\"1\", \"2\", \"3\", \"4\"); IntStream intStream = numbers.stream().mapToInt(Integer::parseInt); intStream.forEach(System.out::println); // Output: 1, 2, 3, 4 List\u0026lt;String\u0026gt; numbers = Arrays.asList(\"1.1\", \"2.2\", \"3.3\", \"4.4\"); DoubleStream doubleStream = numbers.stream().mapToDouble(Double::parseDouble); doubleStream.forEach(System.out::println); // Output: 1.1, 2.2, 3.3, 4.4 List\u0026lt;String\u0026gt; numbers = Arrays.asList(\"10\", \"20\", \"30\", \"40\"); LongStream longStream = numbers.stream().mapToLong(Long::parseLong); longStream.forEach(System.out::println); // Output: 10, 20, 30, 40 IntStream intStream = IntStream.range(1, 5); Stream\u0026lt;String\u0026gt; stringStream = intStream.mapToObj(Integer::toString); stringStream.forEach(System.out::println); // Output: \"1\", \"2\", \"3\", \"4\" ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/programming/java/1-java-programming-notes/","summary":"Enum In Java, an enum (short for \u0026ldquo;enumeration\u0026rdquo;) is used to define a collection of constants, such as days of the week or months of the year. An enum provides a type-safe way to handle constant values, and it can be used in a switch statement or for comparison using ==. Compared to a final constant in Java, an enum can contain fields, methods, and constructors. The values() method is used to retrive all the constants in an enum, and the valueOf() method is used to convert a string into an enum constant.","title":"Java Programming Notes"}]