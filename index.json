[{"content":"1. Solid Principle 1.1 Single Responsibility Principle A class should have only one reason to change, meaning each class should focus on a single functionality or responsibility.\nSHOW CODE Single Responsibility Principle import java.io.IOException; import java.util.*; import java.util.regex.*; import com.fasterxml.jackson.databind.ObjectMapper; /** * 1. User class is only used to represent entity. * 2. UserValidator class is solely responsible for validating user objects. * 3. Store class is only used to manage user objects storage. * 4. UserPersistenceService class is dedicated to save the user data. * 5. UserController is solely used to handle incoming requests (in this case, creating users form JSON input). */ /* \u0026lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.fasterxml.jackson.core\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jackson-databind\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.18.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; */ /** * Represents a user with basic details. * User class is only used to represent entity. */ class User { private String name; private String email; private String address; public User() {} public User(String name, String email, String address) { this.name = name; this.email = email; this.address = address; } // Getters and setters public String getName() { return name; } public void setName(String name) { this.name = name; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } @Override public String toString() { return \"User [name=\" + name + \", email=\" + email + \", address=\" + address + \"]\"; } } /** * Handles incoming JSON requests that work on User. * UserController is solely used to handle incoming requests (in this case, creating users form JSON input). */ class UserController { private final UserPersistenceService persistenceService = new UserPersistenceService(); public String createUser(String userJson) throws IOException { ObjectMapper mapper = new ObjectMapper(); User user = mapper.readValue(userJson, User.class); UserValidator validator = new UserValidator(); if (!validator.validateUser(user)) { return \"ERROR\"; } persistenceService.saveUser(user); return \"SUCCESS\"; } } /** * Handles persistence of User objects. * UserPersistenceService class is dedicated to save the user data. */ class UserPersistenceService { private final Store store = new Store(); public void saveUser(User user) { store.store(user); } } /** * Validates User data. * UserValidator class is solely responsible for validating user objects. */ class UserValidator { public boolean validateUser(User user) { if (!isPresent(user.getName()) || !isValidAlphaNumeric(user.getName())) { return false; } user.setName(user.getName().trim()); user.setEmail(user.getEmail().trim()); return isValidEmail(user.getEmail()); } private boolean isPresent(String value) { return value != null \u0026\u0026 value.trim().length() \u003e 0; } private boolean isValidAlphaNumeric(String value) { Pattern pattern = Pattern.compile(\"[^A-Za-z0-9]\"); Matcher matcher = pattern.matcher(value); return !matcher.find(); } private boolean isValidEmail(String value) { Pattern pattern = Pattern.compile(\"^[\\\\w-\\\\.]+@[\\\\w-]+(\\\\.[\\\\w-]+)+$\"); Matcher matcher = pattern.matcher(value); return matcher.find(); } } /** * Stores User data in memory. * Store class is only used to manage user objects storage. */ class Store { private static final Map\u0026lt;String, User\u0026gt; STORAGE = new HashMap\u0026lt;\u0026gt;(); public void store(User user) { synchronized (STORAGE) { STORAGE.put(user.getName(), user); } } public User getUser(String name) { synchronized (STORAGE) { return STORAGE.get(name); } } } /** * Main class for demonstrating the Single Responsibility Principle. */ public class Main { private static final String VALID_USER_JSON = \"{\\\"name\\\": \\\"Signal\\\", \\\"email\\\": \\\"signalyu999@gmail.com\\\", \\\"address\\\":\\\"999 Sugar lane\\\"}\"; private static final String INVALID_USER_JSON = \"{\\\"name\\\": \\\"Sam\\\", \\\"email\\\": \\\"sam@email\\\", \\\"address\\\":\\\"111 Sugar lane\\\"}\"; public static void main(String[] args) throws IOException { UserController controller = new UserController(); String response = controller.createUser(VALID_USER_JSON); System.out.println(\"Valid JSON response: \" + response); response = controller.createUser(INVALID_USER_JSON); System.out.println(\"Invalid JSON response: \" + response); } } Each class in the above code strictly adheres to the Single Responsibility Principle by focusing on a specific responsibility:\nUser for representing the user entity UserController for request handling UserPersistenceService for data persistence UserValidator for user data validation Store for managing in-memory data storage --- title: Single Responsibility Principle - Class Diagram --- classDiagram class User { - String name - String email - String address + String toString() } class Store { + void store(User user) + User getUser(String name) } class UserPersistenceService { + void saveUser(User user) } class UserValidator { - boolean isPresent(String value) - boolean isValidAlphaNumeric(String value) - boolean isValidEmail(String value) + boolean validateUser(User user) } class UserController { + String createUser(String userJson) } class Main { + void main(String[] args) } User --* Store Store --* UserPersistenceService UserPersistenceService --* UserController UserController --\u003e UserValidator : create Main --\u003e UserController : create 1.2 Open-Closed Principle A software entity (class, module, function, etc.) should be open for extension but closed for modification.\n点击查看代码 Java import java.time.LocalDateTime; import java.util.*; // Abstract base class, closed for modification but open for extension abstract class Subscriber { protected Long subscriberId; protected String address; protected Long phoneNumber; protected int baseRate; // Getter and Setter methods public Long getSubscriberId() { return subscriberId; } public void setSubscriberId(Long subscriberId) { this.subscriberId = subscriberId; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public Long getPhoneNumber() { return phoneNumber; } public void setPhoneNumber(Long phoneNumber) { this.phoneNumber = phoneNumber; } public int getBaseRate() { return baseRate; } public void setBaseRate(int baseRate) { this.baseRate = baseRate; } // Abstract method to calculate the bill; implementation is defined in subclasses public abstract double calculateBill(); } // PhoneSubscriber class extends Subscriber, calculates the phone bill class PhoneSubscriber extends Subscriber { @Override public double calculateBill() { List\u0026lt;CallHistory.Call\u0026gt; calls = CallHistory.getCurrentCalls(subscriberId); long totalDuration = calls.stream().mapToLong(CallHistory.Call::getDuration).sum(); return (totalDuration * baseRate) / 100.0; } } // ISPSubscriber class extends Subscriber, calculates the internet bill class ISPSubscriber extends Subscriber { private long freeUsage; // Free usage limit in data units @Override public double calculateBill() { List\u0026lt;InternetSessionHistory.InternetSession\u0026gt; sessions = InternetSessionHistory.getCurrentSessions(subscriberId); long totalData = sessions.stream().mapToLong(InternetSessionHistory.InternetSession::getDataUsed).sum(); long chargeableData = totalData - freeUsage; return chargeableData \u003c= 0 ? 0 : (chargeableData * baseRate) / 100.0; } public long getFreeUsage() { return freeUsage; } public void setFreeUsage(long freeUsage) { this.freeUsage = freeUsage; } } // InternetSessionHistory class to manage internet usage records class InternetSessionHistory { public static class InternetSession { private final LocalDateTime begin; private final Long subscriberId; private final Long dataUsed; public InternetSession(Long subscriberId, LocalDateTime begin, long dataUsed) { this.subscriberId = subscriberId; this.begin = begin; this.dataUsed = dataUsed; } public LocalDateTime getBegin() { return begin; } public long getDataUsed() { return dataUsed; } public Long getSubscriberId() { return subscriberId; } } private static final Map\u0026lt;Long, List\u0026lt;InternetSession\u0026gt;\u0026gt; SESSIONS = new HashMap\u0026lt;\u0026gt;(); // Retrieves the current sessions for a subscriber, returns an empty list if none found public static synchronized List\u0026lt;InternetSession\u0026gt; getCurrentSessions(Long subscriberId) { return SESSIONS.getOrDefault(subscriberId, Collections.emptyList()); } // Adds a new internet session record for a subscriber public static synchronized void addSession(Long subscriberId, LocalDateTime begin, long dataUsed) { SESSIONS.computeIfAbsent(subscriberId, k -\u003e new LinkedList\u0026lt;\u0026gt;()).add(new InternetSession(subscriberId, begin, dataUsed)); } } // CallHistory class to manage call records class CallHistory { public static class Call { private final LocalDateTime begin; private final long duration; private final Long subscriberId; public Call(Long subscriberId, LocalDateTime begin, long duration) { this.subscriberId = subscriberId; this.begin = begin; this.duration = duration; } public LocalDateTime getBegin() { return begin; } public long getDuration() { return duration; } public Long getSubscriberId() { return subscriberId; } } private static final Map\u0026lt;Long, List\u0026lt;Call\u0026gt; CALLS = new HashMap\u0026lt;\u0026gt;(); // Retrieves the current calls for a subscriber, returns an empty list if none found public static synchronized List\u0026lt;Call\u0026gt; getCurrentCalls(Long subscriberId) { return CALLS.getOrDefault(subscriberId, Collections.emptyList()); } // Adds a new call record for a subscriber public static synchronized void addSession(Long subscriberId, LocalDateTime begin, long duration) { CALLS.computeIfAbsent(subscriberId, k -\u003e new LinkedList\u0026lt;\u0026gt;()).add(new Call(subscriberId, begin, duration)); } } public class Main { public static void main(String[] args) { // Initialize PhoneSubscriber and ISPSubscriber with sample data PhoneSubscriber phoneSubscriber = new PhoneSubscriber(); phoneSubscriber.setSubscriberId(1L); phoneSubscriber.setBaseRate(10); ISPSubscriber ispSubscriber = new ISPSubscriber(); ispSubscriber.setSubscriberId(2L); ispSubscriber.setBaseRate(5); ispSubscriber.setFreeUsage(1000); // Add call records for PhoneSubscriber CallHistory.addSession(1L, LocalDateTime.now().minusMinutes(5), 300); // 300 seconds call CallHistory.addSession(1L, LocalDateTime.now().minusMinutes(10), 600); // 600 seconds call // Calculate and print the phone subscriber's bill double phoneBill = phoneSubscriber.calculateBill(); System.out.println(\"Phone Subscriber's Bill: \" + phoneBill); // Add internet session records for ISPSubscriber InternetSessionHistory.addSession(2L, LocalDateTime.now().minusHours(1), 500); // 500 data units InternetSessionHistory.addSession(2L, LocalDateTime.now().minusHours(2), 800); // 800 data units // Calculate and print the ISP subscriber's bill double ispBill = ispSubscriber.calculateBill(); System.out.println(\"ISP Subscriber's Bill: \" + ispBill); } } The above code demonstrates the Open/Closed Principle (OCP) by separating the base Subscriber class from its specific implementations, PhoneSubscriber and ISPSubscriber, allowing for new functionalities to be added without modifying the existing code structure.\nClosed for Modification: The Subscriber base class is closed for modification. It defines common properties (like subscriberId, address, and baseRate) and an abstract calculateBill method that acts as a placeholder for billing logic. This base class remains unchanged even as new types of subscribers or billing strategies are introduced.\nOpen for Extension: The calculateBill method in Subscriber can be extended by subclasses, like PhoneSubscriber and ISPSubscriber, to implement custom billing calculations. Each subclass overrides calculateBill according to its unique billing requirements (e.g., PhoneSubscriber calculates based on call duration, while ISPSubscriber uses data usage with free data allowances). This enables additional subscriber types to be created without altering the base class or existing subclasses.\nFlexible to New Requirements: By following OCP, any new type of subscriber can be added—such as PremiumSubscriber or CorporateSubscriber—with its own billing logic without affecting the existing structure. This ensures that the core system remains stable, extensible, and easily maintainable as new features or subscriber types are introduced.\n--- title: Open Closed Principle - Class Diagram --- classDiagram class Subscriber { +Long subscriberId +String address +Long phoneNumber +int baseRate +double calculateBill() } class PhoneSubscriber { +double calculateBill() } class ISPSubscriber { +double calculateBill() +long freeUsage +void setFreeUsage(long freeUsage) +long getFreeUsage() } Subscriber \u003c|-- PhoneSubscriber Subscriber \u003c|-- ISPSubscriber 1.3 Liskov Substitution Principle Objects of a superclass should be replaceable with objects of a subclass without altering the correctness of the program.\nSHOW CODE: Violation of LSP Violation of LSP package dev.signalyu.solid.lsp; class Rectangle { private int width; private int height; public Rectangle(int width, int height) { this.width = width; this.height = height; } public int getWidth() { return width; } public void setWidth(int width) { this.width = width; } public int getHeight() { return height; } public void setHeight(int height) { this.height = height; } public int computeArea() { return width * height; } } class Square extends Rectangle { public Square(int side) { super(side, side); } @Override public void setWidth(int width) { setSide(width); } @Override public void setHeight(int height) { setSide(height); } public void setSide(int side) { super.setWidth(side); super.setHeight(side); } } public class Main { public static void main(String[] args) { Rectangle rectangle = new Rectangle(10, 20); System.out.println(rectangle.computeArea()); // 200 = 10 * 20 Square square = new Square(10); System.out.println(square.computeArea()); // 100 = 10 * 10 useRectangle(rectangle); System.out.println(rectangle.computeArea()); // 600 = 20 * 30 useRectangle(square); // Violates Liskov Substitution Principle System.out.println(square.computeArea()); // 900 = 30 * 30 } private static void useRectangle(Rectangle rectangle) { rectangle.setHeight(20); rectangle.setWidth(30); assert rectangle.getHeight() == 20 : \"Height Not equal to 20\"; assert rectangle.getWidth() == 30 : \"Width Not equal to 30\"; } } In the above code, the useRectangle method assumes that it can independently set the width and height of a Rectangle. However, when a Square (a subclass of Rectangle) object is passed to it, unexpected behavior will occur.\nSHOW CODE: After Refactoring After Refactoring package dev.signalyu.solid.lsp; interface Shape { int computeArea(); } class Rectangle implements Shape { private int width; private int height; public Rectangle(int width, int height) { this.width = width; this.height = height; } public int getWidth() { return width; } public void setWidth(int width) { this.width = width; } public int getHeight() { return height; } public void setHeight(int height) { this.height = height; } @Override public int computeArea() { return width * height; } } class Square implements Shape { private int side; public Square(int side) { this.side = side; } public void setSide(int side) { this.side = side; } public int getSide() { return side; } @Override public int computeArea() { return side * side; } } public class Main { public static void main(String[] args) { Rectangle rectangle = new Rectangle(10, 20); System.out.println(rectangle.computeArea()); Square square = new Square(10); System.out.println(square.computeArea()); useRectangle(rectangle); } private static void useRectangle(Rectangle rectangle) { rectangle.setHeight(20); rectangle.setWidth(30); assert rectangle.getHeight() == 20 : \"Height Not equal to 20\"; assert rectangle.getWidth() == 30 : \"Width Not equal to 30\"; } } After refactoring, the useRectangle method is now dedicated exclusively to the Rectangle class.\n1.4 Interface Segregation Principle No client should be forced to depend on methods it does not use.\nSHOW CODE: Violation of ISP Violation of ISP package dev.signalyu.solid.isp; import java.time.LocalDateTime; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.stream.Collectors; // Abstract Entity Class abstract class Entity { private Long id; public Long getId() { return id; } public void setId(Long id) { this.id = id; } } // Order Entity class Order extends Entity { private LocalDateTime orderPlacedOn; private double totalValue; public LocalDateTime getOrderPlacedOn() { return orderPlacedOn; } public void setOrderPlacedOn(LocalDateTime orderPlacedOn) { this.orderPlacedOn = orderPlacedOn; } public double getTotalValue() { return totalValue; } public void setTotalValue(double totalValue) { this.totalValue = totalValue; } } // User Entity class User extends Entity { private String name; private LocalDateTime lastLogin; public String getName() { return name; } public void setName(String name) { this.name = name; } public LocalDateTime getLastLogin() { return lastLogin; } public void setLastLogin(LocalDateTime lastLogin) { this.lastLogin = lastLogin; } } // Persistence Service Interface interface PersistenceService\u0026lt;T extends Entity\u0026gt; { void save(T entity); void delete(T entity); T findById(Long id); /** * ISP VIOLATION!!! * * Order entity doesn't have a name property and hence doesn't * need to implement the findByName method */ List\u0026lt;T\u0026gt; findByName(String name); } // User Persistence Service class UserPersistenceService implements PersistenceService\u0026lt;User\u0026gt; { private static final Map\u0026lt;Long, User\u0026gt; USERS = new HashMap\u0026lt;\u0026gt;(); @Override public void save(User entity) { synchronized (USERS) { USERS.put(entity.getId(), entity); } } @Override public void delete(User entity) { synchronized (USERS) { USERS.remove(entity.getId()); } } @Override public User findById(Long id) { synchronized (USERS) { return USERS.get(id); } } @Override public List findByName(String name) { synchronized (USERS) { return USERS.values().stream() .filter(u -\u003e u.getName().equalsIgnoreCase(name)) .collect(Collectors.toList()); } } } The above code violates the Interface Segregation Principle because the PersistenceService interface defines methods that are not applicable to all entities. For instance, the Order entity does not have a name property and therefore does not require the findByName method.\nSHOW CODE: After Refactoring After Refactoring import java.time.LocalDateTime; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.stream.Collectors; // Abstract Entity Class abstract class Entity { private Long id; public Long getId() { return id; } public void setId(Long id) { this.id = id; } } // User Entity class User extends Entity { private String name; private LocalDateTime lastLogin; public String getName() { return name; } public void setName(String name) { this.name = name; } public LocalDateTime getLastLogin() { return lastLogin; } public void setLastLogin(LocalDateTime lastLogin) { this.lastLogin = lastLogin; } } // Order Entity class Order extends Entity { private LocalDateTime orderPlacedOn; private double totalValue; public LocalDateTime getOrderPlacedOn() { return orderPlacedOn; } public void setOrderPlacedOn(LocalDateTime orderPlacedOn) { this.orderPlacedOn = orderPlacedOn; } public double getTotalValue() { return totalValue; } public void setTotalValue(double totalValue) { this.totalValue = totalValue; } } // Persistence Service Interface interface PersistenceService\u0026lt;T extends Entity\u0026gt; { void save(T entity); void delete(T entity); T findById(Long id); } // Order Persistence Service class OrderPersistenceService implements PersistenceService\u0026lt;Order\u0026gt; { private static final Map\u0026lt;Long, Order\u0026gt; ORDERS = new HashMap\u0026lt;\u0026gt;(); @Override public void save(Order entity) { synchronized (ORDERS) { ORDERS.put(entity.getId(), entity); } } @Override public void delete(Order entity) { synchronized (ORDERS) { ORDERS.remove(entity.getId()); } } @Override public Order findById(Long id) { synchronized (ORDERS) { return ORDERS.get(id); } } } // User Persistence Service class UserPersistenceService implements PersistenceService\u0026lt;User\u0026gt; { private static final Map\u0026lt;Long, User\u0026gt; USERS = new HashMap\u0026lt;\u0026gt;(); @Override public void save(User entity) { synchronized (USERS) { USERS.put(entity.getId(), entity); } } @Override public void delete(User entity) { synchronized (USERS) { USERS.remove(entity.getId()); } } @Override public User findById(Long id) { synchronized (USERS) { return USERS.get(id); } } public List findByName(String name) { synchronized (USERS) { return USERS.values().stream() .filter(u -\u003e u.getName().equalsIgnoreCase(name)) .collect(Collectors.toList()); } } } After refactoring, the PersistenceService interface includes only the generic methods (save, findById, and delete) that are applicable to all entities.\n1.5 Dependency Inversion Principle High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions\nSHOW CODE: Violation of DIP Violation of DIP package dev.signalyu.solid.dip; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.time.LocalDateTime; import java.time.ZoneId; // Common interface for classes formatting Message object interface Formatter { String format(Message message) throws FormatException; } // Thrown by formatter class FormatException extends IOException { public FormatException(Exception cause) { super(cause); } } // Formats message to JSON format class JSONFormatter implements Formatter { public String format(Message message) throws FormatException { ObjectMapper mapper = new ObjectMapper(); try { return mapper.writeValueAsString(message); } catch (JsonProcessingException e) { e.printStackTrace(); throw new FormatException(e); } } } // Message class with content and timestamp class Message { private String msg; private LocalDateTime timestamp; public Message(String msg) { this.msg = msg; this.timestamp = LocalDateTime.now(ZoneId.of(\"UTC\")); } public String getMsg() { return msg; } public LocalDateTime getTimestamp() { return timestamp; } } // Writes message to a file class MessagePrinter { /** * MessagePrinter directly instantiates the JSONFormatter object inside the * writeMessage method, which violates the Dependency Inversion Principle. */ public void writeMessage(Message msg, String fileName) throws IOException { Formatter formatter = new JSONFormatter(); // creates formatter try (PrintWriter writer = new PrintWriter(new FileWriter(fileName))) { // creates print writer writer.println(formatter.format(msg)); // formats and writes message writer.flush(); } } } // Main class public class Main { public static void main(String[] args) throws IOException { Message msg = new Message(\"This is a message again\"); MessagePrinter printer = new MessagePrinter(); printer.writeMessage(msg, \"test_msg.txt\"); } } In the above code, the MessagePrinter class directly instanitiates the JSONFormatter object inside the writeMessage method, which violates the Dependency Inversion Principle. This tight coupling means that if a new formatter, such as TextFormatter, needs to be added, the writeMessage method must be modified. This violates the Open-Closed Principle, which states that classes should be open for extension but closed for modification. According to the Dependency Inversion Principle, the high-level module (MessagePrinter) should not depend on the low-level module (JSONFormatter). Instead, both should depend on abstractions, such as the Formatter interface.\nSHOW CODE: After Refactoring After Refactoring import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule; import java.io.IOException; import java.io.PrintWriter; import java.time.LocalDateTime; import java.time.ZoneId; // Common interface for classes formatting Message objects interface Formatter { String format(Message message) throws FormatException; } // Custom exception thrown by Formatter class FormatException extends IOException { public FormatException(Exception cause) { super(cause); } } // Formats a Message object to JSON format class JSONFormatter implements Formatter { public String format(Message message) throws FormatException { ObjectMapper mapper = new ObjectMapper(); mapper.registerModule(new JavaTimeModule()); try { return mapper.writeValueAsString(message); } catch (JsonProcessingException e) { e.printStackTrace(); throw new FormatException(e); } } } // Represents a message with content and a timestamp class Message { private String msg; private LocalDateTime timestamp; public Message(String msg) { this.msg = msg; this.timestamp = LocalDateTime.now(ZoneId.of(\"UTC\")); } public String getMsg() { return msg; } public LocalDateTime getTimestamp() { return timestamp; } } // Responsible for writing a formatted Message to a file or output stream class MessagePrinter { public void writeMessage(Message msg, Formatter formatter, PrintWriter writer) throws IOException { writer.println(formatter.format(msg)); // Formats and writes the message writer.flush(); } } // Main class demonstrating functionality public class Main { public static void main(String[] args) throws IOException { Message msg = new Message(\"This is a message again\"); MessagePrinter printer = new MessagePrinter(); try (PrintWriter writer = new PrintWriter(System.out)) { // Writing to console output printer.writeMessage(msg, new JSONFormatter(), writer); } } } After refactoring, the MessagePrinter class now depends on the Formatter abstraction rather than its concrete implementations. This makes it easier to replace JSONFormatter with any other implementation of Formatter without modifying the existing code, adhering to the Open-Closed Principle.\n2. Creational Design Patterns Creational Design Patterns focus on the process of object creation, ensuring flexibility and promoting code reuse.\n2.1 Builder The Builder Design Pattern is a creational design pattern that enables the step-by-step construction of complex objects. It separates the construction process form the object\u0026rsquo;s representation, allowing the same process to produce different representations. This pattern is often used to build complex or immutable obejcts.\n❔❔❔ Same Construction Process Creates Different Representations:\nConsider building a meal in a fast-food restaurant, where the construction steps include:\nAdd a main dish (e.g., burger, sandwich, or pizza). Add a side dish (e.g., fries, salad, or breadsticks). Add a drink (e.g., soda, coffee, or juice). The construction process remains consistent: (main dish + side dish + drink). However, the final representation varies based on the choices:\nVeggie Meal: Sandwich + Salad + Juice. Classic Meal: Burger + Fries + Soda. Kids\u0026rsquo; Meal: Mini Pizza + Fries + Milk. --- title: UML Diagram of Builder Pattern --- classDiagram class Builder { +buildPartA() +buildPartB() +getResult() } class ConcreteBuilder1 { +buildPartA() +buildPartB() +getResult() } class ConcreteBuilder2 { +buildPartA() +buildPartB() +getResult() } class Director { +construct(builder: Builder) } class Product { +PartA +PartB } Builder \u003c|-- ConcreteBuilder1 Builder \u003c|-- ConcreteBuilder2 Director --\u003e Builder : uses ConcreteBuilder1 --\u003e Product : creates ConcreteBuilder2 --\u003e Product : creates ℹ️ In a context of design patterns, UML (Unified Modeling Language) is commonly used to represent the structure and behavior of the patterns in a clear and simple manner.\nSHOW CODE: Director Java import java.time.LocalDate; import java.time.Period; import java.util.Objects; // Address class class Address { private String houseNumber; private String street; private String city; private String zipcode; private String state; public Address(String houseNumber, String street, String city, String state, String zipcode) { this.houseNumber = houseNumber; this.street = street; this.city = city; this.state = state; this.zipcode = zipcode; } public String getFullAddress() { return houseNumber + \", \" + street + \"\\n\" + city + \"\\n\" + state + \" \" + zipcode; } } // User class class User { private String firstName; private String lastName; private LocalDate birthday; private Address address; public User(String firstName, String lastName, LocalDate birthday, Address address) { this.firstName = firstName; this.lastName = lastName; this.birthday = birthday; this.address = address; } public String getFirstName() { return firstName; } public String getLastName() { return lastName; } public LocalDate getBirthday() { return birthday; } public Address getAddress() { return address; } } // UserDTO interface interface UserDTO { String getName(); String getAddress(); String getAge(); } // UserWebDTO implementation class UserWebDTO implements UserDTO { private final String name; private final String address; private final String age; public UserWebDTO(String name, String address, String age) { this.name = name; this.address = address; this.age = age; } @Override public String getName() { return name; } @Override public String getAddress() { return address; } @Override public String getAge() { return age; } @Override public String toString() { return \"Name: \" + name + \"\\nAge: \" + age + \"\\nAddress:\\n\" + address; } } // UserDTOBuilder interface interface UserDTOBuilder { UserDTOBuilder withFirstName(String firstName); UserDTOBuilder withLastName(String lastName); UserDTOBuilder withBirthday(LocalDate birthday); UserDTOBuilder withAddress(Address address); UserDTO build(); } // Concrete builder class UserWebDTOBuilder implements UserDTOBuilder { private String firstName; private String lastName; private String age; private String address; @Override public UserDTOBuilder withFirstName(String firstName) { this.firstName = firstName; return this; } @Override public UserDTOBuilder withLastName(String lastName) { this.lastName = lastName; return this; } @Override public UserDTOBuilder withBirthday(LocalDate birthday) { if (Objects.nonNull(birthday)) { this.age = String.valueOf(Period.between(birthday, LocalDate.now()).getYears()); } return this; } @Override public UserDTOBuilder withAddress(Address address) { if (Objects.nonNull(address)) { this.address = address.getFullAddress(); } return this; } @Override public UserDTO build() { return new UserWebDTO(firstName + \" \" + lastName, address, age); } } // Client code (Director) public class Client { public static void main(String[] args) { User user = createUser(); UserDTOBuilder builder = new UserWebDTOBuilder(); UserDTO userDTO = buildUserDTO(builder, user); System.out.println(userDTO); } private static UserDTO buildUserDTO(UserDTOBuilder builder, User user) { return builder.withFirstName(user.getFirstName()) .withLastName(user.getLastName()) .withBirthday(user.getBirthday()) .withAddress(user.getAddress()) .build(); } private static User createUser() { Address address = new Address(\"100\", \"State Street\", \"Pawnee\", \"Indiana\", \"47998\"); return new User(\"Ron\", \"Swanson\", LocalDate.of(1960, 5, 6), address); } } SHOW CODE: Inner Builder Java import java.time.LocalDate; import java.time.Period; // Address class with Builder class Address { private final String houseNumber; private final String street; private final String city; private final String zipcode; private final String state; private Address(Builder builder) { this.houseNumber = builder.houseNumber; this.street = builder.street; this.city = builder.city; this.zipcode = builder.zipcode; this.state = builder.state; } public String getFullAddress() { return houseNumber + \", \" + street + \"\\n\" + city + \"\\n\" + state + \" \" + zipcode; } public static class Builder { private String houseNumber; private String street; private String city; private String zipcode; private String state; public Builder setHouseNumber(String houseNumber) { this.houseNumber = houseNumber; return this; } public Builder setStreet(String street) { this.street = street; return this; } public Builder setCity(String city) { this.city = city; return this; } public Builder setZipcode(String zipcode) { this.zipcode = zipcode; return this; } public Builder setState(String state) { this.state = state; return this; } public Address build() { return new Address(this); } } } // User class with Builder class User { private final String firstName; private final String lastName; private final LocalDate birthday; private final Address address; private User(Builder builder) { this.firstName = builder.firstName; this.lastName = builder.lastName; this.birthday = builder.birthday; this.address = builder.address; } public String getFirstName() { return firstName; } public String getLastName() { return lastName; } public LocalDate getBirthday() { return birthday; } public Address getAddress() { return address; } public static class Builder { private String firstName; private String lastName; private LocalDate birthday; private Address address; public Builder setFirstName(String firstName) { this.firstName = firstName; return this; } public Builder setLastName(String lastName) { this.lastName = lastName; return this; } public Builder setBirthday(LocalDate birthday) { this.birthday = birthday; return this; } public Builder setAddress(Address address) { this.address = address; return this; } public User build() { return new User(this); } } } // UserDTO interface interface UserDTO { String getName(); String getAddress(); String getAge(); } // UserWebDTO implementation class UserWebDTO implements UserDTO { private final String name; private final String address; private final String age; private UserWebDTO(Builder builder) { this.name = builder.name; this.address = builder.address; this.age = builder.age; } @Override public String getName() { return name; } @Override public String getAddress() { return address; } @Override public String getAge() { return age; } @Override public String toString() { return \"Name: \" + name + \"\\nAge: \" + age + \"\\nAddress:\\n\" + address; } public static class Builder { private String name; private String address; private String age; public Builder setName(String name) { this.name = name; return this; } public Builder setAddress(String address) { this.address = address; return this; } public Builder setAge(String age) { this.age = age; return this; } public UserWebDTO build() { return new UserWebDTO(this); } } } // Client code public class Client { public static void main(String[] args) { Address address = new Address.Builder() .setHouseNumber(\"100\") .setStreet(\"State Street\") .setCity(\"Pawnee\") .setState(\"Indiana\") .setZipcode(\"47998\") .build(); User user = new User.Builder() .setFirstName(\"Ron\") .setLastName(\"Swanson\") .setBirthday(LocalDate.of(1960, 5, 6)) .setAddress(address) .build(); UserWebDTO userDTO = new UserWebDTO.Builder() .setName(user.getFirstName() + \" \" + user.getLastName()) .setAddress(user.getAddress().getFullAddress()) .setAge(String.valueOf(Period.between(user.getBirthday(), LocalDate.now()).getYears())) .build(); System.out.println(userDTO); } } Summary Why builder pattern is capable of creating immutable objects?\nImplementing the builder as a static inner class facilitates the creation of immutable objects. The builder class has provileged access to the enclosing class\u0026rsquo;s internal state during the construction process. However, once the final object is built, it does not expose any setters or methods that modify its state, ensuring immutability.\nThe Director in the Builder Design Pattern is responsible for the construction process but is often not implemented as a standalone class. Instead, its responsibilities are typically handled by the client code or the consumer that requires the constructed object. This approach avoids the need for a separate director class, especially when the construction logic is simple or tailored to the client\u0026rsquo;s specific requirements.\nSHOW CODE: Without a Director Java UserDTO userDTO = new UserWebDTOBuilder() .withFirstName(\"John\") .withLastName(\"Doe\") .withBirthday(LocalDate.of(1990, 1, 1)) .withAddress(new Address(\"123\", \"Main St\", \"City\", \"State\", \"12345\")) .build(); SHOW CODE: With a Director Java public class Director { public UserDTO constructUser(UserDTOBuilder builder) { return builder.withFirstName(\"John\") .withLastName(\"Doe\") .withBirthday(LocalDate.of(1990, 1, 1)) .withAddress(new Address(\"123\", \"Main St\", \"City\", \"State\", \"12345\")) .build(); } } If a Product in the Builder Design Pattern is not part of an inheritance hierarchy, creating an abstract builder is unnecessary. The abstract builder is typically used to define method for mutiple types of builders. When there is only one type of product to construct, a concrete builder alone is sufficient to meet the requirements.\n2.2 Simple Factory The Simple Factory design pattern is a creational design pattern that delegates the responsibility of creating instances of different classes to a factory class, typically using a static method based on input parameters. This pattern centralizes object creation, simplifying the client code. However, it can violate the Open-Closed Principle (OCP), because adding a new product type requires modifying the factory class itself. This makes the code less flexible and harder to extend without altering existing source code.\nSHOW CODE Java import java.time.LocalDateTime; import java.time.LocalDate; // Abstract Post class public abstract class Post { private Long id; private String title; private String content; private LocalDateTime createdOn; private LocalDateTime publishedOn; public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getContent() { return content; } public void setContent(String content) { this.content = content; } public LocalDateTime getCreatedOn() { return createdOn; } public void setCreatedOn(LocalDateTime createdOn) { this.createdOn = createdOn; } public LocalDateTime getPublishedOn() { return publishedOn; } public void setPublishedOn(LocalDateTime publishedOn) { this.publishedOn = publishedOn; } } // BlogPost class extends Post public class BlogPost extends Post { private String author; private String[] tags; public String getAuthor() { return author; } public void setAuthor(String author) { this.author = author; } public String[] getTags() { return tags; } public void setTags(String[] tags) { this.tags = tags; } } // NewsPost class extends Post public class NewsPost extends Post { private String headline; private LocalDate newsTime; public String getHeadline() { return headline; } public void setHeadline(String headline) { this.headline = headline; } public LocalDate getNewsTime() { return newsTime; } public void setNewsTime(LocalDate newsTime) { this.newsTime = newsTime; } } // ProductPost class extends Post public class ProductPost extends Post { private String imageUrl; private String name; public String getImageUrl() { return imageUrl; } public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } public String getName() { return name; } public void setName(String name) { this.name = name; } } // PostFactory class to create different types of posts public class PostFactory { public static Post createPost(String type) { switch (type) { case \"blog\": return new BlogPost(); case \"news\": return new NewsPost(); case \"product\": return new ProductPost(); default: throw new IllegalArgumentException(\"Post type is unknown\"); } } } // Client class to demonstrate the usage of Simple Factory public class Client { public static void main(String[] args) { Post post = PostFactory.createPost(\"news\"); System.out.println(post.getClass().getSimpleName()); // Prints the type of the created post (NewsPost) } } classDiagram direction RL class Post { - Long id - String title - String content - LocalDateTime createdOn - LocalDateTime publishedOn + getId() + setId(Long) + getTitle() + setTitle(String) + getContent() + setContent(String) + getCreatedOn() + setCreatedOn(LocalDateTime) + getPublishedOn() + setPublishedOn(LocalDateTime) } class BlogPost { - String author - String[] tags + getAuthor() + setAuthor(String) + getTags() + setTags(String[]) } class NewsPost { - String headline - LocalDate newsTime + getHeadline() + setHeadline(String) + getNewsTime() + setNewsTime(LocalDate) } class ProductPost { - String imageUrl - String name + getImageUrl() + setImageUrl(String) + getName() + setName(String) } class PostFactory { + createPost(String) } Post \u003c|-- BlogPost Post \u003c|-- NewsPost Post \u003c|-- ProductPost PostFactory --|\u003e BlogPost : creates PostFactory --|\u003e NewsPost : creates PostFactory --|\u003e ProductPost : creates The above code violates the Open-Closed Principle because when adding a new post type, such as EventPost, to the factory, the code must be modified by adding a new case statement, like the following:\ncase \u0026#34;event\u0026#34;: return new EventPost(); This approach breaks the OCP, which dictates that entities should be open for extension but closed for modification.\n2.3 Factory Method The Factory Method design pattern is a creational pattern that provides a method for creating objects in a superclass, while allowing subclasses to determine the type of object that will be created. This approach delegates the object creation process to the subclasses, enabling them to instantiate specific classes without the superclass needing to know the exact class being instantiated.\nSHOW CODE Java import java.util.*; /** * Abstract class representing a message, which is the \"product\". * Subclasses will provide specific content types. */ abstract class Message { public abstract String getContent(); public void addDefaultHeaders() { // Adds some default headers } public void encrypt() { // Has some code to encrypt the content } } /** * Concrete implementation of the Message class for Text messages. */ class TextMessage extends Message { @Override public String getContent() { return \"Text\"; } } /** * Concrete implementation of the Message class for JSON messages. */ class JSONMessage extends Message { @Override public String getContent() { return \"{\\\"JSON\\\":[]}\"; } } /** * Abstract creator class. The factory method createMessage() must be implemented * by subclasses to instantiate the specific message type. */ abstract class MessageCreator { public Message getMessage() { Message msg = createMessage(); msg.addDefaultHeaders(); msg.encrypt(); return msg; } // Factory method to create a message protected abstract Message createMessage(); } /** * Concrete creator for creating JSON messages. */ class JSONMessageCreator extends MessageCreator { @Override public Message createMessage() { return new JSONMessage(); } } /** * Concrete creator for creating Text messages. */ class TextMessageCreator extends MessageCreator { @Override public Message createMessage() { return new TextMessage(); } } /** * Client class demonstrating the use of the Factory Method pattern. */ public class Client { public static void main(String[] args) { printMessage(new JSONMessageCreator()); printMessage(new TextMessageCreator()); } public static void printMessage(MessageCreator creator) { Message msg = creator.getMessage(); System.out.println(msg.getContent()); } } --- title: UML Diagram of Factory Method Pattern --- classDiagram Message \u003c|-- TextMessage Message \u003c|-- JSONMessage MessageCreator \u003c|-- JSONMessageCreator MessageCreator \u003c|-- TextMessageCreator JSONMessageCreator \"1\" --\u003e \"1\" JSONMessage : creates TextMessageCreator \"1\" --\u003e \"1\" TextMessage : creates MessageCreator : +getMessage() MessageCreator : +createMessage() JSONMessageCreator : +createMessage() TextMessageCreator : +createMessage() Message : +getContent() Message : +addDefaultHeaders() Message : +encrypt() 2.4 Prototype The Prototype design pattern is a creational pattern that enables the creation of new objects by copying an existing object, known as the prototype. It is particularly useful when object creation is resource-intensive or when there is a need to dynamically create mana similar objects.\nSHOW CODE Java // Point3D class representing a 3D point class Point3D { private float x, y, z; public static final Point3D ZERO = new Point3D(0, 0, 0); public Point3D(float x, float y, float z) { this.x = x; this.y = y; this.z = z; } public Point3D normalize() { float mag = magnitude(); return new Point3D(x / mag, y / mag, z / mag); } private float magnitude() { return (float) Math.sqrt(x * x + y * y + z * z); } public Point3D multiply(float scale) { return new Point3D(x * scale, y * scale, z * scale); } public Point3D add(Point3D vector) { return new Point3D(x + vector.x, y + vector.y, z + vector.z); } @Override public String toString() { return \"(\" + x + \", \" + y + \", \" + z + \")\"; } } // Abstract GameUnit class defining the clone method abstract class GameUnit implements Cloneable { private Point3D position; public GameUnit() { position = Point3D.ZERO; } @Override public GameUnit clone() throws CloneNotSupportedException { GameUnit unit = (GameUnit) super.clone(); unit.initialize(); return unit; } protected void initialize() { this.position = Point3D.ZERO; reset(); } protected abstract void reset(); public GameUnit(float x, float y, float z) { position = new Point3D(x, y, z); } public void move(Point3D direction, float distance) { Point3D finalMove = direction.normalize(); finalMove = finalMove.multiply(distance); position = position.add(finalMove); } public Point3D getPosition() { return position; } } // Swordsman class extends GameUnit and implements specific behavior class Swordsman extends GameUnit { private String state = \"idle\"; public void attack() { this.state = \"attacking\"; } @Override public String toString() { return \"Swordsman \" + state + \" @ \" + getPosition(); } @Override protected void reset() { state = \"idle\"; } } // General class extends GameUnit but does not support cloning class General extends GameUnit { private String state = \"idle\"; public void boostMorale() { this.state = \"MoralBoost\"; } @Override public String toString() { return \"General \" + state + \" @ \" + getPosition(); } @Override public GameUnit clone() throws CloneNotSupportedException { throw new CloneNotSupportedException(\"Generals are unique\"); } @Override protected void reset() { throw new UnsupportedOperationException(\"Reset not supported\"); } } public class Main { // Client code to demonstrate the Prototype Pattern public static void main(String[] args) throws CloneNotSupportedException { // Creating and moving a Swordsman Swordsman s1 = new Swordsman(); s1.move(new Point3D(-10, 0, 0), 20); s1.attack(); System.out.println(s1); // Cloning the Swordsman Swordsman s2 = (Swordsman) s1.clone(); System.out.println(\"Cloned swordsman: \" + s2); } } Shallow Copy vs. Deep Copy: A shallow copy creates a new object but only copies the references of the original object\u0026rsquo;s fields. As a result, both the original and the copied object share references to the same inner objects. Any changes made to the inner mutable objects of the copied object will affect the original object as well. In Java, the clone method performs a shallow copy. On the other hand, a deep copy involves recursively copying the original object and all the objects it references. As a result, the copied object is entirely independent of the original, and changes made to the copied object do not affect the original one.\nSHOW CODE: Shallow Copy Java import java.util.ArrayList; import java.util.List; /** * @author Signal Yu * @since 2024-12-2 */ class Person { String name; int age; public Person(String name, int age) { this.name = name; this.age = age; } public void setName(String name) { this.name = name; } @Override public String toString() { return \"Person{name='\" + name + \"', age=\" + age + '}'; } } public class Solution { public static void main(String[] args) { // Original list with mutable objects (Person) List\u0026lt;Person\u0026gt; originalList = new ArrayList\u0026lt;\u0026gt;(); originalList.add(new Person(\"Alice\", 30)); originalList.add(new Person(\"Bob\", 25)); // Shallow copy of the list List\u0026lt;Person\u0026gt; shallowCopyList = new ArrayList\u0026lt;\u0026gt;(originalList); // Modify the object in the shallow copy shallowCopyList.get(1).setName(\"Signal\"); // Print both lists System.out.println(\"Original List: \" + originalList); System.out.println(\"Shallow Copy List: \" + shallowCopyList); } } SHOW OUTPUT: Shallow Copy Output Original List: [Person{name='Alice', age=30}, Person{name='Signal', age=25}] Shallow Copy List: [Person{name='Alice', age=30}, Person{name='Signal', age=25}] SHOW CODE: Deep Copy Java import java.util.ArrayList; import java.util.List; class Person { String name; int age; public Person(String name, int age) { this.name = name; this.age = age; } public void setName(String name) { this.name = name; } @Override public String toString() { return \"Person{name='\" + name + \"', age=\" + age + '}'; } // Deep copy method for Person class public Person deepCopy() { return new Person(this.name, this.age); } } public class Solution { public static void main(String[] args) { // Original list with mutable objects (Person) List\u0026lt;Person\u0026gt; originalList = new ArrayList\u0026lt;\u0026gt;(); originalList.add(new Person(\"Alice\", 30)); originalList.add(new Person(\"Bob\", 25)); // Deep copy of the list (creating new Person objects) List\u0026lt;Person\u0026gt; deepCopyList = new ArrayList\u0026lt;\u0026gt;(); for (Person person : originalList) { deepCopyList.add(person.deepCopy()); // Add a deep copy of each person } // Modify the object in the deep copy deepCopyList.get(1).setName(\"Signal\"); // Print both lists System.out.println(\"Original List: \" + originalList); System.out.println(\"Deep Copy List: \" + deepCopyList); } } SHOW OUTPUT: Deep Copy Output Original List: [Person{name='Alice', age=30}, Person{name='Bob', age=25}] Deep Copy List: [Person{name='Alice', age=30}, Person{name='Signal', age=25}] It is important to note that changes made to immutable objects in a shallow copied object will not affect the original object. For example, when performing a shallow copy of an ArrayList that contains Integer values, changes made to the Integer of the copied object will not affect the original object because Integer is immutable (since it is marked as final and its value cannot be changed).\nSHOW CODE Java import java.util.ArrayList; import java.util.List; /** * @author Signal Yu * @since 2024-12-2 */ public class Solution { public static void main(String[] args) { // Integer is an immutable class List\u0026lt;Integer\u0026gt; original = new ArrayList\u0026lt;\u0026gt;(); original.add(1); original.add(2); List\u0026lt;Integer\u0026gt; shallowCopy = new ArrayList\u0026lt;\u0026gt;(original); // Shallow copy shallowCopy.set(0, 99); // Modify the shallow copy System.out.println(original); // Output: [1, 2] System.out.println(shallowCopy); // Output: [99, 2] } } Prototype v.s. Builder\n2.5 Abstract Factory The Abstract Factory design pattern is a creational pattern that creates families of related objects without specifying their concrete classes. It allows the client to instantiate objects from a group of related products while ensuring that these objects are compatible with each other. This pattern is particularly useful when a system needs to be independent of how objects are created, composed, and represented. However, a limitation of this pattern is that when a new product type is added, the base factory typically needs to be modified, which can increase the maintainence overhead.\nSHOW CODE Java // Represents an abstract product interface Storage { String getId(); } // Represents a concrete product in a family \"Amazon Web Services\" class S3Storage implements Storage { public S3Storage(int capacityInMib) { System.out.println(\"Allocated \" + capacityInMib + \" on S3\"); } @Override public String getId() { return \"S31\"; } @Override public String toString() { return \"S3 Storage\"; } } // Represents a concrete product in a family \"Google Cloud Platform\" class GoogleCloudStorage implements Storage { public GoogleCloudStorage(int capacityInMib) { System.out.println(\"Allocated \" + capacityInMib + \" on Google Cloud Storage\"); } @Override public String getId() { return \"gcpcs1\"; } @Override public String toString() { return \"Google cloud storage\"; } } // Represents an abstract product interface Instance { enum Capacity {micro, small, large} void start(); void attachStorage(Storage storage); void stop(); } // Represents a concrete product in a family \"Amazon Web Services\" class Ec2Instance implements Instance { public Ec2Instance(Capacity capacity) { System.out.println(\"Created Ec2Instance\"); } @Override public void start() { System.out.println(\"Ec2Instance started\"); } @Override public void attachStorage(Storage storage) { System.out.println(\"Attached \" + storage + \" to Ec2Instance\"); } @Override public void stop() { System.out.println(\"Ec2Instance stopped\"); } @Override public String toString() { return \"EC2Instance\"; } } // Represents a concrete product in a family \"Google Cloud Platform\" class GoogleComputeEngineInstance implements Instance { public GoogleComputeEngineInstance(Capacity capacity) { System.out.println(\"Created Google Compute Engine instance\"); } @Override public void start() { System.out.println(\"Compute engine instance started\"); } @Override public void attachStorage(Storage storage) { System.out.println(\"Attached \" + storage + \" to Compute engine instance\"); } @Override public void stop() { System.out.println(\"Compute engine instance stopped\"); } } // Abstract factory with methods defined for each object type. interface ResourceFactory { Instance createInstance(Instance.Capacity capacity); Storage createStorage(int capMib); } // Factory implementation for Amazon Web Services resources class AwsResourceFactory implements ResourceFactory { @Override public Instance createInstance(Instance.Capacity capacity) { return new Ec2Instance(capacity); } @Override public Storage createStorage(int capMib) { return new S3Storage(capMib); } } // Factory implementation for Google Cloud Platform resources class GoogleResourceFactory implements ResourceFactory { @Override public Instance createInstance(Instance.Capacity capacity) { return new GoogleComputeEngineInstance(capacity); } @Override public Storage createStorage(int capMib) { return new GoogleCloudStorage(capMib); } } // Client class public class Client { private ResourceFactory factory; public Client(ResourceFactory factory) { this.factory = factory; } public Instance createServer(Instance.Capacity cap, int storageMib) { Instance instance = factory.createInstance(cap); Storage storage = factory.createStorage(storageMib); instance.attachStorage(storage); return instance; } public static void main(String[] args) { Client aws = new Client(new AwsResourceFactory()); Instance i1 = aws.createServer(Instance.Capacity.micro, 20480); i1.start(); i1.stop(); System.out.println(\"***************************************\"); Client gcp = new Client(new GoogleResourceFactory()); i1 = gcp.createServer(Instance.Capacity.micro, 20480); i1.start(); i1.stop(); } } SHOW OUTPUT Output Created Ec2Instance Allocated 20480 on S3 Attached S3 Storage to Ec2Instance Ec2Instance started Ec2Instance stopped *************************************** Created Google Compute Engine instance Allocated 20480 on Google Cloud Storage Attached Google cloud storage to Compute engine instance Compute engine instance started Compute engine instance stopped Adding a new product type, such as Engine, may require modifications to the base factory. This is because the new Engine product froms a new combination with Storage and Instance, and the base factory is responsible for creating all the products (i.e., Storage, Instance, and Engine). As a result, the base factory needs to include a new method, createEngine. This modification violates the Open/Closed Principle (OCP), which states that classes should be open for extension but closed for modification.\nSHOW CODE Java // Represents an abstract product for Storage interface Storage { String getId(); } // Represents a concrete product in a family \"Amazon Web Services\" for Storage class S3Storage implements Storage { public S3Storage(int capacityInMib) { System.out.println(\"Allocated \" + capacityInMib + \" on S3\"); } @Override public String getId() { return \"S31\"; } @Override public String toString() { return \"S3 Storage\"; } } // Represents a concrete product in a family \"Google Cloud Platform\" for Storage class GoogleCloudStorage implements Storage { public GoogleCloudStorage(int capacityInMib) { System.out.println(\"Allocated \" + capacityInMib + \" on Google Cloud Storage\"); } @Override public String getId() { return \"gcpcs1\"; } @Override public String toString() { return \"Google Cloud Storage\"; } } // Represents an abstract product for Engine interface Engine { String getName(); } // Represents a concrete product in a family \"Amazon Web Services\" for Engine class Ec2Engine implements Engine { String name; public Ec2Engine(String name) { this.name = name; System.out.println(name + \" engine selected.\"); } @Override public String getName() { return name; } } // Represents a concrete product in a family \"Google Cloud Platform\" for Engine class GoogleComputeEngine implements Engine { String name; public GoogleComputeEngine(String name) { this.name = name; System.out.println(name + \" engine selected.\"); } @Override public String getName() { return name; } } // Represents an abstract product for Instance interface Instance { enum Capacity {micro, small, large} void start(); void attachStorage(Storage storage); void stop(); void useEngine(Engine engine); } // Represents a concrete product in a family \"Amazon Web Services\" for Instance class Ec2Instance implements Instance { public Ec2Instance(Instance.Capacity capacity) { System.out.println(\"Created Ec2Instance\"); } @Override public void start() { System.out.println(\"Ec2Instance started\"); } @Override public void attachStorage(Storage storage) { System.out.println(\"Attached \" + storage + \" to Ec2Instance\"); } @Override public void stop() { System.out.println(\"Ec2Instance stopped\"); } @Override public void useEngine(Engine engine) { System.out.println(\"Ec2Instance uses \" + engine.getName() + \" engine.\"); } @Override public String toString() { return \"EC2Instance\"; } } // Represents a concrete product in a family \"Google Cloud Platform\" for Instance class GoogleComputeEngineInstance implements Instance { public GoogleComputeEngineInstance(Instance.Capacity capacity) { System.out.println(\"Created Google Compute Engine instance\"); } @Override public void start() { System.out.println(\"Compute engine instance started\"); } @Override public void attachStorage(Storage storage) { System.out.println(\"Attached \" + storage + \" to Compute engine instance\"); } @Override public void stop() { System.out.println(\"Compute engine instance stopped\"); } @Override public void useEngine(Engine engine) { System.out.println(\"Google compute engine instance uses \" + engine.getName() + \" engine.\"); } } // Abstract factory with methods defined for each object type interface ResourceFactory { Instance createInstance(Instance.Capacity capacity); Storage createStorage(int capMib); Engine createEngine(String name); } // Factory implementation for Amazon Web Services resources class AwsResourceFactory implements ResourceFactory { @Override public Instance createInstance(Instance.Capacity capacity) { return new Ec2Instance(capacity); // Pass engine to the Ec2Instance } @Override public Storage createStorage(int capMib) { return new S3Storage(capMib); } @Override public Engine createEngine(String name) { return new Ec2Engine(name); } } // Factory implementation for Google Cloud Platform resources class GoogleResourceFactory implements ResourceFactory { @Override public Instance createInstance(Instance.Capacity capacity) { return new GoogleComputeEngineInstance(capacity); } @Override public Storage createStorage(int capMib) { return new GoogleCloudStorage(capMib); } @Override public Engine createEngine(String name) { return new GoogleComputeEngine(name); } } // Client class to test the code public class Client { private ResourceFactory factory; public Client(ResourceFactory factory) { this.factory = factory; } public Instance createServer(Instance.Capacity cap, int storageMib, String name) { Instance instance = factory.createInstance(cap); // Pass engine to instance creation Storage storage = factory.createStorage(storageMib); Engine engine = factory.createEngine(name); instance.attachStorage(storage); instance.useEngine(engine); // Call useEngine() on instance, which delegates to engine's getName() return instance; } public static void main(String[] args) { Client aws = new Client(new AwsResourceFactory()); Instance i1 = aws.createServer(Instance.Capacity.micro, 20480, \"Ec2\"); i1.start(); i1.stop(); System.out.println(\"***************************************\"); Client gcp = new Client(new GoogleResourceFactory()); i1 = gcp.createServer(Instance.Capacity.micro, 20480, \"GCE\"); i1.start(); i1.stop(); } } 2.6 Singleton Singleton is a creational design pattern that ensures a class has only one instance and provides a global point of access to that instance (typically through a static method). To implement a Singleton, the class constructor must be private, which prevents external classes from creating instances of the class directly, and a global static method should be provided to access the instance. There are two common types of Singleton: Eager Singleton and Lazy Singleton.\n2.6.1 Eager Singleton Eager Singleton ensures that an instance is created as soon as the class is loaded, rather than being created when needed. This guarantees that the instance is ready to use but may cause unnecessary overhead if the instance is never actually used.\nSHOW CODE: Eager Singleton Eager Singleton package dev.signalyu.singleton; public class EagerRegistry { private EagerRegistry() { // Private constructor to prevent instantiation } // Eagerly initializing the single instance of EagerRegistry private static final EagerRegistry INSTANCE = new EagerRegistry(); // Public method to provide access to the instance public static EagerRegistry getInstance() { return INSTANCE; } // Main method to demonstrate usage public static void main(String[] args) { // Accessing the singleton instance EagerRegistry registry = EagerRegistry.getInstance(); System.out.println(\"Singleton instance: \" + registry); } } SHOW OUTPUT Output Singleton instance: dev.signalyu.singleton.EagerRegistry@7a81197d 2.6.2 Lazy Singleton Lazy Singleton ensures that an instance of the class is created only when it is actually needed. This approach helps avoid unnecessary overhead but requires additional mechanisms to ensure thread safety in multi-threaded environments. It is commonly implemented using techniques like Double-Checked Locking or Initialization-on-Demand Holder.\nDouble-Checked Locking is an optimization technique ensures only one instance of a class is created, even in a multi-threaded environment, while minimizing synchronization overhead. This approach involves two checks: The first check, outside the synchronized block, allows the thread to bypass synchronization if the instance has already been created. The second check, inside the synchronized block, ensures that only one thread can create the instance, even if multiple threads attempt to do so concurrently.\nSHOW CODE: Double-Checked Locking Double-Checked Locking package dev.signalyu.singleton; public class LazyRegistryWithDCL { // Private constructor to prevent external instantiation private LazyRegistryWithDCL() {} // Volatile keyword ensures visibility of changes across threads private static volatile LazyRegistryWithDCL INSTANCE; // Public method to provide access to the Singleton instance public static LazyRegistryWithDCL getInstance() { if (INSTANCE == null) { // First check (outside synchronized block) synchronized (LazyRegistryWithDCL.class) { // Synchronized block to ensure only one thread can create the instance if (INSTANCE == null) { // Second check (inside synchronized block) INSTANCE = new LazyRegistryWithDCL(); // Lazy initialization } } } return INSTANCE; } // Main method to demonstrate the usage of the Singleton public static void main(String[] args) { // Accessing the Singleton instance LazyRegistryWithDCL registry = LazyRegistryWithDCL.getInstance(); System.out.println(\"Singleton instance: \" + registry); } } SHOW OUTPUT Output Singleton instance: dev.signalyu.singleton.LazyRegistryWithDCL@7a81197d The Initialization-on-Demand Holder technique leverages the class loading mechnism to ensure that the Singleton instance is created only when it is first accessed. It takes advantages of the fact that class loading in Java inherently thread-safe. This approach relies on static inner classes, which are not loaded until they are referenced, meaning that the instance is created only when it is actually needed.\nSHOW CODE: Initialization-on-Demand Holder Initialization-on-Demand Holder package dev.signalyu.singleton; public class LazyRegistryIODH { // Private constructor to prevent external instantiation private LazyRegistryIODH() { System.out.println(\"In LazyRegistryIODH singleton\"); } // Static inner class that holds the Singleton instance private static class RegistryHolder { // The Singleton instance is created when the class is loaded static final LazyRegistryIODH INSTANCE = new LazyRegistryIODH(); } // Public method to provide access to the Singleton instance public static LazyRegistryIODH getInstance() { return RegistryHolder.INSTANCE; } // Main method to demonstrate the usage of the Singleton public static void main(String[] args) { // Accessing the Singleton instance LazyRegistryIODH registry = LazyRegistryIODH.getInstance(); System.out.println(\"Singleton instance: \" + registry); } } SHOW OUTPUT Output In LazyRegistryIODH singleton Singleton instance: dev.signalyu.singleton.LazyRegistryIODH@5ca881b5 2.7 Object Pool Object Pool Design Pattern is a creational design pattern that manages a collection of reusable objects, rather than frequently creating and destroying objects. These objects are stored in a pool, from which clients can borrow objects, use them, and return them when they are done. This pattern is particularly useful in scenerios where a large number of objects are needed temporarily, and the cost of creating these objects is high, such as resource management (e.g., database connection or thread pools).\nSHOW CODE Java import java.util.concurrent.BlockingQueue; import java.util.concurrent.LinkedBlockingQueue; import java.util.function.Supplier; // Point2D class class Point2D { private float x, y; public Point2D(float x, float y) { this.x = x; this.y = y; } @Override public String toString() { return \"Point2D [x=\" + x + \", y=\" + y + \"]\"; } } // Poolable interface interface Poolable { // state reset void reset(); } // Image interface extending Poolable interface Image extends Poolable { void draw(); Point2D getLocation(); void setLocation(Point2D location); } // Bitmap class implementing Image and Poolable class Bitmap implements Image { private Point2D location; private String name; public Bitmap(String name) { this.name = name; } @Override public void draw() { System.out.println(\"Drawing \" + name + \" @ \" + location); } @Override public Point2D getLocation() { return location; } @Override public void setLocation(Point2D location) { this.location = location; } @Override public void reset() { location = null; System.out.println(\"Bitmap is reset\"); } } // ObjectPool class for reusable objects class ObjectPool { private BlockingQueue\u0026lt;T\u0026gt; availablePool; public ObjectPool(Supplier\u0026lt;T\u0026gt; creator, int count) { availablePool = new LinkedBlockingQueue\u0026lt;\u0026gt;(); for (int i = 0; i \u003c count; i++) { availablePool.offer(creator.get()); } } public T get() { try { return availablePool.take(); } catch (InterruptedException ex) { System.err.println(\"take() was interrupted\"); } return null; } public void release(T obj) { obj.reset(); try { availablePool.put(obj); } catch (InterruptedException e) { System.err.println(\"put() was interrupted\"); } } } // Main class to demonstrate Object Pool usage public class Client { public static void main(String[] args) { // Create a pool for Bitmap objects with 5 instances ObjectPool\u0026lt;Bitmap\u0026gt; bitmapPool = new ObjectPool\u0026lt;\u0026gt;(() -\u003e new Bitmap(\"Logo.bmp\"), 5); // Borrow Bitmap objects from the pool Bitmap b1 = bitmapPool.get(); b1.setLocation(new Point2D(10, 10)); Bitmap b2 = bitmapPool.get(); b2.setLocation(new Point2D(-10, 0)); // Use the objects b1.draw(); b2.draw(); // Release the objects back to the pool bitmapPool.release(b1); bitmapPool.release(b2); } } --- title: UML Diagram of Object Pool Design Pattern --- classDiagram ObjectPool --\u003e Bitmap : uses Bitmap --\u003e Point2D : uses Poolable \u003c|-- Image : implements Image \u003c|-- Bitmap : implements Client --\u003e ObjectPool : uses class ObjectPool { +BlockingQueue~T~ availablePool +ObjectPool(Supplier~T~ creator, int count) +T get() +void release(T obj) } class Bitmap { +Point2D location +String name +Bitmap(String name) +void draw() +Point2D getLocation() +void setLocation(Point2D location) +void reset() } class Point2D { +float x +float y +Point2D(float x, float y) +String toString() } class Poolable { +void reset() } class Image { +void draw() +Point2D getLocation() +void setLocation(Point2D location) } class Client { +void main() } 3. Structural Design Patterns Structural Design Pattern focus on optimizing object composition, helping achieve better organization and efficiency.\n3.1 Adapter The Adapter Design Pattern is a structural design pattern that allows two incompatible interfaces to work together, enabling them to communicate despite differences in their method signatures. This pattern is commonly used in situations where legacy code cannot be modified but needs to integrate with a new system that has a different interface.\nSHOW CODE Java // Target Interface interface Customer { String getName(); String getDesignation(); String getAddress(); } // Client code which requires Customer interface. class BusinessCardDesigner { public String designCard(Customer customer) { String card = \"\"; card += customer.getName(); card += \"\\n\" + customer.getDesignation(); card += \"\\n\" + customer.getAddress(); return card; } } // An existing class used in our system - Adaptee class Employee { private String fullName; private String jobTitle; private String officeLocation; public String getFullName() { return fullName; } public void setFullName(String fullName) { this.fullName = fullName; } public String getJobTitle() { return jobTitle; } public void setJobTitle(String jobTitle) { this.jobTitle = jobTitle; } public String getOfficeLocation() { return officeLocation; } public void setOfficeLocation(String officeLocation) { this.officeLocation = officeLocation; } } // An object adapter using composition to translate the interface class EmployeeObjectAdapter implements Customer { private final Employee adaptee; public EmployeeObjectAdapter(Employee adaptee) { this.adaptee = adaptee; } @Override public String getName() { return adaptee.getFullName(); } @Override public String getDesignation() { return adaptee.getJobTitle(); } @Override public String getAddress() { return adaptee.getOfficeLocation(); } } public class Client { public static void main(String[] args) { // Using Object Adapter Employee employee = new Employee(); populateEmployeeData(employee); EmployeeObjectAdapter objectAdapter = new EmployeeObjectAdapter(employee); BusinessCardDesigner designer = new BusinessCardDesigner(); String card = designer.designCard(objectAdapter); System.out.println(card); } private static void populateEmployeeData(Employee employee) { employee.setFullName(\"Signal Yu\"); employee.setJobTitle(\"Software Engineer\"); employee.setOfficeLocation(\"Shenzhen, Guangdong Province\"); } } --- title: UML Diagram of Adapter Design Pattern --- classDiagram class Customer { +String getName() +String getDesignation() +String getAddress() } class BusinessCardDesigner { +String designCard(Customer customer) } class Employee { -String fullName -String jobTitle -String officeLocation +String getFullName() +String getJobTitle() +String getOfficeLocation() +setFullName(String fullName) +setJobTitle(String jobTitle) +setOfficeLocation(String officeLocation) } class EmployeeObjectAdapter { -Employee adaptee +String getName() +String getDesignation() +String getAddress() } Customer \u003c|-- EmployeeObjectAdapter : implements BusinessCardDesigner --\u003e Customer : uses EmployeeObjectAdapter --\u003e Employee : adapts 3.2 Bridge The Bridge Design Pattern is a structural design pattern that separates the abstraction and implementation, enabling them to evolve independently without affecting each other.\nIn the following example, the Queue data structure is decoupled from the implementation of LinkedList. When there is a need to change the way data is stored, this can be done without modifying the Queue class. Additionally, when a new type of list, such as Doubly Linked List, is introduced, it can be done without affecting the behavior of the Queue class.\nSHOW CODE Java // This is the implementor interface. // It defines the basic operations for a LinkedList. interface LinkedList { void addFirst(T element); T removeFirst(); void addLast(T element); T removeLast(); int getSize(); } // A concrete implementor that uses nodes to implement a Singly Linked List. // **NOT thread safe** class SinglyLinkedList implements LinkedList { private int size; private Node head; private Node last; private static class Node { private final Object data; private Node next; private Node(Object data, Node next) { this.data = data; this.next = next; } } @Override public void addFirst(T element) { if (head == null) { last = head = new Node(element, null); } else { head = new Node(element, head); } size++; } @Override public T removeFirst() { if (head == null) { return null; } @SuppressWarnings(\"unchecked\") T temp = (T) head.data; if (head.next != null) { head = head.next; } else { head = null; last = null; } size--; return temp; } @Override public void addLast(T element) { if (last == null) { last = head = new Node(element, null); } else { last.next = new Node(element, null); last = last.next; } size++; } @Override public T removeLast() { if (last == null) { return null; } if (head == last) { @SuppressWarnings(\"unchecked\") T temp = (T) head.data; head = last = null; size--; return temp; } // since we don't have a back pointer Node temp = head; while (temp.next != last) { temp = temp.next; } @SuppressWarnings(\"unchecked\") T result = (T) last.data; last = temp; last.next = null; size--; return result; } @Override public int getSize() { return size; } @Override public String toString() { StringBuilder result = new StringBuilder(\"[\"); Node temp = head; while (temp != null) { result.append(temp.data).append(temp.next == null ? \"\" : \", \"); temp = temp.next; } result.append(\"]\"); return result.toString(); } } // A concrete implementor that uses arrays to implement a LinkedList. // **NOT thread safe** class ArrayLinkedList implements LinkedList { private static final int DEFAULT_SIZE = 2; private Object[] data; private int size; public ArrayLinkedList() { data = new Object[DEFAULT_SIZE]; } @Override public void addFirst(T element) { ensureCapacity(++size); shiftOneRight(); data[0] = element; } @Override public T removeFirst() { if (size == 0) { return null; } @SuppressWarnings(\"unchecked\") T first = (T) data[0]; size--; shiftOneLeft(); return first; } @Override public void addLast(T element) { ensureCapacity(size + 1); data[size++] = element; } @Override @SuppressWarnings(\"unchecked\") public T removeLast() { if (size == 0) { return null; } return (T) data[size--]; } private void ensureCapacity(int newSize) { if (data.length \u003e newSize) { return; } Object[] temp = new Object[data.length + DEFAULT_SIZE]; System.arraycopy(data, 0, temp, 0, data.length); data = temp; } private void shiftOneRight() { System.arraycopy(data, 0, data, 1, size); } private void shiftOneLeft() { System.arraycopy(data, 1, data, 0, size); } public int getSize() { return size; } @Override public String toString() { StringBuilder result = new StringBuilder(\"[\"); for (int i = 0; i \u003c size; i++) { result.append(data[i]).append(i == size - 1 ? \"\" : \", \"); } result.append(\"]\"); return result.toString(); } } // This is the abstraction interface representing a FIFO collection. interface FifoCollection { // Adds an element to the collection void offer(T element); // Removes \u0026 returns the first element from the collection T poll(); } // A refined abstraction that uses LinkedList to implement a Queue. class Queue implements FifoCollection { private final LinkedList list; public Queue(LinkedList list) { this.list = list; } @Override public void offer(T element) { list.addLast(element); } @Override public T poll() { return list.removeFirst(); } @Override public String toString() { return \"Queue{\" + \"list=\" + list.toString() + '}'; } } // Client code to demonstrate the bridge pattern public class Client { public static void main(String[] args) { FifoCollection\u0026lt;Integer\u0026gt; arrayQueue = new Queue\u0026lt;\u0026gt;(new ArrayLinkedList\u0026lt;\u0026gt;()); arrayQueue.offer(1); arrayQueue.offer(2); arrayQueue.offer(3); System.out.print(\"Array List Queue: \"); System.out.println(arrayQueue); FifoCollection\u0026lt;Integer\u0026gt; linkedListQueue = new Queue\u0026lt;\u0026gt;(new SinglyLinkedList\u0026lt;\u0026gt;()); linkedListQueue.offer(11); linkedListQueue.offer(22); linkedListQueue.offer(33); System.out.print(\"Linked List Queue: \"); System.out.println(linkedListQueue); System.out.print(linkedListQueue.poll() + \" \"); System.out.print(linkedListQueue.poll() + \" \"); System.out.print(linkedListQueue.poll() + \"\\n\"); // Should print null as all elements are removed System.out.println(linkedListQueue.poll()); // null } } SHOW OUTPUT Output Array List Queue: Queue{list=[1, 2, 3]} Linked List Queue: Queue{list=[11, 22, 33]} 11 22 33 null --- title: UML Diagram of Adapter Design Pattern --- classDiagram class LinkedList { +addFirst(T element) +removeFirst() +addLast(T element) +removeLast() +getSize() } class SinglyLinkedList { -int size -Node head -Node last +addFirst(T element) +removeFirst() +addLast(T element) +removeLast() +getSize() +toString() } class ArrayLinkedList { -Object[] data -int size +addFirst(T element) +removeFirst() +addLast(T element) +removeLast() +getSize() +toString() } class FifoCollection { +offer(T element) +poll() } class Queue { -LinkedList list +offer(T element) +poll() +toString() } LinkedList \u003c|.. SinglyLinkedList LinkedList \u003c|.. ArrayLinkedList FifoCollection \u003c|.. Queue : implements Queue *--\u003e LinkedList : composites %% Client code class class Client { +main(String[] args) } Client --\u003e FifoCollection : Uses 3.3 Decorator Decorator Design Pattern is a structural design pattern that allows addding new behaviors to an object dynamically, without altering its structure.\nSHOW CODE Java import org.apache.commons.text.StringEscapeUtils; import java.util.Base64; // Base interface or component interface Message { String getContent(); } // Concrete component. Object to be decorated class TextMessage implements Message { private String msg; public TextMessage(String msg) { this.msg = msg; } @Override public String getContent() { return msg; } } // Decorator. Implements component interface class HtmlEncodedMessage implements Message { private Message msg; public HtmlEncodedMessage(Message msg) { this.msg = msg; } @Override public String getContent() { return StringEscapeUtils.escapeHtml4(msg.getContent()); } } // Decorator for Base64 encoding class Base64EncodedMessage implements Message { private Message msg; public Base64EncodedMessage(Message msg) { this.msg = msg; } @Override public String getContent() { // Be wary of charset!! This is platform dependent.. return Base64.getEncoder().encodeToString(msg.getContent().getBytes()); } } // Client to demonstrate the decorators public class Client { public static void main(String[] args) { Message m = new TextMessage(\"The is strong with this one!\"); System.out.println(\"Original: \" + m.getContent()); // Apply HTML encoding Message decorator = new HtmlEncodedMessage(m); System.out.println(\"HTML Encoded: \" + decorator.getContent()); // Apply Base64 encoding decorator = new Base64EncodedMessage(decorator); System.out.println(\"Base64 Encoded: \" + decorator.getContent()); } } --- title: UML Diagram of Decorator Design Pattern --- classDiagram class Message { +String getContent() } class TextMessage { -String msg +TextMessage(String msg) +String getContent() } class HtmlEncodedMessage { -Message msg +HtmlEncodedMessage(Message msg) +String getContent() } class Base64EncodedMessage { -Message msg +Base64EncodedMessage(Message msg) +String getContent() } Message \u003c|-- TextMessage Message \u003c|-- HtmlEncodedMessage Message \u003c|-- Base64EncodedMessage TextMessage --\u003e HtmlEncodedMessage : Wraps HtmlEncodedMessage --\u003e Base64EncodedMessage : Wraps 3.4 Composite The Composite Design Pattern is a structural pattern that enables treating both individual objects and compositions of objects uniformly. It is designed to represent part-whole hierarchies, where individual objects (leaf nodes) and their composites are handled in the same way. This pattern is often used for managing complex hierarchical structures, such as file systems or organization structures.\nSHOW CODE Java import java.util.ArrayList; import java.util.List; // The component base class for composite pattern // Defines operations applicable both leaf \u0026 composite abstract class File { private String name; public File(String name) { this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } public abstract void ls(); public abstract void addFile(File file); public abstract File[] getFiles(); public abstract boolean removeFile(File file); } // Leaf node in composite pattern class BinaryFile extends File { private long size; public BinaryFile(String name, long size) { super(name); this.size = size; } @Override public void ls() { System.out.println(getName() + \"\\t\" + size); } @Override public void addFile(File file) { throw new UnsupportedOperationException(\"Leaf node doesn't support add operation\"); } @Override public File[] getFiles() { throw new UnsupportedOperationException(\"Leaf node doesn't support get operation\"); } @Override public boolean removeFile(File file) { throw new UnsupportedOperationException(\"Leaf node doesn't support remove operation\"); } } // Composite in the composite pattern class Directory extends File { private List\u0026lt;File\u0026gt; children = new ArrayList\u0026lt;\u0026gt;(); public Directory(String name) { super(name); } @Override public void ls() { System.out.println(getName()); children.forEach(File::ls); } @Override public void addFile(File file) { children.add(file); } @Override public File[] getFiles() { return children.toArray(new File[children.size()]); } @Override public boolean removeFile(File file) { return children.remove(file); } } // Client class that creates and displays directory structure public class Client { public static void main(String[] args) { File root1 = createTreeOne(); root1.ls(); System.out.println(\"***********************************\"); File root2 = createTreeTwo(); root2.ls(); } // Client builds tree using leaf and composites private static File createTreeOne() { File file1 = new BinaryFile(\"file1\", 1000); File file2 = new BinaryFile(\"file2\", 2000); Directory dir1 = new Directory(\"dir1\"); dir1.addFile(file1); dir1.addFile(file2); File file3 = new BinaryFile(\"file3\", 3000); Directory dir2 = new Directory(\"dir2\"); dir2.addFile(file3); dir2.addFile(dir1); return dir2; } private static File createTreeTwo() { return new BinaryFile(\"Another file\", 200); } } In the above code, the statements dir2.addFile(file3); and dir2.addFile(dir1); demonstrate how both individual objects (file3) and compositions of objects (file1 and file2) are treated in the same way.\n--- title: UML Diagram of Composite Design Pattern --- classDiagram class File { +String name +getName() +setName(String name) +ls() +addFile(File file) +getFiles() +removeFile(File file) } class BinaryFile { +long size +BinaryFile(String name, long size) +ls() +addFile(File file) +getFiles() +removeFile(File file) } class Directory { +List~File~ children +Directory(String name) +ls() +addFile(File file) +getFiles() +removeFile(File file) } File \u003c|-- BinaryFile File \u003c|-- Directory Directory *--\u003e File : contains 3.5 Facade The Facade Design Pattern is a structural design pattern that provides a simplified interface to a complex subsystem. It is often used when the client needs to interact with only a specific part of a large system, hiding its complexity and making it easier to use.\nSHOW CODE Java package dev.signalyu.facade; // Template class and related classes abstract class Template { public enum TemplateType {Email, NewsLetter} public abstract String format(Object obj); } class TemplateFactory { public static Template createTemplateFor(Template.TemplateType type) { switch (type) { case Email: return new OrderEmailTemplate(); default: throw new IllegalArgumentException(\"Unknown TemplateType\"); } } } class OrderEmailTemplate extends Template { @Override public String format(Object obj) { return \"TEMPLATE\"; } } // Stationary class and related classes interface Stationary { String getHeader(); String getFooter(); } class StationaryFactory { public static Stationary createStationary() { return new HalloweenStationary(); } } class HalloweenStationary implements Stationary { @Override public String getHeader() { return \"It's Halloween!!\"; } @Override public String getFooter() { return \"BUY MORE STUFF! It's Halloween, c'mon!!\"; } } // Email class and related classes class EmailBuilder { public EmailBuilder withTemplate(Template template) { return this; } public EmailBuilder withStationary(Stationary stationary) { return this; } public EmailBuilder forObject(Object object) { return this; } public Email build() { return new Email(); } public Email getEmail() { return new Email(); } } class Email { public static EmailBuilder getBuilder() { return new EmailBuilder(); } } // Mailer class class Mailer { private static final Mailer MAILER = new Mailer(); public static Mailer getMailer() { return MAILER; } private Mailer() { } public boolean send(Email email) { return true; } } // Order class for reference (assuming Order exists as a placeholder) class Order { private String id; private double total; public Order(String id, double total) { this.id = id; this.total = total; } public String getId() { return id; } public void setId(String id) { this.id = id; } public double getTotal() { return total; } public void setTotal(double total) { this.total = total; } } // Facade provides simple methods for the client to use class EmailFacade { public boolean sendOrderEmail(Order order) { Template template = TemplateFactory.createTemplateFor(Template.TemplateType.Email); Stationary stationary = StationaryFactory.createStationary(); Email email = Email.getBuilder() .withTemplate(template) .withStationary(stationary) .forObject(order) .build(); Mailer mailer = Mailer.getMailer(); return mailer.send(email); } } public class Client { public static void main(String[] args) { Order order = new Order(\"101\", 99.99); EmailFacade facade = new EmailFacade(); boolean result = facade.sendOrderEmail(order); System.out.println(\"Order Email \" + (result ? \"sent!\" : \"NOT sent...\")); } } --- title: UML Diagram of Facade Design Pattern --- classDiagram class EmailFacade { +sendOrderEmail(order: Order) bool } class Template { +format(obj: Object) String } class TemplateFactory { +createTemplateFor(type: TemplateType) Template } class OrderEmailTemplate { +format(obj: Object) String } class Stationary { +getHeader() String +getFooter() String } class StationaryFactory { +createStationary() Stationary } class HalloweenStationary { +getHeader() String +getFooter() String } class EmailBuilder { +withTemplate(template: Template) EmailBuilder +withStationary(stationary: Stationary) EmailBuilder +forObject(object: Object) EmailBuilder +build() Email } class Email { +getBuilder() EmailBuilder } class Mailer { +getMailer() Mailer +send(email: Email) bool } EmailFacade --\u003e TemplateFactory : uses EmailFacade --\u003e StationaryFactory : uses EmailFacade --\u003e Mailer : uses TemplateFactory --\u003e OrderEmailTemplate : creates StationaryFactory --\u003e HalloweenStationary : creates Email --\u003e EmailBuilder : has EmailBuilder --\u003e Template : uses EmailBuilder --\u003e Stationary : uses Mailer --\u003e Email : uses EmailBuilder --\u003e Email : creates OrderEmailTemplate --\u003e Template : inherits HalloweenStationary --\u003e Stationary : implements 3.6 Flyweight The Flyweight Design Pattern is a structural design pattern used to optimize memory usuage by sharing common data across multiple objects. In this pattern, an object is divided into two categories: intrinsic state and extrinsic state.\nIntrinsic state refers to the data that is shared and remains consistent across different instances. It is usually stored within the Flyweight object. Extrinsic state, on the other hand, refers to data that can vary between instances. This state is typically managed and provided by the client or the object using the Flyweight. SHOW CODE Java import java.time.Duration; import java.util.HashMap; import java.util.Map; // Interface implemented by Flyweights interface ErrorMessage { // Get error message String getText(String code); } // A concrete Flyweight. Instance is shared class SystemErrorMessage implements ErrorMessage { // some error message $errorCode private String messageTemplate; // http://somedomain.com/help?error= private String helpUrlBase; public SystemErrorMessage(String messageTemplate, String helpUrlBase) { this.messageTemplate = messageTemplate; this.helpUrlBase = helpUrlBase; } @Override public String getText(String code) { return messageTemplate.replace(\"$errorCode\", code) + helpUrlBase + code; } } // Unshared concrete flyweight. class UserBannedErrorMessage implements ErrorMessage { // All state is defined here private String caseId; private String remarks; private Duration banDuration; private String msg; public UserBannedErrorMessage(String caseId) { // Load case info from DB. this.caseId = caseId; remarks = \"You violated terms of use.\"; banDuration = Duration.ofDays(2); msg = \"You are BANNED. Sorry. \\nMore information:\\n\"; msg += caseId + \"\\n\"; msg += remarks + \"\\n\"; msg += \"Banned For:\" + banDuration.toHours() + \" Hours\"; } // We ignore the extrinsic state argument @Override public String getText(String code) { return msg; } public String getCaseNo() { return caseId; } } // Flyweight factory. Returns shared flyweight based on key class ErrorMessageFactory { // This serves as key for getting flyweight instance public enum ErrorType { GenericSystemError, PageNotFoundError, ServerError } private static final ErrorMessageFactory FACTORY = new ErrorMessageFactory(); public static ErrorMessageFactory getInstance() { return FACTORY; } private Map\u0026lt;ErrorType, SystemErrorMessage\u0026gt; errorMessages = new HashMap\u0026lt;\u0026gt;(); private ErrorMessageFactory() { errorMessages.put(ErrorType.GenericSystemError, new SystemErrorMessage(\"A genetic error of type $errorCode occurred. Please refer to:\\n\", \"https://google.com/q=\")); errorMessages.put(ErrorType.PageNotFoundError, new SystemErrorMessage(\"Page not found. An error of type $errorCode occurred. Please refer to:\\n\", \"https://google.com/q=\")); } public SystemErrorMessage getError(ErrorType type) { return errorMessages.get(type); } public UserBannedErrorMessage getUserBannedMessage(String caseId) { return new UserBannedErrorMessage(caseId); } } // Client public class Client { public static void main(String[] args) { // Accessing shared flyweight objects SystemErrorMessage msg1 = ErrorMessageFactory.getInstance().getError(ErrorMessageFactory.ErrorType.GenericSystemError); System.out.println(msg1.getText(\"4056\")); // Accessing unshared flyweight objects UserBannedErrorMessage msg2 = ErrorMessageFactory.getInstance().getUserBannedMessage(\"1202\"); System.out.println(msg2.getText(null)); } } SHOW OUTPUT Output A genetic error of type 4056 occurred. Please refer to: https://google.com/q=4056 You are BANNED. Sorry. More information: 1202 You violated terms of use. Banned For:48 Hours --- title: UML Diagram of Flyweight Design Pattern --- classDiagram class ErrorMessage { +getText(code: String): String } class SystemErrorMessage { -messageTemplate: String -helpUrlBase: String +getText(code: String): String } class UserBannedErrorMessage { -caseId: String -remarks: String -banDuration: Duration -msg: String +getText(code: String): String +getCaseNo(): String } class ErrorMessageFactory { -errorMessages: Map~ErrorType, SystemErrorMessage~ +getInstance(): ErrorMessageFactory +getError(type: ErrorType): SystemErrorMessage +getUserBannedMessage(caseId: String): UserBannedErrorMessage } class Client { +main(args: String[]): void } ErrorMessage \u003c|-- SystemErrorMessage ErrorMessage \u003c|-- UserBannedErrorMessage ErrorMessageFactory *--\u003e SystemErrorMessage ErrorMessageFactory *--\u003e UserBannedErrorMessage Client --\u003e ErrorMessageFactory 3.7 Proxy The Proxy Design Pattern is a structural design pattern that involves using a proxy object to represent another object. The proxy controls access to the real object and can add additional functionality, such aas lazy initialization, logging, or monitoring. This pattern can be primarily categorized into two types: Static Proxy and Dynamic Proxy.\nThe Static Proxy is created at compile time, where a separate proxy class is written to manage method calls to the real object. In contrast, the Dynamic Proxy is created at runtime, often using reflection techniques in languages like Java. A dynamic proxy delegates method calls to the real object without the need for manually creating a proxy class.\nSHOW CODE: Static Proxy Java // Point2D class to represent the location of the image class Point2D { private final float x; private final float y; public Point2D(float x, float y) { this.x = x; this.y = y; } @Override public String toString() { return \"Point2D [x=\" + x + \", y=\" + y + \"]\"; } } // Interface implemented by proxy and concrete objects interface Image { void setLocation(Point2D point2d); Point2D getLocation(); void render(); } // Concrete class providing actual functionality class BitmapImage implements Image { private Point2D location; private final String name; public BitmapImage(String filename) { // Loads image from file on disk System.out.println(\"Loaded from disk: \" + filename); name = filename; } @Override public void setLocation(Point2D point2d) { location = point2d; } @Override public Point2D getLocation() { return location; } @Override public void render() { // Renders to screen System.out.println(\"Rendered \" + this.name); } } // Proxy class class ImageProxy implements Image { private final String name; private BitmapImage image; private Point2D location; public ImageProxy(String name) { this.name = name; } @Override public void setLocation(Point2D point2d) { if (image != null) { image.setLocation(point2d); } else { location = point2d; } } @Override public Point2D getLocation() { if (image != null) { return image.getLocation(); } return location; } @Override public void render() { if (image == null) { image = new BitmapImage(name); if (location != null) { image.setLocation(location); } } image.render(); } } // Factory to get image objects class ImageFactory { // We'll provide proxy to caller instead of real object public static Image getImage(String name) { return new ImageProxy(name); } } // Client class to test the proxy pattern public class Client { public static void main(String[] args) { Image img = ImageFactory.getImage(\"A1.bmp\"); img.setLocation(new Point2D(10, 10)); System.out.println(\"Image location: \" + img.getLocation()); System.out.println(\"Rendering image now...\"); img.render(); } } SHOW OUTPUT Output Image location: Point2D [x=10.0, y=10.0] Rendering image now... Loaded from disk: A1.bmp Rendered A1.bmp --- title: UML Diagram of Static Proxy Design Pattern --- classDiagram class Image { + setLocation(Point2D point2d) + Point2D getLocation() + render() } class BitmapImage { - Point2D location - String name + BitmapImage(String filename) + setLocation(Point2D point2d) + getLocation(): Point2D + render() } class ImageProxy { - String name - BitmapImage image - Point2D location + ImageProxy(String name) + setLocation(Point2D point2d) + getLocation(): Point2D + render() } class ImageFactory { + getImage(String name): Image } class Client { + main(String[] args) } Image \u003c|.. BitmapImage : implements Image \u003c|.. ImageProxy : implements ImageFactory --|\u003e ImageProxy : creates Client --\u003e ImageFactory : uses ImageProxy \"1\" --\u003e \"0..1\" BitmapImage : contains SHOW CODE: Dynamic Proxy Java import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; // Point2D class to represent the location of the image class Point2D { private final float x; private final float y; public Point2D(float x, float y) { this.x = x; this.y = y; } @Override public String toString() { return \"Point2D [x=\" + x + \", y=\" + y + \"]\"; } } // Interface implemented by proxy and concrete objects interface Image { void setLocation(Point2D point2d); Point2D getLocation(); void render(); } // Concrete class providing actual functionality (BitmapImage) class BitmapImage implements Image { private Point2D location; private final String name; public BitmapImage(String filename) { // Loads image from file on disk System.out.println(\"Loaded from disk: \" + filename); name = filename; } @Override public void setLocation(Point2D point2d) { location = point2d; } @Override public Point2D getLocation() { return location; } @Override public void render() { // Renders to screen System.out.println(\"Rendered \" + this.name); } } // InvocationHandler to implement proxy behavior class ImageInvocationHandler implements InvocationHandler { private final String filename; private Point2D location; private BitmapImage image; private static final Method setLocationMethod; private static final Method getLocationMethod; private static final Method renderMethod; static { try { setLocationMethod = Image.class.getMethod(\"setLocation\", Point2D.class); getLocationMethod = Image.class.getMethod(\"getLocation\"); renderMethod = Image.class.getMethod(\"render\"); } catch (NoSuchMethodException e) { throw new NoSuchMethodError(e.getMessage()); } } public ImageInvocationHandler(String filename) { this.filename = filename; } @Override public Object invoke(Object proxy, Method method, Object[] args) { System.out.println(\"Invoking method: \" + method.getName()); if (method.equals(setLocationMethod)) { return handleSetLocation(args); } else if (method.equals(getLocationMethod)) { return handleGetLocation(); } else if (method.equals(renderMethod)) { return handleRender(); } return null; } private Object handleRender() { if (image == null) { image = new BitmapImage(filename); if (location != null) { image.setLocation(location); } } image.render(); return null; } private Point2D handleGetLocation() { if (image != null) { return image.getLocation(); } else { return this.location; } } private Object handleSetLocation(Object[] args) { if (image != null) { image.setLocation((Point2D) args[0]); } else { this.location = (Point2D) args[0]; } return null; } } // Factory to provide the proxy object class ImageFactory { public static Image getImage(String name) { return (Image) Proxy.newProxyInstance( ImageFactory.class.getClassLoader(), new Class[]{Image.class}, new ImageInvocationHandler(name) ); } } // Client class to test the proxy pattern public class Client { public static void main(String[] args) { Image img = ImageFactory.getImage(\"A.bmp\"); img.setLocation(new Point2D(-10, 0)); System.out.println(img.getLocation()); System.out.println(\"*****************************\"); img.render(); } } SHOW OUTPUT Output Invoking method: setLocation Invoking method: getLocation Point2D [x=-10.0, y=0.0] ***************************** Invoking method: render Loaded from disk: A.bmp Rendered A.bmp --- title: UML Diagram of Dynamic Proxy Design Pattern --- classDiagram class Image { +setLocation(Point2D point2d) +getLocation(): Point2D +render() } class BitmapImage { -Point2D location -String name +BitmapImage(String filename) +setLocation(Point2D point2d) +getLocation(): Point2D +render() } class ImageInvocationHandler { -String filename -Point2D location -BitmapImage image +ImageInvocationHandler(String filename) +invoke(Object proxy, Method method, Object[] args) -handleRender() -handleGetLocation(): Point2D -handleSetLocation(Object[] args) } class ImageFactory { +getImage(String name): Image } class Client { +main(String[] args) } Image \u003c|.. BitmapImage : implements Image \u003c|.. ImageInvocationHandler : delegates ImageFactory ..\u003e ImageInvocationHandler : creates Client ..\u003e ImageFactory : uses ImageInvocationHandler \"1\" -- \"1\" BitmapImage : image 4. Behavioral Design Patterns Behavioral Design Patterns focus on the communication and interaction between objects or components in a system.\n4.1 Chain of Responsibility The Chain of Responsibility Design Pattern is a behavioral design pattern that allows a request to be passed along a chain of handlers, where each handler either processes the request or passes it along to the next handler in the chain. The request will continue through the chain until it is handled by an appropriate handler or the end of the chain is reached.\nSHOW CODE Java import java.time.LocalDate; import java.time.Period; // Represents a request in our chain of responsibility class LeaveApplication { public enum Type {Sick, PTO, LOP} public enum Status {Pending, Approved, Rejected} private final Type type; private final LocalDate from; private final LocalDate to; private String processedBy; private Status status; public LeaveApplication(Type type, LocalDate from, LocalDate to) { this.type = type; this.from = from; this.to = to; this.status = Status.Pending; } public Type getType() { return type; } public LocalDate getFrom() { return from; } public LocalDate getTo() { return to; } public int getNoOfDays() { return Period.between(from, to).getDays(); } public String getProcessedBy() { return processedBy; } public Status getStatus() { return status; } public void approve(String approvalName) { this.status = Status.Approved; this.processedBy = approvalName; } public void reject(String approvalName) { this.status = Status.Rejected; this.processedBy = approvalName; } public static Builder getBuilder() { return new Builder(); } @Override public String toString() { return type + \" leave for \" + getNoOfDays() + \" day(s) \" + status + \" by \" + processedBy; } // Builder pattern for LeaveApplication public static class Builder { private Type type; private LocalDate from; private LocalDate to; private LeaveApplication application; private Builder() { } public Builder withType(Type type) { this.type = type; return this; } public Builder from(LocalDate from) { this.from = from; return this; } public Builder to(LocalDate to) { this.to = to; return this; } public LeaveApplication build() { this.application = new LeaveApplication(type, from, to); return this.application; } public LeaveApplication getApplication() { return application; } } } // This represents a handler in chain of responsibility interface LeaveApproval { void processLeaveApplication(LeaveApplication application); String getApprovalRole(); } // Abstract handler abstract class Employee implements LeaveApproval { private final String role; private final LeaveApproval successor; public Employee(String role, LeaveApproval successor) { this.role = role; this.successor = successor; } @Override public void processLeaveApplication(LeaveApplication application) { if (!processRequest(application) \u0026\u0026 successor != null) { successor.processLeaveApplication(application); } } protected abstract boolean processRequest(LeaveApplication application); @Override public String getApprovalRole() { return role; } } // A concrete handler: Manager class Manager extends Employee { public Manager(LeaveApproval nextApproval) { super(\"Manager\", nextApproval); } @Override protected boolean processRequest(LeaveApplication application) { switch (application.getType()) { case Sick: application.approve(getApprovalRole()); return true; case PTO: if (application.getNoOfDays() \u003c= 5) { application.approve(getApprovalRole()); return true; } } return false; } } // A concrete handler: ProjectLead class ProjectLead extends Employee { public ProjectLead(LeaveApproval successor) { super(\"Project Lead\", successor); } @Override protected boolean processRequest(LeaveApplication application) { if (application.getType() == LeaveApplication.Type.Sick) { if (application.getNoOfDays() \u003c= 2) { application.approve(getApprovalRole()); return true; } } return false; } } // A concrete handler: Director class Director extends Employee { public Director(LeaveApproval nextApproval) { super(\"Director\", nextApproval); } @Override protected boolean processRequest(LeaveApplication application) { if (application.getType() == LeaveApplication.Type.PTO) { application.approve(getApprovalRole()); return true; } return false; } } // Client class to test the Chain of Responsibility public class Client { public static void main(String[] args) { LeaveApplication application = LeaveApplication.getBuilder() .withType(LeaveApplication.Type.PTO) .from(LocalDate.now()) .to(LocalDate.of(2025, 1, 8)) .build(); System.out.println(application); System.out.println(\"**************************************************\"); LeaveApproval approval = createChain(); approval.processLeaveApplication(application); System.out.println(application); } private static LeaveApproval createChain() { Director director = new Director(null); Manager manager = new Manager(director); ProjectLead lead = new ProjectLead(manager); return lead; } } SHOW OUTPUT Output PTO leave for 8 day(s) Pending by null ************************************************** PTO leave for 8 day(s) Approved by Director --- title: UML Diagram of Chain of Responsibility Design Pattern --- classDiagram class LeaveApproval { +void processLeaveApplication(LeaveApplication) +String getApprovalRole() } class Employee { +String role +LeaveApproval successor +Employee(String, LeaveApproval) +void processLeaveApplication(LeaveApplication) +String getApprovalRole() +protected abstract boolean processRequest(LeaveApplication) } class Manager { +Manager(LeaveApproval) +boolean processRequest(LeaveApplication) } class ProjectLead { +ProjectLead(LeaveApproval) +boolean processRequest(LeaveApplication) } class Director { +Director(LeaveApproval) +boolean processRequest(LeaveApplication) } LeaveApproval \u003c|-- Employee : implements Employee \u003c|-- Manager : extends Employee \u003c|-- ProjectLead : extends Employee \u003c|-- Director : extends Employee *--|\u003e LeaveApproval 4.2 Command The Command Design Pattern is a behavioral design pattern that turns a request into a stand-alone object, allowing the decoupling of the sender of the request from the object that processes the request.\nSHOW CODE Java import java.util.LinkedList; import java.util.List; // Command interface implemented by all concrete command classes interface Command { void execute(); } // Concrete implementation of Command class AddMemberCommand implements Command { private String emailAddress; private String listName; private EWSService receiver; public AddMemberCommand(String email, String listName, EWSService service) { this.emailAddress = email; this.listName = listName; this.receiver = service; } @Override public void execute() { receiver.addMember(emailAddress, listName); } } // Receiver class that performs the actual action class EWSService { // Add a new member to mailing list public void addMember(String contact, String contactGroup) { System.out.println(\"Added \" + contact + \" to \" + contactGroup); } // Remove member from mailing list public void removeMember(String contact, String contactGroup) { System.out.println(\"Removed \" + contact + \" from \" + contactGroup); } } // Invoker class that executes commands on a separate thread class MailTasksRunner implements Runnable { private Thread runner; private List\u0026lt;Command\u0026gt; pendingCommands; private volatile boolean stop; private static final MailTasksRunner RUNNER = new MailTasksRunner(); public static final MailTasksRunner getInstance() { return RUNNER; } private MailTasksRunner() { pendingCommands = new LinkedList\u0026lt;\u0026gt;(); runner = new Thread(this); runner.start(); } // Run method that takes pending commands and executes them @Override public void run() { while (true) { Command cmd = null; synchronized (pendingCommands) { if (pendingCommands.isEmpty()) { try { pendingCommands.wait(); } catch (InterruptedException e) { System.out.println(\"Runner interrupted\"); if (stop) { System.out.println(\"Runner stopping\"); return; } } } cmd = pendingCommands.isEmpty() ? null : pendingCommands.remove(0); } if (cmd == null) { return; } cmd.execute(); } } // Adds a command to the pending commands list for later execution public void addCommand(Command cmd) { synchronized (pendingCommands) { pendingCommands.add(cmd); pendingCommands.notifyAll(); } } // Stops the runner thread public void shutdown() { this.stop = true; this.runner.interrupt(); } } // Client class that demonstrates how the Command pattern works public class Client { public static void main(String[] args) throws InterruptedException { EWSService service = new EWSService(); // Create commands and add them to the runner for execution Command c1 = new AddMemberCommand(\"a@a.com\", \"spam\", service); MailTasksRunner.getInstance().addCommand(c1); Command c2 = new AddMemberCommand(\"b@b\", \"spam\", service); MailTasksRunner.getInstance().addCommand(c2); // Wait for a while to let commands execute Thread.sleep(3000); // Shutdown the runner MailTasksRunner.getInstance().shutdown(); } } --- title: UML Diagram of Command Design Pattern --- classDiagram class Command { +execute() } class AddMemberCommand { -String emailAddress -String listName -EWSService receiver +AddMemberCommand(email: String, listName: String, service: EWSService) +execute() } class EWSService { +addMember(contact: String, contactGroup: String) +removeMember(contact: String, contactGroup: String) } class MailTasksRunner { -Thread runner -List~Command~ pendingCommands -volatile boolean stop -static final MailTasksRunner RUNNER +getInstance(): MailTasksRunner +addCommand(cmd: Command) +shutdown() +run() } class Client { +main(args: String[]) } Command \u003c|-- AddMemberCommand AddMemberCommand --\u003e EWSService : uses MailTasksRunner --\u003e Command : invokes Client --\u003e MailTasksRunner : uses 4.3 Interpreter The Interpreter Design Pattern is a behavioral design pattern used to define a grammatical representation for a language and provide an interpreter to evaluate sentences in that language. It is commonly used to interpret expressions in a simple language or grammar.\nSHOW CODE Java import java.util.ArrayList; import java.util.List; import java.util.Stack; import java.util.StringTokenizer; import java.util.stream.Stream; // User class class User { private List\u0026lt;String\u0026gt; permissions; private String username; public User(String username, String... permissions) { this.username = username; this.permissions = new ArrayList\u0026lt;\u0026gt;(); Stream.of(permissions).forEach(e -\u003e this.permissions.add(e.toLowerCase())); } public List\u0026lt;String\u0026gt; getPermissions() { return permissions; } public String getUsername() { return username; } } // Abstract expression interface PermissionExpression { boolean interpret(User user); } // Terminal expression class Permission implements PermissionExpression { private String permission; public Permission(String permission) { this.permission = permission.toLowerCase(); } @Override public boolean interpret(User user) { return user.getPermissions().contains(permission); } @Override public String toString() { return permission; } } // Non-terminal expression class AndExpression implements PermissionExpression { private PermissionExpression expression1; private PermissionExpression expression2; public AndExpression(PermissionExpression expression1, PermissionExpression expression2) { this.expression1 = expression1; this.expression2 = expression2; } @Override public boolean interpret(User user) { return expression1.interpret(user) \u0026\u0026 expression2.interpret(user); } @Override public String toString() { return expression1 + \" AND \" + expression2; } } // Non-terminal expression class OrExpression implements PermissionExpression { private PermissionExpression expression1; private PermissionExpression expression2; public OrExpression(PermissionExpression one, PermissionExpression two) { this.expression1 = one; this.expression2 = two; } @Override public boolean interpret(User user) { return expression1.interpret(user) || expression2.interpret(user); } @Override public String toString() { return expression1 + \" OR \" + expression2; } } // Non-terminal expression class NotExpression implements PermissionExpression { private PermissionExpression expression; public NotExpression(PermissionExpression expression) { this.expression = expression; } @Override public boolean interpret(User user) { return !expression.interpret(user); } @Override public String toString() { return \"NOT \" + expression; } } // Report class class Report { private String name; private String permission; public Report(String name, String permissions) { this.name = name; this.permission = permissions; } public String getName() { return name; } public String getPermission() { return permission; } } // Parses \u0026 builds abstract syntax tree class ExpressionBuilder { private Stack\u0026lt;PermissionExpression\u0026gt; permissions = new Stack\u0026lt;\u0026gt;(); private Stack\u0026lt;String\u0026gt; operators = new Stack\u0026lt;\u0026gt;(); public PermissionExpression build(Report report) { parse(report.getPermission()); buildExpressions(); if (permissions.size() \u003e 1 || !operators.isEmpty()) { System.out.println(\"ERROR!\"); } return permissions.pop(); } private void parse(String permission) { StringTokenizer tokenizer = new StringTokenizer(permission.toLowerCase()); while (tokenizer.hasMoreTokens()) { String token = tokenizer.nextToken(); switch (token) { case \"and\": operators.push(\"and\"); break; case \"not\": operators.push(\"not\"); break; case \"or\": operators.push(\"or\"); break; default: permissions.push(new Permission(token)); break; } } } private void buildExpressions() { while (!operators.isEmpty()) { String operator = operators.pop(); PermissionExpression perm1; PermissionExpression perm2; PermissionExpression exp; switch (operator) { case \"not\": perm1 = permissions.pop(); exp = new NotExpression(perm1); break; case \"and\": perm1 = permissions.pop(); perm2 = permissions.pop(); exp = new AndExpression(perm1, perm2); break; case \"or\": perm1 = permissions.pop(); perm2 = permissions.pop(); exp = new OrExpression(perm1, perm2); break; default: throw new IllegalArgumentException(\"Unknown operator:\" + operator); } permissions.push(exp); } } } // Client class public class Client { public static void main(String[] args) { Report report1 = new Report(\"Cash flow report\", \"FINANCE_ADMIN OR ADMIN\"); ExpressionBuilder builder = new ExpressionBuilder(); PermissionExpression exp = builder.build(report1); System.out.println(exp); User user1 = new User(\"Dave\", \"USER\"); System.out.println(\"User access report: \" + exp.interpret(user1)); } } --- title: UML Diagram of Interpreter Design Pattern --- classDiagram class PermissionExpression { + interpret(User user): boolean } class Permission { - String permission + Permission(String permission) + interpret(User user): boolean + toString(): String } class AndExpression { - PermissionExpression expression1 - PermissionExpression expression2 + AndExpression(PermissionExpression expression1, PermissionExpression expression2) + interpret(User user): boolean + toString(): String } class OrExpression { - PermissionExpression expression1 - PermissionExpression expression2 + OrExpression(PermissionExpression expression1, PermissionExpression expression2) + interpret(User user): boolean + toString(): String } class NotExpression { - PermissionExpression expression + NotExpression(PermissionExpression expression) + interpret(User user): boolean + toString(): String } class ExpressionBuilder { - Stack~PermissionExpression~ permissions - Stack~String~ operators + build(Report report): PermissionExpression - parse(String permission) - buildExpressions() } class Client { + main(String[] args) } Permission --|\u003e PermissionExpression AndExpression --|\u003e PermissionExpression OrExpression --|\u003e PermissionExpression NotExpression --|\u003e PermissionExpression ExpressionBuilder --\u003e PermissionExpression Client --\u003e ExpressionBuilder 4.4 Mediator 4.5 Iterator 4.6 Momento 4.7 Observer 4.8 State 4.9 Strategy The Strategry Design Pattern is a behavioral design pattern that encapsulates a set of algorithms and allows a client to dynamically choose one at runtime based on the context. This pattern separates the algorithm from the existing code, enabling the addition of new algorithms without modifying the existing code.\nSHOW CODE Java import java.time.LocalDate; import java.util.Collection; import java.util.HashMap; import java.util.Iterator; import java.util.LinkedList; import java.util.Map; // Order class class Order { private final String id; private final LocalDate date; private final Map\u0026lt;String, Double\u0026gt; items = new HashMap\u0026lt;\u0026gt;(); private double total; public Order(String id) { this.id = id; this.date = LocalDate.now(); } public String getId() { return id; } public LocalDate getDate() { return date; } public Map\u0026lt;String, Double\u0026gt; getItems() { return items; } public void addItem(String name, double price) { items.put(name, price); total += price; } public double getTotal() { return total; } public void setTotal(double total) { this.total = total; } } // Strategy Interface interface OrderPrinter { void print(Collection\u0026lt;Order\u0026gt; orders); } // Concrete Strategy 1: Summary Printer class SummaryPrinter implements OrderPrinter { @Override public void print(Collection\u0026lt;Order\u0026gt; orders) { System.out.println(\"*************** Summary Report *************\"); Iterator\u0026lt;Order\u0026gt; iterator = orders.iterator(); double total = 0; for (int i = 1; iterator.hasNext(); i++) { Order order = iterator.next(); System.out.println(i + \". \" + order.getId() + \"\\t\" + order.getDate() + \"\\t\" + order.getItems().size() + \"\\t\" + order.getTotal()); total += order.getTotal(); } System.out.println(\"*******************************************\"); System.out.println(\"\\t\\t\\t\\t Total \" + total); } } // Concrete Strategy 2: Detail Printer class DetailPrinter implements OrderPrinter { @Override public void print(Collection\u0026lt;Order\u0026gt; orders) { System.out.println(\"************* Detail Report ***********\"); Iterator\u0026lt;Order\u0026gt; iter = orders.iterator(); double total = 0; for (int i = 1; iter.hasNext(); i++) { double orderTotal = 0; Order order = iter.next(); System.out.println(i + \". \" + order.getId() + \"\\t\" + order.getDate()); for (Map.Entry\u0026lt;String, Double\u0026gt; entry : order.getItems().entrySet()) { System.out.println(\"\\t\\t\" + entry.getKey() + \"\\t\" + entry.getValue()); orderTotal += entry.getValue(); } System.out.println(\"----------------------------------------\"); System.out.println(\"\\t\\t Total \" + orderTotal); System.out.println(\"----------------------------------------\"); total += orderTotal; } System.out.println(\"----------------------------------------\"); System.out.println(\"\\tGrand Total \" + total); } } // PrintService class for context class PrintService { private final OrderPrinter printer; public PrintService(OrderPrinter printer) { this.printer = printer; } public void printOrders(Collection\u0026lt;Order\u0026gt; orders) { printer.print(orders); } } // Client class to simulate the creation of orders and print them public class Main { private static final LinkedList\u0026lt;Order\u0026gt; orders = new LinkedList\u0026lt;\u0026gt;(); public static void main(String[] args) { createOrders(); // Print all orders using DetailPrinter strategy PrintService service1 = new PrintService(new DetailPrinter()); service1.printOrders(orders); System.out.println(\"\\n\"); // Print all orders using DetailPrinter strategy PrintService service2 = new PrintService(new SummaryPrinter()); service2.printOrders(orders); } private static void createOrders() { Order o = new Order(\"100\"); o.addItem(\"Soda\", 2); o.addItem(\"Chips\", 10); orders.add(o); o = new Order(\"200\"); o.addItem(\"Cake\", 20); o.addItem(\"Cookies\", 5); orders.add(o); o = new Order(\"300\"); o.addItem(\"Burger\", 8); o.addItem(\"Fries\", 5); orders.add(o); } } SHOW OUTPUT Output ************* Detail Report *********** 1. 100\t2024-12-07 Chips\t10.0 Soda\t2.0 ---------------------------------------- Total 12.0 ---------------------------------------- 2. 200\t2024-12-07 Cookies\t5.0 Cake\t20.0 ---------------------------------------- Total 25.0 ---------------------------------------- 3. 300\t2024-12-07 Burger\t8.0 Fries\t5.0 ---------------------------------------- Total 13.0 ---------------------------------------- ---------------------------------------- Grand Total 50.0 *************** Summary Report ************* 1. 100\t2024-12-07\t2\t12.0 2. 200\t2024-12-07\t2\t25.0 3. 300\t2024-12-07\t2\t13.0 ******************************************* Total 50.0 --- title: UML Diagram of Strategy Design Pattern --- classDiagram class Order { +String id +LocalDate date +Map~String, Double~ items +double total +Order(String id) +String getId() +LocalDate getDate() +Map~String, Double~ getItems() +void addItem(String name, double price) +double getTotal() +void setTotal(double total) } class OrderPrinter { +void print(Collection~Order~ orders) } class SummaryPrinter { +void print(Collection~Order~ orders) } class DetailPrinter { +void print(Collection~Order~ orders) } class PrintService { +OrderPrinter printer +PrintService(OrderPrinter printer) +void printOrders(Collection~Order~ orders) } OrderPrinter \u003c|-- SummaryPrinter OrderPrinter \u003c|-- DetailPrinter PrintService *--\u003e OrderPrinter PrintService --\u003e Order 4.10 Template Method 4.11 Visitor 4.12 Null Object ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/design-patterns/1-design-patterns/","summary":"1. Solid Principle 1.1 Single Responsibility Principle A class should have only one reason to change, meaning each class should focus on a single functionality or responsibility.\nSHOW CODE Single Responsibility Principle import java.io.IOException; import java.util.*; import java.util.regex.*; import com.fasterxml.jackson.databind.ObjectMapper; /** * 1. User class is only used to represent entity. * 2. UserValidator class is solely responsible for validating user objects. * 3. Store class is only used to manage user objects storage.","title":"Design Patterns"},{"content":"Introduction to Databases A database is a collection of data that is stored, managed, and accessed electronically. It typically contains one or more tables, which resemble Excel or Google sheets, with data organized into rows and columns. As the number of tables grows, managing the database can become complex, making it essential to design a scalable and maintainable strucutre.\nDatabases can be broadly categorized into two types: Relational database, primarily used for real-time data updates and transactions, and data warehouse, optimized for data analysis and reporting purposes.\nData Modeling Data modeling is the process of creating a conceptual representation of data structures, relationships, and rule to meet business requirements. It serves as a blueprint for designing and managing a database.\nThere are three types of data models: conceptual, logical, and physical. The conceptual data model provides a high-level overview, specifying relationships between objects without technical details. The logical data model refine the conceptual data model by adding more detail, such as fields for each object. The physical data model describe the internal schema of the database, including table structures, storage details, and implementation specifics.\n--- title: Conceptual Data Model --- erDiagram Customer ||--o{ Order : places Order ||--|{ Product : contains --- title: Logical Data Model --- erDiagram Customer { int customerId string name string email } Order { int orderId date orderDate float totalAmount } Product { int productId string productName float price } Customer ||--o{ Order : places Order ||--|{ Product : contains --- title: Physical Data Model --- erDiagram Customer { int customerId PK varchar name varchar email } Order { int orderId PK date orderDate float totalAmount int customerId FK } Product { int productId PK varchar productName decimal price } OrderItem { int orderItemId PK int orderId FK int productId FK int quantity } Customer ||--o{ Order : places Order ||--|{ OrderItem : includes OrderItem ||--|{ Product : contains Example: University Enrollment Management System Entities In database design, an entity is a distinct object that typically represents real-world objects, events, or concepts. Entities are represented as tables in a relational database, and they are similar to classes in object-oriented design. Each row in the table represents an instance of the entity. Each entity has attributes that describe its characteristics. For example, a Student entity may have attributes like student_id, first_name, last_name, and date_of_birth, among others. Entities can be related to one another, and these relationships are often captured using foreign keys or relationship tables, which link entities together based on logical associations. For example, a Student might be linked to a Course through an enrollment relationship.\nIdentifying Entities Identifying entities in database design is a crucial step, as entities form the foundation of a database. A useful approach for identifying entities is to clarify the design objectives and look for nouns in the objective statement. For example, consider the University Enrollment Management System. The objective statement might be:\n\u0026ldquo;The University Enrollment Management System\u0026rdquo; is designed to help a university track enrolled students, the subjects they are taking, and the teachers assigned to those subjects\u0026quot;.\nIn this sentence, the nouns university, student, subject, and teacher are potential entities, as they represent key objects or concepts that the system needs to track.\n--- title: Identifying Entities --- erDiagram UNIVERSITY STUDENT erDiagram TEACHER SUBJECT Defining Attributes In database design, an attribute describes the characteristics of an entity. In a relational database, attributes are typically represented as columns in a table. Defining entity attributes is a crucial step in database design, as it ensures that the entity captures all the necessary details required by the system. When defining attributes, it\u0026rsquo;s important to consider what properties or characteristics the entity possesses.\nFor example, in a University Enrollment Management System, the Student entity might have attributes like first_name, last_name, date_of_birth, and address. After identifying the necessary attributes, the next step is to specify the approapriate data type for each attribute. For instance, attributes like first_name, last_name, and address would typically use the TEXT data type, while the date_of_birth attribute would be defined with the DATE data type.\n--- title: Defining Attributes --- erDiagram UNIVERSITY { string name string address } STUDENT { string first_name string last_name date date_of_birth string address } erDiagram SUBJECT { string subject_name string category string students_enrolled } TEACHER { string first_name string last_name date date_of_birth string address string subject_taught } Normalization Normalization in database design is the process of organizing the attributes of entities and their relationships to reduce data redundency, avoid operational anomalies, and improve data integrity. Normalization involves decomposing a large, complex database into smaller, simpler tables while preserving the relationships between entities. This decomposition follows a set of rules called normal forms. In real-world database design, the three most commonly used normal normal forms are First Normal Form (1NF), Second Normal Form (2NF), and Third Normal Form (3NF).\nFirst Normal Form First Normal Form (1NF) is a property of a relational database table that ensures the table is structured properly. It follows the following conditions:\nEach column must contain atomic values, meaning that the value in a field should be indivisible and not contain sets or lists of values. Each row must be unique, which can be achieved by using a primary key to uniquely identify each record. All values in single column should be of the same data type. A Primary Key is a column (or a set of columns) in a relational database table that uniquely identifies each row in that table. It satisfies the following conditions:\nThe value in the primary key must be unique for each row. The value in the primary key must not be null for any record. The value in the primary key should generally be immutable, meaning it should not change once assigned. When designing tables, assess if any combination of columns can be used to uniquely identify a record. If such a combination exists, those columns can form the primary key. If no suitable combination is found, create a new column to serve as the primary key.\nA primary key can be a set of columns when a single column is not sufficient to uniquely identify a row. For example, in the following table, neither the StudentID nor the CourseID alone can uniquely identify a row, because a student might enroll mutiple courses, and a course can have multiple students. However, the combination of both columns can uniquely identify each enrollment record.\nStudentID CourseID EnrollmentDate 1 CS101 2024-01-01 1 MATH101 2024-01-02 2 CS101 2024-01-03 1NF: Student In the following Student table, there is no single field that can uniquely identify a row. Therefore, it is necessary to add a new field. such as StudentID, to ensure each row has a unique identifier. Additionally, the Address field may contain multiple values, such as unit number, street number, street name, suburb, city, state, country, and postcode. To comply with the First Normal Form (1NF), the Address firld must be divided into multiple separate columns, ensuring that each column contains only atomic values.\n--- title: Violation of 1NF - Student --- erDiagram STUDENT { string first_name string last_name date date_of_birth string address } --- title: Comply with 1NF - Student --- erDiagram STUDENT { number student_id PK string first_name string last_name date date_of_birth number unit_number number street_number string street_name string suburb string city string state string country string postcode } 1NF: Subject --- title: Violation of 1NF - Subject --- erDiagram SUBJECT { string subject_name string category string students_enrolled } --- title: Comply with 1NF - Subject --- erDiagram SUBJECT { number subject_id PK string subject_name string category string students_enrolled } 1NF: Teacher --- title: Violation of 1NF - Teacher --- erDiagram TEACHER { string first_name string last_name date date_of_birth string address string subject_taught } --- title: Comply with 1NF - Teacher --- erDiagram TEACHER { number teacher_id PK string first_name string last_name date date_of_birth number unit_number number street_number string street_name string suburb string city string state string country string postcode string subject_taught } 1NF: University --- title: Violation of 1NF - University --- erDiagram UNIVERSITY { string name string address } --- title: Comply with 1NF - University --- erDiagram UNIVERSITY { number university_id PK string name number unit_number number street_number string street_name string suburb string city string state string country string postcode } Second Normal Form The Second Normal Form (2NF) in database design is a level of normalization that builds upon the First Normal Form (1NF). A table is in 2NF if every non-key attribute is fully functionally dependent on the entire primary key, not just part of it, particularly in tables with composite primary keys (a key made up of two or more columns).\nRelationships Relationship in database design refers to the association between different entities (tables) in a database. It defines how data in one table is related to data in another table, enabling efficient organization and retrival of data. Relationships are established through a foreign key, which is a column in one table that references the primary key of another table. There are four main types of relationships: One-to-One (1:1), One-to-Many (1:N), Many-to-Many (N:M), and Self-Reference.\nIn a One to One relationship, each record in one table is related to exactly one record in another table. For example, consider a Person table and a Passport table, where each person has one unique passport, and each passport is associated with only one person. This type of relationship is relatively rare in real-world database design.\nThe One to Many relationship is the most common type in real-world database design. In a 1:N relationship, one record in a table can be linked to multiple records in another table. For example, in a Department table and an Employee table, one department can have many employees, but each employee blongs to exactly one department. This is a typical relational model for most business applications.\nThe Many-to-Many relationship is common but often requires an intermediary table to properly represent the association. In an N:M relationship, multiple records in one table can be asoociated with multiple records in another table. For instance, in a Student table and a Course table, a student can enroll in many courses, and each course can have many students enrolled. This relationship is typically handled by a joining table, such as Student_Course.\nIn a Self-Referencing relationship, a table is related to itself. In other words, a record in the table is associated with another record in the same table. For example, in an Employee table, each employee has a Manager, and that manager may also have a manager. This type of relationship is useful for representing hierarchical structures, such as organizational charts.\nIn database design, a foreign key is a column that references the primary key of another table. It is used to establish a relationship between two tables, ensuring referential integrity and maintaining consistent data across the database.\n2NF: Subject \u0026amp; Category In the following Subject table, the subject_name is dependent on the primary key subject_id, but the category is not fully dependent on the primary key, which violates 2NF. To resolve this issue, a new Category table should be created with two fields: category_id as the primary key and subject_id as a foreign key. The two tables have a One-to-Many relationship, where each category can have many subjects, while each subject bleongs to exactly one category.\n--- title: Violation of 2NF - Subject --- erDiagram SUBJECT { number subject_id PK string subject_name string category } --- title: Comply with 2NF - Subject --- erDiagram SUBJECT { number subject_id PK string subject_name number category_id FK } CATEGORY { number category_id PK string category_name } CATEGORY ||--|{ SUBJECT : \"\" 2NF: Student \u0026amp; Subject In the following Subject table, the subject_id and students_enrolled create a Many-to-Many relationship. However, relational databases should not represent Many-to-Many relationships directly in s single table. This is because a single table cannot handle multiple instances of related data (such as multiple students enrolled in multiple subjects) within a single field. To resolve this issue, a junction table is introduced. It breaks down the Many-to-Many relationship into two One-to-Many relationships, ensuring data integrity and normalization.\n--- title: Violation of 2NF - Subject --- erDiagram SUBJECT { number subject_id PK string subject_name string students_enrolled } subject_id subject_name students_name 1 Math Alice, Bob, Charlie 2 History David, Emily, Frank, Grace 3 Science Helen, Ian In the above table, the students_enrolled field violates First Normal Form (1NF), which requires each column to contain only atomic values. Additionally, this design leads to data redundancy. For example, if the student Alice enrolls in multiple courses such as Math, History, and Science. her name will be repeated in each row, causing unnecessary duplication of data.\nFurthermore, this design makes data manipulation more complex. For instance, when a student drops a course or a new student enrolls in a course, the list of students in the students_enrolled column must be manually updated, which is error-prone and inefficient.\n--- title: Comply with 2NF - Subject --- erDiagram SUBJECT { number subject_id PK string subject_name } STUDENT { number student_id PK string students_enrolled } ENROLLMENT { number subject_id FK number student_id FK } SUBJECT ||--|{ ENROLLMENT : \"has\" STUDENT ||--|{ ENROLLMENT : \"enrolled in\" Comply with 2NF: Real-World Example 2NF: Teacher --- title: Violation of 2NF - Teacher (subject_taught) --- erDiagram TEACHER { number teacher_id string first_name string last_name date date_of_birth string subject_taught } --- title: Comply with 2NF - Teacher --- erDiagram TEACHER { number teacher_id string first_name string last_name date date_of_birth } SUBJECT { number subject_id PK string subject_name number category_id FK number teacher_id FK } TEACHER ||--|{ SUBJECT : \"teaches\" 2NF: University --- title: Comply with 2NF - UNIVERSITY --- erDiagram UNIVERSITY { number university_id PK string name } SUBJECT { number subject_id PK string subject_name number category_id FK number teacher_id FK number university_id FK } UNIVERSITY ||--|{ SUBJECT : \"\" Third Normal From Third Normal Form (3NF) is a level of normalization that satisfies Second Normal Form (2NF) and eliminates transitive dependencies. In simpler terms, a non-key attribute in a table should not depend on another non-key attrubute. For example, if A $\\rightarrow$ B and B $\\rightarrow$ C, then A $\\rightarrow$ C, which means C should be moved to a separate table to avoid redundency. This process helps reduce data redundency and improves the efficiency of relational databases.\n3NF: Student In the following Student table, the non-key attributes (unit_number, street_number, street_name, suburb, city, state, country, and postcode) are not directly dependent on the primary key student_id; instead, they depend on the student\u0026rsquo;s address. This results in a transitive dependency, which violates 3NF. Furthermore, since multiple students may share the same address, these address attributes will be repeated for each student, leading to data redundency.\n--- title: Violation of 3NF - Student --- erDiagram STUDENT { number student_id PK string first_name string last_name date date_of_birth number unit_number number street_number string street_name string suburb string city string state string country string postcode } --- title: Comply with 3NF - Student --- erDiagram STUDENT { number student_id PK string first_name string last_name date date_of_birth number address_id FK } ADDRESS { number address_id PK number unit_number number street_number string street_name string suburb string city string state string country string postcode } STUDENT ||--|{ ADDRESS : \"\" 3NF: Teacher --- title: Comply with 3NF - Teacher --- erDiagram TEACHER { number teacher_id PK string first_name string last_name date date_of_birth number address_id FK } ADDRESS { number address_id PK number unit_number number street_number string street_name string suburb string city string state string country string postcode } TEACHER ||--|{ ADDRESS : \"\" 3NF: University --- title: Comply with 3NF - University --- erDiagram UNIVERSITY { number university_id PK string name number address_id FK } ADDRESS { number address_id PK number unit_number number street_number string street_name string suburb string city string state string country string postcode } UNIVERSITY ||--|{ ADDRESS : \"\" Design Considerations Determine Data Types \u0026amp; Precision Determining data types and precision in database design is crucial for ensuring optimal storage, performance, and accuracy of data. There are typically three steps to determine the apprpriate data type and precision for a field:\nIdentifying the nature of the field: Determine the type of data the field will store—whether it\u0026rsquo;s numeric, string, or data/time. For example, the student_id field might be of type INT, while the first_time field might of type CHAR or VARCHAR. Choose the smallest sufficient data type: Select the samllest data type that can accommodate the required values. For example, if a field\u0026rsquo;s values range from -128 to 127, use TINYINT instead of INT to optimize performance and storage efficiency. Set precision and scale for numeric values: For numeric fields, it\u0026rsquo;s important to define the precision (total number of digits) and scale (number of digits after the decimal point). For example, a price field should be set to DECIMAL(10,2), which allows for 10 digits in total, with 2 digits after the decimal point. Integrity Constraints Integrity Constraints in database design are rules that ensure the accuracy, consistency, and validity of data. There are several types of integrity constraints, each serving a specific purpose:\nEntity Integrity Entity Integrity ensures that each record in a table is unique and identifiable. This is achieved by setting a column in a table as a primary key. For example, the student_id field must be unique for each record in the Student table.\nCREATE TABLE Student ( student_id INT PRIMARY KEY, first_name VARCHAR(100), last_name VARCHAR(100) ); Referencial Integrity Referencial Integrity ensures that relationships between tables are maintained consistently. Foreign keys enforce this constraint by ensuring that a value in one table corresbonds to a valid value in another table. For example, the student_id field in the Enrollment table serves as a foreign key referencing the primary key student_id in the Student table.\nCREATE TABLE Enrollment ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, FOREIGN KEY (student_id) REFERENCES Students(student_id) ); Domain Integrity Domain Integrity ensures that the data entered in a column matches the defined data type, format, and range. This is enforced using data types. default values. and check constraints. For example, the price field should only store positive values.\nCREATE TABLE Product ( product_id INT PRIMARY KEY, product_name VARCHAR(100), price DECIMAL(10, 2) CHECK (price \u0026gt; 0) ); User-Defined Integrity User-defined integrity enforces business rules specific to the application or domain. For instance, in the Enrollment table, the combination of student_id and course_id should be unique to prevent a student from enrolling in the same course more than once.\nCREATE TABLE Enrollment ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, UNIQUE (student_id, course_id) ); Null Integrity Null integrity ensures that certain fields cannot store NULL values. This is enforced by defining the column with the NOT NULL constraint. For example, the student_id field in the Student table must not be NULL because it is used to identify each record.\nCREATE TABLE Student ( student_id INT PRIMARY KEY NOT NULL, first_name VARCHAR(100) NOT NULL, last_name VARCHAR(100) NOT NULL ); ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/database/1-database-design/","summary":"Introduction to Databases A database is a collection of data that is stored, managed, and accessed electronically. It typically contains one or more tables, which resemble Excel or Google sheets, with data organized into rows and columns. As the number of tables grows, managing the database can become complex, making it essential to design a scalable and maintainable strucutre.\nDatabases can be broadly categorized into two types: Relational database, primarily used for real-time data updates and transactions, and data warehouse, optimized for data analysis and reporting purposes.","title":"Database Design"},{"content":"Recursion Recursion is a programming technique where a function repeatedly calls itself until it reaches a base case, whcih stops the recursion and allows it to return a result. It is a way of breaking down complex problems into smaller, simpler subproblems that are eaiser to solve.\nHead Recursion Head Recursion is a type of recursion where a function makes its recursive call first, immediately after checking the base case, and performs all other operations only after the recursive call returns.\nSHOW CODE: Head Recursion Head Recursion void printNumbers(int n) { if (n == 0) { return; // Base case } printNumbers(n - 1); // Recursive call printf(\"%d\\n\", n); // Processing after recursion } Call Stack Operation Current Value of n headRecursion(3) Call function 3 headRecursion(2) Call function 2 headRecursion(1) Call function 1 headRecursion(0) Base case, exit 0 Unwinding begins: printf(1) Print 1 1 printf(2) Print 2 2 printf(3) Print 3 3 Tail Recursion Tail Recursion is a type of recursion where a function makes its recursive call as the last operation in its body. with no further operations after the call. This type of recursion can be optimized by the compiler into an iterative loop through tail call optimization (TCO), which help reduce memory consumption by the reusing the stack frame.\nSHOW CODE: Tail Recursion Tail Recursion void tailRecursion(int n) { if (n \u003e 0) { printf(\"%d \", n); // Operation first tailRecursion(n - 1); // Recursive call at the end } } Call Stack Operation Current Value of n tailRecursion(3) Print 3 3 tailRecursion(2) Print 2 2 tailRecursion(1) Print 1 1 tailRecursion(0) Base case, exit 0 Tail recursion is generally perfered for performance when recursion depth is large because it can be optimized into an iterative process.\nSHOW CODE: Tail Recursion Optimization Tail Recursion Optimization void tailRecursionOptimized(int n) { while (n \u003e 0) { printf(\"%d \", n); // Operation first n--; // Decrement n, same as `tailRecursion(n - 1)` } } In the above code, optimized Loop replaces recursion with a loop, ensuring only a single stack frame is used.\nConditions for Tail Recursion: The recursive call must be the last operation in the function, and its result must be immediately returned without any further computation after the call.\nSHOW CODE: Tail Recursive Function Tail Recursive Function // Tail recursive function to calculate factorial int factorialTailRecursion(int n, int accumulator) { if (n == 0) { return accumulator; // Base case: return accumulated result } return factorialTailRecursion(n - 1, accumulator * n); // Recursive call is the last operation } SHOW CODE: Non-tail Recursive Function Non-tail recursive // Non-tail recursive function to calculate factorial int factorialNonTailRecursion(int n) { if (n == 0) { return 1; // Base case } return n * factorialNonTailRecursion(n - 1); // Recursive call is not the last operation } Tree Recursion Tree recursion is a type of recursion in which a function makes multiple recursive calls to itself in its body, it creates a tree-like data structure, as each call can branch into multiple additional calls.\nSHOW CODE C public int fib(int n) { if (n \u003c= 1) { return n; } return fib(n - 1) + fib(n - 2); } Recursion Tree Analysis:\n--- title: Recursion Tree Analysis - fibonacci sequence --- graph TD L0((\"fib\\(5\\)\")) --\u003e L1((\"fib\\(4\\)\")) L0 --\u003e L2((\"fib\\(3\\)\")) L1 --\u003e L3((\"fib\\(3\\)\")) L1 --\u003e L4((\"fib\\(2\\)\")) L2 --\u003e L5((\"fib\\(2\\)\")) L2 --\u003e L6((\"fib\\(1\\)\")) L3 --\u003e L7((\"fib\\(2\\)\")) L3 --\u003e L8((\"fib\\(1\\)\")) L4 --\u003e L9((\"fib\\(1\\)\")) L4 --\u003e L10((\"fib\\(0\\)\")) L5 --\u003e L11((\"fib\\(1\\)\")) L5 --\u003e L12((\"fib\\(0\\)\")) L7 --\u003e L13((\"fib\\(1\\)\")) L7 --\u003e L14((\"fib\\(0\\)\")) Array An array is a data structure that stores a collection of elements of the same type in a fixed-size, continguous block of memory. Arrays can be categorized into two types: static arrays and dynamic arrays.\nA static array has a fixed size that cannot be changed after its declaration. Memory for a static array is allocated at compile time, and its size must be explicitly specified.\nIn contrast, a dynamic array allows its size to be adjusted during runtime, enabling it to grow or shrink as needed. Unlike static arrays, the size of a dynamic array does not need to be specified at the time of declaration, and memory is allocated dynamically from the heap.\nImplementation of Static Arrays Implementation of Dynamic Arrays Compiler\u0026rsquo;s Memory Layout for Arrays The address of an array element is determined at runtime. Array elements are stored in a continguous block of memory, and the compiler calculates each element\u0026rsquo;s address using its index and the size of each element.\n1-Dimentional Array Element Access Formula (0-based index): $\\text{Addr}_{A[i]} = B + i \\times W$\nB: Base Address i: Zero-based Index of Each Element W: Size of Each Element SHOW CODE C #include \u0026lt;stdio.h\u0026gt; int main() { int arr[5] = {10, 20, 30, 40, 50}; for (int i = 0; i \u003c 5; i++) { void *addr_i = (void *) arr + (i * sizeof(int)); printf(\"Element at index %d: %d \\t Address: %p\\n\", i, arr[i], addr_i); } return 0; } SHOW OUTPUT Output Element at index 0: 10 Address: 0x7ff7bb0b7170 Element at index 1: 20 Address: 0x7ff7bb0b7174 Element at index 2: 30 Address: 0x7ff7bb0b7178 Element at index 3: 40 Address: 0x7ff7bb0b717c Element at index 4: 50 Address: 0x7ff7bb0b7180 2-Dimentional Array Element Access Formula (Row Major Order): $\\text{Addr}_{A[i][j]} = \\text{B} + [(i \\times \\text{C}) + j] \\times \\text{W}$\nB: Base Address i: Zero-based Row Index of Each Element j: Zero-based Column Index of Each ELement C: Number of Columns W: Size of Each Element SHOW CODE C #include \u0026lt;stdio.h\u0026gt; int main() { int arr[2][3] = {{1, 2, 3}, {4, 5, 6}}; for (int i = 0; i \u003c 2; i++) { for (int j = 0; j \u003c 3; j++) { void *addr_ij = (void *) \u0026arr + (i * 3 + j) * sizeof(int); printf(\"Element at [%d][%d]: %d, Address: %p\\n\", i, j, arr[i][j], addr_ij); } } return 0; } SHOW OUTPUT Output Element at [0][0]: 1, Address: 0x7ff7b2c64170 Element at [0][1]: 2, Address: 0x7ff7b2c64174 Element at [0][2]: 3, Address: 0x7ff7b2c64178 Element at [1][0]: 4, Address: 0x7ff7b2c6417c Element at [1][1]: 5, Address: 0x7ff7b2c64180 Element at [1][2]: 6, Address: 0x7ff7b2c64184 Why do most compilers use 0-based indexing? Take a 1-dimentional array as an example, the element access formula for a 0-based index is $\\text{Addr}_{A[i]} = B + i \\times W$. This formula requires two operations (multiplication and addition) to access each element in the array.\nIn contract, the formula for 1-based indexing is $\\text{Addr}_{A[i]} = B + (i - 1) \\times W$. This requires three operations (multiplication. subtraction, and addition). Compared to 0-based indexing, 1-based indexing introduces one additional operation, which becomes a significant overhead when dealing with large size arrays.\nString Matrix Linked List Stack Queue A Queue is a linear data structure that follows the First In, First Out (FIFO) principle, meaning elements are added to the back and removed from the front. There are four main types of queues: Simple Queue, Circular Queue, Double-Ended Queue (Deque), and Priority Queue.\nSimple Queue A Simple Queue is a basic type of queue data structure in which elements are added to the back and removed from the front, following the First In, First Out (FIFO) principle.\nImplementation of Simple Queue Array with a single pointer SHOW CODE Java class SimpleQueue { private final int[] queue; private final int capacity; private int rear; public SimpleQueue(int capacity) { this.queue = new int[capacity]; this.capacity = capacity; this.rear = -1; } public boolean isEmpty() { return rear == -1; } private boolean isFull() { return rear == capacity - 1; } public int size() { return rear + 1; } public void enqueue(int element) { if (this.isFull()) { System.out.println(\"Queue is full.\"); } else { rear++; queue[rear] = element; } } public int dequeue() { if (this.isEmpty()) { System.out.println(\"Queue is empty.\"); return -1; } int frontElement = queue[0]; // Shift all elements to the left for (int i = 0; i \u003c rear; i++) { queue[i] = queue[i + 1]; } rear--; return frontElement; } public int peek() { if (this.isEmpty()) { System.out.println(\"Queue is empty.\"); return -1; } return queue[0]; } } public class Main { public static void main(String[] args) { SimpleQueue queue = new SimpleQueue(5); queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); System.out.println(\"Front element: \" + queue.peek()); // Expected: 10 System.out.println(\"Dequeued: \" + queue.dequeue()); // Expected: 10 queue.enqueue(40); queue.enqueue(50); System.out.println(\"Queue size: \" + queue.size()); // Expected: 4 System.out.println(\"Dequeued: \" + queue.dequeue()); // Expected: 20 } } The implementation of a queue using an array with a single pointer (rear) is inefficient for deletion because the remaining elements need to be shifted left after every dequeue operation.\nArray with two pointers SHOW CODE Java class SimpleQueue { private final int[] queue; private final int capacity; private int front; private int rear; public SimpleQueue(int capacity) { this.capacity = capacity; queue = new int[capacity]; this.front = -1; this.rear = -1; } public boolean isEmpty() { return front == -1; } private boolean isFull() { return rear + 1 == capacity; } public int size() { if (this.isEmpty()) { return 0; } return rear - front + 1; } public void enqueue(int element) { if (this.isFull()) { System.out.println(\"Queue is full.\"); } else { // Set front to 0 when the first element is added if (front == -1) { front = 0; } rear++; queue[rear] = element; } } public int dequeue() { if (this.isEmpty()) { System.out.println(\"Queue is empty.\"); return -1; } else { int frontElement = queue[front]; // Reset both pointers to -1 when the queue has only one element if (front == rear) { front = -1; rear = -1; } else { // Move front to the next element front++; } return frontElement; } } public int peek() { if (this.isEmpty()) { System.out.println(\"Queue is empty.\"); return -1; } else { return queue[front]; } } } public class Main { public static void main(String[] args) { SimpleQueue queue = new SimpleQueue(5); queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); System.out.println(\"Front element: \" + queue.peek()); // Expected: 10 System.out.println(\"Dequeued: \" + queue.dequeue()); // Expected: 10 queue.enqueue(40); queue.enqueue(50); System.out.println(\"Queue size: \" + queue.size()); // Expected: 3 System.out.println(\"Dequeued: \" + queue.dequeue()); // Expected: 20 } } Implementing a queue using an array with two pointers (front and rear) is more efficient for deletion compared to using a single pointer (rear), as it eliminates the need to shift elements to the left after each dequeue operation. However, this approach has drawback: the space in front of the front pointer cannot be reused until the array is empty, leading to potential wasted memory.\nLinked List with a pointer SHOW CODE Java class Node { int data; Node next; public Node(int data) { this.data = data; this.next = null; } } class SimpleQueue { private Node front; private int size; public SimpleQueue() { front = null; size = 0; } // Check if the queue is empty public boolean isEmpty() { return size == 0; } // Get the current size of the queue public int size() { return size; } // Display the elements of the queue public void display() { if (isEmpty()) { System.out.println(\"Queue is empty.\"); return; } // Traverse through the queue and print its elements Node temp = front; // Use StringBuilder to efficiently build the string StringBuilder builder = new StringBuilder(); while (temp != null) { builder.append(temp.data).append(\"\u003c-\"); temp = temp.next; } // Remove the last \"\u003c-\" (extra arrow at the end) builder.setLength(builder.length() - 2); System.out.println(builder); } // Add an element to the rear (end) of the queue public void enqueue(int data) { Node node = new Node(data); // If the queue is empty, the new node becomes the front of the queue if (isEmpty()) { front = node; } else { Node temp = front; // Traverse the list to find the last node (rear of the queue) while (temp.next != null) { temp = temp.next; } temp.next = node; // Link the new node at the end of the queue } size++; // Increment the size of the queue } // Remove and return the element from the front of the queue public int dequeue() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } int dequeued = front.data; front = front.next; size--; return dequeued; } // Return the element from the front of the queue without removing it public int peek() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } return front.data; } } public class Main { public static void main(String[] args) { SimpleQueue queue = new SimpleQueue(); // Enqueue some elements into the queue queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); queue.enqueue(40); System.out.println(\"Queue after enqueuing elements:\"); queue.display(); // Display the current state of the queue // Dequeue two elements and print them System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Queue after dequeuing elements:\"); queue.display(); // Display the queue after dequeuing elements // Peek at the front element without removing it System.out.println(\"Peek front: \" + queue.peek()); // Print the current size of the queue System.out.println(\"Queue size: \" + queue.size()); } } Linked List with two pointers SHOW CODE Java // Node class representing each element in the queue class Node { int data; Node next; public Node(int data) { this.data = data; this.next = null; } } // SimpleQueue class implementing queue operations using a linked list class SimpleQueue { private Node front; private Node rear; private int size; // Constructor to initialize the queue public SimpleQueue() { front = rear = null; size = 0; } // Check if the queue is empty public boolean isEmpty() { return size == 0; } // Get the size of the queue public int size() { return size; } // Display the elements in the queue public void display() { if (isEmpty()) { System.out.println(\"Queue is empty.\"); return; } // Build a string representation of the queue StringBuilder builder = new StringBuilder(); Node temp = front; while (temp != null) { builder.append(temp.data).append(\"\u003c-\"); temp = temp.next; } // Remove the trailing \" \u003c- \" builder.setLength(builder.length() - 2); System.out.println(builder); } // Enqueue: Add an element to the rear of the queue public void enqueue(int data) { Node newNode = new Node(data); // If the queue is empty, both front and rear point to the new node if (isEmpty()) { front = rear = newNode; } else { // Add new node at the end and update the rear pointer rear.next = newNode; rear = newNode; } size++; } // Dequeue: Remove and return the element from the front of the queue public int dequeue() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } // Get the front element and update the front pointer int dequeuedData = front.data; front = front.next; // If the queue becomes empty, reset the rear to null if (front == null) { rear = null; } size--; return dequeuedData; } // Peek: Get the front element without removing it public int peek() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } return front.data; } } // Main class to test the queue implementation public class Main { public static void main(String[] args) { SimpleQueue queue = new SimpleQueue(); // Enqueue elements into the queue queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); queue.enqueue(40); // Display the queue after enqueuing elements System.out.println(\"Queue after enqueuing elements:\"); queue.display(); // Dequeue elements from the queue System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Dequeued: \" + queue.dequeue()); // Display the queue after dequeuing elements System.out.println(\"Queue after dequeuing elements:\"); queue.display(); // Peek the front element and show the queue size System.out.println(\"Peek front: \" + queue.peek()); System.out.println(\"Queue size: \" + queue.size()); } } Circular Queue A Circular Queue is a variation of the standard queue data structure that reuses the space freed by dequeue operations by connecting the last position back to the front position. It overcomes the limitation of a simple fixed-size queue, where the space at the front of the queue cannot be reused after dequeueing elements.\nArray Implementation SHOW CODE Java class CircularQueue { private final int[] queue; private int front; private int rear; private final int capacity; private int size; public CircularQueue(int capacity) { this.capacity = capacity; queue = new int[capacity]; front = rear = -1; // Initialize both front and rear as -1 to indicate the queue is empty size = 0; } // Check if the queue is empty public boolean isEmpty() { return size == 0; } // Check is the queue is full public boolean isFull() { return size == capacity; } // Get the current size of the queue public int size() { return size; } // Display the elements of the queue public void display() { if (isEmpty()) { System.out.println(\"Queue is empty.\"); return; } StringBuilder builder = new StringBuilder(); for (int i = 0; i \u003c size; i++) { builder.append(queue[(front + i) % capacity]); if (i != size - 1) { builder.append(\"\u003c-\"); } } System.out.println(builder); } public void enqueue(int data) { if (isFull()) { throw new IllegalStateException(\"Queue is full.\"); } if (isEmpty()) { front = 0; } // Move the rear pointer in a circular manner rear = (rear + 1) % capacity; // Add the data to the rear of the queue queue[rear] = data; // Increase the size size++; } public int dequeue() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } int dequeued = queue[front]; if (front == rear) { // If the queue become empty, reset both front and rear to -1 front = rear = -1; } else { // Move the front pointer in a circular manner front = (front + 1) % capacity; } size--; // Decrease the size return dequeued; } public int peek() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } return queue[front]; } } public class Main { public static void main(String[] args) { CircularQueue queue = new CircularQueue(5); queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); queue.enqueue(40); queue.enqueue(50); System.out.println(\"Queue after enqueuing 5 elements:\"); queue.display(); // Attempt to enqueue an element to a full queue (throws exception) try { queue.enqueue(60); } catch (IllegalStateException e) { System.out.println(e.getMessage()); } // Dequeue two elements System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Queue after dequeuing 2 elements:\"); queue.display(); // Enqueue two more elements queue.enqueue(60); queue.enqueue(70); System.out.println(\"Queue after enqueuing 2 more elements:\"); queue.display(); // Peek at the front element System.out.println(\"Front element: \" + queue.peek()); // Display the current size of the queue System.out.println(\"Queue size: \" + queue.size()); } } Linked List Implementation SHOW CODE Java class Node { int data; Node next; public Node(int data) { this.data = data; this.next = null; } } class CircularQueue { private Node front; private Node rear; private int size; public CircularQueue() { front = rear = null; size = 0; } // Check if the queue is empty public boolean isEmpty() { return size == 0; } // Get the size of the queue public int size() { return size; } // Display the elements of the queue public void display() { if (isEmpty()) { System.out.println(\"Queue is empty.\"); return; } Node temp = front; StringBuilder builder = new StringBuilder(); do { builder.append(temp.data).append(\"\u003c-\"); temp = temp.next; } while (temp != front); // Loop until reach the front newNode again builder.setLength(builder.length() - 2); System.out.println(builder); } // Add an element to the queue public void enqueue(int data) { Node newNode = new Node(data); // Both front and rear will point to the new node if queue is empty if (isEmpty()) { front = rear = newNode; } else { rear.next = newNode; // Connect the current rear to the new node rear = newNode; // Move the rear to the new node } rear.next = front; // Connect the rear's next to the front size++; } // Remove the front element in the queue public int dequeue() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty\"); } int dequeued = front.data; // Set both front and rear to null if there is only one element if (front == rear) { front = rear = null; } else { front = front.next; // Move the front node to the next rear.next = front; // Maintain the circular link } size--; return dequeued; } // Get the front element without removing it public int peek() { if (isEmpty()) { throw new IllegalStateException(\"Queue is empty.\"); } return front.data; } } public class Main { public static void main(String[] args) { CircularQueue queue = new CircularQueue(); // Enqueue elements queue.enqueue(10); queue.enqueue(20); queue.enqueue(30); queue.enqueue(40); // Display queue elements System.out.println(\"Queue after enqueuing elements:\"); queue.display(); // Dequeue elements System.out.println(\"Dequeued: \" + queue.dequeue()); System.out.println(\"Dequeued: \" + queue.dequeue()); // Display queue elements after dequeueing System.out.println(\"Queue after dequeuing elements:\"); queue.display(); // Peek front element System.out.println(\"Peek front: \" + queue.peek()); // Display the size of the queue System.out.println(\"Queue size: \" + queue.size()); } } Double Ended Queue Priority Queue Tree Graph A graph is a fundamental data structure used to represent the connections or relationships between entities. It consists of vertices (also called node) and edges (also called arcs). A vertex represents a single entity in the graph, while an edge represents a connection or relationship between two vertices. Edges may have additional properties, such as weight (to indicate the cost or distance of the connection) or direction (to indicate the direction of the relationship).\nTypes of Graph Undirected Graph vs. Directed Graph In an undirected graph, the connection between two vertices is bidrectional. For example, if there is an edge between vertex A and vertex B, traversal is possible from A to B and from B to A. In contrast, in a directed graph, the relationships are one-way. For instance, if there is an edge from vertex A to vertex B, traversal is possible from A to B, but not from B to A unless there is a separate edge in the opposite direction.\nUnweighted Graph vs. Weighted Graph In an unweighted graph, the relationships between vertices have no additional properties, and all edges are treated equally. In contrast, a weighted graph assigns a weight to each node, which can represent attributes such as distance, time, cost, eetc. The weight provides more information about the connection between vertices and is often used in problems like shortest path or network flow.\nCyclic Graph vs. Acyclic Graph A cyclic graph contains at least one cycle, which is a path that starts and ends at the same vertex. In contrast, an acyclic graph doest not contain any cycles. A special case of an acyclic graph is the directed acyclic graph (DAG), which has directed edges and no cycles.\nConnected Graph vs. Disconnected Graph A connected graph is a graph in which there is a path between every pair of vertices. In contrast, a disconnected graph is a graph where at least one pair of vertices is not connected by any path.\nGraph Terminology The degree of a vertex is the number of edges incident to that vertex. In an undirected graph, the degree is simply the number of edges connected to the vertex. In a directed graph, the degree is the sum of the in-degree (number of incoming edges) and the out-degree (number of outgoing edges) of the vertex.\nA path is a sequence of vertices where each consecutive pair of vertices is connected by an edge.\nA cycle is a path that starts and ends at the same vertex, with no repeated vertices except for the starting or ending vertex. For example, in a cycle with $A \\rightarrow B \\rightarrow C \\rightarrow D \\rightarrow A$, the path starts and ends at the same vertex $A$, but each of the other vertices $(B, C, and D)$ is visited exactly once.\nConnectivity refers to whether there exists a path between any pair of vertices in the graph.\nA subgraph is a graph formd by a subset of the vertices and edges of the original graph.\nA component is a subgraph where there is a path between every pair of vertices in that subgraph.\nGraph Representation Adjacency Matrix An Adjacency Matrix ia a 2-dimentional array where each element at position [i][j] represents an edge between vertex i and j. In a weighted graph, the value at position [i][j] stores the weight of the edge between the two vertices. In an unweight graph, the value at position [i][j] typically stores 1 to indicate an edge exists between the vertices, and 0 to indicate no edge exists. The space complexity of an adjacency matrix is $O(V^2)$, where $V$ is the number of vertices, as it requires a matrix of size $V \\times V$ to represent the graph.\nAdjacency List An Adjacency List is a collection of lists, where each position i stores a list of nerighbors of vertex i. In a weighted graph. each element in the list typically represents a pair (neighbor, weight), where neighbor is a vertex connected to i, and weight is the weight of the edge between i and neighbor. The space complexity of an adjacency list is $O(V + E)$, where $V$ is the number of vertices and $E$ is the number of edges. This is because each vertex has a list of neighbors, and the total number of entries in all lists is proportional to the number of edges.\nEdge List An Edge List is a collection of pairs, where each pair (i, j) represents an edge between vertex i and vertex j. In a weighted graph. each element may also include the weight of the edge. typically represented as (i, j, weight). The space complexity of an edge list is $O(E)$, where $E$ is the number of edges, as each edge is stored as a separate entry in the list.\nGraph Traversal Breadth First Search Breadth-First Search (BFS) explores all the neighbors of a vertex before moving on to their neighbors. It proceeds level by level, ensuring that all vertices at a given distance from the starting vertex are visited before moving on to vertices at a greater distance. BFS is commonly used to find the shortest path in an unweighted graph.\nDepth First Search Depth-First Search (DFS) explores as far as possible alone a branch of the graph before backtracking to explore other branches. It follows a path from the starting vertex to a dead end, then retrace its steps and explores alternative paths. DFS is useful for finding all paths between vertices, detecting cycles, or performing topological sorting in directed acyclic graphs (DAGs).\nSpanning Tree A spanning tree is a subset of a graph that includes all the vertices and contains exactly $V - 1$ edges, where $V$ is the number of vertices in the graph. A connected graph can have multiple spanning trees, whereas a disconnected graph does not have a spanning tree because there is at least one pair of vertices that are not connected, making it impossible to form a tree that spans all the vertices.\nMinimum Spanning Tree (MST) A minimum spanning tree is a type of spanning tree that connects all the vertices of a graph with the smallest possible total edge weight, compared to all other possible spanning trees.\nPrim\u0026rsquo;s Algorithm Prim\u0026rsquo;s Algorithm is used to find the minimum spanning tree (MST) that connects all the vertices of a graph without forming a cycle, while minimizing the total edge weight. This algorithm is efficient for solving problems related to undirected, weighted graphs. The algorithm steps are as follows:\nInitialize an inMST array to track the vertices included in the MST, and a priority queue (min-heap) to process the edges with the smallest weight. Select an arbitrary starting vertex. Add all edges connected to this vertex into the priority queue and mark the vertex as included in the inMST array. Extract the edge with the minimum weight from the priority queue. If the destination vertex of this edge is not yet in the inMST array, include it, and add all edges connected to this newly included vertex (whose destination is not in the MST) to the priority queue. Repeat step 3 until all vertices are included in the MST. SHOW CODE Java import java.util.*; /** * @author Signal Yu * @since 2024-12-1 */ class Edge implements Comparable\u0026lt;Edge\u0026gt; { int src; int dest; int weight; public Edge(int src, int dest, int weight) { this.src = src; this.dest = dest; this.weight = weight; } @Override public int compareTo(Edge other) { // Sort edges based on weight return this.weight - other.weight; } } class Graph { int vertices; int edges; List\u0026lt;List\u0026gt;Edge\u0026gt;\u0026gt; adjacencyList; public Graph(int vertices) { this.vertices = vertices; adjacencyList = new ArrayList\u003c\u003e(); for (int i = 0; i \u003c vertices; i++) { adjacencyList.add(new ArrayList\u0026lt;\u0026gt;()); } } void addEdge(int src, int dest, int weight) { // Add edge for undirected graph Edge edge1 = new Edge(src, dest, weight); Edge edge2 = new Edge(dest, src, weight); adjacencyList.get(src).add(edge1); adjacencyList.get(dest).add(edge2); } void primMST() { // Step 1: Initialize an `inMST` array to track the vertices // included in the MST, and a priority queue (min-heap) to // process the edges with the smallest weight. boolean[] inMST = new boolean[vertices]; Queue priorityQ = new PriorityQueue\u003c\u003e(); // Step 2: Select an arbitrary starting vertex. Add all edges // connected to this vertex into the priority queue and mark // the vertex as included in the `inMST` array. int start = 0; for (Edge edge : adjacencyList.get(start)) { priorityQ.offer(edge); } inMST[start] = true; // Step 4: Repeat step 3 until all vertices are included in the MST. while (!priorityQ.isEmpty()) { // Step 3: Extract the edge with the minimum weight from the // priority queue. If the destination vertex of this edge is // not yet in the `inMST` array, include it, and add all edges // connected to this newly included vertex (whose destination // is not in the MST) to the priority queue. Edge edge = priorityQ.poll(); int u = edge.src, v = edge.dest; if (!inMST[v]) { System.out.println(u + \"---[\" + edge.weight + \"]---\" + v); inMST[v] = true; // Add all edges from the newly included vertex (whose destination // is not included in `inMST`) to the priority queue for (Edge nextEdge : adjacencyList.get(v)) { if (!inMST[nextEdge.dest]) { priorityQ.offer(nextEdge); } } } } } } public class Solution { public static void main(String[] args) { int vertices = 4; // Number of vertices in the graph Graph graph = new Graph(vertices); // Create a graph with specified vertices // Add edges to the graph graph.addEdge(0, 1, 10); graph.addEdge(0, 2, 6); graph.addEdge(0, 3, 5); graph.addEdge(1, 3, 15); graph.addEdge(2, 3, 4); // Run Prim's algorithm to construct MST graph.primMST(); } } Sorting Quick Sort The quick sort algorithm follows the divide and conquer paradigm. It selects an element from the array as a pivot and recursively partitions the array into two subarrays based on whether the elements are less than or greater than the pivot. The main steps of the quick sort algorithm generally include: picking a pivot, partitioning, recursively partitioning, and handling the base case.\nPicking a pivot: Select an element from the array to act as the pivot. A common choice is the last element. Partitioning: Rearrange the array such that: All elements smaller than the pivot are placed to its left. All elements greater than or equal to the pivot are placed to its right. Place the pivot in its correct position within the sorted array. Recursively partitioning: Recursively apply the partitioning process to the subarrays created by spliting the array around the pivot. Base case: The subarrays are considered sorted when they contain one or zero elements. SHOW CODE Java class QuickSort { public int[] sortArray(int[] nums) { quickSort(nums, 0, nums.length - 1); return nums; } private void quickSort(int[] nums, int low, int high) { if (low \u003c high) { // int pivot = nums[high]; // Runtime Error: StackOverflowError int pivot = nums[low]; int i = low - 1, j = high + 1; while (i \u003c j) { // Find the element that greater than the pivot while (nums[++i] \u003c pivot) { } // Find the element that less than the pivot while (nums[--j] \u003e pivot) { } if (i \u003c j) { swap(nums, i, j); } } quickSort(nums, low, j); quickSort(nums, j + 1, high); } } private static void swap(int[] nums, int i, int j) { int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } } https://www.youtube.com/watch?v=8pL_iAEm0bM 912. Sort an Array SHOW PROBLEM Problem:\nGiven an array of integers nums, sort the array in ascending order and return it.\nYou must solve the problem without using any built-in sorting functions, and the solution must have a time complexity of O(n log n) and the smallest possible space complexity.\nExample 1:\nInput: nums = [5,2,3,1] Output: [1,2,3,5] Explanation: After sorting the array, the positions of some numbers remain unchanged (for example, 2 and 3), while the positions of other numbers are rearranged (for example, 1 and 5). Example 2:\nInput: nums = [5,1,1,2,0,0] Output: [0,0,1,1,2,5] Explanation: The array may contain duplicate values. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 50,000 -50,000 \u0026lt;= nums[i] \u0026lt;= 50,000 Go to Leetcode 🔗 SHOW CODE Time Limited Expectation Passed class Solution { public int[] sortArray(int[] nums) { // quicksort(nums, 0, nums.length - 1); Arrays.sort(nums); return nums; } private static int partition(int[] nums, int low, int high) { // Select the rightmost element as the pivot int pivot = nums[high]; int i = low - 1; // pointer for the smaller element for (int j = low; j \u003c high; j++) { // If current element is smaller than or equal to the pivot if (nums[j] \u003c= pivot) { i++; swap(nums, i, j); } } // Place the pivot in its correct position swap(nums, i + 1, high); // Return the partition index return i + 1; } private static void swap(int[] nums, int i, int j) { int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } private static void quicksort(int[] nums, int low, int high) { if (low \u003c high) { int partitionIndex = partition(nums, low, high); // Recursive sort the left and right subarrays quicksort(nums, low, partitionIndex - 1); quicksort(nums, partitionIndex + 1, high); } } } class Solution { public int[] sortArray(int[] nums) { quickSort(nums, 0, nums.length - 1); return nums; } private void quickSort(int[] nums, int low, int high) { if (low \u003c high) { // int pivot = nums[high]; // Runtime Error: StackOverflowError int pivot = nums[low]; int i = low - 1, j = high + 1; while (i \u003c j) { // Find the element that greater than the pivot while (nums[++i] \u003c pivot) { } // Find the element that less than the pivot while (nums[--j] \u003e pivot) { } if (i \u003c j) { swap(nums, i, j); } } quickSort(nums, low, j); quickSort(nums, j + 1, high); } } private static void swap(int[] nums, int i, int j) { int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } } ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/data-structures-and-algorithms/1-data-structure-and-algorithms/","summary":"Recursion Recursion is a programming technique where a function repeatedly calls itself until it reaches a base case, whcih stops the recursion and allows it to return a result. It is a way of breaking down complex problems into smaller, simpler subproblems that are eaiser to solve.\nHead Recursion Head Recursion is a type of recursion where a function makes its recursive call first, immediately after checking the base case, and performs all other operations only after the recursive call returns.","title":"Data Structure \u0026 Algorithms"},{"content":"JUnit assertEquals In JUnit, assertEquals is a method used to check if the expected value and the actual value are equal in unit tests.\nSHOW CODE Java import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class UnitTest { @Test void addition() { Calculator calculator = new Calculator(); int result = calculator.add(1, 1); assertEquals(2, result, \"The result of 1 + 1 should be 2\"); } } assertTure \u0026amp; assertFalse In JUnit, the assertTrue and the assertFalse methods are used to validate boolean expressions in unit tests.\nSHOW CODE Java import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertFalse; import static org.junit.jupiter.api.Assertions.assertTrue; public class UnitTest { @Test void testIsOdd() { int n = 5; assertTrue(n % 2 == 1, \"Number should be an odd\"); assertFalse(n % 2 == 0, \"Number should not be an even\"); } } @BeforeEach \u0026amp; @AfterEach In JUnit, the @BeforeEach and @AfterEach annotations are used to specify methods that should run before or after each test method, respectively. These annotations are useful for setting up resources before each test and cleaning up resources after each test.\nSHOW CODE Java import org.junit.jupiter.api.AfterEach; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class UnitTest { private Calculator calculator; @BeforeEach void setup() { calculator = new Calculator(); } @Test void testAddition() { assertEquals(2, calculator.add(1, 1), \"The result of 1 + 1 should be 2.\"); } @AfterEach void teardown() { calculator = null; } } @BeforeAll \u0026amp; @AfterAll In JUnit, the @BeforeAll and @AfterAll annotations are used to specify methods that run once before and after all the test methods in a test class, respectively. These methods are commonly used for expensive setup and cleanup.\nSHOW CODE Java import org.junit.jupiter.api.AfterAll; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.Test; public class UnitTest { @BeforeAll public static void setUpBeforeClass() { System.out.println(\"Executed before all tests are run.\"); } @AfterAll public static void tearDownAfterClass() { System.out.println(\"Executed after all tests are run.\"); } @Test public void testMethod1() { System.out.println(\"Test 1 executed.\"); } @Test public void testMethod2() { System.out.println(\"Test 2 executed.\"); } } SHOW OUTPUT Output Executed before all tests are run. Test 1 executed. Test 2 executed. Executed after all tests are run. assertArrayEquals \u0026amp; assertNotEquals In JUnit, the assertArrayEquals and assertNotEquals methods are used to check if both arrays are equal in sizeand whether each corresponding element is equal or not. For arrays containing objects, JUnit will use the equals method of the objects for the comparison.\nSHOW CODE Java import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertArrayEquals; import static org.junit.jupiter.api.Assertions.assertNotEquals; public class UnitTest { @Test void testArrayEquality() { int[] expected = {1, 2, 3}; int[] actual = {1, 2, 3}; assertArrayEquals(expected, actual, \"Arrays should be equal\"); String[] expected2 = {\"apple\", \"banana\", \"cherry\"}; String[] actual2 = {\"apple\", \"banana\", \"cherry\"}; // Compare arrays of objects (Strings in this case) assertArrayEquals(expected2, actual2); } @Test void testArrayNotEquality() { int[] expected = {1, 2, 3}; int[] actual = {1, 2, 4}; assertNotEquals(expected, actual, \"Arrays should not be equal\"); } } assertThrows In Junit, the assertThrows is a method used to assert that a specific exception is throwing during the execution of a piece of code.\nSHOW CODE Java import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertThrows; public class UnitTest { @Test void testDivision() { Calculator calculator = new Calculator(); ArithmeticException exception = assertThrows(ArithmeticException.class, () -\u003e { calculator.divide(1, 0); }); assertEquals(\"/ by zero\", exception.getMessage()); } } assertTimeout \u0026amp; assertTimeoutPreemptively In JUnit, the assertTimeout and assertTimeoutPreemptively methods are used to ensure that a unit test finishes within a specified time limit. The key difference between them is that the assertTimeoutPreemptively method will terminate the test as soon as the excution time exceeds the specified limit. In contrast, the assertTimeout method allows the test to complete before checking if the time limit was exceeded.\nSHOW CODE Java import org.junit.jupiter.api.Test; import java.time.Duration; import static org.junit.jupiter.api.Assertions.*; public class UnitTest { @Test void testExecutionWithinTimeoutPreemptively() { assertTimeoutPreemptively(Duration.ofMillis(1000), () -\u003e { // Simulate a task that takes more time than allowed Thread.sleep(1500); // Task that takes more than 1000ms }); } @Test void testExecutionWithinTimeout() { assertTimeout(Duration.ofMillis(1000), () -\u003e { // Simulate a task that takes some time Thread.sleep(500); // Task that takes less than 1000ms }); } } Parameterized Tests In JUnit, Parameterized Tests allow a test to be run with different parameters and expected results, which reduces repetitive code and increases test coverage. Common parameter sources include @ValueSource, which passes a group of values to the test; @CsvSource, which allows passing multiple values separated by commmas; @MethodSource, which generates values dynamically from a method; and @EnumSource, which passes enum constants from an enum class.\nSHOW CODE Java import org.junit.jupiter.params.ParameterizedTest; import org.junit.jupiter.params.provider.CsvSource; import org.junit.jupiter.params.provider.EnumSource; import org.junit.jupiter.params.provider.MethodSource; import org.junit.jupiter.params.provider.ValueSource; import java.util.stream.Stream; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertTrue; public class UnitTest { @ParameterizedTest @ValueSource(strings = {\"apple\", \"banana\", \"cherry\"}) void testWithStringParameter(String fruit) { assertTrue(fruit.length() \u003e 3); } @ParameterizedTest @CsvSource({ \"apple, 5\", \"banana, 6\", \"cherry, 6\" }) void testWithCsvSource(String fruit, int length) { assertEquals(fruit.length(), length); } static Stream\u0026lt;String\u0026gt; stringProvider() { return Stream.of(\"apple\", \"banana\", \"cherry\"); } @ParameterizedTest @MethodSource(\"stringProvider\") void testWithMethodSource(String fruit) { assertTrue(fruit.length() \u003e 3); } enum FRUIT {APPLE, BANANA, CHERRY} @ParameterizedTest @EnumSource(FRUIT.class) void testWithEnumSource(FRUIT fruit) { assertTrue(fruit.name().length() \u003e 3); } } Mockito System Under Test The System Under Test (SUT) refers to the specific part of the software being tested in a given test case. It can range from a single method in unit testing to larger components in integration or system testing based on different context. The SUT is typically isolated using mocking and stubbing to test its behavior independently.\nSHOW CODE Java public class Calculator { public int add(int a, int b) { return a + b; } } public class CalculatorTest { @Test void testAdd() { Calculator calculator = new Calculator(); // SUT int result = calculator.add(2, 3); // The add method is the System Under Test assertEquals(5, result); } } Mocking vs. Stubbing In unit testing, Mocking and Stubbing are used to simulate and control the behavior of external dependencies. Mocking is commonly used for behavior verification, where objects are created to simulate the behavior of real-world components in a controlled manner. On the other hand, Stubbing is typically used to isolate the SUT by controlling the return values or responses from dependencies.\nSHOW CODE: Mocking Java public class Calculator { private Logger logger; public Calculator(Logger logger) { this.logger = logger; } public int add(int a, int b) { int result = a + b; logger.log(\"Addition performed: \" + result); return result; } } @Test void testAdd() { Logger mockLogger = mock(Logger.class); Calculator calculator = new Calculator(mockLogger); calculator.add(2, 3); // Verifying the interaction with the mock: was log method called? verify(mockLogger).log(\"Addition performed: 5\"); } SHOW CODE: Stubbing Java public class Calculator { private DatabaseService databaseService; public Calculator(DatabaseService databaseService) { this.databaseService = databaseService; } public int getProductPrice(int productId) { Product product = databaseService.getProduct(productId); return product.getPrice(); } } @Test void testGetProductPrice() { // Stub the DatabaseService to return a fixed product DatabaseService stubbedService = mock(DatabaseService.class); Product stubProduct = new Product(1, \"Laptop\", 1000); when(stubbedService.getProduct(1)).thenReturn(stubProduct); Calculator calculator = new Calculator(stubbedService); int price = calculator.getProductPrice(1); assertEquals(1000, price); } mock(), when().thenReturn(), verify() In Mockito, the mock() method is used to create a mock object, which allows simulating the behavior of an object without invoking its real methods. The when() method is used to define the behavior of a mock object\u0026rsquo;s method when it is called with specific arguments. The thenReturn() method specifies the return value of a mocked method. The verify() method is used to check whether a specified method on a mock object was called during the test execution.\nSHOW CODE Java import org.junit.jupiter.api.Test; import java.util.List; import static org.junit.jupiter.api.Assertions.assertTrue; import static org.mockito.Mockito.*; public class UnitTest { @Test public void testMockingBehavior() { // Create a mock List object List\u0026lt;String\u0026gt; mockList = mock(List.class); // Specify behavior for when add() is called when(mockList.add(\"Hello\")).thenReturn(true); // Return true when \"Hello\" is added // Call the mock method boolean result = mockList.add(\"Hello\"); // Verify the behavior assertTrue(result); // The add method should return true verify(mockList).add(\"Hello\"); // Verify that add(\"Hello\") was called // Verify that add(\"World\") was never called verify(mockList, never()).add(\"World\"); } } Argument Matchers In Mockito, argument matchers are used to specify conditions for method arguments when stubbing methods. They are commonly used in the when() and thenReturn() methods when the exact method argument is not critical. Some commonly used argument marchers include:\nany(): Matches any argument of the specified type. eq(): Matches a specified argument. anyString(): Matches any argument of type String. anyInt(): Matches any argument of type Integer. isA(): Matches an argument of a specified class type. argThat(): Allows for custom argument matching logic. SHOW CODE Java import org.junit.jupiter.api.Test; import java.util.List; import static org.junit.jupiter.api.Assertions.*; import static org.mockito.ArgumentMatchers.anyInt; import static org.mockito.Mockito.*; public class UnitTest { @Test public void testAnyMatcher() { List mockList = mock(List.class); // Stub behavior using argument matcher when(mockList.get(anyInt())).thenReturn(\"Signal\"); // Verify that any argument passed to get will return \"Signal\" assertEquals(\"Signal\", mockList.get(9)); assertEquals(\"Signal\", mockList.get(999)); } @Test public void testEqMatcher() { Calculator calculator = mock(Calculator.class); when(calculator.add(eq(1), eq(1))).thenReturn(2); assertEquals(2, calculator.add(1, 1)); assertNotEquals(3, calculator.add(1, 1)); } @Test public void testAnyStringMatcher() { // Create a mock List List\u0026lt;String\u0026gt; mockList = mock(List.class); // Stub the method to return \"Hello\" for any string argument when(mockList.contains(anyString())).thenReturn(true); // Verify that the mock returns true for any string passed as an argument assertTrue(mockList.contains(\"Test\")); // Matches any string assertTrue(mockList.contains(\"Hello\")); // Matches any string assertTrue(mockList.contains(\"World\")); // Matches any string } @Test public void testAnyIntMatcher() { // Create a mock List List mockList = mock(List.class); // Stub the method to return \"Found\" for any integer argument when(mockList.get(anyInt())).thenReturn(\"Found\"); // Verify that the mock returns \"Found\" regardless of the argument assertEquals(\"Found\", mockList.get(1)); // Matches any integer assertEquals(\"Found\", mockList.get(999)); // Matches any integer } @Test public void testArgThatMatcher() { // Create a mock List List\u0026lt;String\u0026gt; mockList = mock(List.class); // Use argThat to match arguments that are not null and have length greater than 3 when(mockList.add(argThat(argument -\u003e argument != null \u0026\u0026 argument.length() \u003e 3))) .thenReturn(true); // Verify that the mock behaves correctly assertTrue(mockList.add(\"Hello\")); // Matches: length \u003e 3 assertFalse(mockList.add(\"\")); // Does not match: empty string } } Essential Mockito Annotaitons The key annotations in Mockito are @Mock, @InjectMocks, @ExtendWith, and @Captor. The @Mock annotation is used to create mock objects. The @InjectMocks annotation injects the objects, created with @Mock, into the specified class under test. The @ExtendWith annotation specifies a custom test runner to use when executing the test. The @Captor annotation is used to create an ArgumentCaptor instance, which captures and verifies the arguments passed to mocked methods.\nSHOW CODE Java import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.ArgumentCaptor; import org.mockito.Captor; import org.mockito.InjectMocks; import org.mockito.Mock; import org.mockito.junit.jupiter.MockitoExtension; import java.util.List; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.mockito.Mockito.verify; @ExtendWith(MockitoExtension.class) public class UnitTest { @Mock private List\u0026lt;String\u0026gt; mockList; // Mocked dependency @InjectMocks private MyClass myClass; // Class under test @Captor private ArgumentCaptor\u0026lt;String\u0026gt; captor; // Captures arguments passed to the mock @Test void testAddItem() { // Perform the action under test myClass.addItem(\"Test Item\"); // Verify that the mockList's add method was called with the argument \"Test Item\" verify(mockList).add(captor.capture()); // Capture and assert the argument String capturedArgument = captor.getValue(); System.out.println(\"capturedArgument = \" + capturedArgument); // Assert the captured item is correct assertEquals(\"Test Item\", capturedArgument); } static class MyClass { private final List\u0026lt;String\u0026gt; list; public MyClass(List\u0026lt;String\u0026gt; list) { this.list = list; } public void addItem(String item) { list.add(item); } } } Mockit Spy Mockito\u0026rsquo;s spy is a partial mock, typically created using @Spy, where real methods are used by default, and only the specified methods are stubbed.\nSHOW CODE Java import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.Mock; import org.mockito.Spy; import org.mockito.junit.jupiter.MockitoExtension; import java.util.ArrayList; import java.util.List; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.mockito.Mockito.doReturn; import static org.mockito.Mockito.verify; @ExtendWith(MockitoExtension.class) public class UnitTest { // Create a spy for the class under test @Spy private MyClass myClass = new MyClass(); // Inject the mock dependency into the class under test @Mock private List\u0026lt;String\u0026gt; mockList; @Test public void testAddItemWithSpy() { // Use the real method to add an item myClass.addItem(\"Test Item\"); // Verify that the mock's addItem method is called with the argument // Fail the test: Actually, there were zero interactions with this mock. verify(mockList).add(\"Test Item\"); // Stub the method for testing doReturn(\"Mocked Response\").when(myClass).getGreeting(); // Now the method getGreeting() will return the mocked response String response = myClass.getGreeting(); System.out.println(response); // Output: Mocked Response // Assert the mocked behavior assertEquals(\"Mocked Response\", response); } // Class under test static class MyClass { private final List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); public void addItem(String item) { list.add(item); } public String getGreeting() { return \"Hello, World!\"; } } } In the above code, the statement verify(mockList).add(\u0026quot;Test Item\u0026quot;); will fail because mockList is a partial mock. By default, real methods are called on a spy object, and since the real method is not stubbed or tracked. the verification cannot succeed.\nMockito and SpringBoot Example SHOW CODE: pom.xml pom.xml \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;project xmlns=\u0026quot;http://maven.apache.org/POM/4.0.0\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xsi:schemaLocation=\u0026quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026quot;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.4.0\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;!-- lookup parent from repository --\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;groupId\u0026gt;dev.signalyu\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springtest\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;springtest\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;springtest\u0026lt;/description\u0026gt; \u0026lt;url/\u0026gt; \u0026lt;licenses\u0026gt; \u0026lt;license/\u0026gt; \u0026lt;/licenses\u0026gt; \u0026lt;developers\u0026gt; \u0026lt;developer/\u0026gt; \u0026lt;/developers\u0026gt; \u0026lt;scm\u0026gt; \u0026lt;connection/\u0026gt; \u0026lt;developerConnection/\u0026gt; \u0026lt;tag/\u0026gt; \u0026lt;url/\u0026gt; \u0026lt;/scm\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;17\u0026lt;/java.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.mockito/mockito-core --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mockito\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mockito-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.14.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.4.0\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.18.34\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.4.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-commons --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.data\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-data-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.4.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!--\t\u0026lt;build\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;plugins\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;plugin\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;configuration\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;annotationProcessorPaths\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;path\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/path\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/annotationProcessorPaths\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/configuration\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/plugin\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;plugin\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;configuration\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;excludes\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;exclude\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/exclude\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/excludes\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/configuration\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/plugin\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/plugins\u0026gt;--\u0026gt; \u0026lt;!--\t\u0026lt;/build\u0026gt;--\u0026gt; \u0026lt;/project\u0026gt; SHOW CODE Java import lombok.AllArgsConstructor; import lombok.Data; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.data.repository.CrudRepository; import org.springframework.stereotype.Repository; import org.springframework.stereotype.Service; import org.springframework.test.context.bean.override.mockito.MockitoBean; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.result.MockMvcResultMatchers; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; import static org.mockito.Mockito.when; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; @Data class User { private Long id; private String name; } @Repository interface UserRepository extends CrudRepository\u0026lt;User, Long\u0026gt; { } @Service @Data class UserService { @Autowired private final UserRepository userRepository; public String getUserById(Long id) { User user = userRepository.findById(id).orElse(null); return user == null ? \"User not found\" : user.getName(); } } @RestController @AllArgsConstructor class UserController { private final UserService userService; @GetMapping(\"/user/{id}\") public String getUser(@PathVariable Long id) { return userService.getUserById(id); } } @SpringBootTest @AutoConfigureMockMvc public class UnitTest { @Autowired private MockMvc mockMvc; @MockitoBean private UserService userService; @Test public void testGetUser() throws Exception { Long userId = 1L; String mockResponse = \"Signal Yu\"; when(userService.getUserById(userId)).thenReturn(mockResponse); mockMvc.perform(get(\"/user/{id}\", userId)) .andExpect(status().isOk()) .andExpect(MockMvcResultMatchers.content().string(mockResponse)); } } ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/framework-and-tools/framework/backend/unit-testing/1-junit-and-mockito-notes/","summary":"JUnit assertEquals In JUnit, assertEquals is a method used to check if the expected value and the actual value are equal in unit tests.\nSHOW CODE Java import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class UnitTest { @Test void addition() { Calculator calculator = new Calculator(); int result = calculator.add(1, 1); assertEquals(2, result, \"The result of 1 + 1 should be 2\"); } } assertTure \u0026amp; assertFalse In JUnit, the assertTrue and the assertFalse methods are used to validate boolean expressions in unit tests.","title":"Junit \u0026 Mockito Notes"},{"content":"Synchronous Messaging VS. Asynchronous Messaging Synchronous Messaging and Asynchronous Messaging are two commnication paradigms used in distributed systems. In synchronous messaging, the sender will not continue executing until it receives the acknowledged message from the receiver. This paradigm is commonly used in situations that require immediate feedback to continue operations, such as payments or transaction processing.\nThe advantages of this paradigm include ease of implementation and usefulness in situations where immediate feedback is needed. However, the drawbacks are also obvious: it may lead to performance bottlenecks when the receiver is slow or unavailable, and it can also limit scalability.\n--- title: Synchronous Messaging --- sequenceDiagram participant Sender participant MessageBus participant MessageListener Sender-\u003e\u003eMessageBus: MessageBusUtil.sendSynchronousMessage() MessageBus-\u003e\u003eMessageListener: destination.send() MessageListener--\u003e\u003eMessageBus: return response note over Sender: (block and wait) MessageBus--\u003e\u003eSender: return response In asynchronous messaging, the sender doesn\u0026rsquo;t block after sending the message, meaning it can continue processing without waiting for the response from the receiver. It is commonly used in situations where systems can tolerate delays in response, like message notification after a successful payment. Compared to synchronous messaging, asynchronous messaging is more complex to implement. Additionaly, the sender has no guarantee of immediate feedback. It requires extra techniques, such as callback functions or message listeners, to handle the response.\nsequenceDiagram participant Sender participant MessageBus as Message Bus participant MessageListener1 as Message Listener 1 Sender-\u003e\u003eMessageBus: MessageBusUtil.sendMessage() MessageBus-\u003e\u003eMessageListener: destination.send() MessageListener--\u003e\u003eMessageBus: return response Sender-\u003e\u003eSender: (continue with processing) MessageBus--\u003e\u003eSender: return response RabbitMQ Introduction to RabbitMQ RabbitMQ is a message broker that facilitates asynchronous communication between distributed systems. Its working mechnism involves four key components:\nProducer: Responsible for sending messages Exchange: Handles the routing of messages to the appropriate queues. Queue: Stores messages until they are consumed. Consumer: Processes the messages from the queue. --- title: Introduction to RabbitMQ --- graph LR P((P)) --\u003e|send| X{{Exchange}} --\u003e|binding| Q[[Queue]] --\u003e|receive| C((C)) Example: Hello RabbitMQ SHOW CODE Producer Consumer import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; import java.nio.charset.StandardCharsets; public class Producer { // Name of the queue where the message will be sent private final static String QUEUE_NAME = \"hello\"; public static void main(String[] argv) throws Exception { // Create a connection factory to configure and connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Configure RabbitMQ server address (default is localhost) factory.setHost(\"localhost\"); // Configure the port for RabbitMQ (default is 5672) factory.setPort(5672); // Use try-with-resource to automatically close the connection and channel after use try (Connection connection = factory.newConnection(); // Establish a connection to RabbitMQ Channel channel = connection.createChannel()) { // Create a communication channel // Declare a queue with the specified name channel.queueDeclare(QUEUE_NAME, false, false, false, null); String message = \"Hello RabbitMQ!\"; // Publish the message to the queue channel.basicPublish(\"\", QUEUE_NAME, null, message.getBytes(StandardCharsets.UTF_8)); System.out.println(\" [P] Sent '\" + message + \"'\"); } } } import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; import com.rabbitmq.client.DeliverCallback; import java.nio.charset.StandardCharsets; public class Consumer { private final static String QUEUE_NAME = \"hello\"; public static void main(String[] argv) throws Exception { // Create a connection factory to configure and connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Configure RabbitMQ server address (default is localhost) factory.setHost(\"localhost\"); // Configure the port for RabbitMQ (default is 5672) factory.setPort(5672); // Establish a connection to RabbitMQ Connection connection = factory.newConnection(); // Create a communication channel Channel channel = connection.createChannel(); // Declare a queue with the specified name channel.queueDeclare(QUEUE_NAME, false, false, false, null); System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\"); // Define the callback function to handle incoming message DeliverCallback deliverCallback = (consumerTag, delivery) -\u003e { // Retrieve the message body and convert it to a string using UTF-8 encoding String message = new String(delivery.getBody(), StandardCharsets.UTF_8); System.out.println(\" [C] Received '\" + message + \"'\"); }; // Start consuming messages from the queue channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -\u003e { // No action required for cancellation in this example }); } } Message Acknowledgment In RabbitMQ, message acknowledgement is a mechanism that ensures messages have been received and processed successfully. There are two main types of message acknowledgement: auto ack and manual ack.\nIn auto-ack mode, RabbitMQ considers the message acknowledged as soon as it is delieved to the consumer. The consumer does not need to explictly send an acknowledgement. However, this can be risky. If the consumer fails due to a connection issue or channel break, the message may be lost, meaning it hasn\u0026rsquo;t been processed successfully.\nboolean autoAck = true; channel.basicConsume(queueName, autoAck, consumer); In manual ack mode, the consumer must send an acknowledgement back to RabbitMQ once the message has been processed successfully. If RabbitMQ does not receive the acknowledgement from the consumer within a specified time (30 minutes by default), it will redeliver the message to another consumer or the same consumer, depending on the configuration.\n// Acknowledging a message manually boolean autoAck = false; channel.basicConsume(queueName, autoAck, new DefaultConsumer(channel) { @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { String message = new String(body, \u0026#34;UTF-8\u0026#34;); // Process the message here channel.basicAck(envelope.getDeliveryTag(), false); // Acknowledge the message } }); Message Durability In RabbitMQ, message durability refers to the ability to ensure that a message will not be lost in case of a broker failure. It involves saving both the queue and message to disk so they can be recovered after a system restart. To guarantee durability, two key components need to be considered: durable queues and persistent messages.\nWhen a queue is declared as durable, it is saved to disk. The queue will still exist even if the broker fails.\nboolean durable = true; channel.queueDeclare(\u0026#34;myQueue\u0026#34;, durable, false, false, null); To ensure a message\u0026rsquo;s persistence after a broker restart, it must be marked as persistent by setting the delieveryMode to 2 (persistent). This ensures that the message is saved to disk. However, it\u0026rsquo;s important to note that marking a message as persistent does not fully guarantee that it won\u0026rsquo;t be lost. There is still a short window in which RabbitMQ has accepted the message but has not yet saved it to disk. Additionaly, RabbitMQ does not call fsync(2) for every message, meaning it may store the message in cache rather than writing it to disk immediately. Therefore, the durability guerantee is not strong.\n// Publish the message to the queue channel.basicPublish(\u0026#34;\u0026#34;, TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, // delieveryMode = 2 message.getBytes(\u0026#34;UTF-8\u0026#34;)); Prefetch When a consumer subscribes to a message queue, RabbitMQ begins delivering messages. By default, RabbitMQ uses a Round Robin Dispatching strategy, which evenly distributes messages across multiple consumers. However, if one of the consumers processes tasks slowly, it may lead to message buildup and memory pressure.\nIn RabbitMQ, the prefetch mechnism controls the maximum number of messages a consumer can hold at a time. When the number of messages a consumer holds reaches the prefetch limit, RabbitMQ will stop sending additional messages to that consumer until it acknowledges some of the messages. This mechanism helps prevent message accumulation and reduces memory pressure.\n--- title: Worker Queue - prefetch --- graph LR P((P)) --\u003e|send| Q[[Worker]] --\u003e|prefetch = 1| C1((C1)) Q --\u003e|prefetch = 1| C2((C2)) SHOW CODE Producer Worker import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; import com.rabbitmq.client.MessageProperties; public class Producer { private static final String TASK_QUEUE_NAME = \"task_queue\"; public static void main(String[] argv) throws Exception { // Create a connection factory to configure and connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Configure RabbitMQ server address (default is localhost) factory.setHost(\"localhost\"); // Configure the port for RabbitMQ (default is 5672) factory.setPort(5672); // Use try-with-resource to automatically close the connection and channel after use try (Connection connection = factory.newConnection(); // Establish a connection to RabbitMQ Channel channel = connection.createChannel()) { // Create a communication channel // Declare a queue with the specified name channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null); String message = \"Hello RabbitMQ!\"; // Publish the message to the queue channel.basicPublish(\"\", TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(\"UTF-8\")); System.out.println(\" [P] Sent '\" + message + \"'\"); } } } import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; import com.rabbitmq.client.DeliverCallback; public class Worker { // Name of the queue where the message will be sent private static final String TASK_QUEUE_NAME = \"task_queue\"; public static void main(String[] argv) throws Exception { // Create a connection factory to configure and connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Configure RabbitMQ server address (default is localhost) factory.setHost(\"localhost\"); // Establish a connection to RabbitMQ final Connection connection = factory.newConnection(); // Create a communication channel final Channel channel = connection.createChannel(); // Declare a queue with the specified name channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null); System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\"); // Specify the prefetch count channel.basicQos(1); // Define a callback to process incoming messages DeliverCallback deliverCallback = (consumerTag, delivery) -\u003e { String message = new String(delivery.getBody(), \"UTF-8\"); System.out.println(\" [C] Received '\" + message + \"'\"); try { try { // Simulate task processing Thread.sleep(1000); } catch (InterruptedException _ignored) { Thread.currentThread().interrupt(); } } finally { // Acknowledge the message after work is completed System.out.println(\" [C] Done\"); channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false); } }; // Start consuming messages with manual acknowledgment channel.basicConsume(TASK_QUEUE_NAME, false, deliverCallback, consumerTag -\u003e { }); } } Publish/Subscribe Publish/Subscribe is a communication pattern where a message is sent by a producer to multiple consumers. In RabbitMQ, this pattern is implemented using Exchanges and Queues.\nIn the Publish/Subscribe pattern in RabbitMQ, the producer sends a message to an Exchange, which then routes the message to multiple queues that are bound to it. There are four types of exchanges in RabbitMQ:\nfanout: Routes messages to all queues bound to it, without considering any routing key. direct: Routes messages to queues based on an exact match with the routing key. topic: Routes messages to queues based on pattern matching of the routing key. headers: Routes messages based on the attributes of message headers. Fanout Exchange --- title: Publish/Subscribe - fanout --- graph LR P((P)) --\u003e|send| Ex{{fanout}} --\u003e|binding| Q1[[Q1]] Ex --\u003e|binding| Q2[[Q2]] Q1 --\u003e C1((C1)) Q2 --\u003e C2((C2)) SHOW CODE: Fanout Exchange Publisher Subscriber import com.rabbitmq.client.BuiltinExchangeType; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; public class EmitLog { private static final String EXCHANGE_NAME = \"logs\"; public static void main(String[] argv) throws Exception { // Create a new connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); // Use try-with-resource to ensures automatic resource management try (Connection connection = factory.newConnection(); // Establish a connection Channel channel = connection.createChannel()) { // Create a channel // Declare an exchange of type 'fanout' which sends messages to all bound queues channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT); String message = argv.length \u003c 1 ? \"info: Hello World!\" : String.join(\" \", argv); // Publish the message to the exchange with an empty routing key (for fanout exchange) channel.basicPublish(EXCHANGE_NAME, \"\", null, message.getBytes(\"UTF-8\")); System.out.println(\" [x] Sent '\" + message + \"'\"); } } } import com.rabbitmq.client.*; public class ReceiveLogs { private static final String EXCHANGE_NAME = \"logs\"; public static void main(String[] argv) throws Exception { // Create a new connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); // Establish a connection and create a new channel for communication Connection connection = factory.newConnection(); Channel channel = connection.createChannel(); // Declare the exchange with the same name as in the emitter (logs) and of type 'fanout' channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT); // Bind the queue to the exchange with an empty routing key (for fanout exchange) String queueName = channel.queueDeclare().getQueue(); channel.queueBind(queueName, EXCHANGE_NAME, \"\"); System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\"); // Define the callback function to process incoming messages DeliverCallback deliverCallback = (consumerTag, delivery) -\u003e { String message = new String(delivery.getBody(), \"UTF-8\"); System.out.println(\" [x] Received '\" + message + \"'\"); }; // Consume messages from the queue channel.basicConsume(queueName, true, deliverCallback, consumerTag -\u003e { }); } } Direct Exchange --- title: Publish/Subscribe - direct --- graph LR P((P)) --\u003e|send| Ex{{direct}} --\u003e|error| Q1[[Q1]] Ex --\u003e|info| Q2[[Q2]] Ex --\u003e|warn| Q2[[Q2]] Ex --\u003e|error| Q2[[Q2]] Q1 --\u003e C1((C1)) Q2 --\u003e C2((C2)) SHOW CODE: Direct Exchange Publisher Subscriber import com.rabbitmq.client.BuiltinExchangeType; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; public class EmitLogDirect { private static final String EXCHANGE_NAME = \"direct_logs\"; public static void main(String[] argv) throws Exception { // Create a new connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); //Use try-with-resource for automatic resource management try (Connection connection = factory.newConnection(); // Establish a new connection Channel channel = connection.createChannel()) { // Create a new channel // Declare an exchange with type of 'direct' channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT); // Get the severity level (routing key) from the command-line arguments String severity = getSeverity(argv); // Get the message content from the command-line arguments String message = getMessage(argv); // Publish the message to the exchange with given severity as the routing key channel.basicPublish(EXCHANGE_NAME, severity, null, message.getBytes(\"UTF-8\")); System.out.println(\" [x] Sent '\" + severity + \"':'\" + message + \"'\"); } } private static String getSeverity(String[] strings) { if (strings.length \u003c 1) { return \"info\"; } return strings[0]; } private static String getMessage(String[] strings) { if (strings.length \u003c 2) { return \"Hello World!\"; } return joinStrings(strings, \" \", 1); } private static String joinStrings(String[] strings, String delimiter, int startIndex) { int length = strings.length; if (length == 0) { return \"\"; } if (length \u003c= startIndex) { return \"\"; } StringBuilder words = new StringBuilder(strings[startIndex]); for (int i = startIndex + 1; i \u003c length; i++) { words.append(delimiter).append(strings[i]); } return words.toString(); } } import com.rabbitmq.client.*; public class ReceiveLogsDirect { private static final String EXCHANGE_NAME = \"direct_logs\"; public static void main(String[] argv) throws Exception { // Create a new connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); // Establish a new connection Connection connection = factory.newConnection(); // Create a new channel Channel channel = connection.createChannel(); // Declare a direct exchange, where messages will be routed based on the routing key channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT); String queueName = channel.queueDeclare().getQueue(); // Exit the program if no arguments are passed (no routing keys provided) if (argv.length \u003c 1) { System.err.println(\"Usage: ReceiveLogsDirect [info] [warning] [error]\"); System.exit(1); } for (String severity : argv) { // Bind the queue to the exchange with a specific routing key channel.queueBind(queueName, EXCHANGE_NAME, severity); } System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\"); // Define the callback function for processing the received messages DeliverCallback deliverCallback = (consumerTag, delivery) -\u003e { String message = new String(delivery.getBody(), \"UTF-8\"); System.out.println(\" [x] Received '\" + delivery.getEnvelope().getRoutingKey() + \"':'\" + message + \"'\"); }; // Consume messages from the queue channel.basicConsume(queueName, true, deliverCallback, consumerTag -\u003e { }); } } Topic Exchange In RabbitMQ, the Topic Exchange is a type of exchange that routes messages to queues based on pattern matching of the routing key. The routing key in a topic exchange is typically a string of words separated by dots (.). The routing key can also contain wildcards like * and #. The * wildcard matches exactly one word, while the # wildcard matches zero or more words. Compared to the direct exchange, the topic exchange offers greater flexibility and efiiciency in routing messages to queues based on more complex patterns.\nSHOW CODE: Topic Exchange Publisher Subscriber import com.rabbitmq.client.BuiltinExchangeType; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.rabbitmq.client.ConnectionFactory; public class EmitLogTopic { private static final String EXCHANGE_NAME = \"topic_logs\"; public static void main(String[] argv) throws Exception { // Create a connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); // Use try-with-resource for automatic management try (Connection connection = factory.newConnection(); // Establish a new connection Channel channel = connection.createChannel()) { // Create a new channel // Declare a topic exchange with specified name channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC); String routingKey = getRouting(argv); String message = getMessage(argv); // Publish the message to the exchange channel.basicPublish(EXCHANGE_NAME, routingKey, null, message.getBytes(\"UTF-8\")); System.out.println(\" [x] Sent '\" + routingKey + \"':'\" + message + \"'\"); } } private static String getRouting(String[] strings) { if (strings.length \u003c 1) return \"anonymous.info\"; return strings[0]; } private static String getMessage(String[] strings) { if (strings.length \u003c 2) return \"Hello World!\"; return joinStrings(strings, \" \", 1); } private static String joinStrings(String[] strings, String delimiter, int startIndex) { int length = strings.length; if (length == 0) return \"\"; if (length \u003c startIndex) return \"\"; StringBuilder words = new StringBuilder(strings[startIndex]); for (int i = startIndex + 1; i \u003c length; i++) { words.append(delimiter).append(strings[i]); } return words.toString(); } } import com.rabbitmq.client.*; public class ReceiveLogsTopic { private static final String EXCHANGE_NAME = \"topic_logs\"; public static void main(String[] argv) throws Exception { // Create a new connection factory to connect to RabbitMQ ConnectionFactory factory = new ConnectionFactory(); // Set the host (default is 'localhost') factory.setHost(\"localhost\"); // Establish a new connection Connection connection = factory.newConnection(); // Create a new channel Channel channel = connection.createChannel(); // Declare a topic exchange with the specified name channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC); String queueName = channel.queueDeclare().getQueue(); if (argv.length \u003c 1) { System.err.println(\"Usage: ReceiveLogsTopic [binding_key]...\"); System.exit(1); } for (String bindingKey : argv) { channel.queueBind(queueName, EXCHANGE_NAME, bindingKey); } System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\"); // Define the callback function for process received messages DeliverCallback deliverCallback = (consumerTag, delivery) -\u003e { String message = new String(delivery.getBody(), \"UTF-8\"); System.out.println(\" [x] Received '\" + delivery.getEnvelope().getRoutingKey() + \"':'\" + message + \"'\"); }; // Consume messages from the queue channel.basicConsume(queueName, true, deliverCallback, consumerTag -\u003e { }); } } Reliability: Publisher Publisher Retry Publisher Retry in RabbitMQ refers to the mechanism where the publisher reconnects to RabbitMQ after a network issue. This mechanism improves the likelihood of a successful connection when the network is unstable. However, the retry process is executed in blocking manner, which may lead to performance issues during reconnection. Below are the relavant configurations for application.properties.\nspring.rabbitmq.listener.simple.retry.enabled=false # Whether or not publishing retries are enabled. spring.rabbitmq.listener.simple.retry.initial-interval=1000 # Interval between the first and second attempt to deliver a message. spring.rabbitmq.listener.simple.retry.max-attempts=3 # Maximum number of attempts to deliver a message. spring.rabbitmq.listener.simple.retry.max-interval=10000 # Maximum interval between attempts. spring.rabbitmq.listener.simple.retry.multiplier=1.0 # A multiplier to apply to the previous delivery retry interval. spring.rabbitmq.listener.simple.retry.stateless=true # Whether or not retry is stateless or stateful. Publisher Confirm \u0026amp; Publisher Return RabbitMQ provides two types of message confirmation mechanisms between the publisher and the broker: Publisher Confirm and Publisher Return. The Publisher Confirm mechanism allows the publisher to receive an ack from the broker when the message is successfully delivered to the broker. The Publisher Return mechanism enables the broker to notify the publisher when a message cannot be routed to any queue.\nWhen a message is sent to the broker, if the message type is temporary and can be successfully routed to the specified queue, the broker will return an ack to the publisher. If the message type if durable and the message can be delievered to the queue and successfully saved to disk, the broker will return an ack. Otherwise, the broker will return an nack (negative acknowledgement) to the publisher.\nspring.rabbitmq.publisher-confirms=false # Enable publisher confirms. spring.rabbitmq.publisher-returns=false # Enable publisher returns. The Publisher Confirm mechanism provides two types of confirmation: synchronous mode (simple) and asynchronous mode (correlated). Synchronous mode offers a strict acknowledgement process but may lead to performance issues in high-throughput environments. It is typically used when reliability is the top priority. On the other hand, asynchronous mode improves throughput but requires that the acknowledgement process be handled in the background.\nIt is important to note that using Publisher Confirm and Publisher Return mechanism incurs additional network and system resource costs. Therefore, these mechanisms should be used with caution in production systems. If they must be used, it\u0026rsquo;s recommended to rely on Publisher Confirm only, as routing issues are often caused by business logic problems, and Publisher Return is less commonly needed. Additionally, for messages that are negatively acknowledged (nack), retry them within a limited time window to avoid an infinite retry loop. If retried continue to fail, record the exception logs instead of attempting retries indefinitely.\nReliability: Broker Data Persistency LazyQueue ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/asynchronous-messaging/1-asynchronous-messaging/","summary":"Synchronous Messaging VS. Asynchronous Messaging Synchronous Messaging and Asynchronous Messaging are two commnication paradigms used in distributed systems. In synchronous messaging, the sender will not continue executing until it receives the acknowledged message from the receiver. This paradigm is commonly used in situations that require immediate feedback to continue operations, such as payments or transaction processing.\nThe advantages of this paradigm include ease of implementation and usefulness in situations where immediate feedback is needed.","title":"Asynchronous Messaging"},{"content":"Introduction to DBMS A Database Management System (DBMS) is software that provides an interface for users to interact with databases. It enables the management, storage, and manipulation of data within databases. DBMS can be broadly classified into two main types: Relational DBMS and NoSQL DBMS.\nIn a Relational DBMS, data is stored in structured tables and is manipulated using SQL (Structured Query Language). Examples of relational DBMS inlcude MySQL, Oracle, and PostgreSQL.\nIn a NoSQL DBMS, data is typically unstructured or semi-structured, offering flexibility to handle diverse data types. Examples of NoSQL DBMS include MongoDB and Redis.\nMySQL MySQL is a relational database management system (RDBMS) that uses Structured Query Language (SQL) to interact with databases. It stores data in tables made up of rows and columns, allowing for efficient organization, retrival, and manipulation of data.\nSQL Commands SQL Commands are used to interact with relational databases. These commands can be classified into five types: DDL, DQL, DML, DCL, and TCL.\nSQL Commands DDL (Data Definition Language): Used to define and manage the structure of database instances, such as creating, altering, and deleting tables, and defining constraints. DQL (Data Query Language): Used to retrive data from the database, primarily through the SELECT statement. DML (Data Manipulation Language): Used to manipulate data within tables, such as inserting, updating, and deleting records. DCL (Data Control Language): Used to control access to data, manage user priviledges, and ensure data security. It includes commands like GRANT and REVOKE. TCL (Transaction Control Language): Used to manage transactions, ensuring data consistency. It includes commands like COMMIT, ROLLBACK, and SAVEPOINT. SQL Query Execution Order MySQL Execution Order: In MySQL, the execution order of an SQL query differs from the order in which components (e.g., SELECT, FROM, WHERE) are written in the query. MySQL begins by identifying the tables or views specified in the FROM clause. If there are any JOIN operation, MySQL performs the joins first and applies the ON condition. After completing the join operations, MySQL filters the based on the conditions specified in the WHERE clause.\nIf a GROUP BY clause is present, MySQL groups the rows based on the specified column(s) and then executes any aggregation functions (e.g., SUM(), COUNT(), etc.). Following the grouping, if a HAVING clause is provided, MySQL further filters the grouped results based on the specified condition.\nAfter filtering grouped results, MySQL selects the specified columns in the SELECT clause. If the DISTINCT keyword is used, MySQL removes duplicate rows from the selected result. Once the rows are selected and duplicates are removed, MySQL sorts the result set according to the rules defined in the ORDER BY clause.\nFinally, if a LIMIT or OFFSET clause is included, MySQL limits the number of rows returned, starting from the specified OFFSET.\nSQL Query Execution Order Select Find Customer Referee SHOW PROBLEM Table: Customer\nColumn Name Type id int name varchar referee_id int The id column is the primary key. Each row represents a customer, their name, and the id of the customer who referred them. If a customer wasn\u0026rsquo;t referred by anyone, the referee_id is NULL. Problem:\nFind the names of customers who were not referred by the customer with id = 2.\nThe result can be returned in any order.\nExample:\nInput: Customer table:\nid name referee_id 1 Will NULL 2 Jane NULL 3 Alex 2 4 Bill NULL 5 Zack 1 6 Mark 2 Output:\nname Will Jane Bill Zack Go to Leetcode 🔗 SHOW CODE MySQL SELECT name FROM Customer WHERE referee_id != 2 OR referee_id IS NULL; SHOW NOTES In SQL, NULL is not equal to any value, including 2. Therefore, the condition referee_id != 2 will exclude records where referee_id is NULL, because comparisons with NULL always result in an unknown NULL value, which is neither TRUE nor FALSE. It is crucial to consider the handling of NULL values when working with databases.\nArticle Views I SHOW PROBLEM Table: Views\nColumn Name Type article_id int author_id int viewer_id int view_date date There is no primary key in this table, and the table may contain duplicate rows. Each row indicates that a viewer viewed an article, where the article is written by an author, on a specific date. If author_id and viewer_id are the same, it indicates that the author viewed their own article. Problem:\nWrite a query to find the IDs of authors who have viewed at least one of their own articles.\nReturn the result table sorted by author_id in ascending order.\nExample:\nInput:\nViews table:\narticle_id author_id viewer_id view_date 1 3 5 2019-08-01 1 3 6 2019-08-02 2 7 7 2019-08-01 2 7 6 2019-08-02 4 7 1 2019-07-22 3 4 4 2019-07-21 3 4 4 2019-07-21 Output:\nid 4 7 Go to Leetcode 🔗 SHOW CODE MySQL SELECT DISTINCT author_id AS id FROM Views WHERE author_id = viewer_id ORDER BY id ASC; SHOW NOTES In SQL, the DISTINCT keyword is used to remove duplicate records from the result set, ensuring that only unique values are returned. It is commonly used in scenarios such as aggregating distinct values and ensuring uniqueness in join queries.\n# Aggregating unique values SELECT DISTINCT product_id FROM Order_Items; # Ensuring unique results in join queries SELECT DISTINCT c.customer_id, c.name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id; Baisc Joins LEFT JOIN: Replace Employee ID With The Unique Identifier In MySQL, LEFT JOIN is used to combine rows from two or more tables based on a related column between them. It returns all rows from the left table and the matching rows from the right table. If there is no match, the result will include NULL values for the column from the right table.\nSHOW PROBLEM Tables:\nEmployees\nColumn Name Type id int name varchar id is the primary key for this table. Each row represents an employee in the company, containing their id and name. EmployeeUNI\nColumn Name Type id int unique_id int (id, unique_id) is the primary key, meaning the combination of id and unique_id is unique across the table. Each row represents an employee\u0026rsquo;s id and their corresponding unique_id in the company. Task:\nWrite a SQL query that returns the unique_id of each employee from the Employees table. If an employee does not have a corresponding unique_id, return NULL for that employee.\nQuery Requirements:\nIf an employee has a unique_id, show it. If an employee does not have a unique_id, return NULL. The result should display the unique_id and the name of each employee. The results can be returned in any order.\nExample:\nInput:\nEmployees table:\nid name 1 Alice 7 Bob 11 Meir 90 Winston 3 Jonathan EmployeeUNI table:\nid unique_id 3 1 11 2 90 3 Output:\nunique_id name NULL Alice NULL Bob 2 Meir 3 Winston 1 Jonathan Explanation:\nAlice and Bob do not have a unique_id, so NULL is shown for both. Meir has a unique_id of 2. Winston has a unique_id of 3. Jonathan has a unique_id of 1. Go to Leetcode 🔗 SHOW CODE MySQL SELECT euni.unique_id, e.name FROM Employees e LEFT JOIN EmployeeUNI euni ON e.id = euni.id; LEFT JOIN: Confirmation Rate SHOW PROBLEM Table: Signups\nColumn Name Type user_id int time_stamp datetime user_id is a unique identifier for each user. Each row represents the signup time for the user identified by user_id. Table: Confirmations\nColumn Name Type user_id int time_stamp datetime action ENUM The primary key is a combination of user_id and time_stamp. user_id is a foreign key referencing the Signups table. action is an ENUM with two possible values: 'confirmed' or 'timeout'. Each row represents a confirmation request made by the user with user_id, indicating whether the confirmation message was confirmed ('confirmed') or timed out ('timeout'). Problem Description\nThe confirmation rate of a user is calculated as the ratio of 'confirmed' actions to the total number of confirmation requests. If a user has not made any confirmation requests, the confirmation rate is 0. The rate should be rounded to two decimal places.\nGoal\nWrite a SQL query to find the confirmation rate for each user.\nReturn the result in any order.\nInput\nSignups table:\nuser_id time_stamp 3 2020-03-21 10:16:13 7 2020-01-04 13:57:59 2 2020-07-29 23:09:44 6 2020-12-09 10:39:37 Confirmations table:\nuser_id time_stamp action 3 2021-01-06 03:30:46 timeout 3 2021-07-14 14:00:00 timeout 7 2021-06-12 11:57:29 confirmed 7 2021-06-13 12:58:28 confirmed 7 2021-06-14 13:59:27 confirmed 2 2021-01-22 00:00:00 confirmed 2 2021-02-28 23:59:59 timeout Output\nuser_id confirmation_rate 6 0.00 3 0.00 7 1.00 2 0.50 Explanation:\nUser 6 did not request any confirmation messages, so their confirmation rate is 0. User 3 made two confirmation requests, but both timed out, so their confirmation rate is 0. User 7 made three requests, and all were confirmed, so their confirmation rate is 1.00. User 2 made two requests: one confirmed and one timed out, so their confirmation rate is 1/2 = 0.50. Go to Leetcode 🔗 SHOW CODE MySQL SELECT user_id, ROUND(IFNULL(SUM(action = 'confirmed') / COUNT(1), 0), 2) AS confirmation_rate FROM SignUps LEFT JOIN Confirmations USING (user_id) GROUP BY 1; SELECT s.user_id, CASE WHEN c.user_id IS NULL THEN 0.00 ELSE ROUND(SUM(CASE WHEN action = 'confirmed' THEN 1 ELSE 0 END) / COUNT(*),2) END AS confirmation_rate FROM Signups s LEFT JOIN Confirmations c ON c.user_id = s.user_id GROUP BY s.user_id SHOW NOTES SUM(action = 'confirmed'): action = 'confirmed' returns 1 for confirmed actions and 0 for 'timeout' action. COUNT(1): Counts the total number of rows. (Use COUNT(*) for counting rows is more clear and idiomatic). LEFT JOIN Confirmations USING (user_id): Joins the Signups table with the Confirmations table on the user_id column. GROUP BY 1: A shorthand for GROUP BY user_id. It groups the results by the first column in the SELECT list, which is user_id in this case. INNER JOIN: Product Sales Analysis I In MySQL, the INNER JOIN is used to combine rows from two or more tables based on a related column between them. It only returns rows where there is a match in all the joined tables.\nSHOW PROBLEM Tables:\nSales\nColumn Name Type sale_id int product_id int year int quantity int price int (sale_id, year) is the primary key, meaning this combination of columns is unique. product_id is a foreign key referencing the Product table. Each row represents a sale of a product identified by product_id in a particular year. The price is per unit of the product. Product\nColumn Name Type product_id int product_name varchar product_id is the primary key for this table. Each row represents a product with its product_name. Task:\nWrite a SQL query to report the product_name, year, and price for each sale in the Sales table.\nQuery Requirements:\nReturn the product_name from the Product table, corresponding to the product_id in the Sales table. Include the year and price from the Sales table for each sale. The result can be returned in any order. Example:\nInput:\nSales table:\nsale_id product_id year quantity price 1 100 2008 10 5000 2 100 2009 12 5000 7 200 2011 15 9000 Product table:\nproduct_id product_name 100 Nokia 200 Apple 300 Samsung Output:\nproduct_name year price Nokia 2008 5000 Nokia 2009 5000 Apple 2011 9000 Explanation:\nFrom sale_id = 1, we can conclude that Nokia was sold for 5000 in 2008. From sale_id = 2, we can conclude that Nokia was sold for 5000 in 2009. From sale_id = 7, we can conclude that Apple was sold for 9000 in 2011. Go to Leetcode 🔗 SHOW CODE MySQL SELECT p.product_name, s.year, s.price FROM Sales s INNER JOIN Product p ON s.product_id = p.product_id; LEFT JOIN: Customer Who Visited but Did Not Make Any Transactions SHOW PROBLEM Table: Visits\nColumn Name Type visit_id int customer_id int visit_id is the unique identifier for each visit. This table contains information about the customers who visited the mall. Table: Transactions\nColumn Name Type transaction_id int visit_id int amount int transaction_id is the unique identifier for each transaction. This table contains information about the transactions made during each visit. Task:\nWrite a SQL query to find the IDs of customers who visited the mall without making any transactions, and count how many times they made these visits.\nThe result should include:\ncustomer_id — the ID of the customer. count_no_trans — the number of visits where no transaction was made. Query Requirements:\nReturn the result sorted in any order. Input:\nVisits table:\nvisit_id customer_id 1 23 2 9 4 30 5 54 6 96 7 54 8 54 Transactions table:\ntransaction_id visit_id amount 2 5 310 3 5 300 9 5 200 12 1 910 13 2 970 Output:\ncustomer_id count_no_trans 54 2 30 1 96 1 Explanation:\nCustomer with id = 23 visited once and made a transaction during the visit with id = 12. Customer with id = 9 visited once and made a transaction during the visit with id = 13. Customer with id = 30 visited once and did not make any transactions. Customer with id = 54 visited three times. During two visits, they did not make any transactions, and during one visit, they made three transactions. Customer with id = 96 visited once and did not make any transactions. In the output, customers with id = 30, id = 96, and id = 54 (for two of their visits) made visits without transactions.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT v.customer_id, COUNT(v.visit_id) as count_no_trans FROM Visits v LEFT JOIN Transactions t ON v.visit_id = t.visit_id WHERE t.transaction_id IS NULL GROUP BY v.customer_id; SHOW NOTES In the above SQL query, MySQL first identifies the Visits table and performs a LEFT JOIN with the Transactions table based on the condition v.visit_id = t.visit_id. The LEFT JOIN operation combines the two tables and fills NULL in rows where there is no match in the Transactions table. The result looks like this:\nSELECT * FROM Visits v LEFT JOIN Transactions t ON v.visit_id = t.visit_id; visit_id customer_id transaction_id visit_id amount 1 23 12 1 910 2 9 13 2 970 4 30 null null null 5 54 9 5 200 5 54 3 5 300 5 54 2 5 310 6 96 null null null 7 54 null null null 8 54 null null null After joining the tables, MySQL applies the WHERE clause to filter rows where t.transaction_id IS NULL, which means visits without any transactions.\nSELECT * FROM Visits v LEFT JOIN Transactions t ON v.visit_id = t.visit_id WHERE t.transaction_id IS NULL; visit_id customer_id transaction_id visit_id amount 4 30 null null null 6 96 null null null 7 54 null null null 8 54 null null null Next, MySQL groups the filtered rows by customer_id and calculates the number of visits per customer using the COUNT(v.visit_id) function.\nSELECT *, COUNT(v.visit_id) FROM Visits v LEFT JOIN Transactions t ON v.visit_id = t.visit_id WHERE t.transaction_id IS NULL GROUP BY v.customer_id; visit_id customer_id transaction_id visit_id amount COUNT(v.visit_id) 4 30 null null null 1 6 96 null null null 1 7 54 null null null 2 Finally, MySQL selects the desired columns and renames the COUNT(v.visit_id) column using the AS clause.\nSELECT v.customer_id, COUNT(v.visit_id) AS count_no_trans FROM Visits v LEFT JOIN Transactions t ON v.visit_id = t.visit_id WHERE t.transaction_id IS NULL GROUP BY v.customer_id; customer_id count_no_trans 30 1 96 1 54 2 SELF JOIN: Rising Temperature In MySQL, a self join is an operation where a table joins itself. It is commonly used when comparing rows within the same table based on a specific condition or when working with hierarchical data, such as relating employees to their managers.\nSHOW PROBLEM Table: Weather\nColumn Name Type id int recordDate date temperature int id is a column with unique values. There are no duplicate rows for the same recordDate. This table contains information about the temperature on specific dates. Problem Statement\nWrite a solution to find the id of all dates where the temperature is higher compared to the previous day (yesterday).\nReturn\nReturn the result table in any order. Input:\nWeather Table:\nid recordDate temperature 1 2015-01-01 10 2 2015-01-02 25 3 2015-01-03 20 4 2015-01-04 30 Output:\nid 2 4 Explanation:\nOn 2015-01-02, the temperature was higher than the previous day (10 -\u0026gt; 25). On 2015-01-04, the temperature was higher than the previous day (20 -\u0026gt; 30). Go to Leetcode 🔗 SHOW CODE MySQL SELECT w1.id FROM Weather w1 JOIN Weather w2 ON DATE_ADD(w2.recordDate, INTERVAL 1 DAY) = w1.recordDate WHERE w1.temperature \u003e w2.temperature; SHOW NOTES In the above query, the DATE_ADD(w2.recordDate, INTERVAL 1 DAY) = w1.recordDate condition ensures that the recordDate of w1 matches the day following w2\u0026rsquo;s recordDate.\nSELECT * FROM Weather w1 JOIN Weather w2 ON DATE_ADD(w2.recordDate, INTERVAL 1 DAY) = w1.recordDate id recordDate temperature id recordDate temperature 1 2015-01-01 10 2 2015-01-02 25 1 2015-01-01 10 3 2015-01-03 20 2 2015-01-02 25 4 2015-01-04 30 3 2015-01-03 20 4 2015-01-04 30 Result of the Join:\nid recordDate temperature id recordDate temperature 2 2015-01-02 25 1 2015-01-01 10 3 2015-01-03 20 2 2015-01-02 25 4 2015-01-04 30 3 2015-01-03 20 when id equals to 2, 25 \u0026gt; 10, so it is selcted. when id equals to 3, 20 \u0026lt; 25, so it is not selcted. when id equals to 4, 25 \u0026gt; 10, so it is selcted. Therefore, the result will be:\nid 2 4 Example: Relating Employees to Their Managers\nEmployees Table:\nid name manager_id 1 Alice NULL 2 Bob 1 3 Charlie 1 4 David 2 SELECT e1.name AS Employee, e2.name AS Manager FROM Employees e1 JOIN Employees e2 ON e1.manager_id = e2.id; Result of the Join:\nid name manager_id id name manager_id 2 Bob 1 1 Alice NULL 3 Charlie 1 1 Alice NULL 4 David 2 2 Bob 1 Final Result:\nEmployee Manager Bob Alice Charlie Alice David Bob SELF JOIN: Managers with at Least 5 Direct Reports SHOW PROBLEM Problem Description\nTable: Employee\nColumn Name Data Type Description id int Unique identifier for each employee. name varchar Name of the employee. department varchar Department to which the employee belongs. managerId int ID of the employee\u0026rsquo;s manager. If managerId is null, the employee does not have a manager. id is the primary key, ensuring each value is unique. Each row represents an employee, including their name, department, and their manager’s ID. If managerId is null, the employee does not report to any manager. An employee cannot be their own manager. Task\nWrite a query to find the managers who have at least five direct reports.\nReturn the result in any order.\nInput:\nEmployee Table:\nid name department managerId 101 John A null 102 Dan A 101 103 James A 101 104 Amy A 101 105 Anne A 101 106 Ron B 101 Output:\nname John Go to Leetcode 🔗 SHOW CODE MySQL SELECT b.name FROM Employee a JOIN Employee b ON a.managerId = b.id GROUP BY b.id HAVING COUNT(*) \u003e= 5 SHOW NOTES Table: Employee:\nid name department managerId 101 John A null 102 Dan A 101 103 James A 101 104 Amy A 101 105 Anne A 101 106 Ron B 101 Perform a self join, the table becomes:\nSELECT * FROM Employee a JOIN Employee b ON a.managerId = b.id Table: Slef Joined Result:\nid name department managerId id name department managerId 106 Ron B 101 101 John A null 105 Anne A 101 101 John A null 104 Amy A 101 101 John A null 103 James A 101 101 John A null 102 Dan A 101 101 John A null Group the self joined result:\nSELECT * FROM Employee a JOIN Employee b ON a.managerId = b.id GROUP BY b.id Table: Grouped Result:\nid name department managerId id name department managerId 106 Ron B 101 101 John A null Filter grouped result:\nSELECT * FROM Employee a JOIN Employee b ON a.managerId = b.id GROUP BY b.id HAVING COUNT(*) \u0026gt;= 5 Table: Filtered Grouped Result:\nid name department managerId id name department managerId 106 Ron B 101 101 John A null Select the specified column(s):\nSELECT b.name FROM Employee a JOIN Employee b ON a.managerId = b.id GROUP BY b.id HAVING COUNT(*) \u0026gt;= 5 Final Result:\nname John SELF JOIN: Average Time of Process per Machine SHOW PROBLEM Table: Activity\nColumn Name Type machine_id int process_id int activity_type enum timestamp float The table records user activities for machines on a factory website. The combination of (machine_id, process_id, activity_type) is the primary key, ensuring uniqueness in the table. machine_id is the ID of the machine. process_id is the ID of the process running on the machine with ID machine_id. activity_type is an ENUM type with values 'start' and 'end', representing the start and end of a process. timestamp is a float value representing the time (in seconds) the event occurred. The 'start' timestamp is always earlier than the 'end' timestamp for each (machine_id, process_id) pair. It is guaranteed that each (machine_id, process_id) pair has a corresponding 'start' and 'end' timestamp. Problem:\nThere are several machines on a factory website, and each machine runs the same number of processes. Your task is to write a SQL query that calculates the average time each machine takes to complete a process.\nThe time to complete a process is the difference between the 'end' timestamp and the 'start' timestamp. The average time for each machine is calculated by dividing the total time for all processes on that machine by the number of processes. The result should contain the following columns:\nmachine_id — the ID of the machine. processing_time — the average processing time, rounded to 3 decimal places. Input:\nActivity table: |------------|------------|---------------|-----------| | machine_id | process_id | activity_type | timestamp | |------------|------------|---------------|-----------| | 0 | 0 | start | 0.712 | | 0 | 0 | end | 1.520 | | 0 | 1 | start | 3.140 | | 0 | 1 | end | 4.120 | | 1 | 0 | start | 0.550 | | 1 | 0 | end | 1.550 | | 1 | 1 | start | 0.430 | | 1 | 1 | end | 1.420 | | 2 | 0 | start | 4.100 | | 2 | 0 | end | 4.512 | | 2 | 1 | start | 2.500 | | 2 | 1 | end | 5.000 | |------------|------------|---------------|-----------| Output:\n|------------|-----------------| | machine_id | processing_time | |------------|-----------------| | 0 | 0.894 | | 1 | 0.995 | | 2 | 1.456 | |------------|-----------------| Explanation:\nMachine 0:\nProcess 0: End time 1.520, Start time 0.712 → Time taken = 1.520 - 0.712 = 0.808 Process 1: End time 4.120, Start time 3.140 → Time taken = 4.120 - 3.140 = 0.980 Average time = (0.808 + 0.980) / 2 = 0.894 Machine 1:\nProcess 0: End time 1.550, Start time 0.550 → Time taken = 1.550 - 0.550 = 1.000 Process 1: End time 1.420, Start time 0.430 → Time taken = 1.420 - 0.430 = 0.990 Average time = (1.000 + 0.990) / 2 = 0.995 Machine 2:\nProcess 0: End time 4.512, Start time 4.100 → Time taken = 4.512 - 4.100 = 0.412 Process 1: End time 5.000, Start time 2.500 → Time taken = 5.000 - 2.500 = 2.500 Average time = (0.412 + 2.500) / 2 = 1.456 Go to Leetcode 🔗 SHOW CODE MySQL SELECT machine_id, ROUND(AVG(end_time - start_time), 3) AS processing_time FROM ( SELECT a.machine_id, a.process_id, a.timestamp AS start_time, b.timestamp AS end_time FROM Activity a JOIN Activity b ON a.machine_id = b.machine_id AND a.process_id = b.process_id AND a.activity_type = 'start' AND b.activity_type = 'end' ) AS process_times GROUP BY machine_id; SHOW NOTES In the following SQL query, the condition a.activity_type = 'start' and b.activity_type = 'end' ensures that the start and end timestamp are correctly matched for the same process on the same machine.\nSELECT * FROM Activity a JOIN Activity b ON a.machine_id = b.machine_id AND a.process_id = b.process_id AND a.activity_type = \u0026#39;start\u0026#39; AND b.activity_type = \u0026#39;end\u0026#39; Result of the Join:\nmachine_id process_id activity_type timestamp machine_id process_id activity_type timestamp 0 0 start 0.712 0 0 end 1.52 0 1 start 3.14 0 1 end 4.12 1 0 start 0.55 1 0 end 1.55 1 1 start 0.43 1 1 end 1.42 2 0 start 4.1 2 0 end 4.512 2 1 start 2.5 2 1 end 5 The result is selected from of the joined result:\nSELECT machine_id, ROUND(AVG(end_time - start_time), 3) AS processing_time FROM ( SELECT a.machine_id, a.process_id, a.timestamp AS start_time, b.timestamp AS end_time FROM Activity a JOIN Activity b ON a.machine_id = b.machine_id AND a.process_id = b.process_id AND a.activity_type = \u0026#39;start\u0026#39; AND b.activity_type = \u0026#39;end\u0026#39; ) AS process_times GROUP BY machine_id; Final Result:\nmachine_id processing_time 0 0.894 1 0.995 2 1.456 CROSS JOIN: Students and Examinations In MySQL, a CROSS JOIN is a type of join that returns the Cartesian product of two tables. It combines each row from the first table with every row from the second table, without the need for a join condition. For example, consider two tables, Students and Subjects:\nTable 1: Students\nstudent_id student_name 1 Alice 2 Bob Table 2: Subjects\nsubject_name Math Physics When a Cross Join is performed between these two tables, the result will be:\nTable: Result of Cross Join\nstudent_id student_name subject_name 1 Alice Math 1 Alice Physics 2 Bob Math 2 Bob Physics SHOW PROBLEM Table: Students\nColumn Name Type student_id int student_name varchar student_id is the primary key (unique values) for this table. Each row represents a student with their unique ID and name. Table: Subjects\nColumn Name Type subject_name varchar subject_name is the primary key (unique values) for this table. Each row represents the name of a subject offered in the school. Table: Examinations\nColumn Name Type student_id int subject_name varchar There is no primary key for this table, and it may contain duplicates. Each row indicates that a student with student_id attended the exam for the subject subject_name. Every student takes every course from the Subjects table. Task:\nWrite a query to find the number of times each student attended each exam, ordered by student_id and subject_name.\nInput:\nStudents Table:\nstudent_id student_name 1 Alice 2 Bob 13 John 6 Alex Subjects Table:\nsubject_name Math Physics Programming Examinations Table:\nstudent_id subject_name 1 Math 1 Physics 1 Programming 2 Programming 1 Physics 1 Math 13 Math 13 Programming 13 Physics 2 Math 1 Math Output:\nstudent_id student_name subject_name attended_exams 1 Alice Math 3 1 Alice Physics 2 1 Alice Programming 1 2 Bob Math 1 2 Bob Physics 0 2 Bob Programming 1 6 Alex Math 0 6 Alex Physics 0 6 Alex Programming 0 13 John Math 1 13 John Physics 1 13 John Programming 1 Explanation:\nThe result table contains all students and all subjects.\nAlice attended the Math exam 3 times, the Physics exam 2 times, and the Programming exam 1 time. Bob attended the Math exam 1 time, the Programming exam 1 time, and did not attend the Physics exam. Alex did not attend any exams. John attended the Math exam 1 time, the Physics exam 1 time, and the Programming exam 1 time. Go to Leetcode 🔗 SHOW CODE MySQL SELECT s.student_id, s.student_name, sub.subject_name, COUNT(e.student_id) AS attended_exams FROM Students s CROSS JOIN Subjects sub LEFT JOIN Examinations e ON s.student_id = e.student_id AND sub.subject_name = e.subject_name GROUP BY s.student_id, s.student_name, sub.subject_name ORDER BY s.student_id, sub.subject_name; SHOW NOTES Table: Students\nstudent_id student_name 1 Alice 2 Bob 13 John 6 Alex Table: Subjects:\nsubject_name Math Physics Programming When a CROSS JOIN is performed between the Students and Subjects tables, the result will be:\nSELECT * FROM Students s CROSS JOIN Subjects sub Table: Result of Cross Join:\nstudent_id student_name subject_name 1 Alice Programming 1 Alice Physics 1 Alice Math 2 Bob Programming 2 Bob Physics 2 Bob Math 13 John Programming 13 John Physics 13 John Math 6 Alex Programming 6 Alex Physics 6 Alex Math Table: Examniations:\nstudent_id subject_name 1 Math 1 Physics 1 Programming 2 Programming 1 Physics 1 Math 13 Math 13 Programming 13 Physics 2 Math 1 Math Perform a LEFT JOIN on the cross-joined tables with the Examinations table:\nSELECT * FROM Students s CROSS JOIN Subjects sub LEFT JOIN Examinations e ON s.student_id = e.student_id AND sub.subject_name = e.subject_name Table: Left Join Result:\nstudent_id student_name subject_name student_id subject_name 1 Alice Programming 1 Programming 1 Alice Physics 1 Physics 1 Alice Physics 1 Physics 1 Alice Math 1 Math 1 Alice Math 1 Math 1 Alice Math 1 Math 2 Bob Programming 2 Programming 2 Bob Physics null null 2 Bob Math 2 Math 13 John Programming 13 Programming 13 John Physics 13 Physics 13 John Math 13 Math 6 Alex Programming null null 6 Alex Physics null null 6 Alex Math null null After grouping the left joined result and count the e.studentId, the table will look like:\nSELECT *, COUNT(e.student_id) AS attended_exams FROM Students s CROSS JOIN Subjects sub LEFT JOIN Examinations e ON s.student_id = e.student_id AND sub.subject_name = e.subject_name GROUP BY s.student_id, s.student_name, sub.subject_name Table: Grouped Result with Count:\nstudent_id student_name subject_name student_id subject_name attended_exams 1 Alice Programming 1 Programming 1 1 Alice Physics 1 Physics 2 1 Alice Math 1 Math 3 2 Bob Programming 2 Programming 1 2 Bob Physics null null 0 2 Bob Math 2 Math 1 13 John Programming 13 Programming 1 13 John Physics 13 Physics 1 13 John Math 13 Math 1 6 Alex Programming null null 0 6 Alex Physics null null 0 6 Alex Math null null 0 After selecting the specified columns, the result table becomes:\nSELECT s.student_id, s.student_name, sub.subject_name, COUNT(e.student_id) AS attended_exams FROM Students s CROSS JOIN Subjects sub LEFT JOIN Examinations e ON s.student_id = e.student_id AND sub.subject_name = e.subject_name GROUP BY s.student_id, s.student_name, sub.subject_name student_id student_name subject_name attended_exams 1 Alice Programming 1 1 Alice Physics 2 1 Alice Math 3 2 Bob Programming 1 2 Bob Physics 0 2 Bob Math 1 13 John Programming 1 13 John Physics 1 13 John Math 1 6 Alex Programming 0 6 Alex Physics 0 6 Alex Math 0 Sort the selcted table based on the condition s.student_id and sub.subject_name, return the final result:\nTable: Final Result:\nstudent_id student_name subject_name attended_exams 1 Alice Math 3 1 Alice Physics 2 1 Alice Programming 1 2 Bob Math 1 2 Bob Physics 0 2 Bob Programming 1 6 Alex Math 0 6 Alex Physics 0 6 Alex Programming 0 13 John Math 1 13 John Physics 1 13 John Programming 1 Basic Aggregate Functions Average Selling Price SHOW PROBLEM Table: Prices\nColumn Name Type product_id int start_date date end_date date price int The primary key for this table is the combination of (product_id, start_date, end_date), ensuring unique periods for each product. Each row represents the price of a product for a specific period, from start_date to end_date. For each product, no two periods will overlap. Table: UnitsSold\nColumn Name Type product_id int purchase_date date units int This table may contain duplicate rows. Each row represents the date, number of units, and product_id for a product sold on that date. Problem:\nWrite a SQL query to find the average selling price for each product. The average_price should be rounded to two decimal places. If a product does not have any sold units, its average selling price should be considered 0.\nReturn the result table in any order.\nInput:\nPrices table:\nproduct_id start_date end_date price 1 2019-02-17 2019-02-28 5 1 2019-03-01 2019-03-22 20 2 2019-02-01 2019-02-20 15 2 2019-02-21 2019-03-31 30 UnitsSold table:\nproduct_id purchase_date units 1 2019-02-25 100 1 2019-03-01 15 2 2019-02-10 200 2 2019-03-22 30 Output:\nproduct_id average_price 1 6.96 2 16.96 Explanation:\nFor product 1:\nFrom 2019-02-17 to 2019-02-28, 100 units were sold at a price of 5. From 2019-03-01 to 2019-03-22, 15 units were sold at a price of 20. Average price is calculated based on the total price and total units sold. For product 2:\nFrom 2019-02-01 to 2019-02-20, 200 units were sold at a price of 15. From 2019-02-21 to 2019-03-31, 30 units were sold at a price of 30. Average price is calculated based on the total price and total units sold. Go to Leetcode 🔗 SHOW CODE MySQL SELECT p.product_id, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date GROUP BY 1; SHOW NOTES: Right Answer MySQL Query Walkthrough:\nTable: Prices\nproduct_id start_date end_date price 1 2019-02-17 2019-02-28 5 1 2019-03-01 2019-03-22 20 2 2019-02-01 2019-02-20 15 2 2019-02-21 2019-03-31 30 3 2019-02-21 2019-03-31 30 Table: UnitsSold\nproduct_id purchase_date units 1 2019-02-25 100 1 2019-03-01 15 2 2019-02-10 200 2 2019-03-22 30 Join the two tables based on the product_id and the purchase_date, where the purchase_date falls between the start_date and the end_date:\nSELECT * FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date; product_id start_date end_date price product_id purchase_date units 1 2019-02-17 2019-02-28 5 1 2019-02-25 100 1 2019-03-01 2019-03-22 20 1 2019-03-01 15 2 2019-02-01 2019-02-20 15 2 2019-02-10 200 2 2019-02-21 2019-03-31 30 2 2019-03-22 30 3 2019-02-21 2019-03-31 30 null null null Group the joined result and then use aggregation functions to calculate the average price:\nSELECT *, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date GROUP BY 1; product_id start_date end_date price product_id purchase_date units average_price 1 2019-02-17 2019-02-28 5 1 2019-02-25 100 6.96 2 2019-02-01 2019-02-20 15 2 2019-02-10 200 16.96 3 2019-02-21 2019-03-31 30 null null null 0 Select the desired columns:\nSELECT p.product_id, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date GROUP BY 1; product_id average_price 1 6.96 2 16.96 3 0 SHOW NOTES: Wrong Answer # Wrong Answer SELECT p.product_id, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id WHERE purchase_date BETWEEN start_date AND end_date GROUP BY 1; Join the two tables based on the condition p.product_id = u.product_id:\nSELECT * FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id; product_id start_date end_date price product_id purchase_date units 1 2019-02-17 2019-02-28 5 1 2019-03-01 15 1 2019-02-17 2019-02-28 5 1 2019-02-25 100 1 2019-03-01 2019-03-22 20 1 2019-03-01 15 1 2019-03-01 2019-03-22 20 1 2019-02-25 100 2 2019-02-01 2019-02-20 15 2 2019-03-22 30 2 2019-02-01 2019-02-20 15 2 2019-02-10 200 2 2019-02-21 2019-03-31 30 2 2019-03-22 30 2 2019-02-21 2019-03-31 30 2 2019-02-10 200 3 2019-02-21 2019-03-31 30 null null null Filter out the rows that do not fall between start_date and end_date:\nSELECT * FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id WHERE purchase_date BETWEEN start_date AND end_date; product_id start_date end_date price product_id purchase_date units 1 2019-02-17 2019-02-28 5 1 2019-02-25 100 1 2019-03-01 2019-03-22 20 1 2019-03-01 15 2 2019-02-01 2019-02-20 15 2 2019-02-10 200 2 2019-02-21 2019-03-31 30 2 2019-03-22 30 Group the filtered result and then use aggregation functions to calculate average price:\nSELECT *, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id WHERE purchase_date BETWEEN start_date AND end_date GROUP BY 1; product_id start_date end_date price product_id purchase_date units average_price 1 2019-02-17 2019-02-28 5 1 2019-02-25 100 6.96 2 2019-02-01 2019-02-20 15 2 2019-02-10 200 16.96 Select the desired columns:\nSELECT p.product_id, ROUND(IFNULL(SUM(price * units) / SUM(units), 0), 2) AS average_price FROM Prices AS p LEFT JOIN UnitsSold AS u ON p.product_id = u.product_id WHERE purchase_date BETWEEN start_date AND end_date GROUP BY 1; product_id average_price 1 6.96 2 16.96 The correct answer is:\nproduct_id average_price 1 6.96 2 16.96 3 0 Summary: The LEFT JOIN operation will return NULL results for rows without without matching records in the UnitsSold table. In the condition p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date, the date range check is applied during the join operation, while WHERE purchase_date BETWEEN start_date AND end_date is applied after the join operation. The WHERE clause exlcudes rows with NULL values, which means products with no matching sales records (i.e., where purchase_date doesn\u0026rsquo;t match) will be excluded from the result. When grouping the result, no rows containing NULL values remain, leading to an incorrect result (missing product_id = 3 with average_price = 0).\nPercentage of Users Attended a Contest SHOW PROBLEM Table: Users\nColumn Name Type user_id int user_name varchar user_id is the primary key (a unique identifier) for this table. Each row in this table represents a user, with their unique ID and name. Table: Register\nColumn Name Type contest_id int user_id int (contest_id, user_id) is the primary key (a unique combination of columns) for this table. Each row in this table represents the registration of a user in a specific contest. Task\nWrite a solution to calculate the percentage of users registered for each contest, rounded to two decimal places.\nReturn the result table sorted by percentage in descending order. If there is a tie in percentage, order by contest_id in ascending order.\nInput:\nUsers table:\nuser_id user_name 6 Alice 2 Bob 7 Alex Register table:\ncontest_id user_id 215 6 209 2 208 2 210 6 208 6 209 7 209 6 215 7 208 7 210 2 207 2 210 7 Output:\ncontest_id percentage 208 100.0 209 100.0 210 100.0 215 66.67 207 33.33 Explanation:\nContests 208, 209, and 210 had 100% user registration. The results are sorted by contest_id in ascending order. Contest 215 had a registration rate of 66.67%, as Alice and Alex registered, out of a total of three users. Contest 207 had a registration rate of 33.33%, as only Bob registered, out of a total of three users. Go to Leetcode 🔗 SHOW CODE MySQL SELECT contest_id, ROUND(COUNT(user_id) * 100 / (SELECT COUNT(user_id) FROM Users),2) percentage FROM Register a GROUP BY contest_id ORDER BY percentage DESC,contest_id ASC; SHOW NOTES $$ \\text{percentage} = \\frac{\\text{number of users attended in the contest}}{\\text{total number of users}} \\times 100 \\% $$\nCompute the total number of users: SELECT COUNT(user_id) FROM Users Compute the number of users attended in the contest: Group the table based on the column contest_id, then count the number of users in each group. Queries Quality and Percentage SHOW PROBLEM Table: Queries\nColumn Name Type query_name varchar result varchar position int rating int This table may contain duplicate rows. It contains information collected from various queries executed on a database. The position column has a value ranging from 1 to 500. The rating column has a value between 1 and 5. Queries with a rating less than 3 are considered poor queries. Definitions:\nQuery quality: The average of the ratio between the query\u0026rsquo;s rating and its position. Poor query percentage: The percentage of queries with a rating less than 3. Objective: Write a solution to find:\nThe query_name, The quality of each query (rounded to 2 decimal places), The poor_query_percentage for each query (rounded to 2 decimal places). Input: Queries table:\nquery_name result position rating Dog Golden Retriever 1 5 Dog German Shepherd 2 5 Dog Mule 200 1 Cat Shirazi 5 2 Cat Siamese 3 3 Cat Sphynx 7 4 Output:\nquery_name quality poor_query_percentage Dog 2.50 33.33 Cat 0.66 33.33 Explanation:\nDog queries:\nQuality:\n$$ \\left( \\frac{5}{1} + \\frac{5}{2} + \\frac{1}{200} \\right) / 3 = 2.50 $$ Poor query percentage:\n$$ \\frac{1}{3} \\times 100 = 33.33 $$ Cat queries:\nQuality:\n$$ \\left( \\frac{2}{5} + \\frac{3}{3} + \\frac{4}{7} \\right) / 3 = 0.66 $$ Poor query percentage:\n$$ \\frac{1}{3} \\times 100 = 33.33 $$ Go to Leetcode 🔗 SHOW CODE MySQL SELECT query_name, ROUND(AVG(rating / position), 2) AS quality, ROUND(SUM(CASE WHEN rating \u003c 3 THEN 1 ELSE 0 END) / COUNT(*) * 100, 2) AS poor_query_percentage FROM Queries GROUP BY query_name; Monthly Transactions I SHOW PROBLEM Table: Transactions\nColumn Name Type id int country varchar state enum amount int trans_date date id is the primary key of this table. The table stores information about incoming transactions. The state column is an enum with values [\u0026ldquo;approved\u0026rdquo;, \u0026ldquo;declined\u0026rdquo;]. Task:\nFor each month and country, find the following information:\nThe total number of transactions (trans_count). The total amount of all transactions (trans_total_amount). The number of approved transactions (approved_count). The total amount of approved transactions (approved_total_amount). The results should be returned in any order.\nExample Input:\nid country state amount trans_date 121 US approved 1000 2018-12-18 122 US declined 2000 2018-12-19 123 US approved 2000 2019-01-01 124 DE approved 2000 2019-01-07 Example Output:\nmonth country trans_count approved_count trans_total_amount approved_total_amount 2018-12 US 2 1 3000 1000 2019-01 US 1 1 2000 2000 2019-01 DE 1 1 2000 2000 Go to Leetcode 🔗 SHOW CODE MySQL SELECT DATE_FORMAT(trans_date, '%Y-%m') AS month, country, COUNT(*) AS trans_count, SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END) AS approved_count, SUM(amount) AS trans_total_amount, SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END) AS approved_total_amount FROM Transactions GROUP BY month, country; SELECT DATE_FORMAT(trans_date, '%Y-%m') AS month, country, COUNT(*) AS trans_count, COUNT(IF(state = 'approved', 1, NULL)) AS approved_count, SUM(amount) AS trans_total_amount, SUM(IF(state = 'approved', amount, 0)) AS approved_total_amount FROM Transactions GROUP BY month, country; SHOW NOTES The DATE_FORMAT function in SQL is used to format a date into a specific string format. For example, DATE_FORMAT('2024-12-19', '%Y-%m') will output '2024-12', extracting the year and month from the date. The IF function in SQL returns one value if the condition is true and another value if the condition is false. For example, IF(amount \u0026gt; 1000, 1, 0) will return 1 if the amount is greater than 1000, otherwise, it will return 0. The CASE...WHEN...THEN...ELSE...END statement is similar to the switch statement in other programming languages like Java. It works like the IF function, but with the ability to handle multiple conditions. It checks each condition in sequence and returns the corresponding result for the first true condition. Immediate Food Delivery II SHOW PROBLEM Table: Delivery\nColumn Name Type delivery_id int customer_id int order_date date customer_pref_delivery_date date delivery_id is the unique identifier for each delivery. The table contains information about food deliveries, where customers place orders on a specific date and specify a preferred delivery date (either on the same day or later). If the customer_pref_delivery_date is the same as the order_date, the order is considered immediate; otherwise, it is scheduled. The first order of a customer is defined as the one with the earliest order_date. Each customer has exactly one first order. Task:\nFind the percentage of immediate orders among the first orders of all customers, rounded to two decimal places.\nThe result should follow the format shown below:\nExample Input:\ndelivery_id customer_id order_date customer_pref_delivery_date 1 1 2019-08-01 2019-08-02 2 2 2019-08-02 2019-08-02 3 1 2019-08-11 2019-08-12 4 3 2019-08-24 2019-08-24 5 3 2019-08-21 2019-08-22 6 2 2019-08-11 2019-08-13 7 4 2019-08-09 2019-08-09 Example Output:\nimmediate_percentage 50.00 Explanation:\nCustomer 1 has their first order with delivery_id 1, which is scheduled. Customer 2 has their first order with delivery_id 2, which is immediate. Customer 3 has their first order with delivery_id 5, which is scheduled. Customer 4 has their first order with delivery_id 7, which is immediate. Hence, 50% of the first orders are immediate.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT ROUND((SUM(IF(order_date = customer_pref_delivery_date, 1, 0)) / COUNT(*)) * 100, 2) AS immediate_percentage FROM (SELECT customer_id, MIN(order_date) AS first_order_date FROM Delivery GROUP BY customer_id) AS first_orders INNER JOIN Delivery AS d ON first_orders.customer_id = d.customer_id AND first_orders.first_order_date = d.order_date; Game Play Analysis IV SHOW PROBLEM Table: Activity\nColumn Name Type player_id int device_id int event_date date games_played int The combination of (player_id, event_date) is the primary key of this table, ensuring each player can only log in once per day. This table tracks the activity of players in games, where each record represents a player\u0026rsquo;s login and the number of games played (which could be zero) before logging out on a specific day using a particular device. Task:\nCalculate the fraction of players who logged in again on the day after their first login date. The result should be rounded to two decimal places.\nIn other words, identify the players who logged in on consecutive days starting from their first login date, then divide that count by the total number of players.\nExample Input:\nplayer_id device_id event_date games_played 1 2 2016-03-01 5 1 2 2016-03-02 6 2 3 2017-06-25 1 3 1 2016-03-02 0 3 4 2018-07-03 5 Example Output:\nfraction 0.33 Explanation:\nPlayer 1 logged in on 2016-03-01 and 2016-03-02, meaning they logged in for at least two consecutive days, starting from their first login. Player 2 did not log in again on the day after their first login. Player 3 did not log in on consecutive days, as there was a gap between their logins. Thus, only player 1 satisfies the condition, and the fraction is calculated as 1/3 = 0.33.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT ROUND( SUM(IF(DATEDIFF(event_date, min_event_date) = 1, 1, 0)) / COUNT(DISTINCT player_id), 2) AS fraction FROM ( SELECT player_id, event_date, MIN(event_date) OVER (PARTITION BY player_id) AS min_event_date FROM activity ) AS activity_with_min_date; SHOW NOTES The DATEDIFF function in MySQL calculates the difference in days between two dates. For example, DATEDIFF('2024-12-30', '2024-12-25') will output 5, indicating there are 5 days between the two dates. The PARTITION BY clause is used in window functions to divide the result ser into partitions (groups) based on a specified column. It applies window functions, such as RANK(), SUM(), ROW_NUMBER(), and others, to each partition. This works similarly to GROUP BY, but unlike GROUP BY, the PARTITION BY clause allows retaining the row-level data while applying the window functions. Input Table: employees\ndepartment_id employee_id salary 101 1 5000 101 2 4000 101 3 6000 102 4 4500 102 5 5500 102 6 4800 SELECT department_id, employee_id, salary, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank FROM employees; Output (Result of Query):\ndepartment_id employee_id salary salary_rank 101 3 6000 1 101 1 5000 2 101 2 4000 3 102 5 5500 1 102 6 4800 2 102 4 4500 3 Sorting and Grouping User Activity for the Past 30 Days I SHOW PROBLEM Table: Activity\nColumn Name Type user_id int session_id int activity_date date activity_type enum The activity_type column is an ENUM with values: \u0026lsquo;open_session\u0026rsquo;, \u0026rsquo;end_session\u0026rsquo;, \u0026lsquo;scroll_down\u0026rsquo;, \u0026lsquo;send_message\u0026rsquo;. This table logs user activities for a social media website, where each session is linked to exactly one user. The table may contain duplicate rows. Task:\nYou need to find the count of unique active users per day for the 30-day period ending on 2019-07-27, inclusive. A user is considered active on a particular day if they perform at least one activity on that day.\nExample:\nInput: Activity table\nuser_id session_id activity_date activity_type 1 1 2019-07-20 open_session 1 1 2019-07-20 scroll_down 1 1 2019-07-20 end_session 2 4 2019-07-20 open_session 2 4 2019-07-21 send_message 2 4 2019-07-21 end_session 3 2 2019-07-21 open_session 3 2 2019-07-21 send_message 3 2 2019-07-21 end_session 4 3 2019-06-25 open_session 4 3 2019-06-25 end_session Output:\nday active_users 2019-07-20 2 2019-07-21 2 Explanation:\nOnly the days with active users (those who performed at least one activity) are included in the output. For 2019-07-20, users 1 and 2 were active, and for 2019-07-21, users 2 and 3 were active. Go to Leetcode 🔗 SHOW CODE MySQL SELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users FROM Activity WHERE activity_date \u003c= '2019-07-27' AND DATEDIFF('2019-07-27', activity_date) \u003c 30 GROUP BY activity_date SELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users FROM Activity WHERE activity_date \u003c= '2019-07-27' AND activity_date\u003e DATE_SUB('2019-07-27',INTERVAL 30 day) GROUP BY activity_date SHOW NOTES In MySQL, both DATEDIFF and DATE_SUB are used for date calculations. DATEDIFF calculates the difference between two dates, returning the result in days. On the other hand, DATE_SUB is used to subtract a specified time interval (such as days, months, or years) from a given date.\nSELECT DATEDIFF(\u0026#39;2023-12-31\u0026#39;, \u0026#39;2023-01-01\u0026#39;); -- Result: 364 SELECT DATE_SUB(\u0026#39;2023-12-31\u0026#39;, INTERVAL 30 DAY); -- Result: \u0026#39;2023-12-01\u0026#39; SELECT DATE_SUB(\u0026#39;2023-12-31\u0026#39;, INTERVAL 2 MONTH); -- Result: \u0026#39;2023-10-31\u0026#39; Product Sales Analysis III SHOW PROBLEM Table: Sales\nColumn Name Type sale_id int product_id int year int quantity int price int The combination of sale_id and year is the primary key of this table, ensuring each record is unique for a given sale. product_id is a foreign key referencing the Product table. Each row in this table represents a sale of a specific product (product_id) in a given year. The price refers to the price per unit of the product. Table: Product\nColumn Name Type product_id int product_name varchar product_id is the primary key of this table, ensuring unique product identifiers. Each row represents the name of a product associated with the corresponding product_id. Task: Write a query to select the product_id, year, quantity, and price for the first year in which each product was sold.\nReturn the result in any order.\nExample:\nInput: Sales table\nsale_id product_id year quantity price 1 100 2008 10 5000 2 100 2009 12 5000 7 200 2011 15 9000 Product table:\nproduct_id product_name 100 Nokia 200 Apple 300 Samsung Output:\nproduct_id first_year quantity price 100 2008 10 5000 200 2011 15 9000 Explanation:\nFor product_id = 100, the first sale occurred in 2008 with a quantity of 10 and a price of 5000. For product_id = 200, the first sale occurred in 2011 with a quantity of 15 and a price of 9000. The query should return the first sale year for each product, along with the corresponding quantity and price.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT product_id, year AS first_year, quantity, price FROM Sales WHERE (product_id, year) IN ( SELECT product_id, MIN(year) AS year FROM Sales GROUP BY product_id ); SELECT product_id, first_year, quantity, price FROM ( SELECT product_id, year AS first_year, quantity, price, RANK() OVER (PARTITION BY product_id ORDER BY year) AS row_num FROM Sales ) subquery WHERE row_num = 1; SELECT s.product_id, s.year AS first_year, s.quantity, s.price FROM Sales s JOIN ( SELECT product_id, MIN(year) AS first_year FROM Sales GROUP BY product_id ) first_sale ON s.product_id = first_sale.product_id AND s.year = first_sale.first_year; SHOW NOTES Biggest Single Number SHOW PROBLEM Table: MyNumbers\nColumn Name Type num int This table may contain duplicates (i.e., there is no primary key in the SQL table). Each row contains an integer.\nProblem Description\nA single number is a number that appears only once in the MyNumbers table.\nThe task is to find the largest single number. If there is no single number, return null.\nExample 1:\nInput: MyNumbers table:\nnum 8 8 3 3 1 4 5 6 Output:\nnum 6 Explanation:\nThe single numbers are 1, 4, 5, and 6. Since 6 is the largest single number, we return it.\nExample 2:\nInput: MyNumbers table:\nnum 8 8 7 7 3 3 3 Output:\nnum null Explanation:\nThere are no single numbers in the input table, so we return null.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT MAX(num) AS num FROM ( SELECT num FROM MyNumbers GROUP BY 1 HAVING COUNT(1) = 1 ) AS t; SELECT IF(COUNT(num) = 1, num, null) AS num FROM MyNumbers GROUP BY num ORDER BY 1 DESC LIMIT 1; Advanced Select \u0026amp; Joins The Number of Employees Which Report to Each Employee SHOW PROBLEM Table: Employees\nColumn Name Type employee_id int name varchar reports_to int age int employee_id is the unique identifier for each employee in the table. This table stores information about employees and the ID of the manager they report to. Some employees may not report to anyone (reports_to is null). A manager is defined as an employee who has at least one other employee reporting to them. Problem Description\nYou are required to write a solution that reports the following information for each manager:\nThe manager\u0026rsquo;s employee_id and name. The number of employees directly reporting to the manager. The average age of these employees, rounded to the nearest integer. The results should be ordered by employee_id.\nExample 1:\nInput:\nEmployees table:\nemployee_id name reports_to age 9 Hercy null 43 6 Alice 9 41 4 Bob 9 36 2 Winston null 37 Output:\nemployee_id name reports_count average_age 9 Hercy 2 39 Explanation:\nHercy manages 2 employees (Alice and Bob). The average age of Alice and Bob is (41 + 36) / 2 = 38.5, which rounds to 39. Example 2:\nInput:\nEmployees table:\nemployee_id name reports_to age 1 Michael null 45 2 Alice 1 38 3 Bob 1 42 4 Charlie 2 34 5 David 2 40 6 Eve 3 37 7 Frank null 50 8 Grace null 48 Output:\nemployee_id name reports_count average_age 1 Michael 2 40 2 Alice 2 37 3 Bob 1 37 Explanation:\nMichael manages Alice and Bob. The average age of Alice and Bob is (38 + 42) / 2 = 40. Alice manages Charlie and David, with an average age of (34 + 40) / 2 = 37. Bob manages Eve, with an average age of 37. Go to Leetcode 🔗 SHOW CODE MySQL SELECT e1.employee_id, e1.name, COUNT(e1.employee_id) AS reports_count, ROUND(AVG(e2.age)) AS average_age FROM Employees e1 INNER JOIN Employees e2 ON e1.employee_id = e2.reports_to GROUP BY e1.employee_id ORDER BY e1.employee_id; Primary Department for Each Employee SHOW PROBLEM Table: Employee\nColumn Name Type employee_id int department_id int primary_flag varchar The combination of (employee_id, department_id) is the primary key for this table, meaning each employee can belong to multiple departments, but each (employee_id, department_id) pair is unique. employee_id: The ID of the employee. department_id: The ID of the department to which the employee belongs. primary_flag: A flag indicating whether the department is the primary department for the employee. It can be one of the following: 'Y': The department is the primary department. 'N': The department is not the primary department. Problem Description\nEmployees may belong to multiple departments, and when they do, they must designate one department as their primary. If an employee belongs to only one department, the primary_flag for that department will be 'N'.\nYou are tasked with reporting the primary department for each employee. If an employee has only one department, report that department as their primary.\nInput:\nEmployee table:\nemployee_id department_id primary_flag 1 1 N 2 1 Y 2 2 N 3 3 N 4 2 N 4 3 Y 4 4 N Output:\nemployee_id department_id 1 1 2 1 3 3 4 3 Explanation:\nFor employee 1, their only department is department 1, so it is reported as their primary department. Employee 2 belongs to two departments (1 and 2). The primary_flag for department 1 is 'Y', so department 1 is their primary department. Employee 3 only belongs to department 3, so it is reported as their primary department. Employee 4 belongs to three departments (2, 3, and 4). The primary_flag for department 3 is 'Y', so department 3 is reported as their primary department. Go to Leetcode 🔗 SHOW CODE sql SELECT employee_id, department_id FROM Employee WHERE primary_flag = 'Y' UNION SELECT employee_id, department_id FROM Employee GROUP BY employee_id HAVING COUNT(1) = 1; SHOW NOTES The UNION operator is used to combine the results of two or more SELECT queries into a single result set. By default, UNION removes duplicate rows, ensuring that the final result contains only distinct records. In contrast, UNION ALL includes all rows, even if they are duplicates. It\u0026rsquo;s important to note that each SELECT statement involved in a UNION operation must contain the same number of columns, and the corresponding columns must have compatable data types.\nTriangle Judgement SHOW PROBLEM Table: Triangle\nColumn Name Type x int y int z int Primary Key: (x, y, z)\nEach row in this table represents the lengths of three line segments. Task:\nDetermine whether the three line segments (x, y, z) from each row can form a triangle.\nReturn the result table in any order, including a column that specifies if the segments form a triangle.\nTriangle Formation Rule:\nThree segments can form a triangle if and only if the following conditions are met:\n$x + y \u0026gt; z$ $x + z \u0026gt; y$ $y + z \u0026gt; x$ Example:\nInput:\n**Triangle table: **\nx y z 13 15 30 10 20 15 Output:\nx y z triangle 13 15 30 No 10 20 15 Yes Go to Leetcode 🔗 SHOW CODE MySQL SELECT *, IF(x + y \u003e z AND x + z \u003e y AND y + z \u003e x, 'Yes', 'No') AS triangle FROM Triangle; SELECT *, CASE WHEN (x + y \u003e z) AND (x + z \u003e y) AND (y + z \u003e x) THEN 'Yes' ELSE 'No' END AS triangle FROM Triangle; Consecutive Numbers SHOW PROBLEM Table: Logs\nColumn Name Type id int num varchar id is the primary key for this table. The id column is an auto-increment column that starts from 1. Problem Statement:\nFind all numbers (num) that appear at least three times consecutively in the table.\nReturn the result table in any order.\nExample:\nInput:\nLogs table:\nid num 1 1 2 1 3 1 4 2 5 1 6 2 7 2 Output:\nConsecutiveNums 1 Explanation:\nThe number 1 is the only value that appears at least three times consecutively in the table.\nGo to Leetcode 🔗 SHOW CODE MySQL SELECT DISTINCT l1.num AS ConsecutiveNums FROM Logs l1 JOIN Logs l2 ON l1.id = l2.id - 1 JOIN Logs l3 ON l2.id = l3.id - 1 WHERE l1.num = l2.num AND l2.num = l3.num; SELECT DISTINCT l2.num AS ConsecutiveNums FROM Logs AS l1 JOIN Logs AS l2 ON l1.id = l2.id - 1 AND l1.num = l2.num JOIN Logs AS l3 ON l2.id = l3.id - 1 AND l2.num = l3.num; Product Price at a Given Date SHOW PROBLEM Table: Products\nColumn Name Type product_id int new_price int change_date date (product_id, change_date) is the primary key (a combination of columns with unique values) of this table. Each row indicates that the price of a product was changed to a new price on a specific date. Problem Statement\nWrite a query to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.\nReturn the result in any order.\nExample:\nInput:\nProducts table:\nproduct_id new_price change_date 1 20 2019-08-14 2 50 2019-08-14 1 30 2019-08-15 1 35 2019-08-16 2 65 2019-08-17 3 20 2019-08-18 Output:\nproduct_id price 2 50 1 35 3 10 Go to Leetcode 🔗 SHOW CODE MySQL WITH T AS (SELECT DISTINCT product_id FROM Products), P AS ( SELECT product_id, new_price AS price FROM Products WHERE (product_id, change_date) IN ( SELECT product_id, MAX(change_date) AS change_date FROM Products WHERE change_date \u003c= '2019-08-16' GROUP BY 1 ) ) SELECT product_id, IFNULL(price, 10) AS price FROM T LEFT JOIN P USING (product_id); WITH P AS ( SELECT p1.product_id, new_price, change_date FROM ( SELECT DISTINCT product_id FROM Products ) AS p1 LEFT JOIN Products AS p2 ON p1.product_id = p2.product_id AND p2.change_date \u003c= '2019-08-16' ), T AS ( SELECT *, RANK() OVER ( PARTITION BY product_id ORDER BY change_date DESC ) AS rk FROM P ) SELECT product_id, IFNULL(new_price, 10) AS price FROM T WHERE rk = 1; SHOW NOTES Last Person to Fit in the Bus SHOW PROBLEM Table: Queue\nColumn Name Type person_id int person_name varchar weight int turn int The person_id column contains unique values. This table holds information about people waiting to board a bus. The person_id and turn columns contain values from 1 to n, where n is the number of rows in the table. The turn column determines the order in which people will board the bus. A turn value of 1 indicates the first person to board, and turn = n indicates the last person to board. The weight column represents the person’s weight in kilograms. The bus has a weight limit of 1000 kilograms, so some people may not be able to board if the total weight exceeds this limit. The goal is to identify the name of the last person who can board the bus without exceeding the weight limit.\nOnly one person can board the bus at any given time, based on their turn. Input:\nQueue table:\nperson_id person_name weight turn 5 Alice 250 1 4 Bob 175 5 3 Alex 350 2 6 John Cena 400 3 1 Winston 500 6 2 Marie 200 4 Output:\nperson_name John Cena Explanation:\nThe following table shows the order in which people board the bus, ordered by the turn column for simplicity:\nTurn person_id person_name weight Total Weight 1 5 Alice 250 250 2 3 Alex 350 600 3 6 John Cena 400 1000 4 2 Marie 200 1200 5 4 Bob 175 ___ 6 1 Winston 500 ___ John Cena is the last person who can board the bus without exceeding the weight limit of 1000 kilograms.\nGo to Leetcode 🔗 SHOW CODE MySQL WITH T AS ( SELECT person_name, SUM(weight) OVER (ORDER BY turn) AS acumulated_weight FROM Queue ) SELECT person_name FROM T WHERE acumulated_weight \u003c= 1000 ORDER BY acumulated_weight DESC LIMIT 1; Count Salary Categories SHOW PROBLEM Table: Accounts\nColumn Name Type account_id int income int The account_id column is the primary key, meaning it contains unique values for each row. Each row represents the monthly income of a specific bank account. Task:\nWrite a solution to calculate the number of bank accounts in each salary category. The salary categories are defined as:\n\u0026ldquo;Low Salary\u0026rdquo;: Salaries strictly less than $20,000. \u0026ldquo;Average Salary\u0026rdquo;: Salaries in the inclusive range [$20,000, $50,000]. \u0026ldquo;High Salary\u0026rdquo;: Salaries strictly greater than $50,000. The result table should contain all three categories. If no accounts fall into a category, return 0 for that category.\nThe result can be returned in any order.\nInput:\nAccounts table:\naccount_id income 3 108939 2 12747 8 87709 6 91796 Output:\ncategory accounts_count Low Salary 1 Average Salary 0 High Salary 3 Explanation:\nLow Salary: Account 2 has an income of $12,747, which is below $20,000. Average Salary: There are no accounts with an income between $20,000 and $50,000. High Salary: Accounts 3, 6, and 8 have incomes above $50,000. Go to Leetcode 🔗 SHOW CODE MySQL WITH S AS ( SELECT 'Low Salary' AS category UNION SELECT 'Average Salary' UNION SELECT 'High Salary' ), T AS ( SELECT CASE WHEN income \u003c 20000 THEN 'Low Salary' WHEN income \u003e 50000 THEN 'High Salary' ELSE 'Average Salary' END AS category, COUNT(1) AS accounts_count FROM Accounts GROUP BY category ) SELECT category, IFNULL(accounts_count, 0) AS accounts_count FROM S LEFT JOIN T USING (category); Subqueries Exchange Seats SHOW PROBLEM Table: Seat\nColumn Name Type id int student varchar id is the primary key for this table. Each row represents a student\u0026rsquo;s name and their seat ID. The id starts from 1 and increases consecutively. Problem Description:\nWrite a query to swap the seat IDs of every two consecutive students in the Seat table. If the number of students is odd, the last student\u0026rsquo;s seat ID should remain unchanged.\nThe result should be ordered by the id column in ascending order.\nInput:\nSeat table:\nid student 1 Abbot 2 Doris 3 Emerson 4 Green 5 Jeames Output:\nid student 1 Doris 2 Abbot 3 Green 4 Emerson 5 Jeames Explanation:\nThe students Abbot and Doris swap places, as well as Emerson and Green. Since there are an odd number of students, Jeames\u0026rsquo;s seat remains unchanged. Go to Leetcode 🔗 SHOW CODE MySQL SELECT CASE WHEN id % 2 = 1 AND id \u003c (SELECT MAX(id) FROM Seat) THEN id + 1 WHEN id % 2 = 0 THEN id - 1 ELSE id END AS id, student FROM Seat ORDER BY id; Movie Rating SHOW PROBLEM Table: Movies\nColumn Name Type movie_id int title varchar movie_id is the primary key (column with unique values) for this table. title is the name of the movie.\nTable: Users\nColumn Name Type user_id int name varchar user_id is the primary key (column with unique values) for this table. The column \u0026rsquo;name\u0026rsquo; has unique values.\nTable: MovieRating\nColumn Name Type movie_id int user_id int rating int created_at date (movie_id, user_id) is the primary key (column with unique values) for this table. This table contains the rating of a movie by a user in their review. created_at is the user\u0026rsquo;s review date.\nProblem:\nFind the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name. Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name. Result format:\nThe result should contain two columns:\nresults – containing the user name with the greatest number of movie ratings. results – containing the movie name with the highest average rating in February 2020. Input:\nMovies table:\nmovie_id title 1 Avengers 2 Frozen 2 3 Joker Users table:\nuser_id name 1 Daniel 2 Monica 3 Maria 4 James MovieRating table:\nmovie_id user_id rating created_at 1 1 3 2020-01-12 1 2 4 2020-02-11 1 3 2 2020-02-12 1 4 1 2020-01-01 2 1 5 2020-02-17 2 2 2 2020-02-01 2 3 2 2020-03-01 3 1 3 2020-02-22 3 2 4 2020-02-25 Output:\nresults Daniel Frozen 2 Explanation:\nDaniel and Monica have rated 3 movies (\u0026ldquo;Avengers\u0026rdquo;, \u0026ldquo;Frozen 2\u0026rdquo; and \u0026ldquo;Joker\u0026rdquo;), but Daniel is lexicographically smaller. \u0026ldquo;Frozen 2\u0026rdquo; and \u0026ldquo;Joker\u0026rdquo; both have an average rating of 3.5 in February, but \u0026ldquo;Frozen 2\u0026rdquo; is lexicographically smaller. Go to Leetcode 🔗 SHOW CODE MySQL ( SELECT name AS results FROM Users JOIN MovieRating USING (user_id) GROUP BY user_id ORDER BY COUNT(1) DESC, name LIMIT 1 ) UNION ALL ( SELECT title FROM MovieRating JOIN Movies USING (movie_id) WHERE DATE_FORMAT(created_at, '%Y-%m') = '2020-02' GROUP BY movie_id ORDER BY AVG(rating) DESC, title LIMIT 1 ); Index In MySQL, an index is a database structure that improves the speed of data retrival operations on a table. Indexes are created on one or more columns of a table and allow the database to quickly locate data without scanning the entire table. Indexes are typically implemented using data structures, with the B+ tree being the most common.\nThere are four main types of indexes in MySQL: primary index, unique index, ordinary index, and full-text index.\nA primary index is a unique index that identifies each row in a table. It is automatically created when a primary key is defined. A unique index ensures that all values in the indexed columns(s) are unique. An ordinary index improves query performance but does not enforce uniqueness. A full-text index is used for full-text searches on text-based columns. SHOW CODE SQL -- Primary Index CREATE TABLE employees ( id INT PRIMARY KEY, -- Primary index name VARCHAR(100) ); -- Unique Index CREATE UNIQUE INDEX idx_email ON employees(email); -- Ordinary Index CREATE INDEX idx_name ON employees(name); -- Full Text Index CREATE FULLTEXT INDEX idx_description ON products(description); SELECT * FROM products WHERE MATCH(description) AGAINST('database'); Clustered Index vs. Secondary Index In MySQL, indexes can be categorized into two types: clustered index and secondary index.\nA clustered index determines the physical order of data rows in a table. The table data is stored in the order of the clustered index. A secondary index does not affect the physical order of data rows in a table. Instead, it stores a separate structure that points to the actual data rows. Clustered Index vs. Secondary Index SHOW CODE SQL CREATE TABLE employees ( id INT PRIMARY KEY, -- Clustered index name VARCHAR(100), salary DECIMAL(10, 2), INDEX idx_name (name) -- Secondary index ); Back-to-Table Queries SQL Performance Analysis:\nSQL Execution Frequency Slow Query Log show profiles explain Stored Procedure A stored procedure is a precompiled SQL code block that is stored in a database and can be executed repeatedly. It is particularly useful in scenarios involving complex SQL logic, as it helps streamline operations, improve performance, and enhance code reusability.\nSHOW CODE SQL -- Create a Stored Procedure: DELIMITER // CREATE PROCEDURE get_all_users() BEGIN SELECT * FROM users; END // DELIMITER ; -- Call a Procedure**: CALL get_all_users(); -- List all procedures show procedure status where db = 'mydatabase'; -- View the specific stored procedure show create procedure get_all_users; -- Delete a Stored Procedure: drop procedure get_all_users; Variables Variables in MySQL can be categorized into four types based on their scope: global, session, user-defined, and local.\nGlobal variables and session variables are used to control server behavior. Global variables affect all sessions connected to the server. Session variables apply only to the current session. User-defined variables are defined within a session and persist until the session ends. Local variables are used within stored procedures and have a scope limited to the procedure in which they are declared. SHOW CODE SQL # Global Variables SET GLOBAL max_connections = 200; -- Session Variables SET SESSION sql_mode = 'STRICT_TRANS_TABLES'; -- User-Defined Variables SET @my_var = 100; SELECT @my_var; -- Local Variables DELIMITER // CREATE PROCEDURE test_proc() BEGIN DECLARE my_local_var INT DEFAULT 10; SELECT my_local_var; END // DELIMITER ; Control Flow Statements MySQL supports various control flow statements, including IF, CASE...WHEN, WHILE, REPEAT, and LOOP.\nSHOW CODE SQL # IF statement DELIMITER // CREATE PROCEDURE check_salary(IN emp_id INT) BEGIN DECLARE emp_salary INT; SELECT salary INTO emp_salary FROM employees WHERE id = emp_id; IF emp_salary \u003e 5000 THEN SELECT 'High Salary'; ELSEIF emp_salary BETWEEN 3000 AND 5000 THEN SELECT 'Medium Salary'; ELSE SELECT 'Low Salary'; END IF; END // DELIMITER ; -- CASE WHEN statement DELIMITER // CREATE PROCEDURE check_grade(IN marks INT) BEGIN DECLARE grade CHAR(1); CASE WHEN marks \u003e= 90 THEN SET grade = 'A'; WHEN marks \u003e= 80 THEN SET grade = 'B'; WHEN marks \u003e= 70 THEN SET grade = 'C'; ELSE SET grade = 'F'; END CASE; SELECT grade; END // DELIMITER ; -- WHILE DELIMITER // CREATE PROCEDURE count_down() BEGIN DECLARE x INT DEFAULT 5; WHILE x \u003e 0 DO SELECT x; SET x = x - 1; END WHILE; END // DELIMITER ; -- REPEAT (similar to do...while in Java) DELIMITER // CREATE PROCEDURE repeat_example() BEGIN DECLARE x INT DEFAULT 1; REPEAT SELECT x; SET x = x + 1; UNTIL x \u003e 5 END REPEAT; END // DELIMITER ; -- LOOP (Use an explicit LEAVE to exit) DELIMITER // CREATE PROCEDURE loop_example() BEGIN DECLARE x INT DEFAULT 1; my_loop: LOOP SELECT x; SET x = x + 1; IF x \u003e 5 THEN LEAVE my_loop; END IF; END LOOP; END // DELIMITER ; Curosor and Handler In MySQL, a cursor is a database object that enables row-by-row processing of a result set. On the other hand, a handler is used to manage exceptions or errors that may occur during execution. Cursors and handlers are commonly used in stored procedures when dealing with result sets that contain multiple rows and require row-by-row processing.\nSHOW CODE SQL DELIMITER // CREATE PROCEDURE fetch_salaries() BEGIN DECLARE done INT DEFAULT 0; DECLARE emp_name VARCHAR(100); DECLARE emp_salary INT; DECLARE emp_cursor CURSOR FOR SELECT name, salary FROM employees; DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1; OPEN emp_cursor; read_loop: LOOP FETCH emp_cursor INTO emp_name, emp_salary; IF done THEN LEAVE read_loop; END IF; SELECT emp_name, emp_salary; END LOOP; CLOSE emp_cursor; END // DELIMITER ; Trigger In MySQL, a trigger is a data object that automatically executes a specified set of sql statements before or after certain events occurred, such as INSERT, UPDATE, or DELETE. It is commonly used in audit logging. MySQL only supports row-level trigger, meaning a trigger is activated FOR EACH ROW affected by INSERT, UPDATE, or DELETE operation.\nSHOW CODE SQL -- Create a trigger CREATE TRIGGER before_employee_update BEFORE UPDATE ON employees FOR EACH ROW BEGIN INSERT INTO audit_log (employee_id, action, change_date) VALUES (OLD.id, 'UPDATE', NOW()); END; -- View triggers SHOW TRIGGERS; SHOW TRIGGERS FROM database_name; -- Delete a trigger DROP TRIGGER IF EXISTS before_employee_update; Locking In MySQL, locking is a mechanism used to control database access, ensuring data integrity and consistency when multiple sessions interact with the databases. MySQL supports three main types of locks: global-level locks, table-level locks, and low-level locks.\nGlobal-Level Lock The global-level lock is a coarse-grained lock that blocks the entire database. It is commonly used during operations like data backups. Due to its coarse granularity, any updates to the database are blocked while the lock is active. Additionally, when the global lock is in place, secondary databases cannot read the binary log (binlog) from the primary database, leading to replication delays between the primary and secondary databases.\nFor InnoDB tables, it is generally recommended to use the --single-transaction option during data backups. This approach ensures data consistency without acquiring a global read lock, allowing updates to continue uninterrupted.\nSHOW CODE SQL -- From mysql client FLUSH TABLES WITH READ LOCK; -- From bash mysqldump -u username -p --single-transaction database_name \u003e backup.sql UNLOCK TABLES; Table-Level Lock The table-level lock is a mechanism that locks an entire table to control database access when multiple sessions interact with the database. There are three main types of table-level locks: table locks, metadata locks, and intention locks.\nTable locks include read locks and write locks: When a session acquires a read lock, other sessions can also read data but cannot modify it. When a session acquire a write lock, other sessions cannot read or write data from the locked table. Metadata lock is a type of lock that protects the structure of a database object when it is being accessed or modified by a session. It it automatically managed by MySQL. There are two main types of metadata locks: shared metadata locks and exclusive metadata locks. Shared metadata locks include SHARED_READ and SHARED_WRITE locks. These are acquired by queries, modification, or transactions. A SHARED_READ lock allows other sessions to read the locked data. A SHARED_WRITE lock allows other sessions to read but not modify the locked data. The exclusive metadata lock is acquired by operations that modify the table\u0026rsquo;s structure, such as ALTER TABLE. It prevents other sessions from accessing the table until the operation completes. An intention lock is a type of lock used by the InnoDB storage engine to indicate a transaction\u0026rsquo;s intention to acquire row-level locks at a finer granularity. It works in conjunction with row-level locks, helping to avoid confilicts between transactions that might lock the same table at different levels (e.g., table-level vs. row-level locks). There are two main types of intention locks: Intention Shared Lock (IS) and Intention Exclusive Lock (IX). The Intention Shared Lock (IS) indicates that a transaction intends to place shared wor-level locks on some rows in the table. It allows other transactions to acquire IS locks or table-level shared locks but blocks table-level exclusive locks. The Intention Exclusive Lock (IX) indicates that a transaction intends to place exlcusive row-level locks on some rows in the table. It allows other transactions to acquire IS locks but blocks table-level shared locks and table-level exclusive locks. Lock Type IS IX S X IS ✅ ✅ ✅ ❌ IX ✅ ✅ ❌ ❌ S (Shared) ✅ ❌ ✅ ❌ X (Exclusive) ❌ ❌ ❌ ❌ SHOW CODE TABLE LOCK META DATA LOCK INTENTION LOCK --- TABLE LOCK --- -- Read lock LOCK TABLES sales READ; SELECT * FROM sales WHERE sale_date = '2023-10-01'; UNLOCK TABLES; -- Write lock LOCK TABLES products WRITE; UPDATE products SET price = price * 1.1; UNLOCK TABLES; --- META DATA LOCK --- -- Session 1 starts a transaction and reads from a table START TRANSACTION; SELECT * FROM employees; -- Session 2 attempts to alter the table ALTER TABLE employees ADD COLUMN salary DECIMAL(10, 2); -- Session 2 will block until Session 1 releases its shared metadata lock -- Session 1 starts an `ALTER TABLE` operation ALTER TABLE employees ADD COLUMN department VARCHAR(50); -- session 2 attempts to query the table SELECT * FROM employees; -- Session 2 will block until Session 1 comoletes the `ALTER TABLE` operation --- INTENSION LOCK --- -- Transaction A -- Transaction A acquires an Intention Shared Lock (IS) on the employees table. -- It then acquires a Shared Row-Level Lock (S) on the row with id = 1. START TRANSACTION; SELECT * FROM employees WHERE id = 1 LOCK IN SHARE MODE; -- Transaction B -- Transaction B acquires an Intention Exclusive Lock (IX) on the employees table. -- It then acquires an Exclusive Row-Level Lock (X) on the row with id = 2. START TRANSACTION; UPDATE employees SET salary = 65000 WHERE id = 2; -- Transaction C -- Transaction C attempts to acquire an Exclusive Table-Level Lock (X) on the employees table. -- It will block until Transaction A and Transaction B release their locks. ALTER TABLE employees ADD COLUMN department VARCHAR(50); Row-Level Lock In MySQL, a row-level lock is a fine-grained locking mechanism that locks individual rows instead of the entire table. There are two main types of row-level locks: Shared Lock and Exclusive Lock.\nA Shared Lock allows other transactions to read the same row but prevents them from modifying it. An **Exclusive Lock prevents other transactions from reading or modifying the same row until the lock is released. Row-level locks are supported by the InnoDB storage engine to ensure data consistency and integrity. They are automatically acquired and released based on the transaction\u0026rsquo;s operations.\nSHOW CODE Shared Lock Exclusive Lock -- Transaction A reads a row with a shared lock START TRANSACTION; SELECT * FROM employees WHERE id = 1 LOCK IN SHARE MODE; -- Transaction B can also reads the same row START TRANSACTION; SELECT * FROM employees WHERE id = 1 LOCK IN SHARE MODE; -- Transaction C cannot modify the same row until the lock is released START TRANSACTION; UPDATE employees SET salary = 55000 WHERE id = 1; -- Blocks -- Transaction A updates a row with an exclusive lock START TRANSACTION; UPDATE employees SET salary = 55000 WHERE id = 1; -- Transaction B cannot read or modify the same row until the lock is released START TRANSACTION; SELECT * FROM employees WHERE id = 1 LOCK IN SHARE MODE; -- Blocks InnoDB provides additional locking mechanisms, such as gap locks and next-key locks, to ensure data consistency and integrity and prevent issues like phantom reads. By default, InnoDB operates at the REPEATABLE READ isolation level, where it uses next-key locks for searches and index scans to avoid phantom reads.\nA gap lock locks the intervals between rows in an index, preventing new rows from being inserted into those gaps. It does not lock the rows themselves but rather the gaps between them. The primary purpose of a gap lock is to prevent other transactions from inseting data into the blocked gap. Gap locks are coexistent, meaning they do not block other transactions from locking the same gap. A next-key lock is a combination of a row lock and a gap lock. It locks both the row and the gap before it. SHOW CODE employees table Gap Lock Next-key Lock | id | name | salary | |-----|-----------|---------| | 1 | John Doe | 50000 | | 3 | Jane Smith| 60000 | | 5 | Alice Lee | 55000 | SELECT * FROM employees WHERE id BETWEEN 2 AND 4 FOR UPDATE; -- The gap lock will be placed on the interval (1, 3) and (3, 5) SELECT * FROM employees WHERE id = 3 FOR UPDATE; -- The next-key lock will be placed on the row with id = 3 and the gap (1, 3) ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/database/2-database-management-system/","summary":"Introduction to DBMS A Database Management System (DBMS) is software that provides an interface for users to interact with databases. It enables the management, storage, and manipulation of data within databases. DBMS can be broadly classified into two main types: Relational DBMS and NoSQL DBMS.\nIn a Relational DBMS, data is stored in structured tables and is manipulated using SQL (Structured Query Language). Examples of relational DBMS inlcude MySQL, Oracle, and PostgreSQL.","title":"Database Management Systems"},{"content":"Introduction to Multithreading Program, Process, and Thread A program is a static set of instructions that stores on a disk. A process is an instance of a program that is currently being executed by the operating system. A thread is a small unit of process that can be scheduled and executed by the operating system. In simpler terms, a program is the code, a process is the excution of the code, a thread is a unit of execution within a process. Their relationships are illustrated in the following image:\nProgram, Process, and Thread Thread Life Cycle Within Concurrency A thread goes through various states in its life cycle, from creation to its termination. The life cycle of a thread typically includes five states: New, Runnable, Running, Blocked/Waiting, and Terminated.\nNew: This refers to the state where a thread instance is created but has not yet started running. In Java, this is commonly achieved by using new Thread(). Runnable: This refers to the state where a thread instance is ready to run but is waiting for CPU time. In Java, this is commonly achieved by ivoking start() on the thread instance. Running: This is refers to the state where the thread instance is actively executing its task. Blocked/Waiting: This refers to the state where a thread instance is waiting for other threads to complete their tasks, or it is waiting for a particular condition to be met. Terminated: This refers to the state where the thread instance has completed its task and has exited. Thread Life Cycle Within Concurrency Fork/Join Model The Fork/Join Model is an effective strategy commonly used in scenarios where a task can be recursively divided into multiple smaller, independent subtasks. This strategy typically involves the following steps:\nThe process begins with a single master thread. When it encounters a task that can be broken down into smaller subtasks, the master thread forks (spawns) multiple subsidiary threads, each of which takes on a portion of the task.\nOnce the subsidiary threads have completed their respective tasks, they join back with the master thread. Joining involves terminating the subsidiary threads and consolidating their results into the master thread. Afterward, the master thread continues its execution.\nFork/Join Model SHOW CODE Java import java.util.Arrays; import java.util.concurrent.RecursiveTask; import java.util.concurrent.ForkJoinPool; public class Solution { // RecursiveTask to compute the sum of a part of an array static class SumTask extends RecursiveTask { private final int[] array; private final int start; private final int end; // Threshold for splitting the task into smaller subtasks private static final int THRESHOLD = 1000; public SumTask(int[] array, int start, int end) { this.array = array; this.start = start; this.end = end; } @Override protected Long compute() { // If the task is small enough, calculate the sum directly if (end - start \u003c= THRESHOLD) { long sum = 0; for (int i = start; i \u003c end; i++) { sum += array[i]; } return sum; } // Otherwise, split the task into two subtasks int middle = (start + end) / 2; SumTask leftTask = new SumTask(array, start, middle); SumTask rightTask = new SumTask(array, middle, end); // Fork the subtasks leftTask.fork(); rightTask.fork(); // Join the results of the subtasks long leftResult = leftTask.join(); long rightResult = rightTask.join(); // Combine the results and return return leftResult + rightResult; } } public static void main(String[] args) { int[] array = new int[10000]; // Initialize all elements to 1 Arrays.fill(array, 1); // Create a ForkJoinPool to execute the tasks ForkJoinPool pool = new ForkJoinPool(); // Submit the task to the ForkJoinPool SumTask task = new SumTask(array, 0, array.length); long result = pool.invoke(task); System.out.println(\"Sum: \" + result); // Output the result } } SHOW OUTPUT Output Sum: 10000 Critical Section \u0026amp; Race Condition Critical Section refers to a portion of a program where shared resources are accessed and modified. A Race Condition occurs when the program\u0026rsquo;s behavior depends on the non-deterministic execution order of threads. Since multiple threads can access a critical section concurrently, it is essential to synchronize their access to avoid data inconsistency.\nFor example, suppose there are four threads trying to read a value of 20 from memory. Each thread increments the value by 1 and writes it back to memory. Without synchronization mechanisms, after all threads complete their writes, the final value might be 21 instead of the expected 24. This leads to an unexpected outcome, as illustrated below.\nCritical Section \u0026amp; Race Condition To resolve this issue, access to the critical section must be exclusive. This is commonly achieved by using mutexes, read/write locks, semaphores, conditional variables or barriers to ensure that only one thread can modify the shared resource at a time.\nSynchronization Mechanisms Synchronization Mechanisms are rules used to coordinate the execution of threads in a program, ensuring safe access to shared resources. These mechanisms can be primarily classified into five types: Mutexes, Read/Write Locks, Semaphores, Conditional Variables, and Barriers.\nMutex Mechanism The mutex mechanism ensures that only one thread can access the critical section at a time. Other threads will be blocked until the mutex is released. The key logic behind the mutex mechanism is as follows:\nLock lock = new ReentrantLock(); lock.lock(); // Acquire the lock try { // Critical section code } finally { lock.unlock(); // Release the lock } Mutex Mechanism SHOW CODE Java public class Mutex { private static int counter = 0; private static final Object lock = new Object(); public static void runExperiment(String experimentName, Runnable task) { counter = 0; Thread t1 = new Thread(task); Thread t2 = new Thread(task); t1.start(); t2.start(); try { t1.join(); t2.join(); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"Final counter value \" + experimentName + \": \" + counter + \"\"); } public static void incrementCounterWithMutex() { for (int i = 0; i \u003c 100; i++) { synchronized (lock) { int temp = counter; try { Thread.sleep(1); // Sleep for 1 millisecond } catch (InterruptedException e) { e.printStackTrace(); } counter = temp + 1; } } } public static void incrementCounterNoMutex() { for (int i = 0; i \u003c 100; i++) { int temp = counter; try { Thread.sleep(1); // Sleep for 1 millisecond } catch (InterruptedException e) { e.printStackTrace(); } counter = temp + 1; } } public static void main(String[] args) { runExperiment(\"With Mutex Experiment\", Mutex::incrementCounterWithMutex); runExperiment(\"No Mutex Experiment\", Mutex::incrementCounterNoMutex); } } SHOW OUTPUT Output Final counter value With Mutex Experiment: 200 Final counter value No Mutex Experiment: 100 Read/Write Lock Mechanism The Read/Write Lock Mechanism allows threads read the shared resources concurrently, but ensures exclusive access for write operations. This mechanism is useful in scenarios where there are many read operations and fewer write operations, such as caching systems or databases. The key logic behind the read/write lock mechanism is as follows:\nReadWriteLock rwLock = new ReentrantReadWriteLock(); rwLock.readLock().lock(); // Acquire read lock try { // Read operation } finally { rwLock.readLock().unlock(); // Release read lock } rwLock.writeLock().lock(); // Acquire write lock try { // Write operation } finally { rwLock.writeLock().unlock(); // Release write lock } Under the Read/Write Lock mechanism, multiple threads can access the critical section simultaneously without blocking each other. When a writer thread is accessing the critical section, other writer threads and reader threads are blocked. Similarly, when a reader thread is accessing the critical section, the writer thread is blocked.\nRead/Write Lock Mechanism SHOW CODE Java import java.util.ArrayList; import java.util.List; import java.util.concurrent.locks.ReentrantReadWriteLock; public class ReadWriteLock { private static volatile int counter = 0; private static final int TARGET_VALUE = 1000; private static final ReentrantReadWriteLock lock = new ReentrantReadWriteLock(); public static int incrementValue() { lock.writeLock().lock(); try { Thread.sleep(1); if (counter \u003c TARGET_VALUE) { counter++; } } catch (InterruptedException e) { e.printStackTrace(); } finally { lock.writeLock().unlock(); } return counter; } public static int readValue() { lock.readLock().lock(); try { Thread.sleep(1); return counter; } catch (InterruptedException e) { e.printStackTrace(); } finally { lock.readLock().unlock(); } return 0; } public static void main(String[] args) { long start = System.currentTimeMillis(); List readers = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u003c 8; i++) { readers.add(new Thread(() -\u003e { while (readValue() \u003c TARGET_VALUE) { try { Thread.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } } })); } List writers = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u003c 2; i++) { writers.add(new Thread(() -\u003e { while (incrementValue() \u003c TARGET_VALUE) { try { Thread.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } } })); } readers.forEach(Thread::start); writers.forEach(Thread::start); readers.forEach(t -\u003e { try { t.join(); } catch (InterruptedException e) { e.printStackTrace(); } }); writers.forEach(t -\u003e { try { t.join(); } catch (InterruptedException e) { e.printStackTrace(); } }); long end = System.currentTimeMillis(); System.out.println(\"Time taken: \" + (end - start) / 1000.0 + \" seconds\"); } } SHOW OUTPUT Output Time taken: 1.787 seconds In the above code, the readValue method uses a read lock, allowing multiple reader threads to access the counter (critical section) simultaneously without blocking each other. If the method used a write lock instead of a read lock, the execution time would be higher. This is because when a writer thread is accessing the counter, all other threads would be blocked.\npublic static int readValue() { // lock.readLock().lock(); lock.writeLock().lock(); try { Thread.sleep(1); return counter; } catch (InterruptedException e) { e.printStackTrace(); } finally { // lock.readLock().unlock(); lock.writeLock().unlock(); } return 0; } Time taken: 6.793 seconds # Use write lock Semaphore Mechanism The Semaphore mechanism uses an integer to manage a set of permits, allowing multiple threads to access shared resources simultaneously, but only up to a predetermined limit. There are two types of semaphores: Binary Semaphore and Counting Semaphore.\nBinary Semaphore: Similar to a mutex, it operates with two states (0 and 1), ensuring mutual exclusion in critical sections. Counting Semaphore: Allows a count greater than 1, permitting multiple threads to access shared resources concurrently, as long as the permit limit is not exceeded. Semaphores are useful in controlling access to a pool of resources, such as limiting the number of threads that can access a database connection or a server. The key logic behind the semaphore mechanism is as follows:\nSemaphore semaphore = new Semaphore(3); // Allow 3 threads at once semaphore.acquire(); // Acquire a permit try { // Critical section code } finally { semaphore.release(); // Release a permit } Semaphore Mechanism SHOW CODE Java import java.util.concurrent.Semaphore; import java.util.concurrent.atomic.AtomicInteger; public class SemaphoreTest { // Global shared resource // AtomicInteger allows multiple threads to read/write value of counter without requiring synchronization private static final AtomicInteger counter = new AtomicInteger(0); // Semaphore with a count of 5 private static final Semaphore semaphore = new Semaphore(5); private static final int TARGET_VALUE = 5000; public static void main(String[] args) { long startTime = System.currentTimeMillis(); Thread[] workers = new Thread[10]; for (int i = 0; i \u003c workers.length; i++) { workers[i] = new Thread(SemaphoreTest::worker); workers[i].start(); } for (Thread worker : workers) { try { worker.join(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Thread was interrupted\"); } } long endTime = System.currentTimeMillis(); System.out.println(\"Time taken: \" + (endTime - startTime) / 1000.0 + \" seconds\"); } private static void worker() { while (true) { try { semaphore.acquire(); // Acquire the semaphore if (counter.get() \u003e= TARGET_VALUE) { break; } counter.incrementAndGet(); // Atomically increments the counter Thread.sleep(1); // Simulate work } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Thread was interrupted\"); } finally { semaphore.release(); // Release the semaphore } } } } Conditional Variable Mechanism The Conditional Variable Mechanism allows a thread to suspend its execution until other threads signal that a certain condition has been met. It is often used in conjunction with mutexes to implement synchronization patterns, such as the producer-consumer pattern.\nIn this mechanism, a thread can wait on a condition variable until it is notified by other threads that the condition has been satisfied. When the condition is fulfilled, one or more threads can be signaled to wake up and proceed. Condition variables are commonly used in scenarios like the producer-consumer problem, where one thread produces data and another consumes it, with both threads needing to wait for each other under specific conditions.\nThe key logic behind the Conditional Variable Mechanism is as follows:\nsynchronized (lock) { while (!condition) { lock.wait(); // Wait until condition is true } // Proceed with critical section } synchronized (lock) { condition = true; lock.notify(); // Notify waiting threads } Conditional Variable Mechanism SHOW CODE Wait \u0026amp; Notify Busy Waiting public class ConditionalVariable { private static final Object mutex = new Object(); private static int sharedNumber; private static boolean ready = false; public static void producer() { synchronized (mutex) { sharedNumber = 9; // Producing a number ready = true; System.out.println(\"Producer has produced the number: \" + sharedNumber); mutex.notify(); // Notify the consumer } } public static void consumer() { synchronized (mutex) { while (!ready) { try { mutex.wait(); // Wait until the number is ready } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Consumer thread was interrupted.\"); } } System.out.println(\"Consumer has consumed the number: \" + sharedNumber); } } public static void main(String[] args) { Thread producerThread = new Thread(ConditionalVariable::producer); Thread consumerThread = new Thread(ConditionalVariable::consumer); producerThread.start(); consumerThread.start(); try { producerThread.join(); consumerThread.join(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Main thread was interrupted.\"); } } } public class Solution { private static final Object mutex = new Object(); private static int sharedNumber; private static boolean ready = false; private static void producer() { synchronized (mutex) { sharedNumber = 9; // Producing a number ready = true; System.out.println(\"Producer has produced the number: \" + sharedNumber); } } private static void consumer() { // Busy waiting loop while (true) { synchronized (mutex) { if (ready) { System.out.println(\"Consumer has consumed the number: \" + sharedNumber); break; } } try { Thread.sleep(1); // Sleep for a short time } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Thread was interrupted\"); } } } public static void main(String[] args) { Thread producerThread = new Thread(Solution::producer); Thread consumerThread = new Thread(Solution::consumer); producerThread.start(); consumerThread.start(); try { producerThread.join(); consumerThread.join(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); System.out.println(\"Main thread was interrupted\"); } } } Barrier Mechanism The Barrier Mechanism allows threads to wait for each other at a specified point in their execution. It ensures that threads cannot proceed to the subsequent code until all threads have reached the barrier, as illustrated in the following image.\nBarrier Mechanism Barrier Mechanism are useful in parallel algorithms where multiple threads need to work in phases, and the next phase cannot begin until all threads complete the current one.\nThe key logic behind this mechanism is as follows:\nCyclicBarrier barrier = new CyclicBarrier(4, new Runnable() { public void run() { System.out.println(\u0026#34;All threads reached the barrier!\u0026#34;); } }); // Threads: barrier.await(); // Wait at the barrier SHOW CODE Java import java.util.concurrent.CyclicBarrier; class Barriers { private static final CyclicBarrier barrier = new CyclicBarrier(2, () -\u003e System.out.println(\"All threads have reached the barrier. Continue execution.\")); public static void main(String[] args) { Thread t1 = new Thread(Barriers::work); Thread t2 = new Thread(Barriers::work); // Start both threads. t1.start(); t2.start(); } private static void work() { System.out.println(\"Thread \" + Thread.currentThread().getName() + \" is waiting at the barrier\"); try { // Wait for the specified number of threads (2 in this case) to reach the barrier. barrier.await(); System.out.println(\"Thread \" + Thread.currentThread().getName() + \" is released\"); } catch (Exception e) { // Handle exceptions, if any. } } } SHOW OUTPUT Output Thread Thread-0 is waiting at the barrier Thread Thread-1 is waiting at the barrier All threads have reached the barrier. Continue execution. Thread Thread-1 is released Thread Thread-0 is released Thread Creation In Java Extending Thread Class SHOW CODE Java class MyThread extends Thread { @Override public void run() { System.out.println(this.getName() + \" is running.\"); } } public class Main { public static void main(String[] args) { MyThread myThread = new MyThread(); myThread.setName(\"MYTHREAD-0\"); myThread.start(); } } Implementing Runnable Interface SHOW CODE Java public class Main { public static void main(String[] args) { Thread thread = new Thread(() -\u003e System.out.println(Thread.currentThread().getName() + \" is running.\")); thread.start(); } } //class MyRunnable implements Runnable { // @Override // public void run() { // System.out.println(\"Thread is running\"); // } //} // //public class Main { // public static void main(String[] args) { // Thread thread = new Thread(new MyRunnable()); // thread.start(); // Starts a new thread // } //} Using the Callable Interface SHOW CODE Java import java.util.concurrent.*; public class Main { public static void main(String[] args) throws Exception { ExecutorService executor = Executors.newSingleThreadExecutor(); Future\u0026lt;String\u0026gt; future = executor.submit(() -\u003e Thread.currentThread().getName() + \" is running.\"); System.out.println(future.get()); executor.shutdown(); } } class MyCallable implements Callable\u0026lt;String\u0026gt; { // @Override // public String call() { // return \"Thread executed\"; // } //} // //public class Main { // public static void main(String[] args) throws Exception { // ExecutorService executor = Executors.newSingleThreadExecutor(); // Future\u0026lt;String\u0026gt; future = executor.submit(new MyCallable()); // System.out.println(future.get()); // Retrieves the result // executor.shutdown(); // } //} Using Executors SHOW CODE Java import java.util.concurrent.*; public class Main { public static void main(String[] args) { ExecutorService executor = Executors.newFixedThreadPool(2); Runnable task1 = () -\u003e System.out.println(Thread.currentThread().getName() + \" executed\"); Runnable task2 = () -\u003e System.out.println(Thread.currentThread().getName() + \" executed\"); executor.execute(task1); executor.execute(task2); executor.shutdown(); } } Thread Termination In Java Using a flag SHOW CODE Java class Task implements Runnable { // Use volatile to ensure visibility between thread private volatile boolean running = true; @Override public void run() { while (running) { System.out.println(\"Thread is running.\"); try { Thread.sleep(1000); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } } System.out.println(\"Thread is stopping.\"); } public void stop() { running = false; } } public class Main { public static void main(String[] args) throws InterruptedException { Task task = new Task(); Thread thread = new Thread(task); thread.start(); Thread.sleep(3000); // Allow thread to run for a while task.stop(); // Signal thread to stop } } Interrupting a Thread SHOW CODE Java public class Main { public static void main(String[] args) throws InterruptedException { Thread thread = new Thread(() -\u003e { try { while (!Thread.currentThread().isInterrupted()) { System.out.println(\"Thread is running\"); Thread.sleep(1000); } } catch (InterruptedException e) { System.out.println(\"Thread is interrupted\"); } }); thread.start(); Thread.sleep(3000); // Allow thread to run for a while thread.interrupt(); // Interrupt the thread } } Daemon Threads A daemon thread in Java is a low-priority thread that runs in the background, typically handling tasks such as garbage collection or other housekeeping operations. The JVM terminates when all non-daemon threads have completed execution, even if daemon threads are still active. To create a daemon thread, the setDaemon(true) method is used on a Thread object before it is started.\nSHOW CODE Java public class Main { public static void main(String[] args) { Thread daemonThread = new Thread(() -\u003e { while (true) { System.out.println(\"Daemon thread is running\"); try { Thread.sleep(1000); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } } }); daemonThread.setDaemon(true); // Mark as daemon daemonThread.start(); System.out.println(\"Main thread is ending\"); } } SHOW OUTPUT Output Main thread is ending Daemon thread is running Performance Optimization When it comes to multithreading, performance optimization typically focuses on two key areas: latency reduction and throughput improvement.\nLatency reduction refers to minimizing the time it takes to complete a single task, measured in time units. This is often achieved by breaking a task into smaller subtasks that can be executed concurrently by multiple threads.\nThroughput, on the other hand, measures the number of tasks completed within a specific time frame, typically expressed as tasks / time unit. Throughput improvement is commonly achieved by utilizing thread pooling, which reduces the overhead of creating and destroying threads for each task.\nSHOW CODE: Latency Reduction Java import javax.imageio.ImageIO; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class Main { private static final String SOURCE_FILE = \"src/main/resources/1-flower.jpg\"; private static final String DESTINATION_FILE = \"./out/1-flower.jpg\"; public static void main(String[] args) throws IOException { BufferedImage originalImage = ImageIO.read(new File(SOURCE_FILE)); BufferedImage resultImage = new BufferedImage(originalImage.getWidth(), originalImage.getHeight(), BufferedImage.TYPE_INT_RGB); long startTime = System.currentTimeMillis(); // recolorSingleThreaded(originalImage, resultImage); int numberOfThreads = 1; recolorMultithreaded(originalImage, resultImage, numberOfThreads); long endTime = System.currentTimeMillis(); long duration = endTime - startTime; File outputFile = new File(DESTINATION_FILE); File parentDir = outputFile.getParentFile(); if (parentDir != null \u0026\u0026 !parentDir.exists()) { parentDir.mkdirs(); // Create the directory if it doesn't exist } ImageIO.write(resultImage, \"jpeg\", outputFile); System.out.println(\"duration = \" + duration); } public static void recolorMultithreaded(BufferedImage originalImage, BufferedImage resultImage, int numberOfThreads) { List\u0026lt;Thread\u0026gt; threads = new ArrayList\u0026lt;\u0026gt;(); int width = originalImage.getWidth(); int height = originalImage.getHeight() / numberOfThreads; for(int i = 0; i \u003c numberOfThreads ; i++) { final int threadMultiplier = i; Thread thread = new Thread(() -\u003e { int xOrigin = 0 ; int yOrigin = height * threadMultiplier; recolorImage(originalImage, resultImage, xOrigin, yOrigin, width, height); }); threads.add(thread); } for(Thread thread : threads) { thread.start(); } for(Thread thread : threads) { try { thread.join(); } catch (InterruptedException e) { } } } private static void recolorSingleThreaded(BufferedImage originalImage, BufferedImage resultImage) { recolorImage(originalImage, resultImage, 0, 0, originalImage.getWidth(), originalImage.getHeight()); } private static void recolorImage(BufferedImage originalImage, BufferedImage resultImage, int leftCorner, int topCorner, int width, int height) { for (int x = leftCorner; x \u003c leftCorner + width \u0026\u0026 x \u003c originalImage.getWidth(); x++) { for (int y = topCorner; y \u003c topCorner + height \u0026\u0026 y \u003c originalImage.getHeight(); y++) { recolorPixel(originalImage, resultImage, x, y); } } } private static void recolorPixel(BufferedImage originalImage, BufferedImage resultImage, int x, int y) { int rgb = originalImage.getRGB(x, y); int red = getRed(rgb); int green = getGreen(rgb); int blue = getBlue(rgb); int newRed; int newGreen; int newBlue; if (isShadeOfGray(red, green, blue)) { newRed = Math.min(255, red + 10); newGreen = Math.max(0, green - 80); newBlue = Math.max(0, blue - 20); } else { newRed = red; newGreen = green; newBlue = blue; } int newRGB = createRGBFromColors(newRed, newGreen, newBlue); setRGB(resultImage, x, y, newRGB); } public static void setRGB(BufferedImage image, int x, int y, int rgb) { image.getRaster().setDataElements(x, y, image.getColorModel().getDataElements(rgb, null)); } public static boolean isShadeOfGray(int red, int green, int blue) { return Math.abs(red - green) \u003c 30 \u0026\u0026 Math.abs(red - blue) \u003c 30 \u0026\u0026 Math.abs(green - blue) \u003c 30; } public static int createRGBFromColors(int red, int green, int blue) { int rgb = 0; rgb |= blue; rgb |= green \u003c\u003c 8; rgb |= red \u003c\u003c 16; rgb |= 0xFF000000; return rgb; } public static int getRed(int rgb) { return (rgb \u0026 0x00FF0000) \u003e\u003e 16; } public static int getGreen(int rgb) { return (rgb \u0026 0x0000FF00) \u003e\u003e 8; } public static int getBlue(int rgb) { return rgb \u0026 0x000000FF; } } SHOW IMAGE: BEFORE PROCESSING SHOW IMAGE: AFTER PROCESSING Single Threaded VS. Multithreaded SHOW CODE: Throughput vs. Threads Throughput vs. Threads import com.sun.net.httpserver.HttpExchange; import com.sun.net.httpserver.HttpHandler; import com.sun.net.httpserver.HttpServer; import java.io.IOException; import java.io.OutputStream; import java.net.InetSocketAddress; import java.nio.file.Files; import java.nio.file.Paths; import java.util.concurrent.Executor; import java.util.concurrent.Executors; public class ThroughputHttpServer { private static final String INPUT_FILE = \"./resources/war_and_peace.txt\"; private static final int NUMBER_OF_THREADS = 8; public static void main(String[] args) throws IOException { String text = new String(Files.readAllBytes(Paths.get(INPUT_FILE))); startServer(text); } public static void startServer(String text) throws IOException { HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0); server.createContext(\"/search\", new WordCountHandler(text)); Executor executor = Executors.newFixedThreadPool(NUMBER_OF_THREADS); server.setExecutor(executor); server.start(); } private static class WordCountHandler implements HttpHandler { private String text; public WordCountHandler(String text) { this.text = text; } @Override public void handle(HttpExchange httpExchange) throws IOException { String query = httpExchange.getRequestURI().getQuery(); String[] keyValue = query.split(\"=\"); String action = keyValue[0]; String word = keyValue[1]; if (!action.equals(\"word\")) { httpExchange.sendResponseHeaders(400, 0); return; } long count = countWord(word); byte[] response = Long.toString(count).getBytes(); httpExchange.sendResponseHeaders(200, response.length); OutputStream outputStream = httpExchange.getResponseBody(); outputStream.write(response); outputStream.close(); } private long countWord(String word) { long count = 0; int index = 0; while (index \u003e= 0) { index = text.indexOf(word, index); if (index \u003e= 0) { count++; index++; } } return count; } } } SHOW IMAGE: Throughput VS. Threads Problems Linear Search with Finding One Occurrence SHOW PROBLEM Problem Statement:\nThe input consists of a large array (or list) of elements and a target value to search for. The goal is to utilize multiple threads to divide the search space and concurrently search for the target value, ultimately returning the index of the first occurrence of the target or -1 indicating that the target is not present.\nRequirements:\nMultithreading: Divide the array into multiple segments, with each thread searching a specific segment of the array. Each thread should operate independently and search its assigned segment. Return First Occurrence: Once the target value is found by any thread, it should return the index of the first occurrence, and other threads should stop searching. Constraints:\nThe array can be large (millions of elements). The number of threads used should be adjustable. The target value may appear multiple times in the array, but only the index of the first occurrence should be returned. SHOW CODE Java public class Solution { private static final int SIZE = 280000; private static final int NUM_THREADS = 4; private static final Object mtx = new Object(); // Mutex for controlling access to foundIndex private static volatile int foundIndex = -1; private static void linearSearch(int threadId, int[] arr, int key) { int chunkSize = arr.length / NUM_THREADS; int start = threadId * chunkSize; int end = (threadId == NUM_THREADS - 1) ? arr.length : start + chunkSize; for (int i = start; i \u003c end; ++i) { // Early exit if foundIndex is set by another thread synchronized (mtx) { if (foundIndex != -1) { break; } } if (arr[i] == key) { synchronized (mtx) { if (foundIndex == -1) { foundIndex = i; break; // Exit after setting foundIndex } } } } } public static void main(String[] args) { // Fill array with random numbers between 0-99 int[] arr = new int[SIZE]; for (int i = 0; i \u003c SIZE; ++i) { arr[i] = (int) (Math.random() * 100); } Thread[] threads = new Thread[NUM_THREADS]; int key = 9; for (int i = 0; i \u003c NUM_THREADS; ++i) { final int threadId = i; threads[i] = new Thread(() -\u003e linearSearch(threadId, arr, key)); threads[i].start(); } for (Thread thread : threads) { try { thread.join(); } catch (InterruptedException e) { e.printStackTrace(); } } if (foundIndex == -1) { System.out.println(\"Element not found in the array.\"); } else { System.out.println(\"Element found at index: \" + foundIndex); } } } Linear Search for All Occurrences SHOW PROBLEM Problem Statement:\nThe input consists of a large array (or list) of elements and a target value to search for. The goal is to utilize multiple threads to divide the search space and concurrently search for the target value, ultimately returning the index of all occurrences of the target or an empty list indicating that the target is not present.\nRequirements:\nMultithreading: Divide the array into multiple segments, with each thread searching a specific segment of the array. Each thread should operate independently and search its assigned segment. Return All Occurrences: Once the target value is found, the thread should store the index. All threads should continue searching, and their results (all indices of the target’s occurrences) should be combined and returned. Constraints:\nThe array can be large (millions of elements). The number of threads used should be adjustable. The target value may appear multiple times in the array, and all indices where the target is found should be returned. SHOW CODE Java import java.util.ArrayList; import java.util.List; import java.util.Random; public class Solution { private static final int SIZE = 4000; private static final int NUM_THREADS = 4; // Mutex for controlling access to foundPlaces private static final Object lockObj = new Object(); private static List\u0026lt;Integer\u0026gt; foundPlaces = new ArrayList\u0026lt;\u0026gt;(); private static void linearSearch(int threadId, int[] arr, int key) { int chunkSize = arr.length / NUM_THREADS; int start = threadId * chunkSize; int end = (threadId == NUM_THREADS - 1) ? arr.length : start + chunkSize; for (int i = start; i \u003c end; ++i) { if (arr[i] == key) { synchronized (lockObj) { // Lock when modifying foundPlaces foundPlaces.add(i); // Append the index to foundPlaces } } } } public static void main(String[] args) { // Create an array and fill it with random numbers between 0 and 99 int[] arr = new int[SIZE]; Random random = new Random(); for (int i = 0; i \u003c SIZE; ++i) { arr[i] = random.nextInt(100); } Thread[] threads = new Thread[NUM_THREADS]; // List to hold the threads int key = 9; // Element to find // Start the threads for (int i = 0; i \u003c NUM_THREADS; ++i) { final int threadId = i; threads[i] = new Thread(() -\u003e linearSearch(threadId, arr, key)); threads[i].start(); } // Join the threads with the main thread for (Thread thread : threads) { try { thread.join(); } catch (InterruptedException e) { e.printStackTrace(); } } // Display the result if (foundPlaces.isEmpty()) { System.out.println(\"Element not found in the array.\"); } else { System.out.print(\"Element found at indices: \"); synchronized (lockObj) { // Lock when reading from foundPlaces for (int index : foundPlaces) { System.out.print(index + \" \"); } } System.out.println(); } } } SHOW NOTES The synchonization block can be removed when reading values from foundPlaces, as no threads modify the foundPlaces after the join() method is called.\n// Display the result if (foundPlaces.isEmpty()) { System.out.println(\u0026#34;Element not found in the array.\u0026#34;); } else { System.out.print(\u0026#34;Element found at indices: \u0026#34;); // No need for synchronization here, as no threads are modifying foundPlaces now // synchronized (lockObj) { // Lock when reading from foundPlaces for (int index : foundPlaces) { System.out.print(index + \u0026#34; \u0026#34;); } // } System.out.println(); } Linear Search with Indices and Occurrences SHOW PROBLEM Problem Statement:\nYou are given a large array (or list) of elements and a target value to search for. Your task is to implement a linear search that finds all occurrences of the target value in the array using multiple threads. Each thread should search a specific segment of the array, and the results (indices where the target is found) should be stored in a shared collection (e.g., a list). Additionally, a shared variable should keep track of the count of occurrences of the target value.\nRequirements:\nMultithreading: Divide the array into equal segments based on the number of threads. Each thread should independently search its assigned segment for the target value. The number of threads should be adjustable to optimize performance depending on the size of the array. Return: A list of integers representing the indices of all occurrences of the target value. An integer representing the total count of occurrences of the target value. Constraints:\nThe array can be very large, potentially containing millions of elements. The number of threads used should be adjustable, allowing the program to scale with the size of the array and the system\u0026rsquo;s available resources. The target value may appear multiple times, and all occurrences should be included in the final result. SHOW CODE Java import java.util.ArrayList; import java.util.List; import java.util.Random; public class Solution { private static final int SIZE = 4000; private static final int NUM_THREADS = 4; private static final List\u0026lt;Integer\u0026gt; foundIndices = new ArrayList\u0026lt;\u0026gt;(); // Shared list to store the indices of all occurrences private static int occurrencesCount = 0; // Shared variable to store the count of occurrences private static final Object indicesLock = new Object(); // Lock for synchronizing access to foundIndices private static final Object countLock = new Object(); // Lock for synchronizing access to occurrencesCount // Function executed by each thread to search for indices and occurrences private static void searchIndicesOccurrences(int threadId, int[] arr, int key) { int chunkSize = arr.length / NUM_THREADS; int start = threadId * chunkSize; int end = (threadId == NUM_THREADS - 1) ? arr.length : start + chunkSize; List\u0026lt;Integer\u0026gt; localIndices = new ArrayList\u0026lt;\u0026gt;(); int localCount = 0; for (int i = start; i \u003c end; ++i) { if (arr[i] == key) { localIndices.add(i); localCount++; } } if (!localIndices.isEmpty()) { synchronized (indicesLock) { foundIndices.addAll(localIndices); } } if (localCount \u003e 0) { synchronized (countLock) { occurrencesCount += localCount; } } } public static void main(String[] args) { // Create an array and fill it with random numbers between 0 and 99 int[] arr = new int[SIZE]; Random random = new Random(); for (int i = 0; i \u003c SIZE; ++i) { arr[i] = random.nextInt(100); } Thread[] threads = new Thread[NUM_THREADS]; // Array of threads int key = 9; // Element to find // Start the threads for (int i = 0; i \u003c NUM_THREADS; ++i) { int threadId = i; threads[i] = new Thread(() -\u003e searchIndicesOccurrences(threadId, arr, key)); threads[i].start(); } // Wait for all threads to complete for (Thread thread : threads) { try { thread.join(); } catch (InterruptedException e) { e.printStackTrace(); } } // Output the results if (foundIndices.isEmpty()) { System.out.println(\"Element not found in the array.\"); } else { System.out.print(\"Element found \" + occurrencesCount + \" times at indices: \"); for (int index : foundIndices) { System.out.print(index + \" \"); } System.out.println(); } } } Min/Max/Sum SHOW PROBLEM Problem Statement:\nThe input consists of a large array (or list) of elements. The goal is to efficiently calculate the minimum, maximum, and sum of elements in the array using multithreading. The array is divided into multiple segments, with each thread processing a specific segment. The threads will then return partial results (minimum, maximum, and sum for their respective segments), which will be combined to compute the final values for the entire array.\nRequirements:\nMultithreading: Divide the array into multiple segments, with each thread processing a specific portion of the array. Each thread should independently compute the minimum, maximum, and sum for its assigned segment.\nCombine Results: Once each thread has finished processing, their partial results (min, max, and sum for the segment) should be combined to compute the final minimum, maximum, and sum for the entire array.\nEfficiency: The program should use multithreading to optimize the processing time, especially when dealing with large arrays containing millions of elements. The number of threads should be adjustable for optimal performance.\nConstraints:\nThe array can be large (millions of elements).\nThe number of threads used should be adjustable based on the size of the array and the system’s capabilities.\nThe array can contain both positive and negative numbers, and the minimum, maximum, and sum should be computed accurately, including for arrays with all negative values.\nSHOW CODE Java import java.util.Random; public class Solution { private static final int DATA_SIZE = 100; private static final int NUMBER_OF_THREADS = 4; private static int[] data = new int[DATA_SIZE]; private static int[] threadResultsSum = new int[NUMBER_OF_THREADS]; private static int[] threadResultsMin = new int[NUMBER_OF_THREADS]; private static int[] threadResultsMax = new int[NUMBER_OF_THREADS]; public static void main(String[] args) throws InterruptedException { // Initialize data array Random random = new Random(); for (int i = 0; i \u003c DATA_SIZE; i++) { data[i] = random.nextInt(500); } Thread[] threads = new Thread[NUMBER_OF_THREADS * 3]; // Start threads for sum, min, and max calculations for (int i = 0; i \u003c NUMBER_OF_THREADS; i++) { final int threadId = i; final int start = threadId * (DATA_SIZE / NUMBER_OF_THREADS); final int end = (threadId + 1) * (DATA_SIZE / NUMBER_OF_THREADS); threads[threadId] = new Thread(() -\u003e threadedSum(threadId, start, end)); threads[threadId + NUMBER_OF_THREADS] = new Thread(() -\u003e threadedMin(threadId, start, end)); threads[threadId + NUMBER_OF_THREADS * 2] = new Thread(() -\u003e threadedMax(threadId, start, end)); threads[threadId].start(); threads[threadId + NUMBER_OF_THREADS].start(); threads[threadId + NUMBER_OF_THREADS * 2].start(); } // Wait for threads to finish for (Thread thread : threads) { thread.join(); } // Aggregate results from threads int totalSum = 0; for (int sum : threadResultsSum) { totalSum += sum; } int min = Integer.MAX_VALUE; for (int minResult : threadResultsMin) { min = Math.min(min, minResult); } int max = Integer.MIN_VALUE; for (int maxResult : threadResultsMax) { max = Math.max(max, maxResult); } System.out.println(\"Sum is \" + totalSum); System.out.println(\"Min is \" + min); System.out.println(\"Max is \" + max); } private static void threadedSum(int threadId, int start, int end) { int sum = 0; for (int i = start; i \u003c end; i++) { sum += data[i]; } threadResultsSum[threadId] = sum; } private static void threadedMin(int threadId, int start, int end) { int min = Integer.MAX_VALUE; for (int i = start; i \u003c end; i++) { min = Math.min(min, data[i]); } threadResultsMin[threadId] = min; } private static void threadedMax(int threadId, int start, int end) { int max = Integer.MIN_VALUE; for (int i = start; i \u003c end; i++) { max = Math.max(max, data[i]); } threadResultsMax[threadId] = max; } } Pi Calculation SHOW PROBLEM Problem Statement\nThe problem is to estimate the value of Pi using the Monte Carlo simulation method. In this method, we randomly generate points within a square and check how many of these points fall inside a circle inscribed within the square. The ratio of points inside the circle to the total points generated provides an approximation of Pi.\nRequirements:\nRandom Point Generation:\nGenerate a large number of random points within a square. The square should have side lengths of 2 (i.e., points with coordinates ranging from -1 to 1 on both the x and y axes). Each point has coordinates $(x, y)$, where $x$ and $y$ are randomly generated floating-point values between -1 and 1. Circle Inside the Square:\nA circle is inscribed within the square, with a radius of 1 and centered at the origin (0, 0). A point $(x, y)$ lies inside the circle if the following condition is true: $$ x^2 + y^2 \\leq 1 $$ Monte Carlo Estimation of Pi:\nCount how many of the generated points fall inside the circle. The ratio of the points inside the circle to the total number of points can be used to estimate Pi. Specifically, the approximation of Pi is given by: $$ \\pi \\approx 4 \\times \\frac{\\text{points inside the circle}}{\\text{total number of points}} $$ Multithreading:\nTo speed up the simulation, divide the task of generating points and checking whether they lie inside the circle into multiple threads. Each thread should be responsible for generating a subset of points and counting how many fall inside the circle. Once all threads finish their work, their results should be combined to compute the final approximation of Pi. Output:\nReturn the estimated value of Pi based on the simulation. Constraints:\nThe number of points to generate can be very large (millions of points). The number of threads used should be adjustable. The accuracy of the approximation improves with more points, but the simulation should be efficient enough to handle large numbers of points and multiple threads. SHOW CODE Java import java.util.Random; public class Solution { private static final int NUM_THREADS = 10; private static final int NUMBER_OF_TOSSES = 100000000; private static int[] results = new int[NUM_THREADS]; public static void main(String[] args) throws InterruptedException { Thread[] threads = new Thread[NUM_THREADS]; for (int i = 0; i \u003c NUM_THREADS; i++) { final int threadId = i; threads[i] = new Thread(() -\u003e { Random rand = new Random(); int start = threadId * NUMBER_OF_TOSSES / NUM_THREADS; int end = (threadId + 1) * NUMBER_OF_TOSSES / NUM_THREADS; int count_in_circle = 0; for (int j = start; j \u003c end; j++) { double x = rand.nextDouble() * 2 - 1; // Random x in range [-1, 1] double y = rand.nextDouble() * 2 - 1; // Random y in range [-1, 1] if (x * x + y * y \u003c= 1) { // If point is inside the circle count_in_circle++; } } results[threadId] = count_in_circle; }); threads[i].start(); } for (Thread thread : threads) { thread.join(); } // Compute final estimate of Pi int total_inside = 0; for (int result : results) { total_inside += result; } double pi_estimate = 4.0 * total_inside / NUMBER_OF_TOSSES; System.out.println(\"PI = \" + pi_estimate); } } SHOW NOTES Introduction to Monte Carlo Estimation of $\\pi$\nSuppose a square with a circle inscribed inside it, as shown in the image below. The circle has a radius of $r$, and the square has side length $2r$. The area of the circle is $A_{\\text{circle}} = \\pi r^2$, and the area of the square is $A_{\\text{square}} = (2r)^2 = 4r^2$\nThe ratio of the area of the circle to the area of the square is $$ \\frac{A_{\\text{circle}}}{A_{\\text{square}}} = \\frac{\\pi r^2}{4 r^2} = \\frac{\\pi}{4} $$\nTherefore, the value of $\\pi$ can be estimated by the formula:\n$$ \\pi \\approx 4 \\times \\frac{\\text{Number of points inside the circle}}{\\text{Total number of points inside the square}} $$\nVisulization:\nJUC CompletableFuture Future Interface The Future interface in Java defines several methods for managing asynchronous tasks, such as retriving the execution result, canceling a task, and checking if a task has been canceled or completed. It includes four commonly used methods: get(), isDone(), cancel(), and isCancelled().\nThe get() mthod retrives the result of computation. Note: If the computation is not yet complete, this method will block until the result is available. The isDone() method checks whether the computation has finished executing. The cancel() method attempts to cancel the task execution. The isCancelled() method checks if the task has been canceled before completion. The FutureTask class is a concrete implementation of the Future interface. It implements both the Runnable and Future interfaces, allowing it to be executed by a thread while also returning a result. Its constructor takes a Callable\u0026lt;V\u0026gt;, enabling the task to return a value. The class diagram is shown below: The Future combined with a thread pool enhances execution performance efficiently. However, its drarback lies in the get() method, which is blocking, and the isDone() method, whose polling behavior consumes CPU resources.\nSHOW CODE FutureGetBlocking FutureIsDonePolling import java.util.concurrent.ExecutionException; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; class Main { public static void main(String[] args) throws ExecutionException, InterruptedException { ExecutorService executor = Executors.newSingleThreadExecutor(); Future\u0026lt;String\u0026gt; future = executor.submit(() -\u003e { Thread.sleep(3000); // Simulate a long running task return \"Task Completed\"; }); System.out.println(\"Waiting for result...\"); // Block the main thread until the result is available String result = future.get(); System.out.println(\"Result: \" + result); executor.shutdown(); } } import java.util.concurrent.ExecutionException; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; class Main { public static void main(String[] args) throws ExecutionException, InterruptedException { ExecutorService executor = Executors.newSingleThreadExecutor(); Future\u0026lt;String\u0026gt; future = executor.submit(() -\u003e { Thread.sleep(3000); // Simulate a long-running task return \"Task Completed\"; }); // Busy-waiting, consuming CPU cycles while (!future.isDone()) { System.out.println(\"Checking if task is done...\"); Thread.sleep(100); // Reducing CPU usage slightly, but still inefficient } System.out.println(\"Result: \" + future.get()); executor.shutdown(); } } CompletableFuture The CompletableFuture implements both the Future and CompletionStage interfaces. The CompletionStage represents a computation step that can be completed asynchronously. Unlike Future, CompletableFuture provides advanced mechanisms for handling asynchronous tasks, including non-blocking execution, method chaining, exception handling, combining futures, and thread pool customization.\nNon-blocking Execution: Unlike Future.get(), whcih blocks until the result is available, CompletableFuture enables asynchronous execution without blocking the main thread. Chaining Supports method chaining with thenApply, thenCompose, and thenRun to process results sequently. Exception Handling: Provides exceptionally and handle methods to gracefully handle errors. Combining Futures: Supports combining multiple futures using thenCombine, allOf, and anyOf for parallel execution. Thread Pool Customization: Allows executing tasks in a custom thread pool for better resource management. SHOW CODE Without Blocking Chaining Tasks ExceptionHandling CombiningFutures import java.util.concurrent.*; class Main { public static void main(String[] args) throws ExecutionException, InterruptedException { CompletableFuture\u0026lt;Void\u0026gt; future = CompletableFuture.runAsync(() -\u003e { try { Thread.sleep(2000); System.out.println(\"Task executed in a separate thread\"); } catch (InterruptedException e) { e.printStackTrace(); } }); System.out.println(\"Main thread is not blocked.\"); future.join(); } } import java.util.concurrent.*; class Main { public static void main(String[] args) throws ExecutionException, InterruptedException { CompletableFuture\u0026lt;String\u0026gt; future = CompletableFuture.supplyAsync(() -\u003e \"Hello\") .thenApply(result -\u003e result + \", World!\") .thenApply(String::toUpperCase); System.out.println(future.join()); // Output: HELLO, WORLD! } } import java.util.concurrent.*; class Main { public static void main(String[] args) throws ExecutionException, InterruptedException { CompletableFuture\u0026lt;String\u0026gt; future = CompletableFuture.supplyAsync(() -\u003e { if (true) { throw new RuntimeException(\"Something went wrong!\"); } return \"Success\"; }).exceptionally(ex -\u003e \"Recovered from: \" + ex.getMessage()); // Recovered from: java.lang.RuntimeException: Something went wrong! System.out.println(future.join()); } } import java.util.concurrent.*; class Main { public static void main(String[] args) throws ExecutionException, InterruptedException { CompletableFuture\u0026lt;String\u0026gt; future1 = CompletableFuture.supplyAsync(() -\u003e \"Task 1\"); CompletableFuture\u0026lt;String\u0026gt; future2 = CompletableFuture.supplyAsync(() -\u003e \"Task 2\"); CompletableFuture\u0026lt;String\u0026gt; future3 = CompletableFuture.supplyAsync(() -\u003e \"Task 3\"); CompletableFuture allFutures = CompletableFuture.allOf(future1, future2, future3); // Retrieve results from individual futures String result1 = future1.get(); String result2 = future2.get(); String result3 = future3.get(); System.out.println(result1); System.out.println(result2); System.out.println(result3); allFutures.join(); // Wait for all tasks to complete System.out.println(\"All tasks completed!\"); } } The advantage of CompletableFuture is that when an asynchronous task completes, it automatically invokes the callback method. Once the main thread sets up the callback, it no longer needs to monitor the asynchronous task, and allows execution to proceed in sequence. Additionally, if the asynchronous task fails, it automatically triggers the corresponding error-handling method.\nBy default, CompletableFuture.supplyAsync() and runAsync() utilize the ForkJoinPool.commonPool(), a shared thread pool based on the ForkJoin framework. To use a custom thread pool, you need to provide a custom Executor when calling these methods.\nSHOW CODE ForkJoinPool.commonPool() Custom Thread Pool import java.util.concurrent.*; class Main { public static void main(String[] args) throws ExecutionException, InterruptedException { CompletableFuture.runAsync(() -\u003e { // Running in: ForkJoinPool.commonPool-worker-1 System.out.println(\"Running in: \" + Thread.currentThread().getName()); }); // Sleep to allow async task to execute try { Thread.sleep(100); } catch (InterruptedException e) { } } } import java.util.concurrent.*; class Main { public static void main(String[] args) throws ExecutionException, InterruptedException { ExecutorService executor = Executors.newFixedThreadPool(5); CompletableFuture.runAsync(() -\u003e // Custom pool: pool-1-thread-1 System.out.println(\"Custom pool: \" + Thread.currentThread().getName()), executor); } } The main difference between CompletableFuture.get() and CompletableFuture.join() is exception handling. get() throws checked exceptions (ExecutionException, InterruptedException), requiring explicit handling, while join() throws an unchecked CompletionException, eliminating the need for explicit exception handling.\nThe main differences between thenRun(), thenAccept(), and thenApply are\nthenRun() runs a task after previous stage completes, but does not take its result as input. thenAccept() runs a task after previous stage completes and consumes its result. thenApply() runs a task after previous stage completes and transform its result. CompletableFuture.supplyAsync(() -\u0026gt; \u0026#34;Task Completed\u0026#34;) .thenRun(() -\u0026gt; System.out.println(\u0026#34;Follow-up action executed!\u0026#34;)); CompletableFuture.supplyAsync(() -\u0026gt; \u0026#34;Hello, World!\u0026#34;) .thenAccept(result -\u0026gt; System.out.println(\u0026#34;Result: \u0026#34; + result)); CompletableFuture\u0026lt;String\u0026gt; future = CompletableFuture.supplyAsync(() -\u0026gt; \u0026#34;Hello\u0026#34;) .thenApply(result -\u0026gt; result + \u0026#34;, World!\u0026#34;); System.out.println(future.join()); // Output: Hello, World! Method Takes Previous Result? Returns a Value? Use Case thenRun ❌ No ❌ No (Void) Just run a task after completion thenAccept ✅ Yes ❌ No (Void) Consume the result without returning a new one thenApply ✅ Yes ✅ Yes (R) Transform the result and return a new value Java Locks Optimistic Lock vs. Pessimistic Lock Optimistic Lock assumes minimal contention, allowing multiple threads to read and write data concurrently. Instead of using locks, it relies on versioning or CAS (Compare-And-Swap) to detect conflicts during updates. If a conflict is detected (i.e., another thread has modified the data), the operation is retried. It is particularly effective in high-read, low-write scenarios.\nSHOW CODE Use versioning in SQL Use CAS in Java # Use versioning in SQL UPDATE products SET stock = stock - 1, version = version + 1 WHERE id = 1 AND version = 5; import java.util.concurrent.*; import java.util.concurrent.atomic.AtomicInteger; class Main { public static void main(String[] args) throws ExecutionException, InterruptedException { AtomicInteger count = new AtomicInteger(0); int expectedValue, newValue; do { expectedValue = count.get(); newValue = expectedValue + 1; } while (!count.compareAndSet(expectedValue, newValue)); System.out.println(\"Updated Count: \" + count.get()); } } Pessimistic Lock assumes high contention and prevents concurrent modification by blocking the resource. Other threads must wait until the lock is released. It is suitable for high-write, low-read scenerios. In Java, the synchronized and ReentrantLock are implementations of pessimistic lock.\nSHOW CODE synchronized ReentrantLock class PessimisticLockExample { private int count = 0; public synchronized void increment() { count++; } } import java.util.concurrent.locks.ReentrantLock; public class PessimisticLockExample { private int count = 0; private final ReentrantLock lock = new ReentrantLock(); public void increment() { lock.lock(); try { count++; } finally { lock.unlock(); } } } synchronized Related Problems SHOW CODE Java class Phone { public synchronized void sendEmail() { System.out.println(\"send email\"); } public synchronized void sendSMS() { System.out.println(\"send SMS\"); } } class Main { public static void main(String[] args) { Phone phone = new Phone(); new Thread(() -\u003e { phone.sendEmail(); }, \"A\").start(); // Ensure thread A starts first try { TimeUnit.MILLISECONDS.sleep(300); } catch (InterruptedException e) { e.printStackTrace(); } new Thread(() -\u003e { phone.sendSMS(); }, \"B\").start(); } } The above code first outputs send email, followed by send SMS. This happens because both sendEmail() and sendSMS() are synchronized methods that lock the same object. As a result, the thread that acquires the lock first executes first, while other threads must wait until the lock is released.\nSHOW CODE Java class Phone { public synchronized void sendEmail() { try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"send email\"); } public synchronized void sendSMS() { System.out.println(\"send SMS\"); } } class Main { public static void main(String[] args) { Phone phone = new Phone(); new Thread(() -\u003e { phone.sendEmail(); }, \"A\").start(); // Ensure thread A starts first try { TimeUnit.MILLISECONDS.sleep(300); } catch (InterruptedException e) { e.printStackTrace(); } new Thread(() -\u003e { phone.sendSMS(); }, \"B\").start(); } } The above code first outputs send email, followed by send SMS. This happens because both sendEmail() and sendSMS() are synchronized methods that lock the same object and executes sleep() method doesn\u0026rsquo;t release a lock. Therefore, the thread that acquires the lock first executes first, while other threads must wait until the lock is released.\nSHOW CODE Java class Phone { public synchronized void sendEmail() { try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"send email\"); } public synchronized void sendSMS() { System.out.println(\"send SMS\"); } public void hello() { System.out.println(\"hello\"); } } class Main { public static void main(String[] args) { Phone phone = new Phone(); new Thread(phone::sendEmail, \"A\").start(); // Ensure thread A starts first try { TimeUnit.MILLISECONDS.sleep(300); } catch (InterruptedException e) { e.printStackTrace(); } new Thread(() -\u003e { phone.hello(); }, \"B\").start(); } } The above code outputs hello immediately, followed by send email. This is because the hello() method is not synchronized and does not require a lock, allowing it to execute without waiting.\nSHOW CODE Java import java.util.concurrent.TimeUnit; class Phone { public synchronized void sendEmail() { try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"send email\"); } public synchronized void sendSMS() { System.out.println(\"send SMS\"); } } class Main { public static void main(String[] args) { Phone phone1 = new Phone(); Phone phone2 = new Phone(); new Thread(() -\u003e { phone1.sendEmail(); }, \"A\").start(); // Ensure thread A starts first try { TimeUnit.MILLISECONDS.sleep(300); } catch (InterruptedException e) { e.printStackTrace(); } new Thread(() -\u003e { phone2.sendSMS(); }, \"B\").start(); } } The above code outputs send SMS first, followed by send email. This happens because the synchronized keyword locks the object instances (phone1 and phone2), not the class itself. Since phone1 and phone2 are different objects, their locks do not interfere with each other.\nIn this case, Thread A starts first and acquires the lock on phone1, but sleep for 3 seconds inside the sendEmail() method. Meanwhile, Thread B starts shortly after and acquires the lock on phone2. Since Thread B does not need to wait for Thread A to release its lock (as they operate on different objects), it executes sendSMS() immediately. As a result, Thread B outputs send SMS first, while Thread A outputs send email after its sleep period ends.\nSHOW CODE Java import java.util.concurrent.TimeUnit; class Phone { public static synchronized void sendEmail() { try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"send email\"); } public static synchronized void sendSMS() { System.out.println(\"send SMS\"); } } class Main { public static void main(String[] args) { Phone phone = new Phone(); new Thread(() -\u003e { phone.sendEmail(); }, \"A\").start(); // Ensure thread A starts first try { TimeUnit.MILLISECONDS.sleep(300); } catch (InterruptedException e) { e.printStackTrace(); } new Thread(() -\u003e { phone.sendSMS(); }, \"B\").start(); } } The above code outputs send email first, followed by send SMS. This happens because the static synchronized keyword locks the Phone.class object, not individual instances of the class. Since both methods (sendEmail and send SMS) are static synchronized, they share the same lock on the Phone.class object. As a result, their execution is sequential.\nSHOW CODE Java import java.util.concurrent.TimeUnit; class Phone { public static synchronized void sendEmail() { try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"send email\"); } public static synchronized void sendSMS() { System.out.println(\"send SMS\"); } } class Main { public static void main(String[] args) { Phone phone1 = new Phone(); Phone phone2 = new Phone(); new Thread(() -\u003e { phone1.sendEmail(); }, \"A\").start(); // Ensure thread A starts first try { TimeUnit.MILLISECONDS.sleep(300); } catch (InterruptedException e) { e.printStackTrace(); } new Thread(() -\u003e { phone2.sendSMS(); }, \"B\").start(); } } The above code outputs send email first, followed by send SMS. Even though there are two different objects (phone1 and phone2), the static synchronized keyword locks the Phone.class object, not the individual instances. This means that both sendEmail() and sendSMS() share the same lock at the class level, ensuring sequential execution.\nSHOW CODE Java import java.util.concurrent.TimeUnit; class Phone { public static synchronized void sendEmail() { try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"send email\"); } public synchronized void sendSMS() { System.out.println(\"send SMS\"); } } class Main { public static void main(String[] args) { Phone phone = new Phone(); new Thread(() -\u003e { phone.sendEmail(); }, \"A\").start(); // Ensure thread A starts first try { TimeUnit.MILLISECONDS.sleep(300); } catch (InterruptedException e) { e.printStackTrace(); } new Thread(() -\u003e { phone.sendSMS(); }, \"B\").start(); } } The above code outputs send SMS first, followed by send email. This happens because the synchronized keyword locks individual object instance, while static synchronized locks the class-level object. In this case, sendSMS() locks the phone object, and sendEmail() locks the Phone.class object. Since these locks are independent, Thread B does not need to wait for Thread A to release its lock. As a result, send SMS is printed first, while send email is printed after the 3-second sleep.\nSHOW CODE Java import java.util.concurrent.TimeUnit; class Phone { public static synchronized void sendEmail() { try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"send email\"); } public static synchronized void sendSMS() { System.out.println(\"send SMS\"); } public void hello() { System.out.println(\"hello\"); } } class Main { public static void main(String[] args) { Phone phone1 = new Phone(); Phone phone2 = new Phone(); new Thread(() -\u003e { phone1.sendEmail(); }, \"A\").start(); // Ensure thread A starts first try { TimeUnit.MILLISECONDS.sleep(300); } catch (InterruptedException e) { e.printStackTrace(); } new Thread(() -\u003e { phone2.hello(); phone2.sendSMS(); }, \"B\").start(); } } The above code outputs hello first, followed by send email and send SMS. This is because sendEmail() and sendSMS() are both static synchronized, meaning they lock the Phone.class object, enforcing sequential execution. In contrast, the hello() method is a regular method that does not require a lock, allowing it to execute immediately.\nsynchronized Byte Code Analysis SHOW CODE Source Code Source Code class Main { private final Object mtx = new Object(); public void f() { synchronized (mtx) { System.out.println(\"hello...\"); } } } public void f(); Code: 0: aload_0 1: getfield #7 // Field mtx:Ljava/lang/Object; 4: dup 5: astore_1 🌟 6: monitorenter 7: getstatic #13 // Field java/lang/System.out:Ljava/io/PrintStream; 10: ldc #19 // String hello... 12: invokevirtual #21 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 15: aload_1 🌟 16: monitorexit 17: goto 25 20: astore_2 21: aload_1 🌟 22: monitorexit 23: aload_2 24: athrow 25: return From the above bytecode, the synchronized block translates into monitorenter and monitorexit instructions. The lock is acquired before entering the block and released before exiting. The second monitorexit ensures that the lock is properly released if an exception occurs, as shown in the following code:\nSHOW CODE Source Code Byte Code class Main { private final Object mtx = new Object(); public void f() { synchronized (mtx) { System.out.println(\"hello...\"); throw new RuntimeException(\"Exception occurred\"); } } } public void f(); Code: 0: aload_0 1: getfield #7 // Field mtx:Ljava/lang/Object; 4: dup 5: astore_1 🌟 6: monitorenter 7: getstatic #13 // Field java/lang/System.out:Ljava/io/PrintStream; 10: ldc #19 // String hello... 12: invokevirtual #21 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 15: new #27 // class java/lang/RuntimeException 18: dup 19: ldc #29 // String Exception occurred 21: invokespecial #31 // Method java/lang/RuntimeException.\"\u0026lt;init\u0026gt;\":(Ljava/lang/String;)V 24: athrow 25: astore_2 26: aload_1 🌟 27: monitorexit 28: aload_2 29: athrow SHOW CODE Source Code Byte Code class Main { public synchronized void f() { System.out.println(\"hello...\"); } public static synchronized void m() { System.out.println(\"HELLO...\"); } } public synchronized void f(); descriptor: ()V flags: (0x0021) ACC_PUBLIC, 🌟ACC_SYNCHRONIZED🌟 Code: stack=2, locals=1, args_size=1 0: getstatic #7 // Field java/lang/System.out:Ljava/io/PrintStream; 3: ldc #13 // String hello... 5: invokevirtual #15 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 8: return LineNumberTable: line 3: 0 line 4: 8 public static synchronized void m(); descriptor: ()V flags: (0x0029) ACC_PUBLIC, 🌟ACC_STATIC, ACC_SYNCHRONIZED🌟 Code: stack=2, locals=0, args_size=0 0: getstatic #7 // Field java/lang/System.out:Ljava/io/PrintStream; 3: ldc #21 // String HELLO... 5: invokevirtual #15 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 8: return LineNumberTable: line 7: 0 line 8: 8 From the above bytecode, the JVM checks if the ACC_SYNCHRONIZED flag is set. If the flag is present, the thread acquires the appropriate monitor lock before executing the method. For instance methods, the lock is acquired on the object instance (this), while for static methods, the lock is acquired on the class object (e.g., Main.class). After the method completes execution, the thread releases the lock. The ACC_STATIC flag is used to determine whether the method is static, which in turn determines whether the lock is applied at the class level or the instance level.\nWhy any object in Java can be a lock?\nAny object in Java can be a lock because every object has an intrinsic monitor lock managed by the JVM. The ObjectMonitor structure is part of the JVM\u0026rsquo;s implementation of this mechanism, tracking details like the lock owner, EntryList, etc. For example, when a thread calls synchronized(obj), the JVM checks the ObjectMonitor associated with obj. If the lock is available, the thread acquires it and sets itself as the owner. If the lock is held by another thread, the current thread waits in the EntryList. When the lock is released, the JVM wakes up a waiting thread (if any) to acquire the lock.\nObjectMonitor() { _header = NULL; _count = 0; _waiters = 0; _recursions = 0; _object = NULL; _owner = NULL; _MailSet = NULL; _MailSetLock = 0; _Responsible = NULL; _succ = NULL; _cxq = NULL; FreeNext = NULL; _EntryList = NULL; _SpinFreq = 0; _SpinClock = 0; OwnerIsThread = 0; _previous_owner_tid = 0; } Fair Lock vs. Unfair Lock In Java, locks can be calssified into fair locks and unfair locks based on their approach to thread scheduling. A fair lock ensures that threads acquire the lock in the exact order they requested it, following a first-come, first-served priciple. While this prevents thread starvation, it incurs additional overhead to maintain the order of threads. On the other hand, an unfair lock does not guarantee any specific order for thread access. A thread can acquire the lock even if it arrived later than others. This eliminates the need to maintain a strict order, improving efficiency, but it may result in thread starvation, where some threads could wait indefinitely for access.\nSHOW CODE Java import java.util.concurrent.locks.ReentrantLock; public class Main { private static final ReentrantLock unfairLock = new ReentrantLock(); // Unfair lock private static final ReentrantLock fairLock = new ReentrantLock(true); // Fair lock public static void main(String[] args) { System.out.print(\"Testing Unfair Lock: \"); testLock(unfairLock); System.out.print(\"Testing Fair Lock: \"); testLock(fairLock); } private static void testLock(ReentrantLock lock) { long startTime = System.currentTimeMillis(); Runnable task = () -\u003e { for (int i = 0; i \u003c 10000; i++) { lock.lock(); try { // Simulate work } finally { lock.unlock(); } } }; Thread[] threads = new Thread[10]; for (int i = 0; i \u003c threads.length; i++) { threads[i] = new Thread(task); threads[i].start(); } for (Thread thread : threads) { try { thread.join(); } catch (InterruptedException e) { e.printStackTrace(); } } long endTime = System.currentTimeMillis(); System.out.println(\"Time taken: \" + (endTime - startTime) + \" ms\"); } } SHOW OUTPUT Output Testing Unfair Lock: Time taken: 11 ms Testing Fair Lock: Time taken: 560 ms Recursive Lock A recursive lock in Java allows a thread to acquire the same lock multiple times without causing a deadlock. It is particularly useful in scenarios where a thread holding a lock calls another method or enters a synchronized block that requires the same lock. By default, the synchronized keyword and ReentrantLock class support recursive locking mechanism.\nThe recursive lock maintains a hold count, which tracks how many times a thread has acquired the lock. Each time the thread acquires the lock, the hold count is incremented, and it is decremented when the lock is released. The lock is fully released only when the hold count reaches zero.\nUnder the hood, when the monitorenter command is executed, the JVM checks the MonitorObject\u0026rsquo;s _count field. If _count is zero, it means the lock is not held by any other thread. In this case, the JVM sets the _owner field to the current thread and increments the _count. If _count is not zero and the _owner is the current thread, the JVM increments the _count (indicating reentrancy). Otherwise, if the lock is held by another thread, the current thread must wait until the lock is released (i.e., _count reaches zero).\nWhen the monitorexit command is executed, the JVM decrements the _count. Once _count reaches zero, the lock is considered fully released, and the _owner field is cleared, allowing other threads to acquire the lock.\nSHOW CODE Java import java.util.concurrent.locks.ReentrantLock; public class Main { private static final ReentrantLock lock = new ReentrantLock(); public static void main(String[] args) { recursiveMethod(3); } public static void recursiveMethod(int count) { lock.lock(); // Acquire the lock try { System.out.println(Thread.currentThread().getName() + \" acquired the lock. Hold count: \" + lock.getHoldCount()); if (count \u003e 0) { recursiveMethod(count - 1); // Recursive call } } finally { lock.unlock(); // Release the lock System.out.println(Thread.currentThread().getName() + \" released the lock. Hold count: \" + lock.getHoldCount()); } } } SHOW OUTPUT Output main acquired the lock. Hold count: 1 main acquired the lock. Hold count: 2 main acquired the lock. Hold count: 3 main acquired the lock. Hold count: 4 main released the lock. Hold count: 3 main released the lock. Hold count: 2 main released the lock. Hold count: 1 main released the lock. Hold count: 0 Deadlock A deadlock is a situation where two or more threads are permanently blcoked, each waiting for a resource held by another, preventing further progress. For a deadlock to occur, four conditions must be met simultaneously: mutual exclusion, hold and wait, no preemption, and circular wait.\nMutual Exclusion: A resource must be non-sharable, meaning only one thread can use it at a time. Hold and Wait: A thread holding at least one resource must be waiting to acquire additional resources held by other threads. No Preemption: Resources cannot be forcibly taken from a thread; they must be released voluntarily. Circular Wait: A circular chain of two or more threads must exist, where each thread is waiting for a resource held by the next in the chain. To detect a deadlock in Java, use the jps command to get the process ID, then run jstack process_id to analyze thread states and identify deadlocks.\nSHOW CODE Deadlock Detecting a Deadlock public class Main { private static final Object lock1 = new Object(); private static final Object lock2 = new Object(); public static void main(String[] args) { Thread thread1 = new Thread(() -\u003e { synchronized (lock1) { System.out.println(\"Thread 1: Holding lock 1...\"); try { Thread.sleep(100); // Simulate work } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"Thread 1: Waiting for lock 2...\"); synchronized (lock2) { System.out.println(\"Thread 1: Acquired lock 2!\"); } } }); Thread thread2 = new Thread(() -\u003e { synchronized (lock2) { System.out.println(\"Thread 2: Holding lock 2...\"); try { Thread.sleep(100); // Simulate work } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"Thread 2: Waiting for lock 1...\"); synchronized (lock1) { System.out.println(\"Thread 2: Acquired lock 1!\"); } } }); thread1.start(); thread2.start(); } } $ jps 76995 Launcher 76996 Main 77127 Jps 2327 Main -------------- $ jstack 76996 \"Thread-0\": at dev.signalyu.warmup.Main.lambda$main$0(Main.java:18) 🌟 - waiting to lock \u003c0x000000070ffce280\u003e (a java.lang.Object) 🌟 - locked \u003c0x000000070ffce270\u003e (a java.lang.Object) at dev.signalyu.warmup.Main$$Lambda$14/0x000000012d001208.run(Unknown Source) at java.lang.Thread.run(java.base@17.0.9/Thread.java:842) \"Thread-1\": at dev.signalyu.warmup.Main.lambda$main$1(Main.java:33) 🌟 - waiting to lock \u003c0x000000070ffce270\u003e (a java.lang.Object) 🌟 - locked \u003c0x000000070ffce280\u003e (a java.lang.Object) at dev.signalyu.warmup.Main$$Lambda$15/0x000000012d001428.run(Unknown Source) at java.lang.Thread.run(java.base@17.0.9/Thread.java:842) Found 1 deadlock. 🌟 Thread Interruption In Java, thread interruption is a mechanism that allows one thread to signal another to stop its execution. The three common approaches to interrupt a thread are using a volatile flag, an AtomicBoolean, or the interrupt() method.\nSHOW CODE volatile AtomicBoolean interrupt() import java.util.concurrent.TimeUnit; public class Main { private static volatile boolean isStop = false; public static void main(String[] args) { new Thread(() -\u003e { while (!isStop) { try { TimeUnit.MILLISECONDS.sleep(500); System.out.println(\"isStop: \" + isStop); } catch (InterruptedException e) { throw new RuntimeException(e); } } System.out.println(\"isStop --\u003e \" + isStop); }, \"t1\").start(); try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } // Signal threads to stop new Thread(() -\u003e { isStop = true; }, \"t2\").start(); } } import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicBoolean; public class Main { private static final AtomicBoolean atomicBoolean = new AtomicBoolean(false); public static void main(String[] args) { new Thread(() -\u003e { while (!atomicBoolean.get()) { try { TimeUnit.MILLISECONDS.sleep(500); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(\"Atomic Boolean: \" + atomicBoolean); } System.out.println(\"Atomic Boolean --\u003e \" + atomicBoolean); }, \"t1\").start(); try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } // Signal threads to stop new Thread(() -\u003e { atomicBoolean.set(true); }, \"t2\").start(); } } public class Main { private static volatile boolean isStop = false; public static void main(String[] args) { Thread t1 = new Thread(() -\u003e { while (!Thread.currentThread().isInterrupted()) { System.out.println(\"Is interrupted: \" + Thread.currentThread().isInterrupted()); } System.out.println(\"Is interrupted --\u003e \" + Thread.currentThread().isInterrupted()); }, \"t1\"); t1.start(); try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } // Signal threads to stop new Thread(() -\u003e { t1.interrupt(); }, \"t2\").start(); } } SHOW OUTPUT volatile AtomicBoolean interrupt() isStop: false isStop: true isStop --\u003e true Atomic Boolean: false Atomic Boolean: true Atomic Boolean --\u003e true ...... Is interrupted: false Is interrupted: false Is interrupted: false Is interrupted --\u003e true The common methods for managing thread interruption in Java include interrupt(), interrupted(), and isInterrupted():\ninterrupt(): An instance method that sets the thread\u0026rsquo;s interrupted status to true. It does not forcibly stop the thread. If the thread is blocked (e.g., in sleep(), wait(), or join()), it throws an InterruptedException. interrupted(): A static method that checks if the current thread has been interrupted. If it has, the method resets the interrupted status to false. isInterrupted(): An instance method that checks if the thread has been interrupted without resetting its interrupted status. What\u0026rsquo;s the following code output?\nSHOW CODE (Wrong Interruption) Java import java.util.concurrent.TimeUnit; public class Main { public static void main(String[] args) { Thread t1 = new Thread(() -\u003e { while (true) { if (Thread.currentThread().isInterrupted()) { System.out.println(\"isInterrupted --\u003e true\"); break; } try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"INTERRUPTED...\"); } }, \"t1\"); t1.start(); try { TimeUnit.SECONDS.sleep(3); // Sleep 3 seconds } catch (InterruptedException e) { e.printStackTrace(); } new Thread(() -\u003e { t1.interrupt(); // Set interrupted status of thread 't1' to true }, \"t2\").start(); } } SHOW OUTPUT (Wrong Interruption) Output INTERRUPTED... INTERRUPTED... java.lang.InterruptedException: sleep interrupted at java.base/java.lang.Thread.sleep(Native Method) at dev.signalyu.warmup.Main.lambda$main$0(Main.java:14) at java.base/java.lang.Thread.run(Thread.java:842) INTERRUPTED... INTERRUPTED... ...... When a thread is interrupted while blocked, the blocking method throws an InterruptedException and clears the interrupted status.\nSHOW CODE (Correct Interruption) Java import java.util.concurrent.TimeUnit; public class Main { public static void main(String[] args) { Thread t1 = new Thread(() -\u003e { while (true) { if (Thread.currentThread().isInterrupted()) { System.out.println(\"isInterrupted --\u003e true\"); break; } try { Thread.sleep(1000); } catch (InterruptedException e) { Thread.currentThread().interrupt(); // 🌟🌟🌟 Restore its interrupted status 🌟🌟🌟 e.printStackTrace(); } System.out.println(\"INTERRUPTED...\"); } }, \"t1\"); t1.start(); try { TimeUnit.SECONDS.sleep(3); // Sleep 3 seconds } catch (InterruptedException e) { e.printStackTrace(); } new Thread(() -\u003e { t1.interrupt(); // Set interrupted status of thread 't1' to true }, \"t2\").start(); } } SHOW OUTPUT (Correct Interruption) Output INTERRUPTED... INTERRUPTED... java.lang.InterruptedException: sleep interrupted at java.base/java.lang.Thread.sleep(Native Method) at dev.signalyu.warmup.Main.lambda$main$0(Main.java:14) at java.base/java.lang.Thread.run(Thread.java:842) INTERRUPTED... isInterrupted --\u003e true After restoring the thread\u0026rsquo;s interrupted status by adding Thread.currentThread().interrupt();, it exits the while loop gracefully.\nLockSupport wait()/nofity() related problems There are two common issues when using wait() and notify() in Java:\nSynchronization Requirement: Both wait() and notify() must be called within a synchronized block or method. This is because these methods rely on the object\u0026rsquo;s intrinsic lock (monitor). If they are called outside a synchronized context, the program will throw an IllegalMonitorStateException. Missed Notifications: If notify() is called before wait(), the notification will be missed, and the thread calling wait() may block indefinitely. This happens because notify() does not have any effect if no thread is currently waiting on the object\u0026rsquo;s monitor. SHOW CODE Synchronization Requirement Missed Notifications public class Main { private static final Object lock = new Object(); public static void main(String[] args) { Thread t1 = new Thread(() -\u003e { // synchronized (lock) { try { System.out.println(\"Thread 1 is waiting...\"); lock.wait(); // Thread 1 waits } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"Thread 1 is resumed.\"); // } }); Thread t2 = new Thread(() -\u003e { // synchronized (lock) { System.out.println(\"Thread 2 is notifying...\"); lock.notify(); // Thread 2 notifies // } }); t1.start(); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } t2.start(); } } public class Main { private static final Object lock = new Object(); public static void main(String[] args) { Thread t1 = new Thread(() -\u003e { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } // Acquire the lock after 1 second, notify() executes first synchronized (lock) { try { System.out.println(\"Thread 1 is waiting...\"); lock.wait(); // Thread 1 waits } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"Thread 1 is resumed.\"); } }); Thread t2 = new Thread(() -\u003e { synchronized (lock) { System.out.println(\"Thread 2 is notifying...\"); lock.notify(); // Thread 2 notifies } }); t1.start(); t2.start(); } } SHOW OUTPUT Synchronization Requirement Missed Notifications Thread 1 is waiting... Exception in thread \"Thread-0\" java.lang.IllegalMonitorStateException: current thread is not owner at java.base/java.lang.Object.wait(Native Method) at java.base/java.lang.Object.wait(Object.java:338) at dev.signalyu.warmup.Main.lambda$main$0(Main.java:11) at java.base/java.lang.Thread.run(Thread.java:842) Thread 2 is notifying... Exception in thread \"Thread-1\" java.lang.IllegalMonitorStateException: current thread is not owner at java.base/java.lang.Object.notify(Native Method) at dev.signalyu.warmup.Main.lambda$main$1(Main.java:22) at java.base/java.lang.Thread.run(Thread.java:842) Thread 2 is notifying... Thread 1 is waiting... // WAIT INDEFINITELY await()/signal() related problems Similar to wait()/notify(), when using await()/signal() from the Condition interface, the thread must hold the associated lock. If the lock is not held, the program will throw an IllegalMonitorStateException. Additionally, if signal() is called before await(), the notification will be missed, and the thread calling await() may wait indefinitely. To avoid this, always use a loop to recheck the condition after waking up from await(). This ensures that thread only proceeds when the condition is truly met, even if a spurious wakeup occurs or notification is missed.\nSHOW CODE Synchronization Requirement Missed Notifications import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.ReentrantLock; public class Main { private static final ReentrantLock lock = new ReentrantLock(); private static final Condition condition = lock.newCondition(); public static void main(String[] args) { Thread t1 = new Thread(() -\u003e { // lock.lock(); try { System.out.println(\"Thread 1 is waiting...\"); condition.await(); // Thread 1 waits System.out.println(\"Thread 1 is resumed.\"); } catch (InterruptedException e) { e.printStackTrace(); } finally { // lock.unlock(); } }); Thread t2 = new Thread(() -\u003e { // lock.lock(); try { System.out.println(\"Thread 2 is signaling...\"); condition.signal(); // Thread 2 signals } finally { // lock.unlock(); } }); t1.start(); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } t2.start(); } } import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.ReentrantLock; public class Main { private static final ReentrantLock lock = new ReentrantLock(); private static final Condition condition = lock.newCondition(); public static void main(String[] args) { Thread t1 = new Thread(() -\u003e { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } // Acquire the lock after 1 second, signal() executes first lock.lock(); try { System.out.println(\"Thread 1 is waiting...\"); condition.await(); // Thread 1 waits System.out.println(\"Thread 1 is resumed.\"); } catch (InterruptedException e) { e.printStackTrace(); } finally { lock.unlock(); } }); Thread t2 = new Thread(() -\u003e { lock.lock(); try { System.out.println(\"Thread 2 is signaling...\"); condition.signal(); // Thread 2 signals } finally { lock.unlock(); } }); t1.start(); t2.start(); } } SHOW OUTPUT Synchronization Requirement Missed Notifications Thread 1 is waiting... Exception in thread \"Thread-0\" java.lang.IllegalMonitorStateException at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.enableWait(AbstractQueuedSynchronizer.java:1516) at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1611) at dev.signalyu.warmup.Main.lambda$main$0(Main.java:15) at java.base/java.lang.Thread.run(Thread.java:842) Thread 2 is signaling... Exception in thread \"Thread-1\" java.lang.IllegalMonitorStateException at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.signal(AbstractQueuedSynchronizer.java:1473) at dev.signalyu.warmup.Main.lambda$main$1(Main.java:28) at java.base/java.lang.Thread.run(Thread.java:842) Thread 2 is signaling... Thread 1 is waiting... // WAIT INDEFINITELY LockSupport: park()/unpark(Thread) LockSupport is a utility class in Java that provides a low-level mechanism for thread synchronization. Unlike synchronized blocks or explicit Lock objects, LockSupport does not require explicit locking and unblocking. Instead, it operates using a permit mechanism, which makes it more flexible and lightweight. The most commonly used methods in LockSupport are park() and unpark(Thread). The park() method blocks the current thread if the permit is unavailable, while the unpark(Thread) method makes the permit available for a specific thread, unblocking if it was parked.\nThe key points about LockSupport include:\nThe permit is a binary semaphore, meaning it can either be available or unavailable. If a permit is available when park() is called, the thread continues execution without blocking. If no permit is available, the thread blocks until one is made available via unpark(). Unlike synchronized and Lock, LockSupport does not suffer from spurious wakeups. This means that a thread will only unblock when explicitly unparked, providing more predictable behavior compared to wait()/notify() or await()/signal(). The unpark(Thread) method targets a specific thread, making it more precise than notify() or signal(), which wake up any waiting thread. SHOW CODE park()/unpark(Thread) wait()/notify() await()/signal() import java.util.concurrent.locks.LockSupport; public class Main { public static void main(String[] args) { Thread t1 = new Thread(() -\u003e { System.out.println(\"Thread 1 is parking...\"); LockSupport.park(); // Thread 1 parks System.out.println(\"Thread 1 is unparked.\"); }); Thread t2 = new Thread(() -\u003e { System.out.println(\"Thread 2 is unparking Thread 1...\"); LockSupport.unpark(t1); // Thread 2 unparks Thread 1 }); t1.start(); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } t2.start(); } } public class Main { private static final Object lock = new Object(); public static void main(String[] args) { Thread t1 = new Thread(() -\u003e { synchronized (lock) { try { System.out.println(\"Thread 1 is waiting...\"); lock.wait(); // Thread 1 waits } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"Thread 1 is resumed.\"); } }); Thread t2 = new Thread(() -\u003e { synchronized (lock) { System.out.println(\"Thread 2 is notifying...\"); lock.notify(); // Thread 2 notifies } }); t1.start(); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } t2.start(); } } import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.ReentrantLock; public class Main { private static final ReentrantLock lock = new ReentrantLock(); private static final Condition condition = lock.newCondition(); public static void main(String[] args) { Thread t1 = new Thread(() -\u003e { lock.lock(); try { System.out.println(\"Thread 1 is waiting...\"); condition.await(); // Thread 1 waits System.out.println(\"Thread 1 is resumed.\"); } catch (InterruptedException e) { e.printStackTrace(); } finally { lock.unlock(); } }); Thread t2 = new Thread(() -\u003e { lock.lock(); try { System.out.println(\"Thread 2 is signaling...\"); condition.signal(); // Thread 2 signals } finally { lock.unlock(); } }); t1.start(); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } t2.start(); } } SHOW OUTPUT park()/unpark(Thread) wait()/notify() await()/signal() Thread 1 is parking... Thread 2 is unparking Thread 1... Thread 1 is unparked. Thread 1 is waiting... Thread 2 is notifying... Thread 1 is resumed. Thread 1 is waiting... Thread 2 is signaling... Thread 1 is resumed. Java Memory Model The Java Memory Model (JMM) is a specification that governs how threads interact with memory in a multi-threaded environment. It establishes rules that determine how and when change made by one thread to shared variables become visible to other threads, ensuring consistency and predictability in concurrent execution.\nJMM classifies memory into two types: Main Memory and Working Memory. Main Memory is the central storage where all variables, including instance fields, static fields, and array elements, reside. Working Memory, on the other hand, is a thread\u0026rsquo;s local memory that holds copies of variables it accesses. Threads do not interact with main memory directly; instead, they load variables into their working memory and write back updates when necessary. A fundamental concept in JMM is the happens-before relationship, which defines the order of operations between threads to maintain memory consistency. If one action happens-before another, the effects of the first action are guaranteed to be visible to the second. Examples include:\nA write to a volatile variable happens-before every subsequent read of that variable. Unlocking a monitor happens-before the next lock on the same monitor. The key characteristics of JMM include Atomicity, Visibility, and Ordering.\nAtomicity: Certain operations, such as reads and writes to volatile variables, are atomic, meaning they execute as indivisible units. Visibility: Changes made by one thread to shared variables are guaranteed to be seen by other threads under proper synchronization mechanisms. Ordering: JMM defines strict rules for instruction ordering, but without synchronization, the JVM may reorder instructions for optimization, potentially causing unpredictable behavior in a multi-threaded environment. happens-before The happens-before relationship in the Java Memory Model (JMM) establishes rules that dictate the ordering and visibility of actions in multithreaded programs. It ensures that certain operations performed in one thread become predictably visible to another, preventing issues like instruction reordering and inconsistent data access. Below are the eight key priciples of the happens-before relationship:\nProgram Order Rule: Within a single thread, actions occur in program order. For example, earlier statements happen-before later ones. int a = 10; // Happens-before int b = a + 5; // This sees the updated value of `a` Monitor Lock Rule: An unlock (unlock()) on a monitor lock happens-before any subsequent lock (lock()) on the same monitor. synchronized (lock) { sharedVar = 10; // Happens-before the next lock } synchronized (lock) { System.out.println(sharedVar); // Guaranteed to see updated value } Volatile Variable Rule: A write to a volatile variable happens-before any subsequent read of that same variable. private volatile boolean flag = false; flag = true; // Happens-before the next read System.out.println(flag); // Guaranteed to see true Thread Start Rule: A call to Thread.start() on a new thread happens-before any actions in that thread. Thread t = new Thread(() -\u0026gt; System.out.println(\u0026#34;Running\u0026#34;)); t.start(); // Happens-before the thread executes the print statement Thread Termination Rule: All actions in a thread happen-before other threads detecting its termination. In other words, after a thread terminates, all its actions are visible to the thread that joins it. Thread t = new Thread(() -\u0026gt; counter = 100); t.start(); t.join(); // Ensures all writes in t happen-before main thread continues System.out.println(counter); // Guaranteed to see 100 A call to Thread.interrupt() happens-before the interrupted thread detects the interruption via isInterrupted() or InterruptedException. Thread t = new Thread(() -\u0026gt; { while (!Thread.currentThread().isInterrupted()) { // Looping until interrupted } }); t.start(); t.interrupt(); // Happens-before the thread detects the interruption Final Field Rule: Writes to final fields in a constructor happen-before the object is seen by any other thread. class Example { final int x; Example() { x = 42; // Happens-before any other thread sees this object } } If action A happens-before action B, and action B happens-before action C, then action A happens-before action C. volatile int a = 0; a = 1; // A happens-before B (write to volatile) int b = a; // B happens-before C (read from volatile) volatile ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/multithreading-and-concurrency/1-multithreading-and-concurrency/","summary":"Introduction to Multithreading Program, Process, and Thread A program is a static set of instructions that stores on a disk. A process is an instance of a program that is currently being executed by the operating system. A thread is a small unit of process that can be scheduled and executed by the operating system. In simpler terms, a program is the code, a process is the excution of the code, a thread is a unit of execution within a process.","title":"Multithreading \u0026 Concurrency"},{"content":"Introduction to System Design SHOW CONTENTS System Design is the process of defining the architecture, components, modules, interfaces, and data for a system to fulfill specific business requirements, while ensuring scalability, maintainability, and performance.\nLoad Balancing SHOW CONTENTS In System Design, Load Balancing refers to the practice of distributing incoming network traffic or workload across multiple servers or resources to optimize resource use and ensure high availability.\nTo fullly leverage scalability and redundency, load balancing can occur at different layers: between user and the web server, between web server and an internal platform serve, between internal platform server and database as illustrated in the following image:\nThe typical process of load balancing involves the following steps:\nThe load balancer recerves a request from the client. The load balancer evaluates the request and routes it to a server based on the chosen load balancing algorithm. The selected server or resource processes the request and sends the response back to the load balancer. The load balancer receives the response and forwards it to the client. Load Balancing Algorithms SHOW CONTENTS A load balancing algorithm is a method used by a load balancer to determine how an incoming request should be distributed across multiple servers. Commonly used load balancing algorithms include Round Robin, Least Connections, Weight Round Robin, Weighted Least Connections, IP Hash, Least Response Time, Random, and Least Bandwidth.\nRound Robin SHOW CONTENTS The Round Robin algorithm distributes requests evenly across multiple servers in a circular manner. This algorithm does not consider the current load or capabilities of each server. It is commonly used in environments where servers have similar capacity and performance, or in applications where each request can be handled independently.\nLeast Connections SHOW CONTENTS The Least Connections algorithm distributes requests to servers with the fewest active connections. It takes into account the server\u0026rsquo;s current workload, helping to prevent any single server from becoming overwhelmed. This algorithm is particularly useful in scenerios where traffic or workload is unpredictable, servers have varying capabilities, or maintaining session state is important.\nWeighted Round Robin SHOW CONTENTS The Weighted Round Robin algorithm is an enhanced version of Round Robin, where each server is assigned a weight based on its capability and workload. Servers with higher weights process more requests, helping to prevent overloading less powerful servers. This algorithm is ideal for scenarios where servers have varying processing abilities, such as in a database cluster, where nodes with higher processing power can handle more queries.\nWeighted Least Connections SHOW CONTENTS The Weighted Least Connections algorithm is a combination of the Least Connections and the Weighted Round Robin algorithms. It takes into account the number of active connections of each server and the weight assigned to a server based on its capability. Requests are routed to servers based on the load factor, which is commonly calculated using the formular: the number of active connections of a server divided by its weight.\n$$ \\text{Load Factor} = \\frac{\\text{Number of Active Connections}}{\\text{Weight of the Server}} $$\nIP Hash SHOW CONTENTS The IP Hash algorithm routes requests to servers based on a hash of the client\u0026rsquo;s IP address. The load balancer applies a hash function to the client\u0026rsquo;s IP address to calculate the hash value, which is then used to determined which server will handle the current request. If the distribution of client IP addresses is uneven, some servers may receive more requests than others, leading to an imbalanced load. This algorithm is ideal for scenarios where maintaining state is important, such as online shopping carts or user sessions.\nLeast Response Time SHOW CONTENTS The Least Response Time algorithm routes incoming requests to the server with the lowest response time, ensuring efficient resource utilization and optimal client experience. It is ideal for scenerios where low latancy and fast response times are crucial, such as online gaming and financial trading.\nRandom SHOW CONTENTS The Random load balancing algorithm routes incoming requests to servers randomly. It is commonly used in scenarios where the load is relatively uniform and the servers have similar capabilities.\nLeast Bandwidth SHOW CONTENTS The Least Bandwidth algorithm routes incoming requests to the server that is consuming the least amount of bandwidth. It is ideal for applications with high bandwidth usage, such as vedio streaming, file downloads, and large file transfers.\nRedundent Load Balancers SHOW CONTENTS The Single Point of Failure (SPOF) refers to any component in a system or infrastructure that, if it fails, causes the entire system or a significant portion of it to become unavailable. For instance, if a load balancer is responsible for routing all incoming requests to servers, its faulure would result in the entire system or application becoming inoperable. To mitigate this risk, redundent load balancers can be deployed.\nFor example, in an active-passive setup, two load balancers are used, where both are capable of routing traffic and detecting failures. The active load balancer handles all incoming requests, and if it fails, the passive load balancer takes over to ditribute requests, ensuring continuous availability. This approach helps prevent the system from being dependent on a single point of failure, as illustrated in the following diagram.\nAPI Gateway SHOW CONTENTS An API Gateway is a server-side component that acts as a central entry point for clients to access as a collection of microservices. It receives client requests, forwards them to the appropriate microservice, and then returns the response from the server to the client. The API Gateway is responsible for various tasks, such as request routing, authentication, rate limiting.\nThe key difference between an API Gateway and a load balancer lies in their core functions. An API Gateway focuses on routing requests to specific microservices. In contrast, a Load Balancer is responsible for distributing incoming traffic across multiple backend servers. Additionally, while an API Gateway typically deals with requests that target specific APIs identified by unique URLs, a load balancer generally handles requests directed to a single, well-known IP address, distributing those requests to one of serveral backend servers based on load-balancing algorithms.\nKey Characteristics of Distributed System Scalability SHOW CONTENTS Scalability refers to a system\u0026rsquo;s ability to handle increasing workloads. In system design, there are two primary types of scaling: horizontal and vertical. Horizontal scaling involves adding more machines to distribute the load across multiple servers, while vertical scaling typically involves upgrading the hardware of a single machine.\nAvailability SHOW CONTENTS In system design, availability refers to the ability of a system to remain operational even in the face of faulures or high demand. Factors that affect availability include redundency, failover mechanisms, and load balancing. Redundency involves duplicating critical components to ensure that if one fails, another can take over. Failover mechanisms refer to the ability to quickly switch to a backup system during failure. Load balancing distributes requests across multiple servers to prevent any single point from becoming overwhelmed.\nIn distributed systems, there is often a trade-off between availability and consistency. The three common types of consistency models are strong, weak, and eventual consistency. The strong consistency model ensure that all replicas have the same data at all times, which can reduce availability and performance. The weak consistency model allows for temporary inconsistencies between replicas, offering improved availability and performance. The eventual consistency model guarantees that all replicas will eventually converge to the same data, balancing consistency and availability over time.\nMonitoring SHOW CONTENTS Monitoring in distributed systems is crucial for identifying issues and ensuring the overall health of the system. It typically involves four key components: metrics collection, distributed tracing, logging, and anomaly detection.\nMetrics collection involves gathering and analyzing key performance indicators such as latency, throughput, error rates, and resource utilization. This helps identify performance bottlenecks, potential issues, and areas for optimization. Common tools for metrics collection inculde Prometheus, Graphite, and InfluxDB.\nDistributed tracing is a technique for tracking and analyzing requests as they pass through various services, helping identify issues within specific services. Common tools for distributed tracing include Zipkin.\nLogging refers to the collection, centralization, and analysis of logs from all services in a distributed system. It provides valuable insights into system behavior, aiding in debugging and troubleshooting. Tools like the ELK Stack (Elasticsearch, Logstash, Kibana) are used for logging.\nAnomaly detection involves monitoring for unusual behaviors or patterns and notifying the appropriate team when such events occur. Tools like Grafana can be used for anomaly detection in distributed systems.\nCaching Introduction to Caching SHOW CONTENTS In system design, caching is a high-speed storage layer positioned between the application and the original data source, such as a database or a remote web service. The primary goal of caching is to minimize access to the original data source, thereby improving application performance. Caching can be implemented in various forms, including in-memory caching, disk caching, database caching, and CDN caching:\nIn-memory caching stores data directly in the computer\u0026rsquo;s memory, offering faster access than disk storage. Disk caching stores data on disk, which is slower than memory but faster than fetching data from an external source. Database caching stores data within the database itself, reducing the need to access external storage systems. CDN caching stores data on a distributed network of servers, minimizing latency when accessing data from remote locations. Here are some key caching terms:\nCache Hit: Occurs when the requested data is found in the cache. Cache Miss: Happens when the requested data is not found in the cache, requiring a fetch from the original data source. Cache Eviction: The process of removing data from the cache, often to make room for new data based on a predefined cache eviction policy. Cache Staleness: Refers to the situation where the cached data is outdated compared to the original data source. Here are some of the most common types of caching:\nCaching Replacement Policies SHOW CONTENTS When caching data becomes outdated, it should be removed. Therefore, specifying a cache replacement policy is crucial when implementing caching. Common cache replacement policies include: LRU (Least Recently Used), LFU (Least Frequently Used), FIFO (First In, First Out), and Random Replacement.\nLRU (Least Recently Used) removes the least recently accessed data when the cache becomes full. It ensures that data that have been accessed more recently are more likely to be accessed again in the future. LFU (Least Frequently Used) removes the least frequently accessed data when the cache is full. It ensures that data that have been accessed more frequently are more likely to be accessed again in the futrue. FIFO (First In, First Out) removes the oldest data when the cache becomes full. It assumes that the oldest data are least likely to be accessed in the future. Random Replacement removes random data when the cache is full. This policy can be useful when the data access pattern is unpredictable. Cache Invalidation SHOW CONTENTS Cache Invalidation is the process of marking data in the cache as stale or directly removing it from the cache, ensuring that the cache doesn\u0026rsquo;t serve outdated or incorrect data. Common cache invalidation schemes include write-through cache, write-around cache, write-back cache, and write-behind cache.\nWrite-Through Cache: In a write-through scheme, data is written to both the cache and the data store simultaneously. This ensures that the cached always serves the most up-to-date data, but it introduces latency, as each write operation must be performed twice before the data is returned. Write-Around Cache: In a write-around scheme, data is directly written to the underlying data store, bypassing the cache. This prevents the cache from becoming flooded with less frequently accessed data, while ensuring that the data store always holds the most recent data. However, this can result in a cache miss when requesting data that was recently written. Write-Back Cache: In a write-back scheme, data is written only to the cache, and the write operation is immediately confirmed. The data is written to the data store only when the cached data is evicted. This ensures low latency and high throughput but may lead to data loss in the event of a crash, as the data is stored only in the cache. Write-Behind Cache: Similar to the write-back scheme, the write-behind cache writes data to the underlying store after a specified delay. The key difference is that in a write-back cache, data is only written to the data store when necessary (e.g., upon eviction). In contrast, in a write-behind cache, data is written to the data store at regular intervals. Here are some of the most commonly used cache invalidation methods:\nPurge: The purge method removes cached data immediately. When a purge request is received, the cached data is deleted, and the next time the key is requested, the cache fetches a fresh copy from the original data store, stores it, and returns it. Refresh: The refresh method updates the cached data with the latest data from the original data store. This ensures the cache always holds the most up-to-date data. Ban: The ban method blocks access to certain cached data. When a ban command is issued, the key is added to a ban list. From then on, every request is checked against the ban list. If the requested resource matches an invalidation rule, the cache treats it as stale, fetches a fresh copy from the original data store, and updates the cache. Unlike purge, which removes the cache entry immediately, ban simply marks the entry as stale, and the data remains in the cache until it is evicted. Time To Live (TTL) Expiration: This method involves setting a time-to-live (TTL) value for cached data. Once the TTL expires, the data is considered stale. When a request is made, the cache checks the TTL of the cached data and serves it only if if hasn\u0026rsquo;t expired. If expired, the cache fetches the fresh copy from the original data store and returns it. Stale-While-Revalidate: This method serves the cached data to the client immediately when a request is received. Meanwhile, the cache asynchronously updates itself with the latest version of the data from the original data store. This approach ensures a qucik response, even if the cached data is slightly outdated, and is commonly used in CDN caching. Cache Read Strategies SHOW CONTENTS Cache read strategies define how the cache behaves when a cache miss occurs. The most common cache read strategies are read-through and read-aside.\nIn a read-through cache strategy, the cache is responsible for fetching fresh data from the original data store when a cache miss occurs. If the requested data is not found in the cache, the cache automatically retrives the data from the data store, stores it in the cache, and returns it to the client. In a read-aside cache strategy, the application first requests the data from the cache. If the data is found, the cached data is used. However, if the data is not found, the application fetches the data from the underlying data store, updates the cache with the retrived data, and then uses it. Cache Coherence and Cache Consistence SHOW CONTENTS Cache coherence refers to the consistency of data stored in multiple caches that are part of the same system, particularly in multi-core systems. In a distributed system, each cache may store a local copy of shared data. When one cache modifies its copy, all other caches holding a copy of that data must be updated or invalidated to maintain consistency. The most common protocols for achieving cache coherence are write-invalidate and write-update.\nWrite-Invalidate: When a cache writes to its copy of shared data, it broadcasts a message to all other caches, invalidating their copies. When another cache needs the updated data, it fetches the new data from memory or from the cache that made the update. Write-Update: When a cache writes to its copy of shared data, it broadcasts a message to all other caches, prompting them to update their local copies accordingly. Cache consistency focuses on maintaining the consistency of data between the cache and the original data source. Cache consistency models define the rules governing how data is updated and accessed in a distributed system with multiple caches. These models vary in terms of their strictness, and include strict consistency, sequential consistency, casual consistency, and eventual consistency.\nStrict Consistency: In a strict consistency model, any write to a data item is immediately visible to all caches. While this ensures data is always up-to-date, it may lead to performance issues due to the significant synchronization overhead required. Sequential Consistency: In a sequential consistency model, all operations on data items must appear in a specific, sequential order across all caches. This model ensures a predictable order of operations but may not guarantee the exact real-time visibility of changes. Casual Consistency: In a casual consistency model, operations that are casually related (e.g., one operation depends on the outcome of another) are guaranteed to appear in order across multiple caches. Operations that are not casually related can occur in any order. This model strikes a balance between on consistency and performance. Eventual Consistency: In an eventual consistency model, updates to a data item will eventually propagate to all caches, but there is no guarantee regarding the order or timing of these updates. This model offers the best performance but the weakest consistency guarantees, making it ideal for distributed systems where performance and scalability are prioritized over strict consistency. Caching Challenges SHOW CONTENTS The main cache-related issues include Thundering Herd, Cache Penetration, Cache Stampede, and Cache Pollution.\nThundering Herd: This problem arises when a popular piece of data expires, leading to a sundden surge of requests to the original server, resulting in performance degradation. Solutions include staggered expiration times, cache locking, or background updates before expiration.\nCache Penetration: This occurs when multiple requests for non-existent data bypass the cache, querying the original data store directly. Solutions include negative caching (caching \u0026ldquo;not found\u0026rdquo; responses) or using a Bloom Filter to check the existence of data before querying the cache.\nCache Stampede: This happens when multiple requests for the same data arrive after cache expires, causing a heavy load on the original data source. Solutions typically involve request coalescing (letting on request fetch the data while others wait) or implementing a read-through cache, where the cache itself fetches missing data. Cache Pollution: This occurs when less frequently accessed data displaces more frequently accessed data, reducing cache hit rates. To mitigate cache pollution, eviction policies such as LRU (Least Recently Used) or LFU (Least Frequently Used) can be implemented.\nData Partitioning SHOW CONTENTS In system design, data partitioning is a technique used to break large datasets into smaller, more manageable units called partitions. Each partition is independent and contains a subset of the overall data. Common data partitioning methods include horizontal partitioning and vertical partitioning.\nHorizontal partitioning, also known as sharding, involves dividing a database into multiple shards, with each shard containing a subset of rows. These shards are typically stored on different database servers, allowing for parallel processing and improving query execution times. Vertical partitioning divides a database into multiple partitions based on columns, with each partition containing a subset of the columns. This technique is commonly used when some fields are accessed more frequently than others, optimizing performance for specific queries. Data sharding splits table horizontally, here are some common sharding techniques.\nRange-Based Sharding: Data is divided based on a specific range, such as numeric ranges or dates. For example, an e-commerce platform may partition the order table by order date. Hash-Based Sharding: Data is partitioned by applying a hash function to a partition key. The hash value determines which shard will store the data. Directory-Based Sharding: Data is partitioned based on a lookup table that tracks which shard contains which data. Geographical Sharding: Data is divided based on geographical locations, such as countries or regions. Hybrid-Based Sharding: A combination of multiple sharding strategies to optimize system performance. Proxy SHOW CONTENTS A proxy is an intermediary server or software that sits between the client and the internet, typically used for tasks like filtering, caching, or security checks. Proxies can consolidate multiple client requests into a single request, a process known as collapsed forwarding. For instance, if multiple clients request the same resource, the proxy can cache the resource and serve it to those clients without having to forward the request to the origin server each time. There are two main types of proxies: forward proxy and reverse proxy.\nA forward proxy acts on behalf of the client, hiding its identity by forwarding requests from the client to the server. It is often used to mask the client’s IP address, bypass geo-restrictions, or cache content for faster access.\nA reverse proxy, on the other hand, acts on behalf of the server, intercepting incoming requests from clients and directing them to the appropriate backend server. This type of proxy is commonly used for load balancing, caching, and enhancing security by hiding the backend server details from clients.\nReplication SHOW CONTENTS Replication Methods SHOW CONTENTS CAP Theorem SHOW CONTENTS Database Federation SHOW CONTENTS Security SHOW CONTENTS Distributed Messaging System SHOW CONTENTS Distributed File System SHOW CONTENTS Misc Concepts Bloom Filters SHOW CONTENTS Long-Polling, WebSockets, and Server-Sent Events SHOW CONTENTS Quorum SHOW CONTENTS Heartbeat SHOW CONTENTS Leader and Follower SHOW CONTENTS Message Queues vs. Service Bus SHOW CONTENTS Stateful vs. Stateless Architecture SHOW CONTENTS Event-Driven vs. Polling Architecture SHOW CONTENTS ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/system-design/1-system-design/","summary":"Introduction to System Design SHOW CONTENTS System Design is the process of defining the architecture, components, modules, interfaces, and data for a system to fulfill specific business requirements, while ensuring scalability, maintainability, and performance.\nLoad Balancing SHOW CONTENTS In System Design, Load Balancing refers to the practice of distributing incoming network traffic or workload across multiple servers or resources to optimize resource use and ensure high availability.\nTo fullly leverage scalability and redundency, load balancing can occur at different layers: between user and the web server, between web server and an internal platform serve, between internal platform server and database as illustrated in the following image:","title":"System Design"},{"content":"1. Introduction to Linux SHOW CONTENTS Open Source refers to software whose source code is freely available to the public for anyone to view, modify, and distribute. It encourages coolaboration, transparency, and community-driven improvements.\nOpen Source Licenses are legal agreements that define how software can be used, modified, and distributed. There are two main types of Copyleft and Permissive.\nCopyleft licenses require that any modified versions of the software also be open source, under the same terms as the original. Popular examples include the GPL (GNU General Public License) and AGPL (Affero GPL). Permissive licenses are more relaxed, allowing users to modify, distribute, and even close-source the software if desired. Well-known examples of permissive licenses include the MIT License, Apache License 2.0, and BSD License (Berkeley Software Distribution). The differences between Fedora, CentOS Stream, and Red Hat Enterprise Linux (RHEL) are primarily based on their release cycles, stability, and target audiences. Fedora is a cutting-edge distribution that always features the latest software and technologies, making it ideal for developers and enthusiasts who want to experience the newest features. CentOS Stream serves as a rolling preview of future RHEL versions, acting as a middle ground between Fedora and RHEL. Finally, RHEL is the most stable and secure option, designed for enterprise environments that require long-term support and paid services. RHEL is commonly used in production systems that demand reliability and robust commercial support. 2. Manage Files From the Command Line Linux File System Hierarchy SHOW CONTENTS The Linux File System Hierarchy defines the directory structure and directory contents in Linux-based operating systems. It stores all files which organized into a single incerted tree structure.\nHere’s an overview of the key directories in the Linux file system hierarchy:\nLocation Purpose /boot Files to start the boot process. /dev Special device files that the system uses to access hardware. /etc System-specific configuration files. /home Home directory, where regular users store their data and configuration files. /root Home directory for the administrative superuser, root. /run Runtime data for processes that started since the last boot. This data includes process ID files and lock files. The contents of this directory are re-created on reboot. This directory consolidates the /var/run and /var/lock directories from earlier versions of Red Hat Enterprise Linux. /tmp A world-writable space for temporary files. Files that are not accessed, changed, or modified for 10 days are deleted from this directory automatically. The /var/tmp directory is also a temporary directory, in which files that are not accessed, changed, or modified in more than 30 days are deleted automatically. /usr Installed software, shared libraries, including files, and read-only program data. Significant subdirectories include: /usr/bin: User commands; /usr/sbin: System administration commands; /usr/local: Locally customized software /var System-specific variable data that should persist between boots. Files that dynamically change, such as databases, cache directories, log files, printer-spooled documents, and website content, might be found under /var. static, dynamic(variable), persistent, runtime: Static content remains unchanged until explicitly edited or reconfigured; Dynamic (Variable) content might be modified or appended by active processes; Persistent content remains after a reboot, such as configuration settings; Runtime content from a process or from the system is deleted on reboot.\nCommon Directory and File Management Commands SHOW CONTENTS pwd: Prints the current working directory (path) to the terminal. cd: Changes the current working directory to the home directory of the current user. cd -: Changes the directory to the previous directory. cd ../..: Moves up two levels in the directory structure. cd ..: Moves up one level in the directory structure (to the parent directory). ls -l: Lists files and directories in the current directory in long format, showing details such as permissions, owner, group, size, and last modification time. ls -al: Lists all files (including hidden files) in the current directory in long format. ls -lR: Lists files and directories recursively in the current directory and all its subdirectories, in long format. ls -l file*.txt: Lists files that start with the word file and end with .txt. cp hello.py HELLO.py: Copies the file hello.py to HELLO.py. The original file remains unchanged. mv -v hello.py HELLO.py: Moves (or renames) the file hello.py to HELLO.py. The -v option prints verbose output showing the operation. rm HELLO.py: Removes (deletes) the file HELLO.py. Be careful, as this is a permanent deletion. mkdir HOME: Creates a new directory named HOME in the current directory. rmdir HOME: Removes an empty directory named HOME. If the directory contains any files, it cannot be removed with rmdir. Create Links Between Files SHOW CONTENTS In Linux, there are two types of links that can be created for files: hard links and soft links. A hard link is a direct reference to the data of a file. It creates another name for an existing file, pointing directly to the file\u0026rsquo;s inode (the underlying data structure that holds the file\u0026rsquo;s metadata and data.) A soft link, on the other hand, is a reference to the original file\u0026rsquo;s path, rather than directly pointing to the file\u0026rsquo;s inode.\nHard links that reference the same file share the same inode struct with the link count, access permissions, user and group ownership, time stamps, and file content. Therefore, when any of this information is changed for one hard link, the changes are reflected in all other hard links pointing to the same file.\nCommands for creating links between files are as follows:\nln file.txt file_link.txt # Create a hard link ls -i file.txt file_link.txt # Show the inode number for both files ln -s file.txt file_soft.txt # Create a soft link ls -l file_soft.txt # Check if the soft link work (file_soft.txt -\u0026gt; file.txt) 3 Get Help Using man Command SHOW CONTENTS The man command in Linux is used to display the manual pages for various commands, programs, system calls, etc. The man pages are divided into 9 sections: executable programs or shell commands, system calls, library calls, special files, file formats and conventions, games, miscellaneous, system administration commands, and kernel routines (non standard).\nExecutable programs or shell commands: Commands executed by regular users (e.g., ls, cp). System calls: Functions that the kernel provides for programs to interact with the system (e.g., open, read). Library calls: Functions that can be used in programs written in C and other languages (e.g., printf). Special files: Usually found in /dev(e.g., /dev/sda). File formats and conventions: Descriptions of file formats (e.g., /etc/passwd). Games: Information about games available on the system. Miscellaneous: including macro packages and conventions (e.g. man(7), groff(7)). System administration commands: Commands for system administrators (e.g., useradd, systemctl). Kernel routines: Non standard The most common way to use man command including:\nman open or man open.3: Displays the manual page for the open command. (open exists in Section 2 (System Calls) and Section 3 (Library Functions), man open display the System Call documentation while man open.3 display the Library Function manual.) man -f ls: Displays a brief description of the ls command, equivalent to whatis ls. man -k ls: Searches the manual page database for the term ls, equivalent to apropos ls. Note that before running man -f ls or man -k ls, it is important to ensure that the mandb database has been built. This can be done by running sudo mandb.\n4. I/O Redirection \u0026amp; Pipelines I/O Redirection SHOW CONTENTS A process reads input and writes output. By default, it reads input from the keyboard and sends its output to the terminal window. Processes use numbered channels called file descriptors to manage input and output. Every process starts with at least three file descriptors:\nStandard Input (channel 0): Reads input from the keyboard. Standard Output (channel 1): Sends normal output to the terminal. Standard Error (channel 2): Sends error messages to the terminal. Number Channel Name Description Default Connection Usage 0 stdin Standard input Keyboard Read only 1 stdout Standard output Terminal Write only 2 stderr Standard error Terminal Write only 3+ filename Other files None Read/write or both By default, a process takes input from the keyboard and displays its output on the terminal. Redirection refers to changing the default input or output of a command. The following table summarizes the different types of redirection available:\nUsage Explanation Vitulization \u0026gt; file Redirect stdout to overwrite a file \u0026gt;\u0026gt; file Redirect stdout ot append to a file 2\u0026gt; file Redirect stderr to overwrite a file 2\u0026gt; /dev/null Discard stderr error messages by redirecting them to /dev/null \u0026gt; file 2\u0026gt;\u0026amp;1 or \u0026amp;\u0026gt; file Redirect stdout and stderr to overwrite the same file \u0026gt;\u0026gt; file 2\u0026gt;\u0026amp;1 or \u0026amp;\u0026gt;\u0026gt; file Redirect stdout and stderr to append the same file sort \u0026lt; file \u0026gt; sorted_file Redirects the stdin to a file and redirect stdout to overwrite a different file It is important to note that the order of redirection operations is crucial. For example:\nThe command \u0026gt; output.log 2\u0026gt;\u0026amp;1 redirects both standard output and standard error messages to the same file, output.log. On the other hand, 2\u0026gt;\u0026amp;1 \u0026gt; output.log redirects standard error messages to the default standard output (the terminal), and then redirects only the standard output to output.log. Additionally, the command \u0026gt; output.log 2\u0026gt;\u0026amp;1 can be shortened to \u0026amp;\u0026gt; output.log. However, it is important to note that \u0026amp;\u0026gt; is not standardized and may not be implemented in all shells.\nPipelines SHOW CONTENTS A pipeline is a sequence of one or more commands that are connected by the vertical bar character (|). In a pipeline, the standard output of one command is passed directly as the standard input to the next command.\nThe main difference between pipelines and I/O redirection lies in how they handle data. I/O redirection refers to sending standard output to a file or receiving standard input from a file. In contrast, pipelines are used to send the standard output of one process directly to the standard input of another process.\nThe following are some commonly used pipeline examples:\ncat file.txt | grep \u0026quot;pattern\u0026quot;: Searches for patterns within text. cat file.txt | sort: Sorts the lines of text in a specified order (alphabetically by default). cat file.txt | wc -l: Counts the number of lines in a file. cat file.txt | tee output.txt: Outputs the content of a file to both the terminal and a specified file. find / -name \u0026quot;passwd\u0026quot; 2\u0026gt;\u0026amp;1 | less: find / -name \u0026quot;passwd\u0026quot;: Searches for a file or directory named passwd starting from the root directory (/). 2\u0026gt;\u0026amp;1: Redirects standard error (file descriptor 2) to standard output (file descriptor 1). This ensures that any error messages, such as permission denials, are also passed along with the normal output. | less: Pipes the combined output (standard output and error messages) into the less command. 5. Bash Environment Configuration SHOW CONTENTS When Bash starts, several initialization scripts are executed to configure the shell environment, with the specific scripts depending on whether the shell is interactive, non-interactive, login, or non-login. An interactive shell allows users to enter commands directly, while a non-interactive shell runs in the background. A login shell is invoked when a user logs in via terminal or SSH, while non-login shell is opened from an existing session, like when launching a terminal in a GUI.\nFor interactive login shells, the environment is configured by the /etc/profile and ~/.bash_profile files, which also source /etc/bashrc and ~/.bashrc respectively. For interactive non-login shells, only /etc/bashrc and ~/.bashrc are used. System-wide configurations are stored in /etc/profile and /etc/bashrc, while user-specific configurations are in ~/.bash_profile and ~/.bashrc.\n6. Manage Local Users and Groups User \u0026amp; Group Concepts SHOW CONTENTS A user is an individual account created on a Linux system that can own files, execute commands, and interact with the system. User details are typically stored in the /etc/passwd file, where each line represents a user account with specific information like username, UID, home directory, and default shell.\nIn Linux, there are three primary types of users:\nSuperuser: The superuser account is responsible for administering the system. Its name is root with a UID of 0. It has full system access. System User: These accounts are used by processes or daemons that provide system services (e.g., web servers, databases). System users are non-privileged and are created to isolate and secure the services they support. Regular User: The regular user is the typical user who do not have root priviledges and have limited access to the system. A group is a collection of users that can be assigned a common set of permissions. The group details are typically stored in etc/group, which contains information about group names, GIDs, and the list of users that belong to each group.\nIn Linux, there two main types of group: the primary group and the secondary group.\nPrimary Group: The primary group is the default group assigned to a user. It is used as the group ownership for files and directories the user creates. By default, a user’s primary group often shares the same name as the username. Secondary Groups: These are additional groups to which a user can belong. Secondary groups provide users with access to shared resources or enable them to perform tasks that require specific group-level permissions. Gain Superuser Access SHOW CONTENTS In RHEL 9, to switch from a regular user to a superuser (root), the su command is used. To switch back from the root account to a regular user, the command su - user_name can be used, or alternatively, typing exit will return to the previous user account.\nIf a regular user is not in the sudoers file, an error message such as \u0026quot;user_name is not in the sudoers file. This incident will be reported.\u0026quot; will appear when trying to run a command with sudo. To enable full sudo access for a specific user, switch to the root account and then add the line user_name ALL=(ALL) ALL to the /etc/sudoers file. Similarly, to provide users in a specific group full sudo access, the line %group_name ALL=(ALL) ALL should be added.\nIt’s important to use the visudo command to edit the /etc/sudoers file, as it performs syntax checks to avoid errors that could lock out users from using sudo.\nManage Local User Accounts SHOW CONTENTS To create a user, use the useradd command. When executing useradd user_name, it creates the user\u0026rsquo;s home directory, sets up the account information, and generates a private group for the user named user_name. The default configuration for creating a new user is defined in the /etc/login.defs file. Note that at this point, the user account does not have a valid password set, so the user cannot log in until a password is assigned. To set a password for the user, the passwd command should be used. To delete a user, the userdel command is used. The userdel user_name command removes the user_name from the /etc/passwd file but leaves the user\u0026rsquo;s home directory intact. If it is necessary to delete the home directory as well, the userdel -r user_name option should be used. It’s important to note that when deleting a user without the -r option, the files owned by the user will be left with an unassigned UID. If a new account is later assigned to the same UID, that account will inherit the old user\u0026rsquo;s files, which poses a security risk. For this reason, many organizations prefer to lock user accounts instead of deleting them, in accordance with security policies.\nManage Local Group Accounts SHOW CONTENTS The commands for managing local group accounts include groupadd, groupmod, and groupdel.\ngroupadd: This command is used to create a new group. By default, it assigns the next available GID from the range specified by the GID_MIN and GID_MAX variables in the /etc/login.defs file. groupmod: This command is used to modify an existing group, such as changing its group name or GID. groupdel: This command is used to delete an existing group. However, it\u0026rsquo;s important to note that the primary group of an existing user cannot be removed. Here are some commonly used commands for managing local group accounts:\ngroupadd -g group_id group_name: Creates a new group with a specified GID. groupmod -n old_group_name new_group_name: Renames an existing group from old_group_name to new_group_name. groupmod -g group_id group_name: Changes the GID of an existing group (group_name) to a specified group id. usermod -aG group_name user_name: Adds a user (user_name) to an additional group (group_name) without removing the user from their existing groups. The -aG option ensures the user is appended to the group list rather than replacing the existing group memberships. newgrp group_name: Changes the current group to the named group. groupdel group_name: Deletes the specified group (group_name). Note that the primary group of any existing users cannot be deleted. Manage User Passwords SHOW CONTENTS In Linux, /etc/passwd and /etc/shadow are critical system files that store user account information and password data, repectively. The /etc/passwd file contains basic information about user accounts on the system, while the /etc/shadow file is used to store encrypted user password information, as well as other related data such as password expiration and account locking details.\nHere is the breakdown of the line from /etc/shadow:\nThe chage command is used to configure password aging parameters for user accounts, allowing administrators to manage password expiration, warning periods, and other related settings (as shown in the following image).\nMin Days (Minimum Days Between Password Changes): The minimum days (default is 0) parameter specifies the minimum number of days that must pass before a user can change their password after setting it for the first time or after a password change. For example, if min days is set to 7, then after changing their password, the user will not be able to change it again until 7 days have passed. Max Days (Maximum Days Between Password Changes): The maximum days (default is 99999) parameter defines the maximum number of days that a user is allowed to use the current password. After this period, the user will be required to change the password. For example, If max days is set to 30, the user must change their password every 30 days. After 30 days, they will be prompted to change it. Warn Days (Warning Period Before Password Expiration): The warn days (default is 7) parameter specifies how many days before the password expires the user will be warned to change their password. The warning is displayed when the user logs in. For example, If warn days is set to 7, the user will receive a warning 7 days before the password expiration. Expiration Date/Inactivity Days: The expiration date (default is None) specifies the date when the user’s account will be locked. If the inactivity days is set to 0, the account will be locked immediately after the expiration date. The inactivity days parameter (default is 7) defines the grace period after a password expires during which the user can still log in. During this period, the user is required to change the expired password using the passwd command before the account is locked. If the password is not changed within this grace period, the account will be locked. For example, if the expiration date is set to 2024-12-01 and the inactivity days is set to 7, the user can continue logging in until 2024-12-08. After 2024-12-08, the user’s account will be locked, and contact with an administrator will be necessary to reactivate the account. Below are some commonly used chage commands:\nchage -E $(date -d \u0026quot;+30 days\u0026quot; +%F) user_name: This command sets the expiration date of a user\u0026rsquo;s account to 30 days from the current date. chage -d 0 user_name: This command forces the user to change their password immediately. There are common scenarios where user access needs to be restricted, such as temporarily blocking a user or disabling access for a former employee. Below are some common methods for restricting user access.\nHere are the descriptions for the mentioned commands:\nusermod -L user_name: This command locks the user account by disabling the password. It works by placing an exclamation mark (!) in front of the password hash in the /etc/shadow file, preventing the user from logging in. usermod -L -e 2024-12-31 user_name: This command locks the user account and also sets an expiration date for the account. usermod -s /sbin/nologin user_name: This command changes the login shell for the user to /sbin/nologin, which prevents the user from logging in interactively. It\u0026rsquo;s important to note that this command does not prevent all types of access. Users may still be able to authenticate and upload or retrieve files through applications like file transfer programs or mail clients, as long as the user knows the password. 7. Control Access to Files File System Permissions Concepts SHOW CONTENTS In Linux, file system permissions control the access and actions that users can perform on files and directories. These permissions help manage security and determine who can read (r), write (w), or execute (x) a file. Permissions are typically displayed in a 10-character string, such as -rwxr-xr--. The 10 characters consist of a file type and three sets of permissions (User, Group, and Others):\nThe first character in the file permission string represents the file type. Common file types include - for regular files, d for directories, l for symbolic links, c for character device files, b for block device files, p for named pipe files, and s for local socket files.\nThe first set represents the user (owner) permissions. The second set represents the group permissions. The third set represents the others (everyone else) permissions. Each set of permissions is made up of three characters, corresponding to read (r), write (w), and execute (x). For example, rwx indicates full permissions (read, write, execute) and r-- stands for read-only permissions.\nManage File System Permissions SHOW CONTENTS The chmod command is used to modify file system permissions for files and directories. The standard syntax is chmod [options] mode file_or_directory_name. The mode can be specified in either symbolic mode (e.g., r, w, x) or numeric mode (e.g., 755, 644). In numeric mode, permissions are represented by a three-digit number, where each digit corresponds to a set of permissions for the user, group, and others. Each permission is assigned a value: 4 for read, 2 for write, and 1 for execute. The sum of these values determines the permissions for each set. Below are some commonly used commands for changing file system permissions:\nchmod 755 file: Grants read, write, and execute permissions to the user, and read and execute permissions to the group and others. chmod 644 file: Grants read and write permissions to the user, and read-only permissions to the group and others. chmod +x file: Adds execute permission for all user categories (user, group, and others). chmod -x file: Removes execute permission for all user categories. chmod u+x file: Adds execute permission for the user (owner) only. chmod g-w file: Removes write permission from the group. chmod o+r file: Grants read permission to others. To change the user or group ownership of a file or directory in Linux, the chown command is used. Only the root user can change the ownership of a file. However, both the file\u0026rsquo;s owner and the root user can modify the file\u0026rsquo;s group ownership. While the root user can assign file ownership to any group, regular users can change the group ownership of a file only if they are members of the target group. Below are some commonly used commands for changing the user or group ownership of a file or directory.\nchown user_name file_name: Changes the owner of a file or directory to the specified user_name. chown user_name:group_name file_name: Changes both the owner and the group of a file or directory. chown :group_name file_name: Changes only the group ownership of the file or directory. chown -R user_name directory_name: Recursively changes the ownership of files and directories within the specified directory. chgrp group_name file_name: Changes only the group ownership of a file or directory to the specified group_name. chgrp -R group_name directory_name: Recursively changes the group ownership of files and directories within the specified directory. Sepcial Permissions \u0026amp; Default Permissions SHOW CONTENTS In Linux, special file permissions provide advanced control over file and directory access. These permissions include setuid, setgid, and the sticky bit.\nsetuid: This permission is represented with s in the user permission set. When set on an executable file, it allows the program to be executed with the privileges of the file owner (usually root) rather than the privileges of the user running the file. For example, the file /usr/bin/passwd is owned by the root user, but it can be executed by a regular user without sudo because it has the setuid permission in the user permission set (-rwsr-xr-x. 1 root root 32648 Aug 10 2021 /usr/bin/passwd). setgid (Group ID): This permission is represented with s in the group permission set. When applied to a file, it causes the program to run with the group privileges of the file\u0026rsquo;s group. For directories, it ensures that files created within the directory will inherit the directory\u0026rsquo;s group rather than the user\u0026rsquo;s group. For example, the file /usr/bin/locate (-rwx--s--x. 1 root slocate 41032 Aug 10 2021 /usr/bin/locate) has the setgid permission in the group permission set, allowing it to run with the group privileges of the file\u0026rsquo;s group. Similarly, the directory /run/log/journal (drwxr-sr-x+ 3 root systemd-journal 60 Apr 15 09:44 /run/log/journal/) has the setgid permission in the group permission set. This ensures that files created within the directory will inherit the systemd-journal group. sticky bit: This permission is represented with t in the others\u0026rsquo; permission set. When applied to a directory, it allows only the file owner to delete or modify their files, preventing other users from tampering with them. For example, the directory /tmp (drwxrwxrwt. 20 root root 4096 Apr 17 08:32 /tmp) has the sticky bit set in the others\u0026rsquo; permission set. This ensures that a user can only modify or delete the files in the /tmp directory that they own. In Linux, when a file or directory is created, its default permission is determined by the combination of the initial permission and the umask (user file creation mask). By default, files are created with initial permissions of 0666 (-rw-rw-rw-), and directories with 0777 (drwxrwxrwx). The umask defines which permission bits should be removed from these initial values, Typically, the default umask is 0022. This value can be modified in /etc/bashrc. For example, if the umask is set to 0022, a newly created file will have permissions 0644 (-rw-r--r--) because 0666 - 0022 = 0644. Similarly, a newly created directory will have permissions 0755 (drwxr-xr-x) because 0777 - 0022 = 0755.\n8. Monitor \u0026amp; Manage Linux Processes Process Life Cycle \u0026amp; States SHOW CONTENTS A process is a running instance of an executable program. Once created, a process includes several key components: an address space for allocated memory, security properties such as ownership and privileges, one or more execution threads for running code, and a process state that reflects its current status.\nThe environment of a process contains important contextual information, including local and global variables, the current scheduling context, and system resources like file descriptors and network ports that are assigned to the process.\nA new process is typically created when an existing parent process duplicates its own address space through a mechanism called a process fork. The resulting child process is assigned a unique Process ID (PID) for identification and security purposes. The child process also records the Parent Process ID (PPID) as part of its environment. On systems like Red Hat, all processes ultimately descend from the first system process, systemd.\nThrough the fork operation, the child process inherits the parent’s security credentials, file descriptors, resource privileges, environment variables, and program code. Once forked, the child process can continue running the same code or replace it with its own program logic using an exec family function.\nTypically, after creating a child process, the parent process enters a waiting state, pausing its own execution until the child finishes. When the child process exits, it releases its resources, but its process table entry remains temporarily as a zombie process. Once the parent receives a termination signal from the child, it performs cleanup by removing the zombie entry from the process table, freeing the last of the child’s resources, and then resumes its own execution.\nIn Linux, every process moves through a series of well-defined states during its lifecycle. The following image and table describe Linux process states in detail.\nTASK_INTERRUPTIBLE: TASK_UNINTERRUPTIBLE: TASK_KILLABLE: TASK_REPORT_IDLE: Flags TASK_UNINTERRUPTIBLE and TASK_NOLOAD are set. Similar to TASK_KILLABLE, also a subset of state D. It accepts fatal signals.\nName Flag Kernel-defined state name and description Running R TASK_RUNNING: The process is either executing on a CPU or waiting to run. The process can be executing user routines or kernel routines (system calls), or be queued and ready when in the Running (or Runnable) state. Sleeping S TASK_INTERRUPTIBLE: The process is waiting for some condition: a hardware request, system resource access, or signal. When an event or signal satisfies the condition, the process returns to Running. D TASK_UNINTERRUPTIBLE: This process is also sleeping, but unlike S state, does not respond to signals. Used only when process interruption might cause an unpredictable device state. K TASK_KILLABLE: Identical to the uninterruptible D state, but modified to allow a waiting task to respond to the signal that it should be killed (exit completely). Utilities frequently display Killable processes as D state. I TASK_REPORT_IDLE: A subset of state D. The kernel does not count these processes when calculating load average. Used for kernel threads. Flags TASK_UNINTERRUPTIBLE and TASK_NOLOAD are set. Similar to TASK_KILLABLE, also a subset of state D. It accepts fatal signals. Stopped T TASK_STOPPED: The process is stopped (suspended), usually by being signaled by a user or another process. The process can be continued (resumed) by another signal to return to running. T TASK_TRACED: A process that is being debugged is also temporarily stopped and shares the same T state flag. Zombie Z EXIT_ZOMBIE: A child process signals to its parent as it exits. All resources except for the process identity (PID) are released. X EXIT_DEAD: When the parent cleans up (reaps) the remaining child process structure, the process is now released completely. This state cannot be observed in process-listing utilities. In Linux, the ps and top commands are commonly used to inspect processes. The ps command displays information about active processes and is typically used to capture a snapshot of the processes running at a specific moment. In contrast, the top command provides a real-time, dynamic view of system processes, continuously updating to show CPU usage, memory usage, uptime, load average, and resource consumption for each process.\nControl Jobs SHOW CONTENTS In Linux, a job refers to a command or a group of commands initiated from a terminal by a user. Jobs can run in two modes: as a foreground job or a background job. A foreground job occupies the terminal until it completes, while a background job runs independently, allowing the terminal to remain available for other tasks. For example, executing vim file.txt starts a foreground job, which holds the terminal until the editor is closed. Running sleep 300 \u0026amp; starts a background job, allowing the terminal to remain usable while the command runs for 300 seconds in th e background.\nA process is a running instance of a program. When a job is initiated, one or more processes are created to perform the assigned tasks. For example, typing ls -l creates a new process to handle the application.\nA pipeline is a sequence of commands connected by the | operator, where the output of one command is passed directly as input to the next. For example, the command ps aux | grep nginx | sort forms a pipeline involving three separate processes working in succession. In this case, a pipeline runs as one job, but each part is a separate process.\nA session is a collection of processes initiated from a single user login. The first process created in a session is known as the session leader. For example, when a user logs in to a server via ssh user_name@ip_address, the shell process (bash, zsh, etc.) acts as the session leader. All jobs and processes started from that terminal belong to the same session.\nIn Linux, job control allows management of multiple jobs (commands or processes) within a single terminal session. Job control makes it possible to pause, resume, move jobs between the foreground and background, or terminate them. Below are the common-use commands for job control:\nCtrl + Z: Suspends the current foreground job and puts it into the background in a stopped state. bg: Resumes a suspended job in the background. fg: Brings a background job back to the foreground. jobs: Lists all jobs associated with the current terminal session, showing each job’s ID and status (e.g., running, stopped). In the output, a + next to a job ID denotes the current default job, which is the target of any bg or fg command issued without a %jobID. A - marks the previous job, which will become the default once the current default job completes or is removed. For example: [1] Running sleep 100 \u0026amp; [2] Running sleep 100 \u0026amp; [3]- Running sleep 100 \u0026amp; [4]+ Running sleep 100 \u0026amp; kill %job_number: Sends a signal (default is SIGTERM) to terminate a job, identified by its job number. Ctrl + C: Terminates a foreground job. Kill Processes SHOW CONTENTS In Linux, processes can be terminated using signals. A signal is a software interrupt that is delivered to a process. The following table describes common signals.\nSignal Number Description SIGTERM 15 Graceful termination (default) SIGKILL 9 Forcefully kill (non-catchable) SIGINT 2 Interrupt from keyboard (Ctrl+C) SIGHUP 1 Hang up / restart daemon SIGSTOP 19 Stop (pause) a process SIGCONT 18 Resume a stopped process Note that while signal numbers may vary across different Linux hardware platforms, signal names and their meanings remain consistent. It is generally recommended to use signal names rather than numbers when sending signals. Additionally, Red Hat advises sending SIGTERM first to allow the process to terminate gracefully, followed by SIGINT if necessary. If both signals fail, SIGKILL should be used as a last resort. The SIGKILL signal cannot be caught or ignored, and it forcibly terminates the process without giving it an opportunity to perform any self-cleanup.\nHere are some commonly used commands related to terminating processes:\nkill PID: Sends the SIGTERM signal to the specified process, requesting it to terminate gracefully. kill -SIGKILL PID: Sends the SIGKILL signal to forcefully terminate the specified process immediately (cannot be caught or ignored). killall process_name: Sends SIGTERM to all processes matching the given name, attempting a graceful termination. killall -SIGKILL process_name: Sends SIGKILL to all processes matching the given name, forcing termination. pgrep process_name: Searches for processes matching the given name and returns their PIDs. pgrep -u user_name process_name: Searches for processes with the specified name owned by a specific user. pkill process_name: Sends SIGTERM to all processes matching the given name, similar to killall. pkill -SIGKILL process_name: Sends SIGKILL to all processes matching the given name, forcing termination. pkill -u user_name: Sends a signal to all processes owned by the specified user. pstree -p: Displays the process tree with PIDs included. pstree -u: Displays the process tree with associated user names. In real-world scenarios, system administrators can forcibly terminate a user\u0026rsquo;s session to log them out. The following example demonstrates this process:\nwho -u # Lists all active user sessions along with their associated PIDs. pkill -t pts/0 # Sends SIGTERM (default) to processes attached to terminal pts/0. pkill -SIGINT -t pts/0 # If necessary, sends SIGINT to the same terminal. pkill -SIGKILL -t pts/0 # As a last resort, sends SIGKILL to forcefully terminate the session. Monitor Process Activity SHOW CONTENTS In Linux, the load average indicates the system\u0026rsquo;s workload over a period of time, measuring how many processes are either actively running or waiting to be executed by the CPU. The load average is typically represented by three numbers, corresponding to the system load over the past 1, 5, and 15 minutes. A load average of 1.0 per CPU is considered fully utilized, meaning that each CPU is handling one process at a time. For example, if a system has 2 CPUs, a load average of 2.0 would mean that the system is fully utilized. To inspect the number of CPUs in the system, the lscpu command can be used.\nFor instance, if a system has 2 CPUs and the uptime command returns:\n20:41:31 up 5:29, 3 users, load average: 3.32, 1.90, 0.32 The load average for the last minute is 3.32, which means the total load on the system is 3.32. With 2 CPUs, the per-CPU load average for the last minute is 1.66 (3.32 ÷ 2). This suggests the system is overloaded since the per-CPU load exceeds 1.0. The load average for the last 5 minutes is 1.90, and the per-CPU load average for this period is 0.95 (1.90 ÷ 2), indicating that the system is closer to optimal usage during this time. The load average for the last 15 minutes is 0.30, and the per-CPU load average is 0.16 (0.32 ÷ 2), suggesting the system is underutilized. 9. Control Services \u0026amp; Daemons SHOW CONTENTS In Linux, systemd daemon is the system and service mamager repsonsible for initializing the system during boot and managing processes throughout the machine\u0026rsquo;s lifetime. It handles the startup sequence, maintains service states, sepervises processes, and managees logging and dependencies.\nsystemd uses the concept of units to manage and control system resources. A unit represents a single object that systemd knows how to manage, such as a service, a device, a mount point, or a socket.\nEach unit is defined by a unit file, which describes how systemd should handle it — including how to start, stop, reload, and manage dependencies. Unit files are typically stored in directories like /usr/lib/systemd/system/ or /etc/systemd/system/.\nUnits are categorized by type, and the type is reflected in the file extension. Common unit types include:\n.service: for system services (e.g., nginx.service) .socket: for socket activation .target: for grouping units into milestones or states (like multi-user.target, graphical.target) .mount: for filesystem mount points .timer: for time-based activation, like a cron replacement .device: for hardware devices .path: for path-based activation To interact with systemd, the systemctl is used. It allows administrators to manage services, check system states, enable or disable services at boot, and control system targets. Here are some commonly used commands:\nsystemctl status nginx: Displays the status of the nginx service. systemctl start nginx: Starts the nginx service. systemctl stop nginx: Stops the nginx service. systemctl restart nginx: Restarts the nginx service. systemctl enable nginx: Configures nginx to start automatically at boot. systemctl disable nginx: Disables automatic start at boot for nginx. systemctl reload-or-restart nginx: Reload the configuration if supported; otherwise, restart the service. systemctl is-enabled nginx: Check if the service is enabled to start at boot. systemctl is-active nginx: Check if the service is currently running. systemctl list-dependencies nginx: List the dependencies of the service. systemctl mask sendmail.service: Mask the service to prevent it from being started. systemctl unmask sendmail.service: Unmask the service to allow it to be started again. systemctl list-units --type=service: Lists all active services. systemctl reboot: Reboots the system. systemctl poweroff: Powers off the machine. 10. Configure \u0026amp; Secure SSH SHOW CONTENTS SSH (Secure Shell) is a protocol used to securely access and manage remote systems over an unsecured network. It provides encrypted communication between a client and a server, allowing for secure login, command execution, and file transfer. Here are common SSH usage examples:\nssh user@host: Connect to a remote server using the specified user account. ssh user@host command: Execute a command on the remote server without opening an interactive shell. SSH also allows passwordless login to a remote server by using a pair of cryptographic keys: A private key and a public key. A private key is kept on the client machine while the public key is stored on the remote server in ~/.ssh/authorized_keys. When connecting, the server uses the public key to verify the client\u0026rsquo;s private key. If the key match, the connection is granted without prompting for a paasword. To enable this feature, following the following steps:\nssh-keygen -t rsa -b 4096 -C \u0026quot;RHEL 9 ON Virtual Machine\u0026quot;: Generate a key pair on the client. ssh-copy-id user_name@ip_address: Copy the public key to the remote server. ssh user_name@ip_address: Connect to the server. The default configuration of the SSH server works well for many use cases. To apply custom settings (e.g., disable remote login as root), edit the /etc/ssh/sshd_config file, modify the field PermitRootLogin to no. After modifying the configuration, apply the changes by running systemctl reload ssh.\n11. Analyze \u0026amp; Store Logs System Log Architecture SHOW CONTENTS In Red Hat Enterprise Linux, the standard logging system is based on the Syslog protocol, and the systemd-journald and rsyslog services are responsible for handling syslog messages.\nThe systemd-journald service forms the core of the operating system\u0026rsquo;s event logging architecture. It collects event messages from multiple sources, such as the system kernel, output from the early stages of the boot process, standard output and standard error from daemons, and Syslog events. systemd-journald restructures these logs into a standard format and writes them into a structured, indexed system journal. By default, this journal is stored in a file system that does not persist across reboots.\nOn the other hand, the rsyslog service reads syslog messages that systemd-journald receives from the journal as they arrive. It then processes the syslog events and records them to log files or forwards them to other services according to its configuration. The rsyslog service sorts and writes syslog messages to log files in the /var/log directory, which are persistent across reboots. This directory not only contains syslog message files but also log files from other services on the system. Below is a list of some useful log files located in the /var/log directory:\nLog File Description /var/log/messages Logs most system messages, including general syslog messages. Exceptions include authentication-related messages, email processing, scheduled job execution, and debug information. /var/log/secure Logs security-related messages, including authentication events and user access information. /var/log/maillog Logs messages related to the mail server, including both mail delivery and other mail-related operations. /var/log/cron Logs messages related to the execution of scheduled jobs (cron jobs). /var/log/boot.log Logs non-syslog console messages related to system startup and boot processes. Review Syslog Files SHOW CONTENTS In Linux, each log message is categorized by facility (which subsystem produces the message) and priority (the message\u0026rsquo;s severity). The following table lists the standard syslog facilities.\nCode Facility Description 0 kern Kernel messages 1 user User-level messages 2 mail Mail system messages 3 daemon System daemons messages 4 auth Authentication and security messages 5 syslog Internal syslog messages 6 lpr Printer messages 7 news Network new messages 8 uucp UUCP protocol messages 9 cron Clock daemon messages 10 authpriv Non-system authorization messages 11 ftp FTP protocol messages 16-23 local0 to local7 Custom local messages The following table lists the standard syslog priorities in descending order.\nCode Priority Description 0 emerg System is unusable 1 alert Action must be taken immediately 2 crit Critical condition 3 err Non-critical error condition 4 warning Warning condition 5 notice Normal but significant event 6 info Informational event 7 debug Debugging-level message The rsyslog service uses the facility and priority of log messages to determine how to handle them. Rules configure this facility and priority in the /etc/rsyslog.conf file and in any file in the /etc/rsyslog.d directory with the .conf extension.\nTo prevent log files from consuming too much disk space, Linux uses log rotation, a utility that automatically handles the archiving, compressing, and deletion of old log files. A scheduled job runs the logrotate command daily to check if any log files need to be rotated. When a log file is rotated, it is renamed with an extension indicating the rotation date. For example, the old /var/log/messages file might be renamed to /var/log/messages-20250419 when it is rotated on April 19, 2025. After rotations, typically over four weeks, the oldest log files are discarded to free up disk space.\nThe tail -f command in Linux is commonly used for monitoring log files in real time. It allows users to continuously view the latest entries being added to a log file, which is especially useful for monitoring system events and troubleshooting. Here is a sample example:\ntail -f /var/log/secure # In the first terminal ssh signalyu999@ip_address # In the second terminal The logger command sends messages to the rsyslog service, which is useful for testing changes to the rsyslog configuration. By default, it logs messages with the user facility and notice priority (user.notice), unless specified otherwise using the -p option. For example, to send a message to the rsyslog service and have it recorded in the /var/log/boot.log log file, the following logger command can be used:\n# /etc/rsyslog.conf # Save boot messages also to boot.log # local7.* /var/log/boot.log logger -p local7.notice \u0026#34;Log entry created on host\u0026#34; # TEST # 1. In the first terminal: tail -f /var/log/boot.log # 2. In the second terminal: logger -p local7.notice \u0026#34;Log entry created on host\u0026#34; Review System Journal Entries SHOW CONTENTS The systemd-journald service stores log data in a structured, indexed binary file called the journal. To retrieve log messages from the journal, the journalctl command is used. Below are some commonly used commands:\njournalctl --since \u0026quot;2025-04-18\u0026quot; --until \u0026quot;2025-04-19\u0026quot;: Shows logs from April 18, 2025, to April 19, 2025. journalctl --since \u0026quot;today\u0026quot;: Displays logs from the current day (since midnight). journalctl --since \u0026quot;-1 hour\u0026quot;: Shows logs from the last hour. journalctl --since \u0026quot;-10 minutes\u0026quot;: Displays logs from the last 10 minutes. journalctl -n 50: Shows the last 50 log entries. journalctl -u sshd: Displays logs related to the sshd service (SSH daemon). journalctl -f: Continuously shows the latest log entries in real-time. journalctl -p err: Filters and shows logs with \u0026ldquo;error\u0026rdquo; priority or higher. journalctl _PID=1234: Shows logs related to the process with PID 1234. journalctl _SYSTEMD_UNIT=sshd.service: Displays logs related to the sshd.service systemd unit. journalctl -b: Shows logs from the current boot session. Preserve the System Journal SHOW CONTENTS The systemd-journald service stores log data in a structured, indexed binary format known as the system journal. By default, Red Hat Enterprise Linux 9 stores the system journal in the /run/log directory, and the system clears the system journal after a reboot. To change this behavior and retain logs across reboots, the Storage parameter in the /etc/systemd/journald.conf file can be set to persistent. After modifying the configuration, the systemd-journald service must be restarted for the changes to take effect.\nThe Storage parameter has four options:\npersistent: Stores journals in the /var/log/journal directory, ensuring logs persist across reboots. If the /var/log/journal directory does not exist, the systemd-journald service creates it automatically. volatile: Stores journals in the volatile /run/log/journal directory. These logs are lost upon reboot. auto: If the /var/log/journal directory exists, logs are stored persistently. If the directory does not exist, volatile storage is used. This is the default behavior of the Storage parameter. none: Disables journal storage entirely, meaning no logs are stored. Maintain Accute Time SHOW CONTENTS In Linux, maintaining accurate system time is crucial for tasks such as logging, scheduling, and ensuring syschronization across different systems. Time syschronization is typically achieved through the use of the NTP (Network Time Protocol). The NTP is a standard way for machines to provide and obtain correct time information over the internet.\nMaintaing accurate time commonly involves two commands: tzselect and timedatectl. The tzslect command is an interactive utility used to select a time zone on Linux systems. It guides users through a series of prompts to set the time zone by selecting regions and cities form a list. It is helpful when users do not know the exact time zone string. The timedatectl command is provided by systemd to manage time and time zone settings on Linux systems. It allows users to query and set the system\u0026rsquo;s time, date, and time zone, as well as synchronize the system clock with NTP. Here are some common sample examples of timedatectl:\ntimedatectl status: Displays the current time zone, NTP status, and system time information. sudo timedatectl set-time \u0026quot;YYYY-MM-DD HH:MM:SS\u0026quot;: Sets the system date and time manually. sudo timedatectl set-timezone \u0026lt;timezone\u0026gt;: Changes the system\u0026rsquo;s time zone. timedatectl list-timezones: Lists all available time zones. sudo timedatectl set-ntp true: Enables NTP (Network Time Protocol) synchronization. sudo timedatectl set-ntp false: Disables NTP synchronization. sudo timedatectl set-local-rtc true: Sets the system clock to local time (RTC). sudo timedatectl set-local-rtc false: Sets the system clock to UTC (coordinated universal time). timedatectl show: Displays detailed information about the time and date settings. The chrond service keeps on track the usually inaccurate local Real-Time-Clock (RTC) by synchronizing it to the configured NTP servers. If network connectivity is unavailable, it calculates the RTC drift and stores the data in a file specified by the driftfile parameter in the /etc/chrony.conf configuration file. By default, chronyd uses servers from the NTP Pool Project but can be configured to use different servers for isolated networks. NTP servers are categorized by their stratum, with stratum 0 being a reference clock and higher strata representing servers that sync with other NTP servers. In the configuration file, servers and peers are defined, with the server being one stratum above the local server and peers at the same level. The iburst option is recommended for faster and more accurate initial synchronization.\n12. Manage Networking Networking Related Commands SHOW CONTENTS ip: A versatile tool for managing network interfaces, routing, and tunneling. ip addr pr ip a: Show IP addresses assigned to all interfaces. ip addr add 192.168.1.100/24 dev eth0: Assign an IP address to an interface. ip link or ip l: Show network interfaces and their status. ip link set eth0 up: Enable (bring up) a network interface. ip link set eth0 down: Disable (bring down) a network interface. ip route or ip r: Display the current routing table. ip route add 192.168.2.0/24 via 192.168.1.1: Add a static route. ip route del 192.168.2.0/24: Delete a route. ip neigh: Show the ARP table (neighbor cache). ss: A utility to investigate sockets. It is used for displaying information about network connections, listening ports, etc. ss: Display all established sockets and connections. ss -t: Show only TCP connections. ss -u: Show only UDP connections. ss -l: Show listening sockets. ss -tunlp: Show TCP/UDP listening ports with process info (-p). ss -s: Display a summary of socket statistics. ss -t state established: Show established TCP connections. ss -an: Show all sockets (listening and non-listening) in numeric format. ss -o state established: Show established connections with timers. ping: A tool used to test network connectivity between the client and the remote host by sending ICMP echo requests. ping baidu.com traceroute: A tool to trace the path packets take to reach a network destination, showing each hop along the way. traceroute \u0026lt;hostname/IP\u0026gt;: Trace the route packets take to reach the target host. traceroute -n \u0026lt;hostname/IP\u0026gt;: Show IP addresses only, skip hostname resolution (faster). traceroute -m 20 \u0026lt;hostname/IP\u0026gt;: Set maximum number of hops to 20. traceroute -p 80 \u0026lt;hostname/IP\u0026gt;: Use destination port 80 (helpful for testing web servers). traceroute -I \u0026lt;hostname/IP\u0026gt;: Use ICMP ECHO instead of UDP packets. traceroute -T \u0026lt;hostname/IP\u0026gt;: Use TCP SYN packets instead of UDP (helpful for firewalled networks). tracepath: A simpler version of traceroute that shows the path packets take to a destination but also provides information about packet loss and latency along the way. tracepath \u0026lt;hostname/IP\u0026gt;: Trace the path to a destination, showing each network hop along the way. tracepath -n \u0026lt;hostname/IP\u0026gt;: Display IP addresses only, skip reverse DNS lookup (faster). tracepath6 \u0026lt;hostname/IP\u0026gt;: Use IPv6 to trace the route to the target. host: A simple DNS lookup tool that resolves domain names to IP addresses. host \u0026lt;domain\u0026gt;: Resolve a domain name to its IP address. dig: A DNS lookup tool that queries the Domain Name System (DNS) for information about hostnames, IP addresses, and other DNS records. dig \u0026lt;domain\u0026gt;: Query the default DNS records (usually A records) for a domain. nmcli: A command-line interface for NetworkManager, used for manageing network connections and settings, such as configuring interfaces, VPNs, and Wi-Fi. nmcli device status or dev con status: Show the status of all network interfaces. nmcli connection show or nmcli con show: List all saved network connections. nmcli connection up \u0026lt;connection-name\u0026gt;: Activate a network connection. nmcli connection down \u0026lt;connection-name\u0026gt;: Deactivate a network connection. nmcli device connect \u0026lt;device\u0026gt;: Connect a network device. nmcli device disconnect \u0026lt;device\u0026gt;: Disconnect a network device. getent: A command used to query various system databases, including DNS, password, group, and hosts. It is useful for retriving information that\u0026rsquo;s typically stored in files like /etc/hosts or through services like DNS. getent hosts \u0026lt;hostname\u0026gt;: Resolve a hostname to its IP address (similar to host or nslookup). getent services \u0026lt;service\u0026gt;: Lookup port and protocol for a service (e.g., getent services ssh). getent protocols: List network protocols. getent passwd: List all user account entries from /etc/passwd or configured name service. getent passwd \u0026lt;username\u0026gt;: Query information for a specific user. getent group: List all group entries from /etc/group or configured name service. getent group \u0026lt;groupname\u0026gt;: Query information for a specific group. Configure Network SHOW CONTENTS In RHEL 9, the network can be configured through file-based settings by creating a .nmconnection file in the /etc/NetworkManager/system-connections directory. After editing the configuration, set the file permissions to restrict access to the root user for security. Update the /etc/resolv.conf file to specify DNS servers. Once the configuration is complete, reload the NetworkManager connection profiles to apply the changes. If autoconnect is set to false, manually bring the connection up.\nvim /etc/NetworkManager/system-connections/ens160-static.nmconnection: Open or create the network configuration file for editing. Edit the configuration file as below: [connection] id=ens160 uuid=62b7fd25-b5d9-3cae-8156-bc455c45b046 type=ethernet autoconnect-priority=-999 interface-name=ens160-static timestamp=1744708123 [ethernet] [ipv4] method=manual address1=192.168.254.138/24 gateway=192.168.254.2 ignore-auto-dns=true [ipv6] addr-gen-mode=eui64 method=auto [proxy] chown root:root /etc/NetworkManager/system-connections/ens160-static.nmconnection: Set the file owner and group to root. chmod 600 /etc/NetworkManager/system-connections/ens160-static.nmconnection: Restrict permissions so only the root user can read and modify the file. vim /etc/resolv.conf: Edit the configuration file as below: # Generated by NetworkManager nameserver 8.8.8.8 nameserver 8.8.4.4 nmcli con reload: Reload NetworkManager connection profiles to apply changes. nmcli con up ens160-static: Bring the ens160-static connection up manually (required if autoconnect is disabled). 13. Archive \u0026amp; Transfer Files Manage Compressed tar Files SHOW CONTENTS An archive is a single file that stores multiple files and directories, often used for creating backups or simplifying file transfers across a network. On Linux, the tar utility is commonly used to create, manage, and extract archives. Below are some frequently used commands:\ntar -cvf archive.tar file1 file2: Archives multiple files into a single uncompressed .tar file. tar -xvf archive.tar file1 file2 -C ./archives/: Extracts specific files from an uncompressed .tar archive to the ./archives/ directory. tar -czvf archive.tar.gz file1 file2: Creates a compressed .tar.gz archive from multiple files using gzip compression. tar -xzvf archive.tar.gz file1 file2 -C ./archives/: Extracts specific files from a .tar.gz compressed archive to the ./archives/ directory. tar -cjvf archive.tar.bz2 file1 file2: Creates a compressed .tar.bz2 archive using bzip2 compression. tar -xjvf archive.tar.bz2 file1 file2 -C ./archives/: Extracts specific files from a .tar.bz2 compressed archive to the ./archives/ directory. tar -cJvf archive.tar.xz file1 file2: Creates a compressed .tar.xz archive using xz compression. tar -xJvf archive.tar.xz file1 file2 -C ./archives/: Extracts specific files from a .tar.xz compressed archive to the ./archives/ directory. Transfer Files Using sftp SHOW CONTENTS To securely transfer files between systems, use the sftp command. Below are some commonly used sftp commands:\nsftp user_name@ip_address:/home/user_name/remote_file: Connect to the server and directly fetch a remote file to the local. sftp user_name@ip_address: Connect to the remote server via SFTP. help: Display a list of available SFTP commands. pwd: Show the current remote working directory. lpwd: Show the current local working directory. ls: List files in the remote directory. lls: List files in the local directory. cd: Change the remote directory. lcd: Change the local directory. put: Upload a file from local to remote. put -r: Recursively upload an entire directory. mput: Upload multiple files matching a pattern. get -r: Recursively download an entire remote directory. mget: Download multiple files matching a pattern. bye: Exit the SFTP session. Synchronize File Using rsync SHOW CONTENTS rsync is a fast and versatile command-line tool for copying and synchronizing files locally and remotely. It only transfers the differences between source and destination, saving time and bandwidth. Below are some commonly used rsync commands:\nrsync -avz source/ destination/: synchronize files/directories locally with compression and verbose output. rsync -avh /local/path/ /destination/path/: sync local directories with human-readable file sizes. rsync -avz /local/path/ user@remote:/remote/path/: upload files from local to remote server over SSH. rsync -avz user@remote:/remote/path/ /local/path/: download files from remote server to local machine. rsync -avz --delete /local/path/ user@remote:/remote/path/: sync local to remote and delete files on remote that don’t exist locally. rsync -avz -e ssh /local/path/ user@remote:/remote/path/: sync files over SSH, explicitly specifying the SSH protocol. 14. Install \u0026amp; Update Software Packages Change Repository Mirror SHOW CONTENTS By default, Red Hat Enterprise Linux (RHEL) 9 uses the official repository as its software source. To replace it with the Alibaba Cloud CentOS Stream mirror, follow these steps:\nOpen the redhat.repo file and disable the BaseOS and AppStream repositories by changing enabled=1 to enabled=0: sudo vim /etc/yum.repos.d/redhat.repo BaseOS and AppStream are two key repositories used in Red Hat-based Linux to organize and manage system software and applications. The BaseOS contains the essential operating system components, such as the kernel, system libraries, and core utilities. While the AppStream contains additional software packages that are not esssential for the base system but are needed for specific applications and use cases. Create a new repository file named aliyun.repo and add the following configuration: [AppStream] name = Aliyun Centos Stream - AppStream baseurl = https://mirrors.aliyun.com/centos-stream/9-stream/AppStream/x86_64/os/ enabled = 1 gpgcheck = 0 [BaseOS] name = Aliyun Centos Stream - BaseOS baseurl = http://mirrors.aliyun.com/centos-stream/9-stream/BaseOS/x86_64/os/ enabled = 1 gpgcheck = 0 Clean the existing DNF cache to remove outdated metadata: sudo dnf clean all Rebuild the repository cache to ensure the new mirror is loaded: sudo dnf makecache Note: If the transaction test fails when running sudo dnf update (for example, due to package conflicts), the issue can be temporarily avoided by excluding the conflicting packages:\nsudo dnf update --exclude=openssl* This allows the update process to complete for other packages while the conflict is handled separately.\nInstall \u0026amp; Update Software Packages with dnf SHOW CONTENTS DNF (Dandified YUM) is the default package manager for RPM-based Linux distributions such as Fedora, CentOS, and RHEL. While DNF offers improved performance and new features over YUM, its commands are largely functionally identical. For backward compatibility, YUM commands still exist as symbolic links to DNF. Below are some basic dnf commands:\ndnf install \u0026lt;package\u0026gt;: Installs the specified package. dnf update: Updates all installed packages to their latest versions. dnf remove \u0026lt;package\u0026gt;: Removes the specified package from the system. dnf search \u0026lt;package\u0026gt;: Searches for a package by name or description. dnf list installed: Lists all installed packages on the system. dnf list \u0026lt;package\u0026gt;: Lists detailed information about the specified package. dnf info \u0026lt;package\u0026gt;: Provides detailed information about the specified package (e.g., version, repository, dependencies). dnf upgrade: Upgrades all installed packages to the latest versions, including kernel updates. dnf clean all: Cleans up the local repository cache to free up disk space. dnf makecache: Forces DNF to refresh and rebuild the metadata cache. The dnf command also has the concept of groups. A package group is a collection of related software packages that can be installed or removed together. Here are some common dnf group commands:\ndnf group list: Lists all available package groups, including those that are installed and those that can be installed from repositories. dnf group list installed: Lists only the package groups that are currently installed on the system. dnf group info \u0026lt;group_name\u0026gt;: Displays detailed information about a specific package group, including the list of packages that belong to that group. dnf group install \u0026lt;group_name\u0026gt;: Installs all packages within a specified group, allowing you to easily install related software at once. dnf group remove \u0026lt;group_name\u0026gt;: Removes all packages in a specified group from the system. dnf group update \u0026lt;group_name\u0026gt;: Updates all the packages in the specified group to their latest available versions. dnf group upgrade \u0026lt;group_name\u0026gt;: Upgrades all the packages in the specified group, including dependencies and related packages. Transaction History refers to the record of package transactions, such as installations, removals, and updates. The dnf history command allows you to view past actions taken by DNF and revert to previous states when necessary. Below are some common dnf history commands:\ndnf history: Lists all past transactions, showing details such as transaction ID, date, action (install, remove, update), and affected packages. dnf history info \u0026lt;transaction_id\u0026gt;: Displays detailed information about a specific transaction, including the packages that were installed, removed, or updated. dnf history undo \u0026lt;transaction_id\u0026gt;: Reverts the changes made in a specific transaction, such as undoing the installation or removal of packages. dnf history rollback \u0026lt;transaction_id\u0026gt;: Restores the system to the state it was in immediately after a specified transaction, undoing all changes made since that transaction. dnf history reset: Clears the transaction history, removing all past transaction records from the system. DNF Modularity is a feature of the DNF package manager that enables users to install different versions of software packages within a single distribution. Key concepts of DNF Modularity includes Modules, Streams, and Profiles.\nModules A module is a collection of related packages that can be installed or removed together, and each module can have multiple streams (versions) of a package. Streams: Streams represent different versions or variants of a module. For example, a module for python may have different streams for python3.6, python3.8, etc. Profiles: Profiles are predefined sets of packages that can be installed as part of a module. A profile could include a minimal installation or a development environment for a specific stream. Here are some common dnf module commands: dnf module list: Lists all available modules and their streams. dnf module enable \u0026lt;module_name\u0026gt;: Enables a module, allowing the installation of its packages. dnf module disable \u0026lt;module_name\u0026gt;: Disables a module, preventing its packages from being installed. dnf module install \u0026lt;module_name\u0026gt;: Installs a module and its packages, using the default stream unless specified. dnf module info \u0026lt;module_name\u0026gt;: Shows detailed information about a module, including its streams and profiles. dnf module update \u0026lt;module_name\u0026gt;: Updates a module and its packages to the latest available versions. dnf module provides \u0026lt;package_name\u0026gt;: Displays which module provdies a specific package. 15. Access Linux File System Disk Partition SHOW CONTENTS A file system is a method of organizing and storing data on storage devices. It defines how data is stored, retrieved, and managed. To examine the file system on Linux, the df command provides an overview of disk space usage, while the du command offers detailed information about the disk usage of a specific file or directory. Here are some useful commands:\ndf -h: Displays disk space usage in a human-readable format. df -T: Displays the file system type along with disk space usage. du -h \u0026lt;directory_name\u0026gt;: Displays disk usage for a specific directory in a human-readable format. du -sh: Displays the total disk usage of the current directory in a human-readable format. du -sh \u0026lt;directory_name\u0026gt;: Displays the total disk usage for a specified directory in a human-readable format. Common file systems include ext4, NTFS, and XFS. To access the contents of a file system, it must be mounted to an empty directory, known as the mount point.\nTypically, the entire storage device is not formatted into a single file system; instead, it is divided into several partitions. Each partition is considered a block device in its own right. For example:\nThe first partition on the first SATA-attached storage is /dev/sda1. The second partition on the same device is /dev/sda2. The second partition on the second device is /dev/sdb2. The third partition on the third SATA-attached storage is /dev/sdc3, and so on. To mount a file system manually, follow these steps:\nIdentify Block Devices: Use the lsblk command to identify available block devices. (Use fdisk for partition manipulation when needed.) Create a Mount Point: Create an empty directory (mount point) using the mkdir command. Mount the Device: Use the sudo mount \u0026lt;device_name\u0026gt; \u0026lt;mount_point\u0026gt; command to mount the file system. Verify the Mount: Use the df command to verify the mount operation. Here’s an example of device mounting:\n# 1. Use lsblk to get the block device name lsblk # 2. Create a mount point mkdir /mnt/data # 3. Mount the device sudo mount /dev/sdb1 /mnt/data # 4. Verify the mount operation df -h Note that file systems are automatically unmounted when the system shuts down or reboots. To ensure a file system is mounted at boot, edit the /etc/fstab file and add the following line:\n/dev/sdb1 /mnt/data ext4 defaults 0 0 To unmount a device, ensure all processes related to it are terminated, then use the umount command:\numount /mnt/data Locate File on the System SHOW CONTENTS To locate a file on a Linux system, commonly used commands include find, locate, which, and whereis.\nThe find command searches for files in real time by parsing the file system hierarchy. Here are some commonly used find examples:\nfind /home -name \u0026quot;myfile.txt\u0026quot;: Searches for a file named myfile.txt in the /home directory. find / -name \u0026quot;*.log\u0026quot;: Searches for all .log files starting from the root directory. find / -iname \u0026quot;*message*\u0026quot;: Searches for files that contain the word \u0026ldquo;message\u0026rdquo; (case-insensitive) in their names, starting from the root directory /. find /home -name \u0026quot;*.txt\u0026quot; -size +1M: Finds .txt files larger than 1MB in the /home directory. find /home -name \u0026quot;*.txt\u0026quot; -size -1G: Finds .txt files smaller than 1GB in the /home directory. The locate command searches a pre-generated index of file names and paths, making it much faster than find. However, it may not reflect recent changes in the file system until the index is updated. To update the database, use the updatedb command. Below are common locate examples:\nsudo updatedb # Updates the locate database locate file.txt # Searches for the file \u0026#34;file.txt\u0026#34; The which command locates executables in the directories listed in the $PATH environment variable. It is useful for determining the location of a command or executable. For example:\nwhich python # Finds the path of the python executable The whereis command is used to locate the binary, source, and manual page files associated with a command. It is commonly used to search for documentation and related files. For example:\nwhereis python # Finds binary, source, and man page for python 16. Schedule Future Tasks Schedule a User Job SHOW CONTENTS To schedule a deferred user job, the at command and the cron system can be used. The at command is suitable for one-time deferred tasks, while the cron system is better for recurring tasks.\nThe at command schedules a one-time deferred task to run at a specific time in the future. To view pending jobs, use the atq command. When there is a need to cancel or remove a scheduled job, use the atrm command along with the job ID, which can be obtained from the atq command. Below is an example of using at command:\necho \u0026#34;date \u0026gt;\u0026gt; ~/myjob.txt\u0026#34; | at now +1 minute For recurring tasks, use the crontab command. Below is an example of scheduling a job to run every day at 3 AM:\ncrontab -e 0 3 * * * date \u0026gt;\u0026gt; ~/myjob.txt # Schedule at 3 AM every day Schedule a System Job SHOW CONTENTS To schedule a system job, it is necessary to edit the /etc/crontab file or create a custom cron job file inside the /etc/cron.d/ directory. (Note that files in /etc/cron.d/ are not executable by default; to make them executable, run chmod +x file_name.) The shell scripts executed by these job entries are typically located in directories such as /etc/cron.hourly/, /etc/cron.daily/, etc. Below are some common examples of scheduling system jobs:\n# 1. Create a script named hourly_job.sh in /etc/cron.hourly/ sudo vim /etc/cron.hourly/hourly_job.sh # 2. Add the following content to the script #!/bin/bash echo \u0026#34;Hourly job executed at $(date)\u0026#34; \u0026gt;\u0026gt; /var/log/hourly_job.log # 3. Make the script executable sudo chmod +x /etc/cron.hourly/hourly_job.sh Anacron is used for scheduling tasks that should run periodically but not necessarily at fixed times. It ensures that a missed job is executed as soon as possible after the system starts up. Below is an sample example:\n# period delay job-identifier command # 1 5 dailybackup /usr/local/bin/backup.sh # Run a daily backup at system start (5 minutes after boot) 1 5 dailybackup /usr/local/bin/backup.sh Systemd timers provide a more flexible way of scheduling tasks on Linux systems. They integrate with the systemd service manager, which makes them more powerful and capable of handling advanced scenarios. A systemd timer works by triggering a systemd service at specific intervals. It uses two components: Timer Unit and Service Unit.\nTimer Unit: Defines when the task will be executed. Service Unit: Defines the actual task to be run. Below is an example:\n# 1. Create a service file sudo vim /etc/systemd/system/myjob.service # 2. Add the following content to the file [Unit] Description=Run my scheduled task [Service] Type=oneshot # The service runs a one-time task ExecStart=/usr/local/bin/myscript.sh # Specifies the command to execute # 3. Create a timer unit sudo vim /etc/systemd/system/myjob.timer # 4. Add the following content to the file [Unit] Description=Run my job every day at 3 AM [Timer] OnCalendar=daily # Schedules the task to run once a day Persistent=true # Ensures that if the system is off during the scheduled time, the task will run once the system boots up. [Install] WantedBy=timers.target # 5. Reload the systemd sudo systemctl daemon-reload # 6. Enable and start the timer sudo systemctl enable myjob.timer sudo systemctl start myjob.timer Manage Temporary Files SHOW CONTENTS systemd-tmpfiles is a utility provided by systemd that allows for automatic management of temporary files and directories on Linux systems. It is primarily used to clean up temporary files, manage file permissions, and enforce file creation rules. systemd-tmpfiles works based on configuration files located in /etc/tmpfiles.d/, /usr/lib/tmpfiles.d/, and /run/tmpfiles.d/. Below is an example of automatic clean up:\n# 1. Create a configuration file sudo vim /etc/tmpfiles.d/temp_cleanup.conf # 2. Add the following content to the file # Type Path Mode UID GID Age Argument # Remove any .log files in /tmp that are older than 7 days. f /tmp/*.log 0644 root root 7d - # Remove empty directories in /tmp older than 7 days. d /tmp/ 1777 root root 7d - # 3. Create a system timer for automatic cleanup sudo vim /etc/systemd/system/tmpfiles-cleanup.timer # 4. Add the following content to the file [Unit] Description=Automatic cleanup of temporary files [Timer] # Run 1 hour after boot, then once every day OnBootSec=1h OnUnitActiveSec=1d Unit=systemd-tmpfiles-clean.service [Install] WantedBy=timers.target # 5. Create the service unit for systemd-tmpfiles cleanup sudo vim /etc/systemd/system/systemd-tmpfiles-clean.service # 6. Add the following content [Unit] Description=Cleanup temporary files using systemd-tmpfiles [Service] Type=oneshot ExecStart=/usr/bin/systemd-tmpfiles --clean # 7. Reload the systemd sudo systemctl daemon-reload # 8. Enable and start the timer sudo systemctl enable tmpfiles-cleanup.timer sudo systemctl start tmpfiles-cleanup.timer 17. Tune System Performance Adjust Tuning Profiles SHOW CONTENTS The tuned utility is used to statically and dynamically adjust a system’s configuration and optimize its performance based on different use cases, such as improving I/O performance, network throughput, and power saving.\nStatic tuning configures predefined kernel parameters in a profile that the tuned daemon applies at runtime. These kernel parameters are set for overall performance expectations, but they do not change in response to system activity. Dynamic tuning allows the tuned daemon to monitor system activity and adjust settings based on runtime behavior changes. By default, dynamic tuning is disabled. To enable it, simply change the dynamic_tuning variable in the /etc/tuned/tuned-main.conf configuration file. When enabled, tuned periodically monitors the system and adjusts the tuning settings according to the observed behavior. The frequency of updates can be controlled by modifying the update_interval variable in the same configuration file (in seconds between updates). The tuned utility provides several predefined profiles and allows for the creation of custom profiles to optimize a system’s behavior for specific workloads, such as servers, laptops, or high-performance environments. Below are some common commands for managing profiles:\ntuned-adm active: Show the currently active profile. tuned-adm list: List all available profiles. tuned-adm profile_info: Show information about the active profile. tuned-adm profile_info \u0026lt;profile_name\u0026gt;: Show information about a specific profile. tuned-adm profile \u0026lt;profile_name\u0026gt;: Apply a specific tuning profile. tuned-adm recommend: Recommend an optimal profile based on the system\u0026rsquo;s current usage. tuned-adm off: Disable tuned and stop dynamic tuning. Influence Process Scheduling SHOW CONTENTS In Linux, process priorities determine the order in which processes are scheduled to run on the CPU. The scheduling policy and nice value are key factors in how the operating system manages process execution.\nCommon scheduling policies include SCHED_NORMAL/SCHED_OTHER, SCHED_FIFO, and SCHED_RR.\nSCHED_NORMAL/SCHED_OTHER (TS): This is the default policy used for most processes, where tasks are scheduled based on their priority and time-sharing behavior. SCHED_FIFO (FF): A real-time policy where processes are executed in a first-in, first-out manner. It gives higher priority to processes with lower numerical values, without time slicing. SCHED_RR (RR): Each process gets a fixed time slice before the next one is executed, providing better responsiveness. The nice value (default is 0) is an integer that can range from -20 (highest priority, maps to a 0 in the top command) to +19 (lowest priority, maps to a 39 in the top command). It allows users to influence the priority of a process, where a lower nice value gives the process higher priority in CPU scheduling. A higher nice value lowers the priority. To view the nice value of a running process, use the ps or top command. In top, the nice value is displayed under the NI column. Below is an example of using ps:\nps -eo pid,comm,ni,cls --sort=-ni By default, when a process starts from the command line, it inherits its nice value from the shell process (default value is 0). To start a new process with a specific nice value, use the nice command. Here are some examples:\nnice sleep 60 \u0026amp; # Start a new process with the default nice value (0) nice -n 15 sleep 60 \u0026amp; # Start a new process with a nice value of 15 To adjust the nice value of an existing process, use the renice command. The renice command allows users to change the nice value of a running process. Unprivileged users may only increase the nice value (lower the priority), up to a maximum of 19. Privileged users can both increase and decrease the nice value, with a minimum of -20. It is available to modify the nice value of a process from the interactive interface of top by pressing r, entering the process ID, and then specifying the new nice value. Below is an example of using renice:\nrenice -n 18 1997 # Change the nice value of the process with PID 1997 to 18 18. Manage SELinux Security Change the SELinux Environment Mode SHOW CONTENTS SELinux (Security-Enhanced Linux) is a security module for the Linux kernel that provides a mechanism for enforcing access control security policies. It ensures resource access is controlled at a granular level. Unlike traditional file permissions, which control file access for specific users or groups, SELinux prevents even authorized users with access to a file from using it for unintended purposes. SELinux operates based on application-specific policies, such as the targeted policy, which precisely defines the allowed actions and access for each binary executable, configuration file, and data file used by an application.\nSELinux policies are security rules that define how specific processes can access files, directories, and ports. Each resource entity—such as a file, process, directory, or port—has a label called an SELinux context, which can be viewed using -Z option in many commands. Each SELinux context consists of four fields: user, role, type, and security level.\nUser: Specifies the SELinux user associated with the resource. Role: Defines the role assigned to the resource, determining the permitted actions within the system. Type: Specifies the type or category of the resource, which is used for defining access controls. Security level: Indicates the security classification or sensitivity level of the resource. For example, a web server process runs with the httpd_t type context. By default, files and directories in the /var/www/html/ directory have the httpd_sys_content_t type context A web server can access the httpd_sys_content_t labeled files, but has no rules to allow access to files for other services, such as mysqld_db_t labeled files.\nSELinux supports three operational modes: enforcing, permissive, and disabled.\nEnforcing: SELinux is actively enforcing security policies. blocking any unauthorized access based on the policy. Permissive: SELinux logs any policy violations but does not block the access. This mode is helpful for testing and troubleshooting applications and rules. Disabled: SELinux is completely turned off. (Note that starting in Red Hat Enterprise Linux 9, SELinux can be fully disabled only by using the selinux=0 kernel parameter at boot.) To change the SELinux mode, the setenforce command can be used, or the /etc/selinux/config file can be edited. It is recommended to reboot the system after making changes. To enable or disable SELinux, pass selinux=1 or selinux=0 respectively during system boot. Below are some examples of how to change the SELinux mode using commands:\ngetenforce # Displays the current SELinux mode setenforce enforcing # Sets SELinux to enforcing mode setenforce 1 # Equivalent to setenforce enforcing Control SELinux File Contexts SHOW CONTENTS By default, SELinux labels files based on policies defined in the /etc/selinux/targeted/contexts/files/ directory. When creating a new file, it inherits the same label as its parent directory unless a specific label is applied. If a file is copied, its context will change, as copying a file creates a new inode. However, moving a file does not change its context, because moving a file only updates the inode\u0026rsquo;s filename without altering the inode itself. To preserve the context while copying, the -p or --preserved=context option can be used. For moving files, the -Z option is used to explicitly change the SELinux context. Below is an example:\nls /tmp # system_u:object_r:tmp_t:s0 /tmp touch /tmp/file1 /tmp/file2 /tmp/file3 ls -Z /tmp/file* # unconfined_u:object_r:user_tmp_t:s0 /tmp/file1 # unconfined_u:object_r:user_tmp_t:s0 /tmp/file2 # unconfined_u:object_r:user_tmp_t:s0 /tmp/file3 ls -Zd ~/ # unconfined_u:object_r:user_home_dir_t:s0 /home/signalyu999/ cp /tmp/file1 ~/ mv /tmp/file2 ~/ mv -Z /tmp/file3 ~/ ls -Z ~/file* # unconfined_u:object_r:user_home_t:s0 /home/signalyu999/file1 # unconfined_u:object_r:user_tmp_t:s0 /home/signalyu999/file2 # unconfined_u:object_r:user_home_t:s0 /home/signalyu999/file3 To change the SELinux context, three commands—semanage fcontext, restorecon, and chcon—are commonly used:\nsemanage fcontext: This command defines custom SELinux context rules for files or directories. It is often used to assign a specific context to files when they are created or moved to a particular location. restorecon: This command applies the SELinux context based on the rules defined by semanage fcontext. It restores the SELinux context of the file or directory to the predefined context. chcon: This command changes the SELinux context of a file or directory temporarily. Unlike semanage, which alters permanent rules, chcon applies the context change on a temporary basis and can be overwritten by restorecon. # Define a custom SELinux context for files in /home/signalyu999/test sudo semanage fcontext -a -t tmp_t \u0026#34;/home/signalyu999/test(/.*)?\u0026#34; mkdir ~/test # Before applying ls -Zd ~/test # unconfined_u:object_r:user_home_t:s0 /home/signalyu999/test cd test/ touch file1.txt ls -Z file1.txt # unconfined_u:object_r:user_home_t:s0 file1.txt # Apply the custom SELinux context rule using restorecon restorecon -v ~/test # After applying ls -Zd ~/test # unconfined_u:object_r:tmp_t:s0 /home/signalyu999/test ls -Zd file1.txt unconfined_u:object_r:user_home_t:s0 file1.txt touch file2.txt ls -Z file2.txt # unconfined_u:object_r:user_tmp_t:s0 file2.txt # Temporarily change the SELinux context using chcon sudo chcon -t user_home_t ~/test ls -Zd ~/test # unconfined_u:object_r:user_home_t:s0 /home/signalyu999/test touch file3.txt ls -Z file3.txt # unconfined_u:object_r:user_home_t:s0 file3.txt # Restore the original SELinux context with restorecon restorecon -v ~/test ls -Zd ~/test # unconfined_u:object_r:tmp_t:s0 /home/signalyu999/test ls -Z file* # unconfined_u:object_r:user_home_t:s0 file1.txt # unconfined_u:object_r:user_home_t:s0 file3.txt # unconfined_u:object_r:user_tmp_t:s0 file2.txt sudo semanage fcontext -l | grep \u0026#34;/home/signalyu999\u0026#34; /home/signalyu999/test(/.*)? all files system_u:object_r:tmp_t:s0 restorecon -Rv ~/test # Relabeled /home/signalyu999/test/file1.txt from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:tmp_t:s0 # Relabeled /home/signalyu999/test/file2.txt from unconfined_u:object_r:user_tmp_t:s0 to unconfined_u:object_r:tmp_t:s0 # Relabeled /home/signalyu999/test/file3.txt from unconfined_u:object_r:user_home_t:s0 to unconfined_u:object_r:tmp_t:s0 ls -Z file* # unconfined_u:object_r:tmp_t:s0 file1.txt # unconfined_u:object_r:tmp_t:s0 file3.txt # unconfined_u:object_r:tmp_t:s0 file2.txt rm -r ~/test # Delete the custom context rule sudo semanage fcontext -d \u0026#34;/home/signalyu999/test(/.*)?\u0026#34; Adjust SELinux with Booleans SHOW CONTENTS SELinux Booleans are runtime tunable parameters that control specific aspects of SELinux behavior. They allow administrators to enable or disable certain security features without altering the underlying SELinux policies. Some common SELinux booleans include:\nhttpd_can_network_connect: Enable it to allow Apache to access external resources over the network. httpd_enable_homedirs: Enable it to allow Apache to serve content from user home directories. allow_execmem: Enable it to allow executable memory mapping. selinuxuser_execheap: Enable it to allow SELinux users to execute files with low-security contexts. samba_enable_home_dirs: Enable it to allow Samba to share user home directories. To manage SELinux booleans, the following commands are commonly used: getsebool, setsebool, and semanage boolean. Below is an example of how to check and change SELinux boolean values:\n# List all SELinux booleans related to \u0026#34;httpd_enable_\u0026#34; getsebool -a | grep \u0026#34;httpd_enable_\u0026#34; # httpd_enable_cgi --\u0026gt; on # httpd_enable_ftp_server --\u0026gt; off # httpd_enable_homedirs --\u0026gt; off # Check the current state of a specific boolean getsebool httpd_enable_homedirs # httpd_enable_homedirs --\u0026gt; off # Use semanage to view the details of a specific boolean sudo semanage boolean -l | grep httpd_enable_homedirs # httpd_enable_homedirs (off, off) Allow httpd to enable homedirs # Change the value of a boolean (without the -P flag, the changes will only persist until the system is rebooted) sudo setsebool httpd_enable_homedirs on # Use semanage again to confirm the change sudo semanage boolean -l | grep httpd_enable_homedirs # httpd_enable_homedirs (on, off) Allow httpd to enable homedirs # Make the change persistent across reboots sudo setsebool -P httpd_enable_homedirs on # Check the persistent state of all SELinux booleans sudo semanage boolean -l -C # SELinux boolean State Default Description # httpd_enable_homedirs (on, on) Allow httpd to enable homedirs # ... sudo setsebool -P httpd_enable_homedirs off Investigate and Resolve SELinux Issues SHOW CONTENTS When SELinux denies an action, it logs an AVC (Access Vector Cache) message to the /var/log/audit/audit.log file. Additionally, a summary of the AVC event is sent to /var/log/messages. These logs provide valuable information to diagnose SELinux-related issues. Here are some common steps to troubleshoot SELinux issues:\nView SELinux Logs: The first step in troubleshooting SELinux issues is to check the SELinux logs for AVC denials. This can be done using the following command: sudo grep AVC /var/log/audit/audit.log | audit2why Check and Set SELinux Booleans: The second step is to permit SELinux behavior by setting SELinux Booleans. To list the current SELinux booleans and search for a specific one (e.g., related to HTTPD), use the following command: getsebool -a | grep httpd If a boolean needs to be modified, for example, enabling Apache to read user content, use the setsebool command with the -P option to make the change persistent:\nsudo setsebool -P httpd_read_user_content 1 Check File and Directory Contexts: The third step is to check the context of a file or directory as incorrect or missing contexts can result in access denials. This can be done using the following command: ls -Z /path/to/file If the context is incorrect, it can be fixed using the semanage fcontext command to define the correct context or restorecon to apply the default context based on the current policies:\nsudo restorecon -v /path/to/file Below is a simple example:\nsudo systemctl start httpd echo \u0026#34;\u0026lt;h1\u0026gt;HELLO\u0026lt;/h1\u0026gt;\u0026#34; \u0026gt;\u0026gt; ~/index.html sudo mv ~/index.html /var/www/html/ curl http://localhost/index.html # \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u0026gt; # \u0026lt;html\u0026gt;\u0026lt;head\u0026gt; # \u0026lt;title\u0026gt;404 Not Found\u0026lt;/title\u0026gt; # \u0026lt;/head\u0026gt;\u0026lt;body\u0026gt; # \u0026lt;h1\u0026gt;Not Found\u0026lt;/h1\u0026gt; # \u0026lt;p\u0026gt;The requested URL was not found on this server.\u0026lt;/p\u0026gt; # \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; # Check the SELinux audit logs for AVC denials related to the \u0026#34;httpd\u0026#34; process sudo grep AVC /var/log/audit/audit.log | audit2why # type=AVC msg=audit(1746191992.345:5086): avc: denied { read } for pid=84172 comm=\u0026#34;httpd\u0026#34; name=\u0026#34;index.html\u0026#34; dev=\u0026#34;dm-0\u0026#34; ino=34324608 scontext=system_u:system_r:httpd_t:s0 tcontext=unconfined_u:object_r:user_home_t:s0 tclass=file permissive=0 # Was caused by: # The boolean httpd_read_user_content was set incorrectly. # Description: # Allow httpd to read user content # Allow access by executing: # # setsebool -P httpd_read_user_content 1 sudo setsebool -P httpd_read_user_content 1 curl http://localhost/index.html # \u0026lt;h1\u0026gt;HELLO\u0026lt;/h1\u0026gt; 19. Manage Basic Storage Add Partitions, File Systems, and Persistent Mounts SHOW CONTENTS Disk partitioning is the process of dividing a computer\u0026rsquo;s storage device into separate, independent sections called partitions. Each partition acts like an individual disk, allowing it to be formatted with a specific file system and used for various purposes, such as system files, user data, or backups. There are two main disk partitioning schemes: MBR (Master Boot Record) and GPT (GUID Partition Table).\nMBR (Master Boot Record): MBR is an older partitioning scheme that is commonly used in BIOS-based systems. It stores partitioning information in the first sector of the disk, known as the master boot record. This sector contains both the bootloader (a small program that helps the system load the operating system) and the partition table, which holds the details about each partition. MBR supports a maximum of four primary partitions and is limited to disks up to 2 TB in size. GPT (GUID Partition Table): GPT is a newer partitioning scheme designed as part of the UEFI (Unified Extensible Firmware Interface) standard. GPT overcomes the limitations of MBR by using two partition tables: a primary GPT header located at the beginning of the disk and a backup GPT header stored at the end of the disk. This redundancy ensures protection in case the primary GPT header is damaged. GPT supports up to 128 partitions by default and can handle disks as large as 9.4 ZB. Below is an real-world example of disk partitioning:\n# 1. Shutdown the VMware machine and add the new disk device. # 2. Use parted to manage the partitions on /dev/sdb (the new disk). sudo parted /dev/sdb # 3. Create a new partition table (GPT or MSDOS). GPT is recommended for modern systems. (parted) mklabel gpt # Or use \u0026#34;msdos\u0026#34; for older systems. # 4. Create a new primary partition (parted) mkpart # partition name: app-data # file system type: ext4 # start: 0% # end: 50% # 5. Print the partition information to verify the partition layout. (parted) print # 6. Ensure the system create the associated device file in the /dev directory udevadm settle # 7. Format the partition sudo mkfs.ext4 /dev/sdb1 # 8. Create a mounting point and mount the newly created partition sudo mkdir /mnt/mydata sudo mount /dev/sdb1 /mnt/mydata # 9. Use blkid to get the UUID of the new partition. sudo blkid /dev/sdb1 # /dev/sdb1: UUID=\u0026#34;98c3694b-5a44-4729-bc14-2987562754cd\u0026#34; TYPE=\u0026#34;ext4\u0026#34; PARTLABEL=\u0026#34;app-data\u0026#34; PARTUUID=\u0026#34;4c737002-504a-4206-adda-737270fc083e\u0026#34; # 10. Edit the /etc/fstab sudo vim /etc/fstab # UUID=98c3694b-5a44-4729-bc14-2987562754cd /mnt/mydata ext4 defaults 0 2 # UUID: Universally Unique Identifier # defaults: include auto mount option # /mnt/mydata: mounting point # ext4: file system # 0: dump (back up option), 0 = no backup (default), 1 = enable backup # 0: fsck (file system checking), 0 = do not check, 1 = check first (usually for root), 2 = check after root (for other file systems) # 11. After editing /etc/fstab, mount all filesystems as specified in /etc/fstab. sudo mount -a # 12. Use the df command to check that the partition is correctly mounted. df -h # 13. Register new configuraation sudo systemctl daemon-reload Below is a real-world example of removing a partition:\n# 1. Ensure the partition is not mounted sudo umount /dev/sdb1 # 2. Check if it is mounted df -h # 3. Delete the partition in parted parted /dev/sdb (parted) print (parted) rm 1 # 4. Edit the /etc/fstab file Manage Swap Space SHOW CONTENTS Swap space is a portion of the disk that is used as virtual memory when the system\u0026rsquo;s physical RAM is full. It allows the operating system to move inactive pages from RAM to disk, free up memory for active processes.\nWhen creating swap partitions, administrators should size the swap space based on the memory workload on the system. Below is a practical guide line:\nRAM Size Swap (No Hibernation) Swap (With Hibernation) \u0026lt; 2 GB Twice the RAM Three times the RAM 2–8 GB Same as RAM Twice the RAM 8–64 GB At least 4 GB 1.5 times the RAM \u0026gt; 64 GB At least 4 GB Hibernation is not recommended Below is an real-world example of creating swap partition:\n# 1. Open parted to manage the new disk parted /dev/sdc # 2. Create a GPT partition table (parted) mklabel gpt # 3. Create a new partition (parted) mkpart # partition name: swap1 # file system type: linux-swap # start: 0% # end: 100% # 4. Ensure the system create the associated device file in the /dev directory udevadm settle # 5. Format the new partition as swap space mkswap /dev/sdc1 # 6. Activate the swap space immediately swapon /dev/sdc1 # 7. Get the UUID of the swap partition blkid /dev/sdc1 # /dev/sdc1: UUID=\u0026#34;e2d9fbc3-65dc-4427-8051-c07dcc043866\u0026#34; TYPE=\u0026#34;swap\u0026#34; PARTLABEL=\u0026#34;swap1\u0026#34; PARTUUID=\u0026#34;4f0f1298-cf05-4440-856f-534d69aeeccc\u0026#34; # 8. Edit fstab to enable swap at boot sudo vim /etc/fstab # UUID=e2d9fbc3-65dc-4427-8051-c07dcc043866 none swap defaults 0 0 # Add the following line for default swap: # UUID=e2d9fbc3-65dc-4427-8051-c07dcc043866 none swap defaults 0 0 # Or set a custom priority: # UUID=e2d9fbc3-65dc-4427-8051-c07dcc043866 none swap pri=10 0 0 # 9. Reload systemd config (optional if fstab changed) sudo systemctl daemon-reload # 10. Display swap space priorities swapon --show Below is a real-world example of removing a swap partition:\n# 1. Turn off swap sudo swapoff /dev/sdc1 # 2. Verify whether a swap is off swapon --summary # 3. Remove the partition in parted parted /dev/sdc1 (parted) print (parted) rm [number] # 4. Edit the /etc/fstab file 20. Manage Storage Stack Create and Extend Logical Volumes SHOW CONTENTS Logical Volume Manager (LVM) is a system for managing disk storage in Linux that adds a layer of abstraction between physical storage devices and file systems. It allows multiple physical volumes to be combined into a single volume group, enabling more flexible and efficient storage allocation. The key components of LVM include: Physical Devices (PD), Physical Volumes (PV), Volume Groups (VG), and Logical Volumes (LV).\n📦 Physical Devices: These are actual hardware devices or virtual disks (e.g., /dev/sda, /dev/sdb). 💽 Physical Volumes (PV): Physical devices that have been initialized for LVM using pvcreate. 🧱 Volume Groups (VG): Collections of one or more physical volumes, combined into a single logical storage pool. Created using vgcreate. 📂 Logical Volumes (LV): Flexible storage units carved out from volume groups, created using lvcreate. Creating a logical volume involves creating physical device partitions, physical volumes, and volume groups. Below is an example:\n# 1. Prepare physical devices parted /dev/sdb (parted) mklabel gpt (parted) mkpart primary 1MiB 50% (parted) set 1 lvm on parted /dev/sdc (parted) mklabel gpt (parted) mkpart primary 50% 100% (parted) set 1 lvm on udevadm settle # 2. Create Physical volumes pvcreate /dev/sdb1 /dev/sdc1 # Physical volume \u0026#34;/dev/sdb1\u0026#34; successfully created. # Physical volume \u0026#34;/dev/sdc1\u0026#34; successfully created. # 3. Create volume groups vgcreate vg01 /dev/sdb1 /dev/sdc1 # Volume group \u0026#34;vg01\u0026#34; successfully created # 4. Create a logical volume lvcreate -n lv01 -L 100G vg01 # Logical volume \u0026#34;lv01\u0026#34; created. # 5. Format the logical volume mkfs.ext4 /dev/vg01/lv01 # 6. Edit the /etc/fstab file blkid /dev/vg01/lv01 # /dev/vg01/lv01: UUID=\u0026#34;87a466b5-4b94-4881-8398-4ec3f91544f1\u0026#34; TYPE=\u0026#34;ext4\u0026#34; vim /etc/fstab # UUID=87a466b5-4b94-4881-8398-4ec3f91544f1 /mnt/app-data ext4 defaults 0 0 # 7. Mount the logical volume to /mnt/app-data mount /dev/vg01/lv01 /mnt/app-data # 7. Verify whether if the logical volume is mounted df -h Below is an example of removing logical volumes, volume groups, and physical volumes:\n# 1. Unmount the file system and remove any /etc/fstab entries associated with it umount /mnt/app-data vim /etc/fstab # Remove any entries with the file system # 2. Back up the data before removing cp -r /mnt/app-data ~/backup/volume-data # 3. Remove the logical volume lvremove /dev/vg01/lv01 # 4. Remove the volume group vgremove vg01 # 5. Remove the physical volumes pvremove /dev/sdb1 /dev/sdc1 Here are some commonly used command of LVM:\npvdisplay /dev/sdb1: Displays detailed information about the physical volume /dev/sdb1. vgdisplay vg01: Shows information about the volume group vg01. lvdisplay /dev/vg01/lv01: Displays details of the logical volume lv01 under volume group vg01. Extend a volume group size: # Prepare the physical device parted /dev/sdb (parted) mklabel gpt # Set GPT partition table (parted) mkpart primary 50% 100% # Create partition in the second half of the disk (parted) set 3 lvm on # Mark it as an LVM partition udevadm settle # Wait for partition events to settle pvcreate /dev/sdb3 # Initialize as a physical volume vgextend vg01 /dev/sdb3 # Extend volume group vg01 with the new PV Extend a logical volume size: lvextend -L +500M /dev/vg01/lv01 # Increase LV size by 500MB xfs_growfs /mnt/app-data/ # For XFS file system (online grow only) resize2fs /dev/vg01/lv01 # For ext2/3/4 file systems (supports online/offline grow/shrink) Extend swap space logical volume: swapoff -v /dev/vg01/swap # Disable swap before resizing lvextend -L +300M /dev/vg01/swap # Extend swap by 300MB mkswap /dev/vg01/swap # Reformat as swap swapon /dev/vg01/swap # Re-enable swap Manage Layered Storage SHOW CONTENTS ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/linux/1-red-hat-enterprise-linux/","summary":"1. Introduction to Linux SHOW CONTENTS Open Source refers to software whose source code is freely available to the public for anyone to view, modify, and distribute. It encourages coolaboration, transparency, and community-driven improvements.\nOpen Source Licenses are legal agreements that define how software can be used, modified, and distributed. There are two main types of Copyleft and Permissive.\nCopyleft licenses require that any modified versions of the software also be open source, under the same terms as the original.","title":"Red Hat Enterprise Linux"},{"content":"Introduction to Docker SHOW CONTENTS Docker was developed to address the challenges of software deployment across various environments by providing a lightweight, consistent, and portable solution. Prior to Docker, developers often faced issues like \u0026ldquo;it works on my machine, but not in production,\u0026rdquo; caused by inconsistencies in dependencies, libraries, and configurations. Docker resolves this by containerizing applications, ensuring they run uniformly across any infrastructure. Its primary goal is to simplify development, testing, and deployment by encapsulating applications and their dependencies into isolated, reproducible containers. These containers are user-space instances that package code, runtime, system tools, and libraries, ensuring consistency across environments.\nThe key difference between Docker and Virtual Machines (VMs) lies in their architecture. VMs emulate entire hardware stacks, requiring a full operating system for each instance, which results in significant overhead. In contrast, Docker uses containers that share the host OS kernel, offering a more lightweight and efficient solution by isolating applications at the process level. Docker has three core components: images, containers, and registries. Images are read-only templates that contain application code and dependencies. Containers are runnable instances of these images; they are isolated, lightweight, and ephemeral. Registries are repositories that store and share Docker images. Docker Architecture SHOW CONTENTS Docker follows a Client/Server (C/S) architecture with a loosely coupled backend where various components perform specific functions. The basic workflow of Docker is as follows: Docker Client: The user interacts with the Docker Client, which communicates with the Docker Daemon to send requests. Docker Daemon: This is the core component of Docker\u0026rsquo;s architecture. It provides the Docker Server functionality, enabling it to accept requests from the Docker Client. Docker Engine: The Docker Engine executes a series of internal tasks. Each task is represented as a \u0026ldquo;Job.\u0026rdquo; Job Execution: Each Job performs a specific function, such as building an image, starting a container, or managing storage. Graph Driver: If a Job requires a container image, the Engine fetches it from a Docker Registry. The Graph driver stores the downloaded image as a Graph (a layered filesystem) and manages its dependencies. Network Creation: When a network environment needs to be created for Docker, the Network Driver is used to create and configure the network for Docker containers. Resource Management and Execution: If Docker needs to limit resources or execute user commands within containers, the Exec Driver is responsible for completing these operations. Libcontainer: Libcontainer is an independent container management package. Both the Network Driver and the Exec Driver rely on Libcontainer to perform specific container management operations. Common Docker Commands Basic Commands SHOW CONTENTS Start/Stop/Restart Docker: sudo systemctl start docker sudo systemctl stop docker sudo systemctl restart docker View Docker Status: sudo systemctl status docker View Docker Info: docker info View Docker Help Documentation: docker --help View Docker Version: docker -v Docker Image Commands SHOW CONTENTS Search for a Docker Image: docker search \u0026lt;image_name\u0026gt; docker search nginx Pull a Docker Image: docker pull \u0026lt;image_name\u0026gt; docker pull nginx List Docker Images: docker images docker image ls Inspect a Docker Image: docker inspect \u0026lt;image_name_or_id\u0026gt; docker inspect nginx Tag a Docker Image: docker tag \u0026lt;image_id_or_name\u0026gt; \u0026lt;new_image_name\u0026gt;:\u0026lt;new_tag\u0026gt; docker tag nginx:latest nginx:1.27.4 Remove a Docker Image: docker rmi \u0026lt;image_name_or_id\u0026gt; docker rmi nignx:1.27.4 Build a Docker Image: docker build -t \u0026lt;image_name\u0026gt;:\u0026lt;tag\u0026gt; \u0026lt;path_to_dockerfile\u0026gt; docker build -t myapp:latest . Save a Docker Image to a File: docker save -o \u0026lt;output_file_name\u0026gt;.tar \u0026lt;image_name\u0026gt;:\u0026lt;tag\u0026gt; docker save -o myapp.tar myapp:latest Load a Docker Image from a File: docker load -i \u0026lt;file_name\u0026gt;.tar docker load -i myapp.tar Prune Unused Docker Images: docker image prune docker image prune -a Docker Container Commands SHOW CONTENTS docker run: Create and start a new container docker run -it -p 8080:8080 --name tomcat9 tomcat:9-jre17 /bin/bash: Start a new container from the tomcat:9-jre17 image, name it tomcat9, map port 8080 inside the container to port 8080 on the host, and open an interactive bash shell inside the container. docker ps: List all currently running containers docker ps: List containers that are currently running. docker ps -a: List all containers. docker start \u0026lt;container_id_or_name\u0026gt;: Start a stopped container docker start my_container: Start a container with the name my_container. docker restart \u0026lt;container_id_or_name\u0026gt;: Restart a container docker restart my_container: Restart the container named my_container. docker stop \u0026lt;container_id_or_name\u0026gt;: Stop a running container docker stop my_container: Stop the container named my_container. docker kill \u0026lt;container_id_or_name\u0026gt;: Force stop a running container docker kill my_container: Force stop the container named my_container. docker rm \u0026lt;container_id_or_name\u0026gt;: Remove a stopped container docker rm my_container: Remove the container named my_container after it has stopped. docker run -d \u0026lt;container_id_or_name\u0026gt;: Start a container in detached mode (background) docker run -d nginx: Run the Nginx container in the background. docker logs \u0026lt;container_id_or_name\u0026gt;: View logs of a container docker logs my_container: View logs for the container named my_container. docker top \u0026lt;container_id_or_name\u0026gt;: View the running processes inside a container docker top my_container: Display the processes running inside my_container. docker inspect \u0026lt;container_id_or_name\u0026gt;: Get detailed information about a container docker inspect my_container: Show detailed metadata about the container named my_container. docker exec -it \u0026lt;container_id_or_name\u0026gt; \u0026lt;command\u0026gt;: Execute a command inside a running container (interactive mode) docker exec -it my_container bash: Open an interactive bash shell inside my_container. exit: Exit from an interactive session inside a container exit: Exit the interactive shell of the container and return to the host. docker cp \u0026lt;container_id_or_name\u0026gt;:\u0026lt;path_in_container\u0026gt; \u0026lt;path_on_host\u0026gt;: Copy files from a container to the host docker cp my_container:/app/file.txt /host/directory/: Copy file.txt from the container to the host. Docker Images SHOW CONTENTS A Docker image is a read-only template used to create containers. It is composed of several layers stacked on top of each other, with each layer representing a snapshot of the filesystem at a specific point in time. These snapshots capture modifications made by Docker instructions (such as installing a package, copying files, or modifying configurations). Layers are created during the execution of commands in a Dockerfile or when using a pre-existing image to build a new one.\nDocker leverages UnionFS to efficiently manage these layers, allowing it to present a unified view of the container\u0026rsquo;s filesystem. This approach helps optimize storage and performance, as common layers can be shared across different images. Here is a simple example of creating an image using a Dockerfile:\nFROM ubuntu # This layer contains the base Ubuntu image RUN apt-get update # This layer contains the updated package list COPY . /app # This layer contains the application files copied into /app CMD [\u0026#34;python\u0026#34;, \u0026#34;/app/app.py\u0026#34;] # This layer contains the command to run the application when the container starts Docker provides the docker commit command, which allows creating a new image based on the changes made to a running container. It is similar to taking a snapshot of the container\u0026rsquo;s current state. Below is a real-world example:\n# Run a container from a base image docker run -it ubuntu /bin/bash # Make changes inside the container apt-get update apt-get install -y vim # Commit the container to create a new image docker commit \u0026lt;container_id\u0026gt; my-ubuntu-image Docker Volumes SHOW CONTENTS A Docker volume is a persistent storage mechanism designed to store data outside of a container\u0026rsquo;s filesystem. Volumes are stored on the host machine and can be shared and reused across multiple containers. They are particularly useful for overcoming the ephemeral nature of container filesystems, ensuring that data persists even when containers are stopped, removed, or replaced. Below are some example use cases:\n# Create a named volume (stored in /var/lib/docker/volumes/mysql_data on the host) docker volume create mysql_data # Run a MySQL container, mounting the volume to store data persistently (default is rw for read-write) docker run -d --name mysql1 -v mysql_data:/var/lib/mysql mysql # Run a container with a read-only volume mount, preventing modifications to the config files docker run -d --name myapp -v /tmp/config:/app/config:ro myapp # Use --volumes-from to mount the volume from mysql1 into mysql2, sharing data between the containers docker run -d --volumes-from mysql1 --name mysql2 mysql Installing Software in Docker Search Image Versions SHOW CONTENTS vim ~/.bashrc: # Search docker image versions dkr_image_versions() { # Usage: dkr_image_versions \u0026lt;image_name\u0026gt; [limit] # Fetches version tags from Docker Hub for a given image, sorted by version number # Default shows all versions, optional limit controls output count local image_name=$1 local limit=${2:-0} # Default 0 (show all), if not provided # Validate input if [ -z \u0026#34;$image_name\u0026#34; ]; then echo \u0026#34;Error: Image name not specified\u0026#34; \u0026gt;\u0026amp;2 echo \u0026#34;Usage: dkr_image_versions \u0026lt;image_name\u0026gt; [limit]\u0026#34; \u0026gt;\u0026amp;2 return 1 fi # Fetch and process versions versions=$(curl -s \u0026#34;https://hub.docker.com/v2/repositories/library/$ {image_name}/tags/?page_size=100\u0026#34; | \\ jq -r \u0026#39;.results[].name\u0026#39; | \\ grep -E \u0026#39;^[0-9]+\\.*\u0026#39; | \\ sort -rV) # Reverse version sort (newest first) # Handle empty results if [ -z \u0026#34;$versions\u0026#34; ]; then echo \u0026#34;No version tags found for image: ${image_name}\u0026#34; \u0026gt;\u0026amp;2 return 1 fi # Apply limit if specified if [ \u0026#34;$limit\u0026#34; -gt 0 ]; then echo \u0026#34;$versions\u0026#34; | head -n \u0026#34;$limit\u0026#34; else echo \u0026#34;$versions\u0026#34; fi } source ~/.bashrc dkr_image_versions ubuntu [number] Tomcat SHOW CONTENTS Run the Tomcat container with interactive shell: docker run -p 8080:8080 --name tomcat2 -it tomcat:9-jre17 /bin/bash Remove the webapps directory: rm -r webapps Rename webapps.dist to webapps: mv webapps.dist webapps Start Tomcat in the background: ./bin/catalina.sh run \u0026amp; Open port 8080 in the firewall: sudo firewall-cmd --permanent --add-port=8080/tcp Reload the firewall configuration to apply changes: sudo firewall-cmd --reload MySQL SHOW CONTENTS Create Volumes for Log, Data, and Config: docker volume create mysql_data # Volume for MySQL data docker volume create mysql_log # Volume for MySQL logs docker volume create mysql_conf # Volume for MySQL configuration Run MySQL Container with Volumes: docker run -d \\ --name mysql \\ -e MYSQL_ROOT_PASSWORD=my-secret-pw \\ -p 3306:3306 \\ -v mysql_data:/var/lib/mysql \\ -v mysql_log:/var/log/mysql \\ -v mysql_conf:/etc/mysql/conf.d \\ mysql:latest Configure MySQL (Optional) # Optional: Copy custom config file to the volume cp my.cnf /var/lib/docker/volumes/mysql_conf/ Access MySQL: docker exec -it mysql mysql -u root -p Redis SHOW CONTENTS Create named Docker volumes: docker volume create redis_conf docker volume create redis_data Edit the Redis config file /var/lib/docker/volumes/redis_conf/redis.conf: # /app/redis/redis.conf requirepass yourpassword # bind 127.0.0.1 ← comment this out daemonize no # ensure Redis runs in foreground Start the Redis container: docker run -d \\ --name redis7 \\ --privileged=true \\ -p 6379:6379 \\ -v redis_conf:/etc/redis \\ -v redis_data:/data \\ redis:7.4.3 redis-server /etc/redis/redis.conf ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/devops/docker/1-docker/","summary":"Introduction to Docker SHOW CONTENTS Docker was developed to address the challenges of software deployment across various environments by providing a lightweight, consistent, and portable solution. Prior to Docker, developers often faced issues like \u0026ldquo;it works on my machine, but not in production,\u0026rdquo; caused by inconsistencies in dependencies, libraries, and configurations. Docker resolves this by containerizing applications, ensuring they run uniformly across any infrastructure. Its primary goal is to simplify development, testing, and deployment by encapsulating applications and their dependencies into isolated, reproducible containers.","title":"Docker"},{"content":"Function Function arguments refer to data passed to the function. In python, there four main types of arguments: positional arguments, keyword arguments, default arguments, and variable length arguments.\nPositional arguments are passed to a function in a specific order, and the values are assigned to parameters based on their position. Keyword arguments are passed to a function by explicitly specifying the parameter name. Any keyword arguments must be put after the last positional argument. A default argument allows a function to accept values for parameters that are not provided by the caller. If no argument is passed for a parameter with a default value, the default will be used. Any default arguments must be put after the last positional argument. Variable length arguments allow a function to accept any number of positional arguments. *args accepts all arguments into a tuple, while **kwargs accepts all arguments into a dictionary. SHOW CODE Python def function_arguments(a, b=2, *args, c=3, **kwargs): print(f\"a: {a}, b: {b}, args: {args}, c: {c}, kwargs: {kwargs}\") function_arguments(1, 1997, 9, 99, 999, name=\"Signal\", age=27) SHOW OUTPUT Output a: 1, b: 1997, args: (9, 99, 999), c: 3, kwargs: {'name': 'Signal', 'age': 27} In Python, functions always return a value, if no return is specified, they return None.\nSHOW CODE Python def check_even(num): if num % 2 == 0: return True # No else clause, so returns None if odd print(check_even(3)) # None In Python, a variable defined outside a function is accessible within the function\u0026rsquo;s body, but only for reading its value. If a value is assigned to the variable inside the function, a new local variable with the same name is created, and the external variable remains unchanged.\nSHOW CODE Python Python x = 1 def fun(): print(x) fun() # 1 x = 1 def fun(): x = 2 print(x) fun() # 2 To modify a variable defined outside a function, the global keyword can be used, extending the variable\u0026rsquo;s scope into the function and allowing both reading and modification.\nSHOW CODE Python x = 1 def fun(): global x x = 2 print(x) print(x) # 1 fun() # 2 print(x) # 2 For function arguments, if the argument is a list, modifying the parameter itself doesn\u0026rsquo;t affect the original list, but modifying the list\u0026rsquo;s contents will affect the original list.\nSHOW CODE Python Python def fun(list_1): print(\"Before modification...\") print(f\"list_1: {list_1}\") print(f\"list_2: {list_2}\") list_1 = [0, 0] # Modify the parameter itself print(\"After modification...\") print(f\"list_1: {list_1}\") print(f\"list_2: {list_2}\") list_2 = [1, 2] fun(list_2) print(f\"Outside the funtion: list_2 = {list_2}\") ######################### Output ######################### Before modification... list_1: [1, 2] list_2: [1, 2] After modification... list_1: [0, 0] list_2: [1, 2] Outside the function: list_2 = [1, 2] ########################################################## ##################### Memory Diagram ##################### +-----------+ +--------+ +-----------+ | list_2 | ----\u003e | [1, 2] | \u003c---- | list_1 | +-----------+ +--------+ +-----------+ ############### Executing list_1 = [0, 0] ################ +-----------+ +--------+ | list_2 | ----\u003e | [1, 2] | +-----------+ +--------+ +-----------+ +--------+ | list_1 | ----\u003e | [0, 0] | +-----------+ +--------+ ########################################################## def fun(list_1): print(\"Before modification...\") print(f\"list_1: {list_1}\") print(f\"list_2: {list_2}\") list_1[0] = 999 # Modify the list's content print(\"After modification...\") print(f\"list_1: {list_1}\") print(f\"list_2: {list_2}\") list_2 = [1, 2] fun(list_2) print(f\"Outside the function: list_2 = {list_2}\") ######################### Output ######################### Before modification... list_1: [1, 2] list_2: [1, 2] After modification... list_1: [999, 2] list_2: [999, 2] Outside the funtion: list_2 = [999, 2] ########################################################## ##################### Memory Diagram ##################### +-----------+ +--------+ +-----------+ | list_2 | ----\u003e | [1, 2] | \u003c---- | list_1 | +-----------+ +--------+ +-----------+ ############### Executing list_1[0] = 999 ################ +-----------+ +----------+ +-----------+ | list_2 | ----\u003e | [999, 2] | \u003c---- | list_1 | +-----------+ +----------+ +-----------+ ########################################################## Operators Floor division // rounds down the result of the division, truncating any fractional part. For example, -6 // 4 outputs -2. Left-sided binding refers to the way operators or expressions are evaluated from left to right. Most operators evaluate left-to-right. For example, 9 % 6 % 2 returns 1. Right-sided binding refers to expressions where the evaluation happens from right to left. The exponentiation operator (**) and the chained assignment evaluate right-to-left. Compound assignment operators allow performing an operation and then assign the result of it to a variable in a single step. For example, the expression a /= 2 * 3 evaluates 2 * 3 to 6, and then performs a = a / 6 that returns 1.0. List When assinging a list to a new variable, both variables reference the same list object in memory, meaning modifying one variable affects the other because they point to the same data.\nSHOW CODE Python list_1 = [\"A\", \"B\", \"C\"] list_2 = list_1 list_3 = list_2 ###################### Memory Diagram ##################### +-----------+ +-----------------+ +-----------+ | list_1 | ----\u003e | [\"A\", \"B\", \"C\"] | \u003c---- | list_2 | +-----------+ +-----------------+ +-----------+ ^ | +-----------+ | list_3 | +-----------+ ########################################################### del list_1[0] ################### Memory Diagram ################### +-----------+ +------------+ +-----------+ | list_1 | ----\u003e | [\"B\", \"C\"] | \u003c---- | list_2 | +-----------+ +------------+ +-----------+ ^ | +-----------+ | list_3 | +-----------+ ###################################################### del list_2 ####### Memory Diagram ########### +-----------+ +------------+ | list_1 | ----\u003e | [\"B\", \"C\"] | +-----------+ +------------+ ^ | +-----------+ | list_3 | +-----------+ ################################## print(list_3) # [\"B\", \"C\"] To copy the contents of the original list, slicing is commonly used.\nSHOW CODE Python list_1 = [\"A\", \"B\", \"C\"] list_2 = list_1[:] list_3 = list_2[:] ############ Memory Diagram ########### +-----------+ +-----------------+ | list_1 | ----\u003e | [\"A\", \"B\", \"C\"] | +-----------+ +-----------------+ +-----------+ +-----------------+ | list_2 | ----\u003e | [\"A\", \"B\", \"C\"] | +-----------+ +-----------------+ +-----------+ +-----------------+ | list_3 | ----\u003e | [\"A\", \"B\", \"C\"] | +-----------+ +-----------------+ ####################################### del list_1[0] ############ Memory Diagram ########### +-----------+ +-----------------+ | list_1 | ----\u003e | [\"B\", \"C\"] | +-----------+ +-----------------+ +-----------+ +-----------------+ | list_2 | ----\u003e | [\"A\", \"B\", \"C\"] | +-----------+ +-----------------+ +-----------+ +-----------------+ | list_3 | ----\u003e | [\"A\", \"B\", \"C\"] | +-----------+ +-----------------+ ####################################### del list_2[0] ############ Memory Diagram ########### +-----------+ +-----------------+ | list_1 | ----\u003e | [\"B\", \"C\"] | +-----------+ +-----------------+ +-----------+ +-----------------+ | list_2 | ----\u003e | [\"B\", \"C\"] | +-----------+ +-----------------+ +-----------+ +-----------------+ | list_3 | ----\u003e | [\"A\", \"B\", \"C\"] | +-----------+ +-----------------+ ####################################### print(list_3) # [\"A\", \"B\", \"C\"] List comprehension in Python provides a concise way to create lists by applying an expression to each item in an iterable and optionally filtering items based on a condition. It is typically faster than using loops for constructing lists.\nSHOW CODE Python # [expression for item in iterable if condition] squares = [x**2 for x in range(10) if x % 2 == 0] print(squares) # [0, 4, 16, 36, 64] Tuple \u0026amp; Dictionary Tuples are immutable sequences. A tuple with a single item must have a trailing comma (tup = (5, )) to differentiate it from a regular parentheses-enclosed expression.\nTuple unpacking allows extracting elements of a tuple into variables. The number of variables must match the number of elements in the tuple.\nSHOW CODE Python sides = (1, 2, 2) a, b, c = sides print(a, b, c) # 1 2 2 Dictionaries are mutable and unordered collections of key-value pairs. In Python 3.6x, dictionaries have become ordered by default, meaning the order of item is preserved based on the order of insertion.\nKeys in a dictionary must be of a type that is immutable (e.g., strings, numbers, or tuples). Mutable types like lists or dictionaries themselves cannot be used as dictionary keys.\nSHOW CODE Python valid = {('a', 'b'): 'tuple_key'} # OK invalid = {['a', 'b']: 'list_key'} # TypeError ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/programming/python/1-python-programming/","summary":"Function Function arguments refer to data passed to the function. In python, there four main types of arguments: positional arguments, keyword arguments, default arguments, and variable length arguments.\nPositional arguments are passed to a function in a specific order, and the values are assigned to parameters based on their position. Keyword arguments are passed to a function by explicitly specifying the parameter name. Any keyword arguments must be put after the last positional argument.","title":"Python Programming"},{"content":"1. Introduction to CCNA Exam Exam Topics CCNA Exam Topics Exam Instructions Cisco Exam Tutorial Question Types YOU CAN\u0026rsquo;T GO BACK AFTER ANSWERING OR SKIPPING A QUESTION.\nCCNA Question Types Online Testing A PRIVATE and QUITE place for AT LEAST 2 HOURS must be needed.\nOnline Testing Cisco Packet Tracer Installation Cisco Packet Tracer Installation (Login First) Schduling and Taking the Exam Scheduling And Taking the Exam Exam Prep: Binary Game Binary Game 2. Network Devices Network Devices Local Area Network (LAN): A network that connects computers and devices within a limited geographical area, such as a home, office, or school. Wide Area Network (WAN): A network that spans a large geographical area, often connecting multiple LANs. Computer Network: A system of interconnected computers and devices that communicate and share resources. Node: Any device connected to a network, such as a computer, printer, or phone. Resources: Assets shared over a network, including hardware (e.g., printers, storage) and software (e.g., applications, files). Client-Server: A network model where clients request services or resources from servers. Switches Devices provide connectivity between devices in a local area network (LAN). Routers: Devices that provide connectivity between LANs or external network. Wireless Router: A device that provides wireless connectivity to a network, allowing devices to connect without physical cables. Network Firewall: A security system that monitors and controls incoming and outgoing network traffic based on predefined security rules, protecting against unauthorized access. 3. Cables, Connectors, and Ports Ethernet: A widely used wired networking technology that connects devices in a LAN using cables such as twisted pair or fiber optics. It follows standards like IEEE 802.3. IEEE (Institude of Electrical and Electronics Engineers): An organization that defines networking standards, including Ethernet (IEEE 802.3) and Wi-Fi (IEEE 802.11). Unshilded Twisted Pair (UTP) Cables: A type of Ethernet cable with twisted copper wire pairs that reduce electromagnetic interference (EMI). Common categories include Cat5e, Cat6e, and Cat6a. Shielded Twisted Pair (STP) Cables: A type of Ethernet cable that includes additional shieding to protect against electromagnetic interference (EMI) and crosstalk (an interference caused by signal leakage between adjacent cables or wire pairs in a network). UTP Cables vs. STP Cables Electromagnetic Interference (EMI): Disruptions in signal transmission caused by external electromagnetic sources, such as power lines or other electronic devices. Shielded cables (STP) help reduce EMI. 8 Position 8 Contact (8P8C) Connector: The standard modular connector used for Ethernet cables, often incorrectly called an RJ45 connector. 8P8C vs. RJ45 Fiber Optic Cables: High-speed network cables that use light instead of electrical signals, offering faster speeds and resistance to EMI. Fiber Optic Cable Structure Single Mode Fiber (SMF): A fiber optic cable type designed for long-distance transimission using a single light beam, reducing signal loss and allowing for higher speeds. Multimode Fiber (MMF): A fiber optic cable type that carries multiple light beams, suitable for shorter distances due to higher dispersion. Single Mode vs. Multimode 4. Networking Models Networking models are conceptual models that define how different layers of a network should interact to achieve communication between devices. The two most common models are the OSI Model and the TCP/IP Model.\nThe OSI Reference Model The OSI (Open Systems Interconnection) Model is a conceptual framework that divides network communication into seven layers. These layers are the Physical Layer, Data Link Layer, Network Layer, Transport Layer, Session Layer, Presentation Layer, and Application Layer. Each layer has a specific function and interacts with adjacent layers to ensure smooth and efficient data transmission.\nPhysical Layer: Transmits raw bits over a physical medium (e.g., cables). Data Link Layer: Handles data frames and ensures error-free transmission between adjacent nodes (e.g., MAC addresses, switches). Network Layer: Determines the best path for data and handles addressing and routing (e.g., IP addresses, routers). Transport Layer: Ensures reliable data transfer with error correction and flow control (e.g., TCP, UDP). Session Layer: Manages and controls communication sessions between applications. Presentation Layer: Converts data formats for compatibility (e.g., encryption, compression). Application Layer: Provides network services directly to applications (e.g., HTTP, FTP, SMTP). OSI Reference Model OSI Reference Model The TCP/IP Model The TCP/IP Model (Transmission Control Protocol/Internet Protocol) is a practical framework used for internet communication. It consists of four layers: the Network Interface Layer, Internet Layer, Transport Layer, and Application Layer.\nNetwork Interface Layer: Handles physical data transmission over a network medium. It is equivalent to the Physical and Data Link Layers of the OSI model. Internet Layer: Routes packets across networks using IP addresses, similar to the Network Layer in the OSI model. Transport Layer: Ensures reliable (TCP) or fast (UDP) data delivery between devices, corresponding to the Transport Layer in the OSI model. Application Layer: Supports network applications and protocols like HTTP, FTP, and SMTP. It combines the functions of the Application, Presentation, and Session Layers in the OSI model. TCP/IP Model The 5-Layer Network Model The 5-Layer Network Model is a simplified version of the OSI Reference Model, commonly used to understand networking concepts. It merges the Session, Presentation, and Application Layers of the OSI model into a single Application Layer. Below is the diagram illustrating this model:\nThe 5-Layer Network Model Key Notes In networking, adjacent layer interaction refers to the communication and collaboration between two neighboring layers in a networking model. Each layer provides service to the layer above it and relies on the layer below it to perform its functions. 5. The Cisco ISO CLI EXEC, Privileged EXEC, and Global Configuration Modes In Cisco devices (such as routers and switches), there are three main modes that allow interaction with the device: EXEC, Privileged EXEC, and Global Configuration modes.\nEXEC, Privileged EXEC, and Global Configuration Modes EXEC Mode: This is the initial mode when first logging into a Cisco device. It provides basic access to the device and allows running simple monitoring and diagnostic commands. Privileged EXEC Mode: This mode provides more advanced commands to view detailed information about the device. To enter Privileged EXEC Mode, type enable from EXEC Mode. To exit Privileged EXEC Mode, type disable to return to EXEC Mode. Global Configuration Mode: This mode allows modification of the system configuration. To Global Configuration Mode, type configure terminal or conf t (shorthand). To return to Privileged EXEC Mode, type end or exit. 6. Ethernet LAN Switching Ethernet Frame Format An Ethernet frame is the fundamental unit of data transmission in Ethernet networks. It is used to encapsulate and transmit data over a Local Area Network (LAN). The Ethernet frame format is defined by the IEEE 802.3 standard and consists of several fields. Here is a detailed breakdown of the Ethernet frame format:\nEthernet Frame Format Preamble (7 bytes): A series f alternating 1s and 0s used for synchonization. SFD (Start Frame Delimiter, 1 byte): Uses a one byte bit pattern (10101011) to mark the end of the preamble and the start of the actual data. Destination MAC Address (6 bytes): The MAC address of the device receiving the frame. Source MAC Address (6 bytes): The MAC address of the device sending the frame. EtherType/Length (2 bytes): Indicates the type of protocol (e.g., IPv4, ARP) or the length of the payload. Payload/Data (46 - 1500 bytes): The actual data being transmitted, such as an IP packet or other protocol data. FCS (Frame Check Sequence, 4 bytes): A 32-bit CRC (Cyclic Redundency Check) for error detection. Note that the Ethernet header includes the Destination MAC Address, Source MAC Address, and Type/Length fields. It does not include the Preamble and Start Frame Delimiter (SFD) fields. The Ethernet trailer only includes the Frame Check Sequence (FCS) field.\nMAC Address A MAC address (Media Access Control Address) is a unique identifier assigned to a network interface controller (NIC) for communication on a network. It is a 6-byte address, typically represented in hexadecimal format. The MAC address is divided into two parts: OUI (Organizationally Unique Identifier) and NIC (Network Interface Controller) Specific. The OUI is assigned by the IEEE to identify the manufacturer or vendor of the device, while the NIC Specific part is assigned by the manufacturer to uniquely identify the network interface device.\nMAC Address Format Frame Switching In computer networks, switches help forward data by using a MAC (Media Access Control) address table. This table stores the MAC addresses of devices connected to the switch and the ports through which those devices are connected.\nWhen a switch receives a data frame, it checks the source MAC address in the frame. The switch then adds the MAC address to its MAC address table and associates it with the port from which the frame arrived. This process is called MAC address learning, and the MAC addresses added in this way are called dynamic MAC addresses.\nTo keep the MAC address table up-to-date, the switch uses MAC address aging. If the switch doesn\u0026rsquo;t receive a frame from a particular MAC address for five minutes, it removes that MAC address from the table. This helps avoid outdated or unnecessary entries.\nSwitches handle two types of frames: unicast and unknown unicast. A unicast frame is addressed to a specific device. If the switch knows the destination device\u0026rsquo;s MAC address, it forwards the frame to the correct port. This is called a known unicast frame. If the switch doesn\u0026rsquo;t know the destination MAC address, it treats the frame as an unknown unicast frame. In this case, the switch sends the frame to all its ports, except the one it received the frame on, in an attempt to reach the correct device. This is called flooding.\nHere are some common commands for managing MAC address table:\nshow mac address-table: Shows all learned MAC addresses. clear mac address-table dynamic: Deletes all dynamic MAC addresses. clear mac address-table dynamic address \u0026lt;mac-address\u0026gt;: Removes a specific MAC address. clear mac address-table dynamic interface \u0026lt;interface-name\u0026gt;: Clears MAC addresses on a specific port. ARP (Address Resolution Protocol) The Address Resolution Protocol (ARP) helps devices find the MAC addresses of another when they only know its IP address.\nARP works through two key messages: the ARP request and the ARP reply.\nARP Request: A device sends a broadcast message to FFFF.FFFF.FFFF, and asks \u0026ldquo;who has this IP address? Tell me your MAC address!\u0026rdquo; Since the ARP Request is a broadcast, the switch floods it to all devices in the same boradcast domain. ARP Reply: The device with the matching IP responds with its MAC address in a unicast message. A broadcast domain is a group of devices that receive each other\u0026rsquo;s broadcast messages. If multiple switches are connected, all devices on those switches are in the same broadcast domain.\nTo avoid sending ARP requests every time they communicate, devices store IP-to-MAC mappings in an ARP table. This table keeps entries for a short time before refreshing them.\nPing Ping is a widely used utility that helps test the connectivity between two devices on a network. It is part of the Internet Control Message Protocol (ICMP) and is a critical tool for diagnosing network issues and ensuring that devices can communicate with each other.\nPing is part of ICMP (Internet Control Message Protocol) and uses two messages:\nICMP Echo Request: The sender asks, \u0026ldquo;Are you there?\u0026rdquo; by sending a unicast message to the target device. ICMP Echo Reply: If the destination device is reachable, it responds with a unicast message confirming connectivity. Ping is commonly used for troubleshooting network connectivity issues. To use ping, simple type ping \u0026lt;ip-address\u0026gt;.\n7. IPv4 IPv4 Header Format IPv4 Header Format The IPv4 header format consists of several fields that help rout the packet from the source to the destination. Here\u0026rsquo;s a breakdown of the IPv4 header structure:\nVersion: Specifies the version of the IP protocol. For IPv4, the value is 4. IHL (Internet Header Length): Specifies the length of the header in 32-bit words. The minimum value is 5, which corresponds to a 20-byte header. Type of Service (ToS): Defines the priority or quality of service (delay, throughput, reliability) for the packet. Total Length: Specifies the entire packet size (header + data) in bytes. Identification: A unique identifier for the packet, used for reassembling fragmented packets. Flags: Used for fragmentation control. It has the following fields: Bit 0 (Reserved): Must be 0. Bit 1 (DF - Don\u0026rsquo;t Fragment): If set, fragmentation is disabled. Bit 2 (MF - More Fragments): If set more fragments follow. Fragmentation Offset: Specifies the position of the fragment\u0026rsquo;s data in the original packet. It is used for reassembling fragmented packets. TTL (Time To Live): Specifies the maximum number of hops the packet can traverse before being discarded. Decrease by 1 at each hop. Protocol: Specifies the protocol used in the data portion of the IP packet, such as: 1 for ICMP 6 for TCP 17 for UDP Header Checksum: A checksum value used for error-checking the header to ensure it has not been corrupted. Source IP Address: The IP address of the source of the packet. Destination IP Address: The IP address of the intended destination of the packet. Options: Optional fields for additional settings, such as security, timestamp, and routing information. Requires padding to align to 32 bits. IPv4 Addressing IPv4 addresses are 32-bit numbers that identify devices on a network. They are written in dotted decimal notation (e.g., 192.168.1.1), divided into four groups of 8 bits called octets. An IPv4 addresss is split into two parts: the network portion and the host portion.\nNetwork Portion: This part identifies the network where a device belongs. All devices in the same network share the same network portion. Host Portion: This part identifies the specific device in the network. Each device has a unique host portion. The network portion is usually indicated with a prefix (e.g., /24), which shows how many bits are used for the network. Alternatively, a netmask (e.g., 255.255.255.0) can also define the network portion. A netmask uses 1s for the network part and 0s for the host part.\nThe IP addresses can be categorized into three types: Network Address, Broadcast Address, and Usable Addresses.\nNetwork Address: The first address in a network (host portion is all 0s). It identifies the network and can\u0026rsquo;t be assigned to a device. Broadcast Address: The last address in a network (host portion is all 1s). It\u0026rsquo;s used to send messages to all devices in the network. However, to send a message to all hosts on the local network, the address 255.255.255.255 is usually used. Usable Addresses: These are the addresses that can be assigned to devices. The number of usable addresses is calculated as $2^y - 2$, where $y$ is the number of bits in the host portion. Subtracting 2 accounts for the exclusion of the network address and the broadcast address. IPv4 addresses can be organized into five classes: A, B, C, D, and E.\nClassful IPv4 Addresses Class A: For large networks. (First octet: 0-127, uses a /8 prefix) Class B: For medium-sized networks. (First octet: 128-191, uses a /16 prefix) Class C: For small networks. (First octet: 192-233, uses /24 prefix) Class D: For multicast addresses. Class E: For experimental purposes. Note that the classful addressing are obsolete, most modern networks use classless addressing (e.g., 192.168.1.0/28).\nConfiguring IPv4 Addresses On a Router Routers use interfaces with IPv4 addresses to commnunicate between networks. Here are some common use commands:\nshow ip interface brief: Shows a summary of interface statuses and their IP addresses. show ip interface [interface-name]: Shows detailed settings for a specific interface. no shutdown: Enables an interface (router interfaces are turned off by default.) ip address [ip-address] [netmask]: Assigns an IP address and a subnet mask to the interface. 8. Routing \u0026amp; Switch Interfaces ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/computer-networking/1-ccna/","summary":"1. Introduction to CCNA Exam Exam Topics CCNA Exam Topics Exam Instructions Cisco Exam Tutorial Question Types YOU CAN\u0026rsquo;T GO BACK AFTER ANSWERING OR SKIPPING A QUESTION.\nCCNA Question Types Online Testing A PRIVATE and QUITE place for AT LEAST 2 HOURS must be needed.\nOnline Testing Cisco Packet Tracer Installation Cisco Packet Tracer Installation (Login First) Schduling and Taking the Exam Scheduling And Taking the Exam Exam Prep: Binary Game Binary Game 2.","title":"Cisco Certified Networking Associate (CCNA)"},{"content":"リスニング 音楽 ブルー・ライト・ヨコハマ Your browser does not support the audio element. 歌詞見せて 街（まち『き』）の灯（あか）りが　とてもきれいね\nThe city lights are so beautiful\n城市的灯光如此美丽\nヨコハマ　ブルー・ライト・ヨコハマ\nYokohama, Blue Light Yokohama\n横滨，蓝色之光横滨\nあなたと二人　幸せよ\nWith you, I\u0026rsquo;m so happy\n与你在一起 多么幸福\nいつものように　愛のことばを\nAs always, whisper words of love\n像往常一样 请对我说爱的蜜语\nヨコハマ　ブルー・ライト・ヨコハマ\nYokohama, Blue Light Yokohama\n横滨，蓝色之光横滨\n私にください　あなたから\nPlease say them to me, my darling\n请对我说 亲爱的\n歩いても　歩いても\nNo matter how far we walk\n无论走多远\n小舟（こぶね）（）のように　わたしはゆれて\nI sway like a little boat\n我像小船般摇曳\nゆれて　あなたの腕の中\nSwaying in your arms\n摇曳在你怀中\n足音（あしおと）だけが　ついて来るのよ\nOnly our footsteps follow us\n唯有脚步声相随\nヨコハマ　ブルー・ライト・ヨコハマ\nYokohama, Blue Light Yokohama\n横滨，蓝色之光横滨\nやさしいくちづけ　もういちど\nGive me your tender kiss once more\n请再给我一个温柔的吻\n歩いても　歩いても\nNo matter how far we walk\n无论走多远\n小舟（こぶね）のように　わたしはゆれて\nI sway like a little boat\n我像小船般摇曳\nゆれて　あなたの腕の中\nSwaying in your arms\n摇曳在你怀中\nあなたの好きな　タバコの香（かお）り\nThe scent of your favorite tobacco\n你喜爱的烟草香气\nヨコハマ　ブルー・ライト・ヨコハマ\nYokohama, Blue Light Yokohama\n横滨，蓝色之光横滨\n二人の世界　いつまでも\nMay our world last forever\n愿我们的世界永存\nありがとう　あなた Your browser does not support the audio element. 歌詞見せて 私のせいなら　許してください\nPlease forgive me if it\u0026rsquo;s my fault\n如果是我的错，请原谅我\nあなたをこんなに　苦しめたことを\nFor causing you so much pain\n让我让你如此痛苦\n私のことなど　これきり忘れて\nForget about me from now on\n从今以后，忘记我吧\n明るい陽なたを　歩いてほしい\nI want you to walk in the bright sunlight\n我希望你能走在明媚的阳光下\n枯葉がひとつずつこぼれるたびに\nEvery time a dry leaf falls\n每当枯叶一片片飘落\n悲しいお別れ近づいてます\nThe sad farewell is approaching\n悲伤的告别即将到来\n泣いたり笑ったり　けんかをしたり\nCrying, laughing, and fighting\n哭泣、笑声、争吵\nあなたといるかぎり素直になれました\nAs long as I was with you, I could be honest\n只要和你在一起，我就能变得真诚\n”ありがとうあなた”\nThank you, you\n谢谢你\nあとどのくらい　愛されますか\nHow much longer will I be loved?\n我还能被爱多久？\nあとどのくらい　生きられますか\nHow much longer can I live?\n我还能活多久？\n私のせいなら　許してください\nPlease forgive me if it\u0026rsquo;s my fault\n如果是我的错，请原谅我\nあなたを知らずに傷つけたことを\nFor hurting you without knowing you\n无意中伤害了你\n私はひとりで　どうにかなるから\nI can manage alone\n我可以一个人应付\nいい人かならず　みつけてほしい\nI want you to find a good person\n我希望你能找到一个好人\n小石をひとつずつならべるように\nLike arranging small stones one by one\n就像一个个地排放小石头\nいろんな想い出数えています\nI am counting various memories\n我在数着各种回忆\n人から愛される　幸福の意味\nThe meaning of happiness is being loved by others\n幸福的意义是被人爱\nあなたは手をとって教えてくれました\nYou took my hand and taught me\n你牵着我的手教我\n”ありがとうあなた”\nThank you, you\n谢谢你\nあとどのくらい　愛されますか\nHow much longer will I be loved?\n我还能被爱多久？\nあとどのくらい　生きられますか\nHow much longer can I live?\n我还能活多久？\nさようならの向う側 Your browser does not support the audio element. 歌詞見せて 何億（おく）光年（こうねん）　輝（かがや）く星（ほし）にも　寿命（じゅみょう）があると\nEven stars shining billions of light years away have a lifespan\n即使是闪烁着亿万光年的星星也有寿命\n教えてくれたのは　あなたでした\nIt was you who taught me\n是你教给我的\n季節ごとに咲（さく）　一輪（りん）の花に　無限（むげん）の命（いのち）\nIn each season, a single flower blooms with infinite life\n每个季节里，开出的一朵花有着无限的生命\n知らせてくれたのも　あなたでした\nIt was you who told me\n是你告诉我的\nLast song for you\nLast song for you\n約束（やくそく）なしの　お別れです\nA farewell without promises\n没有约定的告别\nLast song for you\nLast song for you\n今度はいつと言えません\nI cannot say when we\u0026rsquo;ll meet again\n我无法说何时再见\nあなたの燃（も）える手　あなたの口づけ\nYour burning hands, your kiss\n你燃烧的手，你的吻\nあなたのぬくもり　あなたのすべてを\nYour warmth, your everything\n你的温暖，你的一切\nきっと　私　忘れません\nI will surely never forget\n我一定不会忘记\n後姿（すがた）　みないで下さい\nPlease don’t look at my back\n请不要看我的背影\nThank you for your kindness\nThank you for your tenderness\nThank you for your smile\nThank you for your love\nThank you for your everything\nさよならのかわりに\nInstead of saying goodbye\n代替告别的话\n眠（ねむ）れないほどに　思い惑（まど）う日々（ひび）　熱い言葉（ことば）で\nDays filled with confusion that kept me awake, supported by your passionate words\n日复一日的困惑，无法入睡，你的热情话语给了我支持\n支（ささ）えてくれたのは　あなたでした\nIt was you who supported me\n是你一直在支持我\n時として一人　くじけそうになる　心（こころ）に夢（ゆめ）を\nSometimes I was alone and felt like giving up, but you gave me dreams in my heart\n有时我一个人，感觉要崩溃，你给了我心中的梦想\n与（あた）えてくれたのも　あなたでした\nIt was you who gave it to me\n是你给我的\nLast song for you\nLast song for you\n涙（なみだ）をかくし　お別（わか）れです\nI hide my tears and say goodbye\n掩饰泪水，告别\nLast song for you\nLast song for you\nいつものように　さり気なく\nAs usual, casually\n像往常一样，悄无声息\nあなたの呼びかけ　あなたの喝采（かっさい）\nYour calls, your applause\n你呼唤的声音，你的掌声\nあなたのやさしさ　あなたのすべてを\nYour kindness, your everything\n你的温柔，你的一切\nきっと　私　忘れません\nI will surely never forget\n我一定不会忘记\n後姿（すがた）　みないでゆきます\nI’ll walk away without looking at your back\n我将离开，不回头\nThank you for your kindness\nThank you for your tenderness\nThank you for your smile\nThank you for your love\nThank you for your everything\nさよならのかわりに\nInstead of saying goodbye\n代替告别的话\nさよならのかわりに\nInstead of saying goodbye\n代替告别的话\nさよならのかわりに\nInstead of saying goodbye\n代替告别的话\nいのちの理由 Your browser does not support the audio element. 歌詞見せて 私が生（う）まれてきた訳（わけ）は\nThe reason I was born\n我出生的原因是\n父と母とに出会うため\nTo meet my father and mother\n为了遇见我的父母\n私が生まれてきた訳（わけ）は\nThe reason I was born\n我出生的原因是\nきょうだいたちに出会うため\nTo meet my siblings\n为了遇见我的兄弟姐妹\n私が生まれてきた訳（わけ）は\nThe reason I was born\n我出生的原因是\n友達みんなに出会うため\nTo meet all my friends\n为了遇见我的所有朋友\n私が生まれてきた訳（わけ）は\nThe reason I was born\n我出生的原因是\n愛（いと）しいあなたに出会うため\nTo meet you, my beloved\n为了遇见你，我的挚爱\n春来（く）れば 花自（おの）ずから咲（さ）くように\nWhen spring comes, flowers naturally bloom\n春天来临时，花朵自然而然地绽放\n秋くれば　葉（は）は自（おの）ずから散（ち）るように\nWhen autumn comes, the leaves naturally fall\n秋天来临时，树叶自然而然地飘落\nしあわせになるために\nTo become happy\n为了获得幸福\n誰もが生（う）まれてきたんだよ\nEveryone was born for this reason\n每个人都是为了这个原因而诞生\n悲（かな）しみの花の後（あと）からは\nAfter the flower of sadness\n悲伤之花之后\n喜（よろこ）びの実（み）が実（みの）るように\nThe fruit of joy will grow\n喜悦的果实将会成熟\n私が生まれてきた訳（わけ）は\nThe reason I was born\n我出生的原因是\n何処（どこ）かの誰かを傷（きず）つけて\nTo hurt someone somewhere\n为了伤害某个地方的某个人\n私が生まれてきた訳（わけ）は\nThe reason I was born\n我出生的原因是\n何処（どこ）かの誰かに傷（きず）ついて\nTo be hurt by someone somewhere\n为了被某个地方的某个人伤害\n私が生まれてきた訳（わけ）は\nThe reason I was born\n我出生的原因是\n何処（どこ）かの誰かに救（すく）われて\nTo be saved by someone somewhere\n为了被某个地方的某个人拯救\n私が生まれてきた訳は\nThe reason I was born\n我出生的原因是\n何処かの誰かを救（すく）うため\nTo save someone somewhere\n为了拯救某个地方的某个人\n夜が来て 闇（やみ）自（おの）ずから染み（しみ）るよう\nWhen night comes, the darkness naturally spreads\n夜幕降临，黑暗自然而然地扩散\n朝が来て 光（ひかり）自（おの）ずから照ら（てら）すよう\nWhen morning comes, the light naturally shines\n早晨到来，光明自然而然地照亮\nしあわせになるために\nTo become happy\n为了获得幸福\n誰もが生（い）きているんだよ\nEveryone is living for this reason\n每个人都在为此活着\n悲（かな）しみの海の向こうから\nFrom across the sea of sadness\n从悲伤之海的彼岸\n喜（よろこ）びが満（み）ちて来るように\nJoy will come flowing\n喜悦的潮水将会涌来\n私が生まれてきた訳は\nThe reason I was born\n我出生的原因是\n愛（いと）しいあなたに出会うため\nTo meet you, my beloved\n为了遇见你，我的挚爱\n私が生まれてきた訳は\nThe reason I was born\n我出生的原因是\n愛しいあなたを護（まも）るため\nTo protect you, my beloved\n为了守护你，我的挚爱\nキミとミタイセカイ Your browser does not support the audio element. 歌詞見せて ねぇ、まだ　あの日のまま\nHey, still, as it was that day\n嘿，依然如那一天\nねえ、今も、運（うん）命（めい）と願いたい\nHey, even now, I want to wish it’s fate\n嘿，现在，我依然希望这是命运\n幸せを描（えが）くはずだったミライ　霞（かす）んでいく、、、\nThe future that was supposed to paint happiness is fading\u0026hellip;\n本应描绘幸福的未来正逐渐模糊\u0026hellip;\nイロノナイセカイ\nA world without color\n没有色彩的世界\n僕の生（い）きる意味さえ分からなくなって、、\nI’ve even lost the meaning of my life\u0026hellip;\n连我活着的意义都变得不清楚\u0026hellip;\n時を戻（もど）して、声を聞かせて、\nTurn back time, let me hear your voice\n把时间倒流，让我听到你的声音\n教えて、僕らの愛（あい）を　I want\nTell me, about our love, I want\n告诉我，关于我们的爱，我想知道\nもう一度、、\nOnce again\u0026hellip;\n再一次\u0026hellip;\n本の気持ちまで失（うしな）って\nLosing even the real feelings\n连真实的感情也失去了\n満（み）たされたい幸せって何か？って\nWhat is happiness that I want to be fulfilled?\n什么是我想要填补的幸福？\nすれ違う表（ひょう）情（じょう）の向こう\nBeyond the expressions we pass by\n我们错身而过的表情背后\n僕とキミが描（えが）いていたストーリー\nThe story that you and I had been drawing\n你我曾一起描绘的故事\nキミトミタイセカイ\nA world I want to see with you\n我想和你一起看到的世界\nきっと目を覚（さ）ます頃（ころ）に　ナミダ溢（あふ）れて、、\nSurely, when I wake up, tears will overflow\u0026hellip;\n当我醒来时，眼泪一定会溢出\u0026hellip;\n寄（よ）り添（そ）うコトバ\nWords to stay close\n彼此依偎的话语\n「愛しているよ」\n\u0026ldquo;I love you\u0026rdquo;\n“我爱你”\nボクから伝（つた）えたい、、\nI want to convey it to you\u0026hellip;\n我想要传达给你\u0026hellip;\n愛を、、愛をもう一度\nLove\u0026hellip; love, once more\n爱\u0026hellip; 爱，再一次\nOH\nOH\n哦\n時を戻（もど）して　声を聴かせて\nTurn back time, let me hear your voice\n把时间倒流，让我听到你的声音\nOH\nOH\n哦\n虹 Your browser does not support the audio element. SHOW CONTENTS やさしくなりたい Your browser does not support the audio element. 歌詞見せて 地球儀を回して　世界100周旅行 Spinning the globe, traveling the world a hundred times 转动地球仪，环游世界一百圈\nキミがはしゃいでいる　まぶしい瞳で You’re all excited, with dazzling eyes 你欢快地跳跃着，眼睛闪闪发光\n光のうしろ側　忍び寄る影法師 Behind the light, a creeping shadow approaches 光明背后，潜伏着悄悄靠近的影子\nなつかしの昨日は　いま雨の中に Yesterday we long for is now in the rain 令人怀念的昨天，如今在雨中飘落\nやさしくなりたい　やさしくなりたい I want to be gentle, I want to be kind 我想变得温柔，我想变得善良\n自分ばかりじゃ　虚しさばかりじゃ Only thinking of myself brings only emptiness 只顾自己，只会感到空虚\n愛なき時代に　生まれたわけじゃない We weren’t born in an era without love 我们并不是生于无爱的时代\nキミといきたい　キミを笑わせたい I want to live with you, I want to make you smile 我想和你一起生活，让你开心地笑\n愛なき時代に　生まれたわけじゃない We weren’t born in an era without love 我们并不是生于无爱的时代\n強くなりたい　やさしくなりたい I want to be strong, I want to be kind 我想变得坚强，也想变得温柔\nサイコロ転がして　1の目が出たけれど I rolled the dice and got a one 掷出骰子，点数是1\n双六の文字には　「ふりだしに戻る」 But the board says, “Back to start” 但双六游戏的格子上写着“回到起点”\nキミはきっと言うだろう　「あなたらしいわね」と You’d probably say, “That’s just like you” 你一定会笑着说：“真像你的风格”\n「1つ進めたのなら　よかったじゃないの!」 “If you moved forward even once, isn’t that great?” “能前进一步，不是很好吗？”\nおぉ 強くなりたい　強くなりたい Oh, I want to be strong, I want to be strong 哦，我想变得坚强，我想变得强大\n我慢ばかりじゃ　誤魔化しばかりじゃ Always enduring is just self-deception 一味忍耐，只是在自欺欺人\n愛なき時代に　生まれたわけじゃない We weren’t born in an era without love 我们并不是生于无爱的时代\nキミに会いたい　キミに会いたい I want to see you, I want to see you 我想见你，我想见你\n愛なき時代に　生まれたわけじゃない We weren’t born in an era without love 我们并不是生于无爱的时代\n強くなりたい　やさしくなりたい I want to be strong, I want to be kind 我想变得坚强，也想变得温柔\nウウ オーイェ Ooh Oh yeah 呜呜 哦耶\n地球儀を回して　世界100周 Spin the globe, a hundred laps around the world 转动地球仪，环游世界一百圈\nボクらで回そう　待ってておくれ　イェ Let’s spin it ourselves, just wait for me, yeah 让我们一起转动它，请等我一下，耶\n愛なき時代に　生まれたわけじゃない We weren’t born in an era without love 我们并不是生于无爱的时代\nキミに会いたい　キミを笑わせたい I want to see you, I want to make you smile 我想见你，让你开心地笑\n愛なき時代に　生まれたわけじゃない We weren’t born in an era without love 我们并不是生于无爱的时代\n強くなりたい　やさしくなりたい I want to be strong, I want to be kind 我想变得坚强，也想变得温柔\n愛なき時代に　生きてるわけじゃない We’re not living in a loveless time 我们并不是生活在无爱的时代\n手を繋ぎたい　やさしくなりたい I want to hold your hand, I want to be kind 我想牵起你的手，想要变得温柔\nウウ オーイェ Ooh oh yeah 呜呜 哦耶\nウウー イェ Ooh yeah 呜呜 耶\nイェ イェ イェ ウウー Yeah yeah yeah ooh 耶耶耶 呜呜\n文法 〇 〇.一 SHOW NOTES In Japanese, verbs are categorized into three groups based on their conjugation patterns. Group 1(五段動詞, ごだんどうし) verbs end in a u sound, such as 書く (to write) and 話す (to speak). Group 2 (一段動詞, いちだんどうし) verbs end in \u0026ldquo;ru\u0026rdquo; and the preceding vowel is either from the i or e row, such as 食べる (to eat) and 見る (to see). Group 3 (不規則動詞, ふきそくどうし) consists of irregular verbs, including する (to do) and 来る (to come). To form the ます-form of Japanese verbs, the conjugation rules differ depending on the verb group. For Group 1(五段動詞, ごだんどうし) verbs, the final u sound is replaced with the corresponding i sound followed by ます. For example, 書く (to write) becomes 書きます (to write, polite). For Group 2 (一段動詞, いちだんどうし) verbs, which end in ru, simply drop the ru and add ます. For example, 食べる (to eat) becomes 食べます (to eat, polite). For Group 3 (不規則動詞, ふきそくどうし) irregular verbs, する (to do) becomes します (to do, polite), and 来る (to come) becomes 来ます (to come, polite). To form the て-form of Japanese verbs, the conjunction rules differ depend on the verb group. For Group 1(五段動詞, ごだんどうし) verbs, the final sound of the verb is replaced with a specific pattern: verbs ending in く become いて (e.g., 書く → 書いて, an exception for 行く『行って』), ぐ becomes いで (e.g., 泳ぐ → 泳いで), and verbs ending in う, つ, or る become って (e.g., 買う → 買って, 待つ → 待って, 帰る → 帰って). For verbs ending in ぬ, ぶ, or む, the final sound changes to んで (e.g., 死ぬ → 死んで, 遊ぶ → 遊んで, 読む → 読んで). For Group 2 (一段動詞, いちだんどうし) verbs, which end in ru, the ru is dropped and replaced with て. For example, 食べる (to eat) becomes 食べて (eating). For Group 3 (不規則動詞, ふきそくどうし) irregular verbs, する (to do) becomes して (doing), and 来る (to come) becomes 来て (coming). To form the た-form of Japanese verbs, the conjunction rules differ depend on the verb group. For Group 1(五段動詞, ごだんどうし) verbs, the final sound of the verb is replaced with a specific pattern: verbs ending in く become いた (e.g., 書く → 書いた), ぐ becomes いだ (e.g., 泳ぐ → 泳いだ), and verbs ending in う, つ, or る become った (e.g., 買う → 買った, 待つ → 待った, 帰る → 帰った). For verbs ending in ぬ, ぶ, or む, the final sound changes to んだ (e.g., 死ぬ → 死んだ, 遊ぶ → 遊んだ, 読む → 読んだ). For Group 2 (一段動詞, いちだんどうし) verbs, the \u0026ldquo;ru\u0026rdquo; ending is dropped, and ta is added directly. For example, 食べる (to eat) becomes 食べた (ate) and 見る (to see) becomes 見た (saw). For Group 3 (不規則動詞, ふきそくどうし) irregular verbs, する (to do) becomes した (did), and 来る (to come) becomes 来た (came). To form the ない-form of Japanese verbs, the conjugation rules vary depending on the verb group. For Group 1(五段動詞, ごだんどうし) verbs, the final u sound is replaced with the corresponding a sound, followed by ない. For example, 書く (kaku) becomes 書かない (to not write). An exception is the verb ある (to exist, for inanimate objects), which becomes ない (does not exist). For Group 2 (一段動詞, いちだんどうし) verbs, the ru is droupped and ない is added directly, such as 食べる (to eat) becomeing 食べない (to not eat). For Group 3 (不規則動詞, ふきそくどうし) irregular verbs, する (to do) becomes しない (to not do), and　来る (to come) becomes 来ない (to not come). To form the potential form of Japanese verbs, the conjugation rules differ by verb group. For Group 1(五段動詞, ごだんどうし) verbs, the final u sound is replaced with the corresponding e sound, followed by る. For example, 書く (to write) becomes 書ける (can write). For Group 2 (一段動詞, いちだんどうし) verbs, the ru is dropped and られる is added, such as 食べる (to eat) becoming 食べられる (can eat). For Group 3 (不規則動詞, ふきそくどうし) irregular verbs, する (to do) becomes できる (can do), and 来る (to come) becomes 来られる (can come). To form the imperative form of Japanese verbs, the conjugation rules vary depending on the verb group. For Group 1(五段動詞, ごだんどうし) verbs, the final u sound is replaced with the corresponding e sound. For example, 書く (to write) becomes 書け (write!). For Group 2 (一段動詞, いちだんどうし) verbs, the ru is dropped and ろ and よ is added, such as 食べる (to eat) becoming 食べろ (eat!). For Group 3 (不規則動詞, ふきそくどうし) irregular verbs, する (to do)　becomes しろ or せよ (do!), and 来る (to come) becomes 来い (come!) To form the volitional form (intended action or suggestion) of Japanese verbs, the conjugation rules depend on the verb group. For Group 1(五段動詞, ごだんどうし) verbs, the final u sound is replaced with the corresponding o sound, followed by う. For example, 書く (to write) becomes 書こう (let\u0026rsquo;s write). For Group 2 (一段動詞, いちだんどうし) verbs, the ru is dropped and よう is added, such as 食べる　(to eat) becoming 食べよう (let\u0026rsquo;s eat). For Group 3 (不規則動詞, ふきそくどうし) irregular verbs, する (to do) becomes しよう (let\u0026rsquo;s do), and 来る (to come) becomes こよう (let\u0026rsquo;s come). Here are the top 30 most commonly used verbs:\nVerb (Infinitive) Polite Form (ます) Te-Form Past Tense (た) Negative (ない) Potential (できる) Imperative (Command) Volitional (Intentional) 行く (いく, to go) 行きます 行って 行った 行かない 行ける 行け 行こう 話す (はなす, to speak) 話します 話して 話した 話さない 話せる 話せ 話そう 聞く (きく, to listen) 聞きます 聞いて 聞いた 聞かない 聞ける 聞け 聞こう 書く (かく, to write) 書きます 書いて 書いた 書かない 書ける 書け 書こう 読む (よむ, to read) 読みます 読んで 読んだ 読まない 読める 読め 読もう 飲む (のむ, to drink) 飲みます 飲んで 飲んだ 飲まない 飲める 飲め 飲もう 買う (かう, to buy) 買います 買って 買った 買わない 買える 買え 買おう 会う (あう, to meet) 会います 会って 会った 会わない 会える 会え 会おう 待つ (まつ, to wait) 待ちます 待って 待った 待たない 待てる 待て 待とう 立つ (たつ, to stand) 立ちます 立って 立った 立たない 立てる 立て 立とう 遊ぶ (あそぶ, to play) 遊びます 遊んで 遊んだ 遊ばない 遊べる 遊べ 遊ぼう 帰る (かえる, to return) 帰ります 帰って 帰った 帰らない 帰れる 帰れ 帰ろう 死ぬ (しぬ, to die) 死にます 死んで 死んだ 死なない 死ねる 死ね 死のう 飛ぶ (とぶ, to fly) 飛びます 飛んで 飛んだ 飛ばない 飛べる 飛べ 飛ぼう 呼ぶ (よぶ, to call) 呼びます 呼んで 呼んだ 呼ばない 呼べる 呼べ 呼ぼう 泳ぐ (およぐ, to swim) 泳ぎます 泳いで 泳いだ 泳がない 泳げる 泳げ 泳ごう 急ぐ (いそぐ, to hurry) 急ぎます 急いで 急いだ 急がない 急げる 急げ 急ごう 笑う (わらう, to laugh) 笑います 笑って 笑った 笑わない 笑える 笑え 笑おう 洗う (あらう, to wash) 洗います 洗って 洗った 洗わない 洗える 洗え 洗おう 歌う (うたう, to sing) 歌います 歌って 歌った 歌わない 歌える 歌え 歌おう 食べる (たべる, to eat) 食べます 食べて 食べた 食べない 食べられる 食べろ/食べよ 食べよう 見る (みる, to see/look) 見ます 見て 見た 見ない 見られる 見ろ/見よ 見よう 寝る (ねる, to sleep) 寝ます 寝て 寝た 寝ない 寝られる 寝ろ/寝よ 寝よう 起きる (おきる, to wake up) 起きます 起きて 起きた 起きない 起きられる 起きろ/起きよ 起きよう 教える (おしえる, to teach) 教えます 教えて 教えた 教えない 教えられる 教えろ/教えよ 教えよう 出る (でる, to go out) 出ます 出て 出た 出ない 出られる 出ろ/出よ 出よう 着る (きる, to wear) 着ます 着て 着た 着ない 着られる 着ろ/着よ 着よう 借りる (かりる, to borrow) 借ります 借りて 借りた 借りない 借りられる 借りろ/借りよ 借りよう 降りる (おりる, to get off) 降ります 降りて 降りた 降りない 降りられる 降りろ/降りよ 降りよう 閉める (しめる, to close) 閉めます 閉めて 閉めた 閉めない 閉められる 閉めろ/閉めよ 閉めよう Your browser does not support the audio element. SHOW CONTENTS 彼は毎日、学校に行く。（He goes to school every day.） 明日、私は京都に行きます。（Tomorrow, I will go to Kyoto.） この道をまっすぐ行って、右に曲がってください。（Go straight on this road, then turn right.） 彼女は日本語で話すことができる。（She can speak Japanese.） 会議で詳しく話します。（I will talk in detail at the meeting.） 何か問題があれば、すぐに話して下さい。（If you have any problems, please speak up immediately.） 毎日、日記を書く。（I write in my diary every day.） このレポートを明日までに書きます。（I will write this report by tomorrow.） ノートに名前を書いてください。（Please write your name in the notebook.） 彼は海で泳ぐのが好きだ。（He likes to swim in the sea.） 夏休みに海で泳ぎます。（I will swim in the sea during summer vacation.） プールで泳いでから、シャワーを浴びます。（After swimming in the pool, I will take a shower.） 週末に新しい本を買う予定だ。（I plan to buy a new book this weekend.） 昨日、オンラインで服を買いました。（I bought clothes online yesterday.） スーパーで牛乳を買ってきてください。（Please buy some milk at the supermarket.） 彼を駅で待つつもりだ。（I intend to wait for him at the station.） ここで少し待ちます。（I will wait here for a while.） ちょっと待っていてください。（Please wait a moment.） 学校が終わったら、家に帰る。（After school is over, I will go home.） もうすぐ仕事が終わるので、家に帰ります。（Work is almost over, so I will go home.） 友達の家に行って、すぐに帰ってきた。（I went to my friend\u0026rsquo;s house and came back right away.） 毎朝、新聞を読むことにしている。（I make it a habit to read the newspaper every morning.） 彼女はよく小説を読みます。（She often reads novels.） 本を読んでから、映画を見に行こう。（Let\u0026rsquo;s read a book, then go watch a movie.） あなたをケパと呼ぶことにします。（I will call you \u0026lsquo;Kepa.\u0026rsquo;） 私は先生を呼びます。（I will call the teacher.） その名前を呼んでください。（Please call that name.） あの小さな花は死ぬかもしれない。（That small flower might die.） 老犬が静かに死にました。（The old dog passed away peacefully.） 彼は戦争で死んでしまった。（He died in the war.） 彼は部屋を出るとき、ドアを閉めました。（He closed the door when he left the room.） 彼女は駅で電車を出ます。（She will take the train at the station.） ちょっと出てくるから、待っていて。（I\u0026rsquo;ll step out for a moment, so please wait.） 新しいシャツを着ると気分が良くなる。（I feel good when I wear a new shirt.） 今日、きれいなドレスを着ます。（I will wear a beautiful dress today.） そのドレスを着て、パーティーに行きます。（I will wear that dress and go to the party.） １−５ Your browser does not support the audio element. SHOW NOTES だげ：だげ is used to express that something is the only thing. これだけください。（Just this one, please.） お酒が飲めません、ダイエットコーラだけ飲みます。（I can\u0026rsquo;t drink wine, I only drink diet coke.） だろう：だろう is often used to show a guess or assumption. It\u0026rsquo;s a more casual form of でしょう. 彼は来るでしょう。（He will probably come.） 彼女は10年も韓国に住んでいるので韓国語は上手だろう。（She has been living in Korea for 10 years, so she\u0026rsquo;s probably good at Korean.） でしょう：でしょう is used to express probability or expectation. 彼は忙しいでしょう。（He is probably busy.） 日本人が晩ごはんによく食べるものは寿司でしょう。（Japanese people probably eat sushi a lot for dinner.） が：が is a conjunction used to introduce a contrast or contradiction. It is used between two clauses to show contrast. 新しいパソコンを買いたいが、お金がない。（I want to buy a new computer, but I have no money.） 行きたいが、時間がない。（I want to go, but I don\u0026rsquo;t have time.） がある：がある is used to express the existence of something, particularly for inanimate objects or abstract things. その町には古いお城がある。（There is an old castle in that town.） 公園に大きな木がある。（There is a big tree in the park.） ６−１０ Your browser does not support the audio element. SHOW NOTES ほうがいい：ほうがいい is used to suggest that something is the better choice or the more advisable action. 早く寝たほうがいい。（It\u0026rsquo;d be better to go to bed early.） 願書（がんしょ）を早く送るほうがいいですよ。（You should better send your application form quickly.） けれども：けれども is used to contrast two ideas. It can be shortened to けど or けれど in casual speech. 今日は忙しいけれども、手伝います。（I\u0026rsquo;m busy today, but I\u0026rsquo;ll help.） 雨が降っているけど、出かけなければならない。（It\u0026rsquo;s raining, but I have to go out.） くらい/ぐらい：くらい/ぐらい is used to indicate an approximate amount or degree of something. ２時間くらいかかると思います。（I think it will take about two hours.） ここから新高円寺駅まで歩いでどのくらいかかりますか？（How long does it take to walk from here to Shinkoenji station?） 前に：前に is used to indicate that something happened or should happen before another action. 寝る前に薬を飲んでください。（Please take the medicine before you go to bed.） 出発する前に確認してください。（Please check before you depart.） ませんか：ませんか is a polite way to invite someone to do something or to suggest an action. お茶を飲みませんか？（Won\u0026rsquo;t you have some tea?） 明日東京ディズニーランドに行くませんか。（Won\u0026rsquo;t you go to Tokyo Disneyland tomorrow?） １１−１５ Your browser does not support the audio element. SHOW NOTES な：な is a casual or firm way to tell someone not to do something. It\u0026rsquo;s often used in commands or warnings. ここにいるな！（Don\u0026rsquo;t enter here!） 俺の息子を虐（いじ）めるな！（Don\u0026rsquo;t bully my son!） ないでください：ないでください is a polite way to ask someone not to do something. 写真を撮らないでください。（Please don\u0026rsquo;t take photos.） ここでタバコを吸わないでください。（Please don\u0026rsquo;t smoke here.） なる：なる means \u0026ldquo;to become\u0026rdquo; and is used when something changes into a different state. 日本語が上手なりました。（I became good at Japanese.） １５時間も寝たので、頭が痛くなった。（I slept for 15 hours so I have a headache.） に行く：に行く is used when going somewhere to do something. It\u0026rsquo;s commonly used to express purpose. コンビニへパンを買いに行きます。（I\u0026rsquo;m going to the convenience store to buy bread.） 薪（まき）を集（あつ）めに行こう！（Let\u0026rsquo;s go pick up firewood!） にする：にする means to decide on something, it\u0026rsquo;s commonly used when making a choice. どれにしますか？（Which one will you choose?） 僕はコーヒーにします。（I\u0026rsquo;ll have coffee.） １６−２０ Your browser does not support the audio element. SHOW NOTES のが上手：のが上手 is used to express being good at something. 私は料理を作るのが上手です。（I\u0026rsquo;m good at cooking.） 彼はピアノを弾くのが上手だ。（He\u0026rsquo;s good at playing the piano.） のが下手：のが下手 is used to express being bad at something. 私はスポーツをするのが下手です。（I\u0026rsquo;m bad at sports.） 私は絵を描くのがすごく下手です。（I\u0026rsquo;m terrible at painting.） すぎる：すぎる is used to express that something is too much or excessive. It is attached to the stem of an adjective or verb to indicate that something goes beyond what is normal or acceptable. この料理は辛すぎる。（This food is too spicy.） その鞄は高すぎるから、買えない。（I can\u0026rsquo;t buy that bag because it\u0026rsquo;s too expensive.） たことがある：たことがある is used to express that you have done something before. 日本に行ったことがあります。（I have been to Japan before.） 寿司を食べたことがありますか？（Have you ever eaten sushi?） てもいい：てもいい is used to give permission or to say that is okay to do something. ここで写真を撮ってもいいですか？（Is it okay to take photos here?） この本を借りてもいいですか？（Can I borrow this book?） ２１−２５ Your browser does not support the audio element. SHOW NOTES てから：てから is used to express that one action happens after another. ご飯を食べてから勉強します。（I will study after eating.） 家に帰ってから電話をかけます。（I will make a call after I get home.） てはいけない：てはいけない is used to indicate that something is forbidden. ここて写真を撮ってはいけません。（You must not take pictures here.） 嘘をついてはいけない。（You must not tell lies.） つもりだ：つもりだ is used to indicate a plan or intention to do something. 今夜は早く寝るつもりです。（I plan to sleep early tonight.） 週末に映画を見に行くつもりだ。（I plan to go watch a movie this weekend.） より〜方が〜：より〜方が〜 is used to compare two things, indicating that one thing is more than the other in some way. この本の方があの本より面白い。（This book is more interesting than that book.） 英語より日本語の方が難しいと思う。（I think Japanese is more difficult than English.） あまり〜ない：あまり〜ない is used to express that something is not very much or not very often. It\u0026rsquo;s typically used with negative verbs to indicate a low frequency or degree of something. 鶏肉はあまり好きじゃないです。（I don\u0026rsquo;t like chicken very much.） 私はあまり映画を見ない。（I don\u0026rsquo;t watch movies very often.） ２６−３０ Your browser does not support the audio element. SHOW NOTES ば：ば is used to indicate a conditional situation, meaning \u0026ldquo;if\u0026hellip;then.\u0026rdquo; For る-verbs, drop る and add れば; for う-verbs, change the last syllable to the corresponding え-column sound and add ば; For い-adjective, drop the い and add ければ; For noun or な-adjectives, add であれば. 雨が降れば、行きません。（If it rains, I won\u0026rsquo;t go.） もっと勉強すれば、合格するでしょう。（If you study more, you will probably pass.） ばあい（場合）は：ばあい（場合）は is used to describe a situation or condition, especially when considering what happens in certain circumstances. It\u0026rsquo;s similar to \u0026ldquo;in the event of\u0026rdquo; or \u0026ldquo;if\u0026rdquo; in English. 急な用事がある場合は、連絡してください。（In the event of an emergency, please contact me.） 天気が悪い場合は、外に出ない方がいいです。（If the weather is bad, it\u0026rsquo;s better not to go outside.） だけて：だけて is used to express that something is possible just by doing or simply by doing something. It emphasizes that the action alone is enough to achieve the result. このボタンを押（お）すだけで、機械が動（うご）きます。（Just by pressing this button, the machine will start.） 彼は笑（わら）うだけで、みんなを幸せにします。（Just by smilling, he makes everyone happy.） 出（だ）す：出（だ）す is used to indicate that something suddenly begins or appears. It can also be used for starting an action unexpectedly or without warning. 彼女は怒（おこ）り出した。（She suddenly got angry.） 彼は急に走り出した。（He suddenly started running.） でも：でも is used to give a suggestion in a casual way. It\u0026rsquo;s used to list examples when you\u0026rsquo;re not sure or to make a suggestion about a possible action. 映画でも見ませんか？（How about watching a movie or something?） コーヒーでも飲みましょうか？（Shall we drink coffee or something?） ３１−３５ Your browser does not support the audio element. SHOW NOTES でございます：でございます is a polite form of です. 私はサラリーマンでございます。（I am a salaryman.） こちらは私の友人でございます。（This is my friend.） がる：がる is used when talking about someone\u0026rsquo;s feelings, emotions, or desires. It is attached to the stem of an adjective to indicate that someone else appears to feel or shows signs of that emotion. 彼は怖がっているようです。（He seems to be scared.） 子供はおもちゃを欲しがっている。（The child seems to want a toy.） がする：がする is used when perceiving something through five senses (taste, smell, hearing, etc.). 何かの音がする。（I hear some sound.） このスープは苦い味がする。（This soup tastes bitter.） 始める：始める is used to express the beginning of an action. 明日からダイエットを始める予定です。（I plan to start dieting from tomorrow.） 生け花（いけばな）を習（なら）い始めて、もう半年経った。（It\u0026rsquo;s been half a year since I started learning flower arrangement.） はず（筈）がない：はず（筈）がない is used to express that something is impossible or cannot possibly be the case. そんな難しい問題は小学生ができるはずがない。（There\u0026rsquo;s no way an elementary school student can answer such a difficult question.） 彼女はそんなことをするはずがない。（There\u0026rsquo;s no way she would do such a thing.） ３６−４０ Your browser does not support the audio element. SHOW NOTES 必要：必要 means \u0026ldquo;necessary\u0026rdquo; or \u0026ldquo;need\u0026rdquo;. It\u0026rsquo;s used to describe something that is required or essential. この手続（てつづ）きは必要です。（This procedure is necessary.） あなたには助（たす）けが必要です。（You need help.） 必要がある：必要がある means \u0026ldquo;it is necessary to\u0026rdquo; or \u0026ldquo;there is a need to\u0026rdquo;. It\u0026rsquo;s used when talking about something that is required or essential. 彼と話す必要がありますか？（Is it necessary to talk to him?） 報告書を提出する必要がある。（It is necessary to submit the report.） いらっしゃる：いらっしゃる is a polite version of the verbs いる, 来る, and 行く. It is a polite way to express the idea of someone else\u0026rsquo;s presence, arrival, and departure. 先生がいらっしゃいました。（The teacher has arrived.） 今日は何時にいらっしゃいますか？（What time will you come today?） いたす：いたす is a polite version of する, and it\u0026rsquo;s often used in customer service, business, and formal speech. この仕事は私がいたします。（I\u0026rsquo;ll do this job.） 荷物は私が来週の月曜日にお届（とど）けいたします。（I\u0026rsquo;ll send the luggages next Monday.） かどうか：かどうか is used to express \u0026ldquo;whether or not\u0026rdquo; something happens or is the case. It\u0026rsquo;s used when someone unsures about something and want to ask about or talk about the uncertainty. 彼が来るかどうか分からない。（I don\u0026rsquo;t know whether or not he will come.） それが本当かどうか教えてください。（Please tell me whether or not that is true.） ４１−４５ Your browser does not support the audio element. SHOW NOTES かい：かい is a casual way of turning a sentence into a yes/no question. It\u0026rsquo;s commonly used in informal scenarios. 君はこの仕事を好きかい？（Do you like this job?） 心配事（しんぱいごと）があるのかい？（Anything worrying you?） かもしれない：かもしれない is used to express possibility or uncertainty. 雨が降るかもしれない。（It might rain.） これは難しいかもしれません。（This might be difficult.） 方：方 is used to indicate how to do something or to give directions on how to do something. It\u0026rsquo;s often used with verbs to explain the way of doing something. この料理の作り方を知りたい。（I want to know how to make this dish.） 彼はピアノの弾き方を教えています。（He is teaching how to play the piano.） かしら：かしら is a feminine and somewhat casual expression used to convey a sense of wondering or uncertainty. It\u0026rsquo;s often used when the speaker is unsure or curious about something. It is mainly used by women, but can also used in certain contexts by men in informal speech. 明日天気はどうかしら。（I wonder what the weather will be like tomorrow.） これで大丈夫かしら。（I wonder if this is okay.） ことができる：ことができる is used to express ability or possibility and means \u0026ldquo;can\u0026rdquo; or \u0026ldquo;be able to\u0026rdquo; in English. 日本語を話すことができる。（I can speak Japanese.） 明日早く起きることができない。（I can\u0026rsquo;t wake up early tomorrow.） ４６−５０ Your browser does not support the audio element. SHOW NOTES までに：までに is used to indicate a deadline or the latest time by which something must be done. 夜10時までに帰ります。（I will return home by 10 PM.） レポートを金曜日までに提出してください。（Please submit the report by Friday.） みたい：みたい is used to say that something looks like, seems like, or resembles something else. 彼は子供みたいです。（He\u0026rsquo;s like a child.） 雨が降るみたいよ。（It looks like it\u0026rsquo;s going to rain.） など is used to list examples or suggest that there are other similar things not explicitly mentioned. It means \u0026ldquo;such as,\u0026rdquo; \u0026ldquo;things like,\u0026rdquo; or \u0026ldquo;etc.\u0026rdquo; 寿司やラーメンなど好きです。（I like sushi, ramen and things like that.） 果物はリンゴやバナナなど好きです。（I like fruits such as apple and banana.） ながら：ながら is used to indicate two actions happening at the same time. 音楽を聞きながら勉強します。（I study while listening to music.） 彼はテレビを見ながらご飯を食べている。（He is eating while watching TV.） ないで：ないで is used to indicate doing something without another action happening. 宿題をしないで寝ました。（I went to sleep without doing my homework.） 傘を持たないで出かけた。（I went out without bringing an umbrella.） ５１−５５ Your browser does not support the audio element. SHOW NOTES なければいけない/なければならない：なければいけない/なければならない are used to express that something is necessary or that someone must do something. 早く起きなければいけない。（I must wake up early.） 宿題を終わらせなければならない。（I have to finish my homework.） なくてはいけない/なくてはならない：なくてはいけない/なくてはならない are used to express that something is necessary or that someone must do something. このレポートを提出しなくてはいけない。（I must submit this report.） パソコンを修理しなくてはならない。（I have to fix the computer.） なくてもいい：なくてもいい is used to express that something is not necessary or that someone doesn\u0026rsquo;t have to do something. 遅くまで勉強しなくてもいい。（You don\u0026rsquo;t have to study until late.） 今日は仕事に行かなくてもいい。（You don\u0026rsquo;t have to go to work today.） なら：なら is used to express conditional situations, similar to \u0026ldquo;if\u0026rdquo; in English. It can also imply a situation where something will happen or be true under certain conditions. 行くなら、早く行った方がいいよ。（If you are going, you should go early.） その話なら、知っている。（As for that story, I know it.） なさい：なさい is a polite imperative used to give an order or instruction. It is often used by adults when giving commands to chindren or subordinates. 早く寝なさい。（Go to bed early.） 野菜も食べなさい。（Eat your vegetables too!） ５６−６０ Your browser does not support the audio element. SHOW NOTES なさる：なさる is the polite version of する. お飲み物は何になさいますか？（What would you like to drink?） 先生は何をお話しなさっていますか？（What is the teacher talking about?） に気がつく：に気がつく means \u0026ldquo;to notice\u0026rdquo; pr \u0026ldquo;to realize\u0026rdquo; something. It is used when someone becomes aware of something that they hadn\u0026rsquo;t noticed before. 彼のミスに気がついた。（I noticed his mistake.） 日本に来てから、自分の日本語が上達していることに気がついた。（After coming to Japan, I realized that my Japanese was improving.） にくい：にくい indicates that something is difficult to do. この漢字は覚えにくい。（This kanji is hard to remember.） 彼の話し方は聞きにくい。（His way of speaking is hard to understand.） に見える：に見える is used to describe how something appears or looks like based on its appearance. 彼は若く見える。（He looks young.） この料理は美味しく見えるけど、あまり美味しくない。（This dish looks delicious, but it\u0026rsquo;s not very tasty.） の中で：の中で is used to indicate something inside a place. この三つの中で、どれが一番好きですか？（Among these three, which do you like the most?） クラスの中で、彼が一番背が高い。（Among the class, he is the tallest.） ６１−６５ Your browser does not support the audio element. SHOW NOTES のに：のに is used to indicate a reason or purpose, similar to \u0026ldquo;for the purpose of\u0026rdquo; in English. 旅行に行くのにお金がかかる。（It costs money to go on a trip.） 日本語を話すのに練習が必要です。（You need to practice to speak Japanese.） のように/のような：のように/のような are used to compare something to another thing, meaning \u0026ldquo;like\u0026rdquo; or \u0026ldquo;similar to\u0026rdquo;.　のように is used with verbs or adjectives while のような is used with nouns. 彼女は天使のように優しい。（She is as kind as an angel.） あなたのような人は珍しい。（A person like you is rare.） おきに：おきに is used to express repetition of an event at regular intervals, such as \u0026ldquo;every\u0026rdquo; in English. ２時間おきに休憩を取る。（Take a break every two hours.） 一週間おきに会議を開きます。（We hold meetings every week.） のに：のに is used to express contradiction or contrast. It means \u0026ldquo;although\u0026rdquo; or \u0026ldquo;in spite of\u0026rdquo;, often leading to an outcome that is unexpected or goes against the initial expectation. 彼は日本に住んでいるのに、全然日本語が話せない。（Although he lives in Japan, he can\u0026rsquo;t speak Japanese at all.） あんなに勉強するしたのに、テストに合格しなかった。（Even though I studied so much, I didn\u0026rsquo;t pass the test.） 終わる：終わる means \u0026ldquo;to finish\u0026rdquo; or \u0026ldquo;to end\u0026rdquo;, used when something is completed or comes to an end. 授業が終わった。（The class ended.） 仕事が終わるのが楽しみだ。（I\u0026rsquo;m looking forward to finish work.） ６６−７０ Your browser does not support the audio element. SHOW NOTES られる：られる is used to express the ability to do something. 日本語が話せられますか？（Can you speak Japanese?） ピアノが弾ける。（I can play the piano.） らしい：らしい is used to express a sense of hearsay or something that seems like or appears to be based on indirect information or impression. あの人はとても優しいらしい。（That person seems to be very kind.） 彼女は旅行に行くらしいです。（I heard that she\u0026rsquo;s going on a trip.） さ：さ is a nominalizer used to turn an adjective into a noun. It converts the quality or state expressed by the adjective into a concept or thing. 富士山の高さは３７７６メートルだ。（Mount Fuji\u0026rsquo;s height is 3776 meters.） 彼女の優しさに感動した。（I was moved by her kindness.） られる：られる can also be used to express the passive voice, meaning that the subject of the sentence is the receipient of an action rather than the one performing it. 私は先生に褒められた。（I was praised by the teacher.） この本は多くの人に読まれている。（This book is being read by many people.） させる：させる is the causative form, meaning \u0026ldquo;to make\u0026rdquo; someone do something. It expresses the idea of forcing or allowing someone to perform an action. 母は私に掃除させる。（My mother makes me do the cleaning.） 先生は学生に宿題をさせる。（The teacher makes the students do homework.） ７１−７５ Your browser does not support the audio element. SHOW NOTES させられる：させられる is the passive causative form, meaning \u0026ldquo;to be made to do something\u0026rdquo; or \u0026ldquo;to be forced to do something\u0026rdquo;. It is used to express that someone is forced or made to perform an action by someone else. 毎日残業させられる。（I\u0026rsquo;m made to work overtime every day.） 子供の時、嫌いな野菜を食べさせられだ。（As a child, I was made to eat vegetables I hated.） さすが：さすが is used to express admiration or to indicate that something or someone is worthy of praise or recognition, just as expected. It\u0026rsquo;s used when the result or behavior is exactly what one would expect from the person or thing in question. さすがプロだね。（As expected of a professional!） さすが日本の料理は美味しい。（As expected, Japanese food is delicious.） しか〜ない：しか〜ない means \u0026ldquo;only\u0026rdquo; or \u0026ldquo;nothing but\u0026rdquo;. It is used to emphasize a limitation or a small quantity of something. １００円しか持っていない。（I only have 100 yen.） この店にはケーキしかない。（This shop only has cake.） し〜し：し〜し is used to like multiple reasons or actions, similar to \u0026ldquo;and\u0026rdquo; in English. 彼女は親切だし、頭もいいし、頼りにしている。（She\u0026rsquo;s kind, smart, and I rely on her.） この映画は面白い、感動的だし、みんなにおすすめだ。（This movie is interesting, emotional, and I recommend it to everyone.） そんなに：そんなに is used to refer to something that is \u0026ldquo;like that\u0026rdquo; or \u0026ldquo;so much\u0026rdquo;. It can be used to indicate a large extent or degree of something, usually negative in tone. そんなに急がなくてもいいよ。（You don\u0026rsquo;t need to hurry so much.） そんなにたくさん食べるの？（Are you going to eat that much?） ７６−８０ Your browser does not support the audio element. SHOW NOTES それでも：それでも is used to express a contradiction or unexpected continuation of an action or situation despite the circumstances. It means \u0026ldquo;but still\u0026rdquo; or \u0026ldquo;and yet\u0026rdquo; in English. 雨が降っている。それでも、彼は外に出た。（It\u0026rsquo;s raining, but still, he went outside.） お金が足りない。それでも、旅行に行きたい。（I don\u0026rsquo;t have enough money. And yet, I want to go on a trip.） そうだ：そうだ is used to report hearsay or something heard from others. It can be used to confirm something that have been seen or heard. It\u0026rsquo;s similar to saying \u0026ldquo;I heard that\u0026rdquo; or \u0026ldquo;It seems that\u0026rdquo; in English. 明日は雨が降るそうだ。（I heard that it will rain tomorrow.） あの店のケーキは美味しいそうだ。（I heard that the cake at that shop is delicious.） たばかり：たばかり is used to indicate that something just happened or was just completed. It\u0026rsquo;s used to describe a recent action. 彼は家に帰ったばかりだ。（He just got home.） 私は昼ご飯を食べたばかりだ。（I just ate lunch.） たがる：たがる is used to express that someone else wants to do something. It\u0026rsquo;s often used when talking about other people\u0026rsquo;s desires. 彼は映画に行きたがっている。（He wants to go to the movie.） 彼女は新しい服を買いたがっている。（She wants to buy new clothes.） たら：たら is a conditional form that means \u0026ldquo;if\u0026rdquo; or \u0026ldquo;when\u0026rdquo;. It is used to express a condition or hypothetical situation. It can also mean \u0026ldquo;after doing\u0026rdquo; when the action is completed. もしお金があったら、旅行に行きたい。（If I had money, I would want to go on a trip.） 終わったら、帰ってもいいですか。（Can I go home after I finish?） ８１−８５ Your browser does not support the audio element. SHOW NOTES たらどうですか：たらどうですか is used to give a suggestion or advice to someone. It means \u0026ldquo;Why don\u0026rsquo;t you\u0026hellip;?\u0026rdquo; or \u0026ldquo;How about\u0026hellip;?\u0026rdquo; in English. It is a way to encourage someone to take a certain action. もっと休んだらどうですか。（Why don\u0026rsquo;t you rest more?） それを試してみたらどうですか。（Why don\u0026rsquo;t you try that?） たり〜たり：たり〜たり is used to list multiple actions or states, indicating that the speaker is talking about things that happen intermittently or alternately. 週末は映画を見たり、友達と遊んだりします。（On weekends, I watch movies and hang out with friends.） 夏休みには海に行ったり、山に登ったりしました。（During summer vacation, I went to the beach and climbed mountains.） たところ：たところ is used to indicate that something has just happened or just finished. It often emphasizes that the action was completed recently. 今昼ごはんを食べたところです。（I just finished eating lunch.） 彼はテストを終えたところです。（He just finished the test.） てあげる：てあげる is used when doing something for someone else, often to be helpful or show kindness. It\u0026rsquo;s used in situations where the speaker is performing an action for the benefit of someone else. 彼に本を貸してあげる。（I\u0026rsquo;ll lend him a book.） 私はあなたにその問題を説明してあげます。（I\u0026rsquo;ll explain the problem to you.） てほしい：てほしい is used to express that you want or need someone to do something. It shows a desire for someone to perform an action, often related to the speaker\u0026rsquo;s own wishes. 私に手伝ってほしい。（I want you to help me.） 彼女には元気になってほしい。（I want her to get better.） ８６−９０ Your browser does not support the audio element. SHOW NOTES ていく：ていく is used when an action begins now and continues into the future, or when something moves away from the speaker\u0026rsquo;s point of view. これからも日本語を勉強していきます。（From now on, I will keep studying Japanese.） 子供達は走って行った。（The children ran off.） ているところ：ているところ is used to describe that someone is right in the middle of doing something. 今昼ごはんを食べているところです。（I\u0026rsquo;m in the middle of eating lunch right now.） レポートを書いているところだった。（I was just writing the report.） ていただけませんか：ていただけませんか is a polite way to make a request, similar to \u0026ldquo;Could you please\u0026hellip;?\u0026rdquo; in English. これを見ていただけませんか。（Could you please look at this?） もう一度説明していただけませんか。（Could you please explain that one more time?） てくれる：てくれる is used when someone does something beneficial for the speaker. 母がセーターを編んでくれました。（My mother knitted me a sweater.） 友達が空港まで送ってくれた。（My friend drove me to the airport.） てくる：てくる is used to describe an action coming toward the speaker, a change or development over time, or an action/state that has continued up until the present. わかってきました。（It\u0026rsquo;s becoming clear.） 最近寒くなってきましたね。（It\u0026rsquo;s been getting colder lately.） ９１−９５ Your browser does not support the audio element. SHOW NOTES てみる：てみる is used to express trying out or attempting an action to see how it works, often implying the result is uncertain or the action is experimental. 新しいレストランに行ってみる。（I\u0026rsquo;ll try going to the new restaurant.） この方法を試してみてください。（Please try this method.） てもらう：てもらう is used when someone does something for the speaker, often implying a favor or request. The focus is on receiving the action done by someone else. 先生に教えてもらった。（I got the teacher to teach me.） 友達に手伝ってもらいました。（I got my friend to help me.） ておく：ておく is used to indicate that an action will be done in preparation for something, or to indicate that an action is done in advance to be ready for a future situation. 明日の会議のために資料を作っておきます。（I will prepare the materials in advance for tomorrow\u0026rsquo;s meeting.） 出かける前にお金を置いておく。（I\u0026rsquo;ll leave the money here before going out.） てしまう：てしまう is used when doing something unintentionally or finishing an action completely. 宿題を忘れてしまった。（I accidentally forgot my homework.） 本を全部読んでしまった。（I finished reading the whole book.） てよかった：てよかった is used to express relief, happiness, or gratitude for something that has already happened. It reflects a positive outcome or a favorable result. 傘を持ってきてよかった。（I\u0026rsquo;m glad I brought an umbrella.） あなたに会えてよかった。（I\u0026rsquo;m glad I could meet you.） ９６−１００ Your browser does not support the audio element. SHOW NOTES ということ：ということ is used to turn a statement or action into a noun, often referring to the content of the sentence. 彼が来ないということを聞きました。（I heard that he won\u0026rsquo;t come.） 日本に行くということはとても楽しみです。（The fact that I will go to Japan is very exciting.） といってもいい：といってもいい is used to suggest that something is valid or acceptable way to express something. これは簡単だといってもいいです。（You could say this is easy.） 彼はプロフェッショナルだといってもいいでしょう。（You might say he is a professional.） とか〜とか：とか〜とか is used to list examples of things, usually with the implication that there are more examples not explicitly mentioned. It can be translated as \u0026ldquo;such as\u0026rdquo; or \u0026ldquo;among other things.\u0026rdquo; 映画とか音楽とかが好きです。（I like things such as movies and music.） 休日は映画を見るとか、買い物するとかしています。（On holidays I do things like watching movies and shopping.） ときいた：ときいた is used to report something that was heard from another person, typically in casual or indirect speech. This expression can be used when sharing information learned from someone else. 彼がもうすぐ帰ると聞いた。（I heard that he is going home soon.） 明日雨が降ると聞いたんですが、本当ですか。（I heard it will rain tomorrow, is that true?） ところ：ところ is used to express that something is about to happen, indicating that an action is just about to start or is on the verge of happening. It can also be used in the past tense to show that something was just about to happen at a certain moment. 食事を始めるところです。（We\u0026rsquo;re about to start eating.） テレビを見ているところに電話がかかってきた。（Just when I was watching TV, the phone rang.） １０１−１０５ Your browser does not support the audio element. SHOW CONTENTS はともかく: はともかく means “setting aside…” or “whether or not…” and is used to temporarily exclude something from consideration in order to focus on another point. 見た目はともかく、味（あじ）はとてもいい。（Setting appearance aside, it tastes really good.） 冗（じょう）談（だん）はともかく、本当のことを話してくれ。（Jokes aside, tell me the truth.） わずかに: わずかに means “slightly” or “barely,” and is used to describe a small degree or amount. わずかに熱がある。（I have a slight fever.） 景（けい）気（き）はわずかに回（かい）復（ふく）した。（The economy has slightly improved.） やがて: やがて means “soon,” “before long,” or “eventually,” and is used when something is expected to happen in the near or foreseeable future. やがて雨が降り出した。（Before long, it started to rain.） 努力すれば、やがて結果が出る。（If you keep working hard, results will eventually follow.） やら〜やら: やら〜やら is used to list multiple examples (often in a messy or emotional context), meaning “such things as…” or “things like…” 財布やら携帯やら全部なくした。（I lost everything—my wallet, my phone, and more.） 嬉しいやら恥ずかしいやらで、涙（なみだ）が出た。（I was so happy and embarrassed that I cried.） よりほかない: よりほかない means “to have no choice but to…” and expresses resignation or inevitability. 電車が止まっているので、歩くよりほかない。（Since the trains have stopped, I have no choice but to walk.） 約束した以上、やるよりほかない。（Since I promised, I have no choice but to do it.） １０６−１１０ Your browser does not support the audio element. SHOW CONTENTS と見える: と見える is used to indicate that something appears to be a certain way based on what the speaker perceives. It is similar to saying \u0026ldquo;it seems\u0026rdquo; or \u0026ldquo;it looks like\u0026rdquo; in English. 彼は疲れていると見える。（He appears to be tired.） この料理は美味しいと見える。（This dish seems to be delicious.） 続ける: 続ける is used to express the act of continuing an action, or to keep doing something without stopping. 雨が降り続けている。（The rain continues to fall.） 走り続けるのは大変だ。（It’s difficult to continue running.） やすい: やすい is used to describe something that is easy to do or likely to happen. It can also express something that has a tendency to occur. この本は読みやすい。（This book is easy to read.） 冬は風邪を引きやすい。（It\u0026rsquo;s easy to catch colds in winter.） 予定だ: 予定だ is used to indicate a plan or schedule for the future. It can also show that something is expected to happen. 明日会議がある予定だ。（There is a meeting scheduled for tomorrow.） 私は午後に出かける予定です。（I plan to go out in the afternoon.） ようになる: ようになる describes a change of state or a process that leads to something becoming possible or feasible. It often implies that something was difficult or impossible at first, but now it has beome possible. 日本語が話せるようになった。（I can now speak Japanese.） 車を運転できるようになりたい。（I want to be able to drive a car.） １１１−１１５ Your browser does not support the audio element. SHOW CONTENTS ようにする: ようにする is used to indicate that someone tries to do something or makes an effort to achieve a certain goal. It emphasizes the intention or effort involved. 毎日運動するようにしています。（I try to exercise every day.） 夜（よ）更（ふ）かししないようにしてください。（Please try not to stay up late.） ば〜ほど: ば〜ほど is used to show that as one thing increases, the other thing also increases. It\u0026rsquo;s often used for comparisons where one action or state leads to a proportional change in another. 勉強すればするほど上手になります。（The more you study, the better you become.） 値段が高ければ高いほど品（ひん）質（しつ）がいい。（The higher the price, the better the quality.） ばいい: ばいい is used to give advice or suggest that something would be good, appropriate or advisable. It implies a suggestion for what someone should do. どうすればいいですか？（What should I do?） この問題を解（かい）決（けつ）すればいいですね。（It would be good if we solve this problem.） ばかり: ばかり is used to express that something is just happening or that only a particular thing is being done, often with a nuance of repetition or focus on a single activity. It can also indicate that something has recently happened. 彼は食べてばかりです。（He’s just eating all the time.） 彼はゲームばかりしている。（He does nothing but play games.） ばかりだ: ばかりだ expresses the idea that something is continuing or gradually increasing. It can also imply that the situation is getting worse or progressing in a certain direction. 問題は悪化（あっか）してばかりだ。（The problem is only getting worse.） 状（じょう）況（きょう）は悪（わる）くなるばかりだ。（The situation keeps getting worse.） １１６−１２０ Your browser does not support the audio element. SHOW CONTENTS ばかりでなく: ばかりでなく is used to indicate that something is not only true but also includes something else. 彼は日本語ばかりでなく、英語も話せます。（He can speak not only Japanese, but also English.） この店は安いばかりでなく、品（ひん）質（しつ）もいいです。（This shop is not only cheap, but also has good quality.） ばかりに: ばかりに indicates that something happened because of a certain reason, usually with a negative or unintended consequence. It\u0026rsquo;s similar to \u0026ldquo;because of\u0026rdquo; or \u0026ldquo;on account of\u0026rdquo; in English. 遅（ち）刻（こく）したばかりに、会議に参（さん）加（か）できなかった。（Because I was late, I couldn’t participate in the meeting.） お金が足（た）りないばかりに、旅行を諦（あきら）めた。（I gave up on the trip because I didn’t have enough money.） ばよかった: ばよかった expresses regret or something the speaker should have done in the past, but didn\u0026rsquo;t. It implies that it would have been better if the action had been taken. もっと勉強すればよかった。（I should have studied more.） 傘を持って行けばよかった。（I should have brought an umbrella.） べき: べき is used to express a recommendation or a strong suggestion that something should be done. It\u0026rsquo;s often used to express what is the right or proper thing to do. 約束は守（まも）るべきだ。（You should keep promises.） もっと早く知らせるべきだった。（I should have informed you earlier.） べきではない: べきではない is used to express prohibition or something that should not be done. 他人の秘密を漏（も）らすべきではない。（You must not reveal others\u0026rsquo; secrets.） こんな時間に電話するべきではなかった。（I shouldn\u0026rsquo;t have called at this hour.） １２１−１２５ Your browser does not support the audio element. SHOW CONTENTS 別に〜ない: 別に〜ない is used to express that something is not particularly the case or does not stand out. It is often used to downplay something or to indicate a lack of interest or emphasis. 別に興（きょう）味（み）ない。（I\u0026rsquo;m not particularly interested.） 別に困（こま）っていないよ。（I\u0026rsquo;m not really in trouble.） だらけ: だらけ is used to describe a situation where something is full of or covered in something, usually in a negative or excessive sense. この文（ぶん）章（しょう）は間（ま）違（ちが）いだらけだ。（This document is full of mistakes.） 彼の部屋は漫画だらけだ。（His room is full of comics.） どころか: どころか is used to indicate that something is far from what is expected, or anything but what was presumed. It often has a stronger contrast to the previous idea. お金がないどころか、借金がある。（I don’t just not have money, I have debt.） 彼女は忙しいどころか、余（よ）裕（ゆう）もある。（She is not just busy, she actually has some free time.） どんなに〜ても: どんなに〜ても is used to indicate that no matter how much or how difficult something is, the result is unaffected. It expresses no matter how something is done or how something turns out. どんなに努（ど）力（りょく）しても、結果（けっか）が出ない。（No matter how hard I try, I don’t see any results.） どんなに美味しくても、食べ過ぎは良くない。（No matter how delicious it is, eating too much is not good.） ふりをする: ふりをする is used when someone pretends to be something or act as if they are in a certain way. It indicates acting as if without truly being or doing it. 彼は知らないふりをしていた。（He was pretending not to know.） 泣（な）いていないふりをするのは難しい。（It’s hard to pretend you’re not crying.） １２６−１３０ Your browser does not support the audio element. SHOW CONTENTS がち: がち indicates that someone tends to or is prone to doing something, usually in a negative or unwanted sense. It implies a tendency to do something frequently or habitually. 彼は遅（ち）刻（こく）しがちだ。（He tends to be late.） 冬は風邪を引きがちになる。（People tend to catch colds in winter.） がたい: がたい indicates that something is difficult or hard to do, often because it’s emotionally or mentally challenging, not just physically. 彼の気持ちを理（り）解（かい）しがたい。（It’s hard to understand his feelings.） この問題は解（と）きがたい。（This problem is hard to solve.） 気味: 気味 is used to indicate something seems like or has a certain tendency or feeling about it. It’s often used when something appears to have a certain quality. 彼は疲れ気味だ。（He looks a bit tired.） 最近、体（たい）調（ちょう）が悪い気味だ。（I’ve been feeling a little unwell recently.） はず（筈）だ: はず（筈）だ expresses expectation or assumption. It is used when something is believed to be true based on reasoning or logic. It can be translated as \u0026ldquo;it must be\u0026rdquo; or \u0026ldquo;it should be.\u0026rdquo; 彼はもう到（とう）着（ちゃく）しているはずだ。（He should have already arrived.） この問題は簡単なはずだ。（This problem must be easy.） ほど: ほど is used to indicate a comparison or degree. It can imply the more something happens, the more something else will happen. 練習するほど上手になる。（The more you practice, the better you\u0026rsquo;ll get.） 努（ど）力（りょく）すればするほど、成（せい）功（こう）が近（ちか）づく。（The more you try, the closer success gets.） １３１−１３５ Your browser does not support the audio element. SHOW CONTENTS ほど: ほど is used to compare two things and say that one is not as much as the other. It emphasizes that something does not reach or is not equal to the extent or degree of the other. 彼ほど優しくない人はいない。（There is no one as kind as him.） 彼女は思ったほど背が高くなかった。（She wasn\u0026rsquo;t as tall as I thought.） いくら〜ても: いくら〜ても is used to indicate no matter how much or however something is done, implying that the result or situation will remain the same regardless of the extent. いくら頑張っても、結果は変わらない。（No matter how hard I try, the result won’t change.） いくら説明しても理解してくれない。（No matter how much I explain, they don\u0026rsquo;t understand.） 一方だ: 一方だ is used to describe a situation where something is continuing or becoming more and more in a certain direction. It often conveys that the situation is steadily increasing or changing. 物価は上がる一方だ。（The prices continue to rise.） 彼の態度は悪くなる一方だ。（His attitude is getting worse and worse.） 一方で: 一方で is used to present two contrasting ideas or to show that there are two sides to a situation, like \u0026ldquo;on one hand\u0026rdquo; and \u0026ldquo;on the other hand\u0026rdquo;. この計画には賛成する人が多い一方で、反対する人もいる。（On one hand, there are many people who support this plan, but on the other hand, there are also those who oppose it.） 日本は便利な国である一方で、物価が高い。（On one hand, Japan is a convenient country, but on the other hand, the cost of living is high.） かけ: かけ is used to indicate that something is half-done or not yet finished. It shows that an action or process is in progress or incomplete. 食べかけのパンを置いておいた。（I left the half-eaten bread.） 映画を見かけて、途中で寝てしまった。（I started watching the movie, but I fell asleep in the middle.） １３６−１４０ Your browser does not support the audio element. SHOW CONTENTS からいうと: からいうと is used to refer to a specific perspective or point of view. It shows the basis or reasoning from which something is being considered or judged. 経済の観点からいうと、この政策（せいさく）は良くない。（In terms of the economy, this policy is not good.） 彼の立（たち）場（ば）からいうと、それは仕（し）方（かた）がない。（From his point of view, that\u0026rsquo;s unavoidable.） 代わりに: 代わりに is used to indicate that one thing is being substituted for another or someone is doing something in place of someone else. 母の代わりに料理を作った。（I cooked instead of my mother.） 私はレポートを書く代わりに、プレゼンテーションをしました。（Instead of writing a report, I did a presentation.） っけ: っけ is used to ask for confirmation or to remind oneself of something forgotten. 明日は休みだっけ？（Is tomorrow a holiday?） この映画、いつ公（こう）開（かい）されたっけ？（When was this movie released?） 決して〜ない: 決して〜ない emphasizes a strong negation, meaning \u0026ldquo;never\u0026rdquo; or \u0026ldquo;by no means\u0026rdquo;. It is used when something want to strongly deny or refuse something. 決して諦めてはいけない。（You must never give up.） 決して嘘をついてはいけません。（You must never lie.） 切る: 切る express the idea of completing an action fully or doing it to the end. It emphasizes that the action was done thoroughly or with determination. 仕事をやり切る自信がある。（I\u0026rsquo;m confident I can completely finish the work.） その問題は解決し切った。（The problem has been completely solved.） １４１−１４５ Your browser does not support the audio element. SHOW CONTENTS 切れない: 切れない implies that something is too much to complete, or too difficult to finish. It emphasizes an inability to finish or complete something due to its magnitude or difficulty. この仕事は多すぎて、終わり切れない。（There is so much work that I can’t finish it.） この量の仕事は一日でやり切れない。（I can\u0026rsquo;t possibly finish this amount of work in one day.） きり: きり is used to indicate that something is only or just what is being stated, implying nothing more. It emphasizes a limited amount or the singularity of something. 100円きり持っていない。（I only have 100 yen.） 彼女とは去年会ったきりだ。（I haven\u0026rsquo;t seen her since last year.） こそ: こそ is used to emphasize the word or phrase it follows. It can often mean \u0026ldquo;for sure\u0026rdquo; or \u0026ldquo;precisely\u0026rdquo; to highlight the importance of the preceding item. It gives a sense of \u0026ldquo;only because\u0026rdquo; or \u0026ldquo;exactly because.\u0026rdquo; それこそが私が言いたいことだ。（That is precisely what I wanted to say.） あなたこそ、真実を知っている。（You are the one who knows the truth.） こと: こと can be used to express something that must be done or that it is important to do. It\u0026rsquo;s often used with a verb in its dictionary form and is commonly seen in instructions or advice. 日本語を勉強することが必要です。（It is necessary to study Japanese.） 早く帰ることを忘れないでください。（Please don’t forget to go home early.） ことだ: ことだ is used to give strong advice or a suggestion. It is used to indicate something that should be done or is recommended. It’s often used in suggestions or imperatives. 健康になりたければ、運動することだ。（If you want to be healthy, you should exercise.） 上手になりたければ、毎日練習することです。（If you want to get better, you should practice every day.） １４６−１５０ Your browser does not support the audio element. SHOW CONTENTS ことがある: ことがある is used to indicate that there are occasions or instances when something happens. It refers to the fact that something sometimes or occasionally occurs. 彼はたまに遅刻することがある。（There are times when he is late.） 時々、何もしたくないことがある。（There are times when I don\u0026rsquo;t feel like doing anything.） ことか: ことか is used to express exaggeration or strong emotion. It is often used to convey surprise, amazement, or frustration about something, meaning \u0026ldquo;how [adjective]!,\u0026rdquo; \u0026ldquo;what [adjective]!\u0026rdquo; or \u0026ldquo;how much [something]!\u0026rdquo; どれだけ疲れたことか！（How tired I am!） どんなに嬉しかったことか。（How happy I was!） ことから: ことから is used to explain or deduce something from a fact or based on the circumstances. It indicates the reason or cause behind an action or situation. 彼の顔を見ることから、彼が悲しんでいることがわかる。（From looking at his face, I can tell that he is sad.） この町は桜が多いことから、桜町と名（な）付（ず）けられた。（This town was named \u0026lsquo;Sakuramachi\u0026rsquo; from the fact that it has many cherry trees.） ことに: ことに is used to emphasize or specify a particular situation or action that is notable or remarkable. It’s often used in contexts where something is particularly important or especially noteworthy. 驚（おどろ）いたことに、彼は私の昔の友達だった。（To my surprise, he was my old friend.） 残念なことに、そのコンサートは中止になった。（Unfortunately, the concert was canceled.） ことになる: ことになる indicates that something has been decided or has come to be in the past or by some external force. It is often used when talking about a situation that has been finalized or determined, often without the speaker’s direct control. この会議は来週開（かい）催（さい）されることになった。（It has been decided that this meeting will be held next week.） この学校では制服を着ることになっている。（It\u0026rsquo;s the rule that students wear uniforms at this school.） １５１−１５５ Your browser does not support the audio element. SHOW CONTENTS ことにする: ことにする is used to indicate that a decision has been made about something. It implies a conscious choice or resolution to do something. 旅行に行くことにした。（I decided to go on a trip.） 今度の週末は家で過ごすことにします。（I’ve decided to spend this weekend at home.） ことはない: ことはない is used to indicate that there is no necessity, or there is no need to do something. It can also imply that something is not likely to happen. そんなに心配することはない。（There is no need to worry that much.） こんな事故は起こることはないと思っていた。（I thought such an accident would never happen.） くらい: くらい is used to show the extent of something, or to describe something that is so extreme or intense that it leads to a specific outcome. 彼は怒るくらいなら、黙（だま）っていたほうがいいよ。（If he’s going to get that angry, it would be better to stay silent.） この問題は簡単すぎて、誰でも解けるくらいだ。（This problem is so easy that anyone can solve it.） くせに: くせに is used to indicate that something happens despite the circumstances or expectation. It’s similar to saying \u0026ldquo;even though\u0026rdquo; or \u0026ldquo;although\u0026rdquo; in English, but it carries a slightly critical or sarcastic tone. 彼はお金がないくせに、高いレストランに行こうと言った。（Even though he has no money, he suggested going to an expensive restaurant.） あの人は英語ができるくせに、全然話さない。（Even though that person can speak English, they never talk.） まま: まま is used to indicate that something is left in its current state or condition, without change. It can imply that something remains unchanged or continues as is. テレビをつけたまま寝てしまった。（I fell asleep with the TV on.） 靴を履（は）いたままで部屋に入（はい）らないでください。（Please don’t enter the room with your shoes on.） １５６−１６０ Your browser does not support the audio element. SHOW CONTENTS まるで: まるで indicates that something appears or feels as though it is a certain way, often used in comparisons. 今日はまるで冬のようだ。（Today is just like winter.） 彼の話はまるで嘘のようだ。（His story sounds almost like a lie.） めったに〜ない: めったに〜ない express that something rarely happens or is uncommon. It suggests a low frequency of the action. 彼はめったに映画を見ない。（Movies are rarely watched.） 彼はめったに怒らない。（He hardly ever gets angry.） もの: When もの placed at the end of a sentence, it gives a reason or an explanation for something, similar to saying \u0026ldquo;because\u0026rdquo; or \u0026ldquo;it\u0026rsquo;s because\u0026rdquo;. It may also imply excuses or justifications. 遅れたのは、電車が遅れたものです。（The reason for being late is because the train was delayed.） 今日は行けないんだ。用事があるもの。（Can\u0026rsquo;t go today because of something to do.） ものだ: ものだ expresses habit or something that was typically done in the past, as well as what is natural or expected in a given situation. 子供のころ、よく公園で遊んだものだ。（In childhood, it was common to play in the park.） 先生の話はよく聞くものだ。（One should listen carefully to teachers.） もしかしたら: もしかしたら expresses possibility or uncertainty, used to suggest something is unlikely but still possible. もしかしたら明日は雪が降るかも。（Perhaps it might snow tomorrow.） もしかしたら彼はもう着いているかもしれない。（He might have already arrived.） １６１−１６５ Your browser does not support the audio element. SHOW CONTENTS 向き: 向き indicates that something is suitable, appropriate, or designed for a particular purpose, group, or person. このソファは小さな部屋向きです。（This sofa is suitable for small rooms.） このスニーカーはランニング向きではない。（These sneakers are not suitable for running.） 向け: 向け expresses that something is intended for, targeted at, or designed for a specific group, purpose, or use. It often focuses on a target audience or a specific use case. この車は家庭向けではない。（This car is not intended for family use.） これは外国人向けの日本語教材です。（This is Japanese language material for foreigners.） ながらも: ながらも is used to connect two contrasting clauses, meaning \u0026ldquo;despite\u0026rdquo;, \u0026ldquo;although\u0026rdquo;, or \u0026ldquo;even though\u0026rdquo;. It shows that one action or state exists despite the other. 初心者ながらも、彼はすぐに上達した。（Even though he was a beginner, he improved quickly.） 難しいながらも、この問題を解決した。（Although it was difficult, I solved the problem.） ないことはない: ないことはない is used to indicate that something is possible or can be done, though it may be difficult or unlikely. It expresses a negative possibility, meaning that it is not impossible to do something. 難しいが、できないことはない。（It is difficult, but not impossible.） お金があれば、行かないことはない。（If you have the money, there is no reason not to go.） なんか/なんて: なんか/なんて is used to refer to things like or such as, often in a casual or informal context. It can also be used to downplay or show disdain for something, implying that it’s not important or not worth considering. お寿司なんかが食べたい。（I want to eat something like sushi.） 私なんてまだまだです。（Someone like me still has a long way to go.） １６６−１７０ Your browser does not support the audio element. SHOW CONTENTS なぜなら: なぜなら is used to explain the reason behind something. It can be translated as \u0026ldquo;because\u0026rdquo; or \u0026ldquo;the reason is\u0026rdquo;. It is often used when giving an explanation or justification. 今日は学校を休んだ。なぜなら、風邪をひいているからだ。（I skipped school today. The reason is that I have a cold.） 彼は忙しい。なぜなら、仕事がたくさんあるからだ。（He is busy because he has a lot of work.） んだって: んだって is an informal expression that is used to report what one has heard or to express second-hand information. It is equivalent to saying \u0026ldquo;I hear that\u0026rdquo; or \u0026ldquo;I was told\u0026rdquo;. 彼は来ないんだって。（I hear that he’s not coming.） 彼女は引っ越すんだって。（I hear that she’s moving.） に違いない: に違いない is used to express certainty about something, translating as \u0026ldquo;I\u0026rsquo;m sure\u0026rdquo; or \u0026ldquo;there’s no doubt that\u0026rdquo;. It is used when the speaker is certain or believes strongly about something. あの店はおいしい料理を出すに違いない。（That restaurant must serve delicious food.） 彼女は試験に合格するに違いない。（There’s no doubt that she will pass the exam.） にかけて: にかけて refers to a period of time or something that continues throughout a duration. It can mean \u0026ldquo;over the course of\u0026rdquo; or \u0026ldquo;throughout\u0026rdquo;. It\u0026rsquo;s also used to indicate an area of expertise or focus. 一週間にかけて、全力で勉強した。（I studied with all my might over the course of a week.） 今月にかけて暑い日が続くでしょう。（The hot weather will likely continue through this month.） に関する: に関する means \u0026ldquo;related to\u0026rdquo;, \u0026ldquo;concerning\u0026rdquo;, or \u0026ldquo;about\u0026rdquo;. It is often used in formal contexts to indicate the subject or topic of a discussion, study, or work. 彼は経済に関する専門家だ。（He is an expert in economics.） 環境問題に関する研究が進んでいる。（Research related to environmental issues is progressing.） １７１−１７５ Your browser does not support the audio element. SHOW CONTENTS にかわって: にかわって is used when talking about doing something on behalf of someone else or instead of someone. It can be translated as \u0026ldquo;on behalf of\u0026rdquo; or \u0026ldquo;instead of\u0026rdquo;. 社長にかわって、私が挨（あい）拶（さつ）をさせていただきます。（On behalf of the president, I will give the greeting.） 母にかわって、弟がその仕事を手伝った。（Instead of my mother, my younger brother helped with the work.） に比べて: に比べて is used to compare two things, often to indicate how one thing is different from or superior/inferior to another. It translates as \u0026ldquo;compared to\u0026rdquo; or \u0026ldquo;in comparison to\u0026rdquo;. 去年に比べて、今年の売上（うりあげ）はかなり増えた。（Compared to last year, this year’s sales have increased significantly.） 日本に比べて、アメリカの生活費は高い。（Compared to Japan, the cost of living in the United States is higher.） において/における: において/における are used to indicate a place, situation, or context where something is happening. において is a more formal or written expression, and における is used to modify nouns. 教（きょう）育（いく）において、平（びょう）等（どう）は重（じゅう）要（よう）なテーマです。（In education, equality is an important topic.） 経済における問題について話し合いが行（おこな）われた。（A discussion was held regarding the issue in the economy.） にしては: にしては is used to express that something is unexpected or contrary to expectations, considering a specific standard or situation. It translates as \u0026ldquo;for\u0026rdquo;, \u0026ldquo;considering it\u0026rsquo;s\u0026rdquo;, or \u0026ldquo;given that\u0026rdquo;. 彼は初心者にしては、ピアノが上手だ。（For a beginner, he plays the piano very well.） この料理は家庭料理にしては、とてもおいしい。（Considering it’s homemade, this dish is very delicious.） にしても: にしても is used to indicate that something remains true or doesn’t change even under certain conditions. It translates to \u0026ldquo;even if\u0026rdquo;, \u0026ldquo;even though\u0026rdquo;, or \u0026ldquo;no matter how\u0026rdquo;. どんなに忙しくても、健康には気をつけなければならない。（Even if I’m busy, I must take care of my health.） 子供にしても、これはひどい行（こう）為（い）だ。（Even for a child, this is terrible behavior.） １７６−１８０ Your browser does not support the audio element. SHOW CONTENTS に対して: に対して is used to show a contrast or direction in relation to something or someone. It can be translated as \u0026ldquo;in contrast to\u0026rdquo;, \u0026ldquo;while\u0026rdquo;, or \u0026ldquo;in regard to\u0026rdquo;. 彼の意見に対して、私は賛成できません。（In contrast to his opinion, I cannot agree.） 私は仕事に対して真（しん）剣（けん）に取り組んでいます。（I am working seriously in regard to my job.） にとって: にとって is used to indicate how something is perceived or understood by someone. It translates to \u0026ldquo;to\u0026rdquo;, \u0026ldquo;for\u0026rdquo;, or \u0026ldquo;concerning\u0026rdquo;. 彼女にとって一番大切なものは家族だ。（The most important thing for her is family.） この薬は子供にとって危（き）険（けん）だ。（This medicine is dangerous for children.） について: について is used to refer to something that is about or concerning a particular topic. It translates as \u0026ldquo;concerning\u0026rdquo;, \u0026ldquo;regarding\u0026rdquo;, or \u0026ldquo;about\u0026rdquo;. 彼は日本の歴（れき）史（し）について本を書いている。（He is writing a book about Japanese history.） 環境問題についての意識が高まってきている。（Awareness regarding environmental issues is increasing.） につれて: につれて is used to indicate that as one thing changes, another thing changes in response. It can be translated as \u0026ldquo;as\u0026hellip;then\u0026rdquo; or \u0026ldquo;with\u0026rdquo;. 年を取るにつれて、健康が大切だと感じるようになった。（As I got older, I began to feel that health is important.） 経済が発展（はってん）するにつれて、生活水（すい）準（じゅん）が向（こう）上（じょう）した。（As the economy developed, the standard of living improved.） によると/によれば: によると/によれば is used to indicate that the information or statement is based on a particular source, report, or authority. It translates as \u0026ldquo;according to\u0026rdquo;. 天気予（よ）報（ほう）によると、明日は雨が降るそうです。（According to the weather forecast, it’s going to rain tomorrow.） 先生によれば、試験は来週だそうだ。（According to the teacher, the exam is next week.） １８１−１８５ Your browser does not support the audio element. SHOW CONTENTS によって/による: によって/による indicates the means, cause, or reason for an action or event. It can be translated as \u0026ldquo;by means of\u0026rdquo;, \u0026ldquo;due to\u0026rdquo;, or \u0026ldquo;because of\u0026rdquo;. 国によって習慣が違う。（Customs differ depending on the country.） この建物は有名な建築家によって設計された。（This building was designed by a famous architect.） の間に: の間に is used to indicate that something occurs during a period of time or while another event is happening. 彼は旅行の間にたくさんの写真を撮った。（He took a lot of photos during his trip.） 勉強の間に音楽を聴くことが好きです。（I like listening to music while studying.） を始め: を始め is used to list examples or to indicate the starting point of something. It translates as \u0026ldquo;for example\u0026rdquo; or \u0026ldquo;starting with\u0026rdquo;. 校長先生を始め、多くの先生方が見（けん）学（がく）に来られた。（The principal, along with many teachers, came to observe.） 会議には中国をはじめ、アジアの国々が参加した。（China and other Asian countries participated in the conference.） おかげで: おかげで is used to indicate that something positive happened because of someone\u0026rsquo;s actions or a particular circumstance. It translates to \u0026ldquo;thanks to\u0026rdquo; or \u0026ldquo;because of\u0026rdquo;. 毎日練習したおかげで上手になった。（Thanks to daily practice, I\u0026rsquo;ve improved.） 両親のおかげで日本へ留学することができた。（Thanks to my parents I was able to study in Japan.） っぱなし: っぱなし indicates that something is left in a particular state, often in an unfinished or uncompleted way. It can be translated as \u0026ldquo;leaving something on\u0026rdquo;, \u0026ldquo;leaving something still in use\u0026rdquo;. ドアが開けっぱなしだよ。（The door has been left open.） 部屋を出るときに電気をつけっぱなしにしないでください。（Please don\u0026rsquo;t leave the light on when you leave the room.） １８６−１９０ Your browser does not support the audio element. SHOW CONTENTS っぽい: The suffix っぽい is used to indicate that something resembles or has the characteristics of something else. It can be translated as \u0026ldquo;-ish\u0026rdquo;, \u0026ldquo;-like\u0026rdquo;, or \u0026ldquo;having the quality of\u0026rdquo;. 彼は子供っぽい性格だ。（He has a childish personality.） このデザインは昔っぽい感じがします。（This design has an old-fashioned (retro) feel.） さえ: さえ is used to emphasize something extreme or something that should be the least likely to happen. It translates to \u0026ldquo;even\u0026rdquo; or \u0026ldquo;only\u0026rdquo; in English. その問題は子供さえ解ける。（Even a child can solve that problem.） わたしは忙しくて、散歩する暇さえない。（I\u0026rsquo;m so busy that I don’t even have time to go for a walk.） さえ〜ば: さえ〜ば indicates that if a certain condition is met, then something else will be possible or will happen. お金さえあれば、旅行に行けるのに。（If only I had money, I could go on a trip.） 健康さえあれば、何でもできる。（As long as I am healthy, I can do anything.） 最中に: 最中に is used to indicate that something is happening in the middle of or during another event or activity. 彼は話している最中に、突然に立ち上がった。（He suddenly stood up in the middle of speaking.） 掃除をしている最中に、友達が訪ねてきました。（A friend came over while I was cleaning.） せいで: せいで is used to indicate that something happened because of an unfortunate situation or reason. It often carries a negative or unwanted implication, similar to \u0026ldquo;because of\u0026rdquo; or \u0026ldquo;due to\u0026rdquo; in English. 彼のせいで、私の計（けい）画（かく）が台（だい）無（な）しになった。（Because of him, my plan was ruined.） 交（こう）通（つう）渋（じゅう）滞（たい）のせいで、遅刻しました。（I was late because of the traffic jam.） １９１−１９５ Your browser does not support the audio element. SHOW CONTENTS 次第（しだい）: 次第（しだい） indicates that something will happen as soon as or depending on a certain condition. It often implies that the action is immediate or follows closely after the condition is met. こちらの準備が整（ととの）い次第、お知らせいたします。（I will notify you as soon as the preparations are ready.） 成功するかどうかは努力次第だ。（Whether you succeed depends on your effort.） しかない: しかない is used to show that there is only one option or no choice but to do something. It indicates a situation where no alternatives are available. これを試すしかない。（I have no choice but to try this.） 諦（あきら）めるしかない状（じょう）況（きょう）だ。（It\u0026rsquo;s a situation where we have no choice but to give up.） その結果: その結果 is used to show the result or consequence of something. It’s similar to saying \u0026ldquo;as a result\u0026rdquo; or \u0026ldquo;because of that\u0026rdquo; in English. 遅刻した。その結果、会議に間に合わなかった。（I was late. As a result, I couldn\u0026rsquo;t make it to the meeting.） 勉強をしなかった。その結果、試験に落ちた。（I didn’t study. As a result, I failed the exam.） そうもない: そうもない is used to indicate that something is very unlikely or hardly likely to happen. It suggests doubt or pessimism regarding a situation. こんなに雨が降っては、試合はできそうもない。（With such much rain, the game seems very unlikely to happen.） 今日は天気が良くないので、ピクニックに行けそうもない。（The weather isn’t good today, so it seems unlikely that we can go on the picnic.） たびに: たびに indicates that something happens every time or whenever a particular event or action occurs. It suggests repetition or habitual action. この店に来るたびに、新しい商品が入っている。（Every time I come to this shop, there are new products.） 旅行に行くたびに、写真を撮るのが楽しみだ。（I look forward to taking pictures every time I go on a trip.） １９６−２００ Your browser does not support the audio element. SHOW CONTENTS ために: ために is used to indicate purpose or goal. It shows that something is done in order to achieve a specific goal, or for the sake of something. 健康のために、毎日運動しています。（I exercise every day for my health.） 環境を守（まも）るために、リサイクルを始めました。（I started recycling for the sake of protecting the environment.） たらいい/といい: たらいい/といい is used to express a wish, hope, or suggestion. It implies that it would be good if something happens. 早く寝たらいいよ。（It would be good if you went to bed early.） 早く治（なお）ればいいな。（I hope you get better soon.） ために: ために can also indicates cause or reason for an event or situation. It shows that something happened because of a certain cause. 事故のために、電車が遅れました。（The train was delayed because of an accident.） 彼の助（たす）けのために、この問題が解決しました。（This problem was solved because of his help.） たとえ〜ても: たとえ〜ても is used to show concession. It means even if something happens, or even if something is true, the outcome will still be as expected or desired. たとえ雨が降っても、試合は行（おこな）われます。（Even if it rains, the match will go ahead.） たとえどんなに難しくても、諦めません。（Even if it\u0026rsquo;s very difficult, I won’t give up.） たとたん: たとたん is used to indicate that something happened immediately or just after another action. It expresses that once one event occurred, another followed immediately after. ドアを開けたとたん、犬が飛び出した。（As soon as I opened the door, the dog jumped out.） 彼はその話を聞いたとたんに怒り出した。（As soon as he heard that story, he got angry.） ２０１−２０５ Your browser does not support the audio element. SHOW CONTENTS てごらん: てごらん is a polite expression used to suggest that someone try doing something or look at something. It is often used when offering advice or encouragement. この本を読んでごらん。（Please try reading this book.） ここに書いてあることを見てごらん。（Look at what’s written here.） て初めて: て初めて indicates that something happened only after a certain action or event. It is used to show that the result occurred after completing a specific condition or action. 日本に行って初めて、本当の日本の文化を理解した。（Only after going to Japan did I truly understand the real culture of Japan.） 試験を受けて初めて、自分の弱点に気づいた。（Only after taking the exam did I realize my weaknesses.） てもかまわない: てもかまわない is used to express that it doesn’t matter whether something happens or not, or it’s okay to do something. この席に座ってもかまわない。（It doesn’t matter if you sit here.） 手伝ってもかまわないですか？（Is it okay if I help?） といっても: といっても is used to indicate that, although something is said or considered, there is some limitation or exception to it. 日本語ができるといっても、まだまだ勉強しないといけません。（Although I can speak Japanese, I still need to study more.） お金はあるといっても、無（む）駄（だ）遣（づか）いはできません。（Even if you have money, you cannot waste it.） という: という is used to explain what something is called or named. It is often used to introduce a definition, a title, or a phrase. これは「さくら」という花です。（This is a flower called \u0026lsquo;sakura\u0026rsquo;.） 私が行く予定の町（ちょう）は「京都」というところです。（The town I’m planning to visit is called Kyoto.） ２０６−２１０ Your browser does not support the audio element. SHOW CONTENTS ということだ: ということだ is used to report what someone has heard or what is said about something. It is often used to convey information from a third party or to summarize something that has been explained. 彼は来週日本に行くということだ。（I\u0026rsquo;ve heard that he is going to Japan next week.） 新しい店がオープンするということだ。（I’ve heard that a new store is opening.） というのは: というのは is used to define, explain, or elaborate on something. It’s used when someone is about to provide clarification or details. 遅刻したというのは、交通渋滞に巻（ま）き込（こ）まれたからだ。（The reason I was late is that I was stuck in traffic.） それは「未来予（よ）測（そく）」というのは難しいからだ。（This is because “predicting the future” is difficult.） というと: というと is used when bringing up or introducing a topic, often when talking about something that is closely related to what has been mentioned before. It is similar to \u0026ldquo;speaking of\u0026rdquo;. 映画というと、最近見た映画がすごく面白かった。（Speaking of movies, the one I watched recently was really interesting.） 勉強というと、最近全（まった）くしていない。（Speaking of studying, I haven’t done any recently.） というより: というより is used to express a preference or contrast, often meaning \u0026ldquo;rather than\u0026rdquo; or \u0026ldquo;more like.\u0026rdquo; It indicates that the first option is less appropriate or accurate than the second. 彼は先生というより、友達みたいな存在だ。（He is more like a friend than a teacher.） この映画は感動的というより、面白いです。（This movie is more interesting than emotional.） ところで: ところで is used when changing the topic or introducing a new topic. It is similar to \u0026ldquo;by the way\u0026rdquo; in English, often used to casually bring up something unrelated to the previous discussion. ところで、今度の週末は何をする予定ですか？（By the way, what are you planning to do this weekend?） ところで、彼女の名前を知っていますか？（By the way, do you know her name?） ２１１−２１５ Your browser does not support the audio element. SHOW CONTENTS ところが: ところが is used to introduce a contrast or unexpected development. It’s often used when something contrary to what was expected happens, similar to \u0026ldquo;however\u0026rdquo; or \u0026ldquo;even though.\u0026rdquo; 天気予報では晴れると言っていたところが、実際は雨が降った。（Even though the weather forecast said it would be sunny, it actually rained.） 彼はとても優しい人だと思っていたところが、実は冷たい一面もあった。（Even though I thought he was a very kind person, he actually had a cold side.） とおり: とおり is used to indicate that something is being done in the same way or exactly as described or expected. It can mean \u0026ldquo;according to,\u0026rdquo; \u0026ldquo;just like,\u0026rdquo; or \u0026ldquo;in the way.\u0026rdquo; あなたが言ったとおりに、問題は解決しました。（As you said, the problem was solved.） 彼女は私が教えたとおりに料理を作った。（She made the food just as I taught her.） としたら/とすれば: としたら/とすれば is used to talk about a hypothesis or assumption. It’s similar to saying \u0026ldquo;if it were the case that\u0026rdquo; or \u0026ldquo;if we assume.\u0026rdquo; もし彼が来るとしたら、すぐに知らせてください。（If it were the case that he is coming, please let me know immediately.） この問題を解決するとすれば、時間がもっとかかるだろう。（If we assume that this problem will be solved, it would likely take more time.） として: として is used to indicate the role or capacity in which someone is acting or something is being considered. 留学生として日本に来た。（I came to Japan as an international student.） 私は先生として、この学校で働いています。（I am working at this school as a teacher.） とは限（かぎ）らない: とは限らない is used to express that something is not always true or not necessarily the case. It’s used to counter assumptions or expectations. お金があれば幸せだとは限らない。（Having money does not necessarily mean happiness.） 日本人が皆寿司が好きだとは限らない。（Not all Japanese people necessarily like sushi.） ２１６−２２０ Your browser does not support the audio element. SHOW CONTENTS ついでに: ついでに is used when performing one action while or in addition to another. It suggests that an additional task is done during or after the main task, often as a side or incidental activity. 買い物のついでに、郵便局にも寄ってきた。（While shopping, I stopped by the post office.） 仕事のついでに、スーパーに寄ってください。（Please stop by the supermarket after work.） つまり: つまり is to rephrase or clarify a previous statement in simpler or more direct terms. It offers an explanation in a clearer way. 彼はとても忙しい、つまり、今は会えない。（He’s very busy, in other words, he can’t meet right now.） 私は明日から旅行に行く、つまり、来週の月曜日に戻る予定だ。（I’m going on a trip starting tomorrow, that is to say, I plan to return next Monday.） と共（とも）に: と共（とも）に indicates that something happens alongside or in conjunction with something else. This expression highlights that two actions or events occur at the same time or in close association. 彼と共に働くことになった。（I ended up working together with him.） 家族と共に暮（く）らしている。（I live together with my family.） うちに: うちに indicates that an action occurs before a change or while something is in progress. It suggests the idea of doing something while the situation is still ongoing or before conditions change. 熱いうちに食べてください。（Please eat it while it\u0026rsquo;s hot.） 暗くならないうちに帰りましょう。（Let\u0026rsquo;s go home before it gets dark.） 上で: 上で indicates that one action is performed after or upon completing another action. It shows a sequence where one event follows another. 必要な書類を揃（そろ）えた上で、提出してください。（Please submit them after gathering the necessary documents.） 会議の上で、その問題を話し合うつもりです。（We plan to discuss the issue after the meeting.） ２２１−２２５ Your browser does not support the audio element. SHOW CONTENTS わけだ: わけだ indicates that something is naturally the case or understandable based on the context. It can also explain the reason behind something. 彼はよく勉強しているから、合格したわけだ。（He studied hard, so it’s no wonder he passed.） 今日は晴れているから、みんな出かけるわけだ。（It\u0026rsquo;s sunny today, so that\u0026rsquo;s why everyone is going out.） わけではない: わけではない is used to deny a certain assumption or implication, indicating that something is not necessarily true or doesn\u0026rsquo;t mean what might have been assumed. お金があれば幸せだというわけではない。（It’s not the case that having money means happiness.） 彼が遅れたのは、彼のせいというわけではない。（It is not his fault that he was late.） わけがない: わけがない indicates strong certainty that something is impossible, implausible, or untrue. It expresses a firm belief that a particular situation or outcome cannot happen. 彼がそんなことをするわけがない。（There’s no way he would do something like that.） こんなに簡単な問題が解けないわけがない。（There’s no way I can’t solve such an easy problem.） わけにいかない: わけにいかない is used when expressing that something is not possible, often due to moral, social, or personal reasons. It implies that one cannot do something, usually because of a sense of obligation or restriction. 今日は忙しいから、出かけるわけにいかない。（I\u0026rsquo;m too busy today to go out.） 彼にそんなことを言うわけにいかない。（I can\u0026rsquo;t say that to him.） わりに: わりに is used to indicate that something is unexpected or surprising in comparison to what was assumed. It implies a contrast between the expected result and the actual one. このレストランは高いわりに、味は普通だった。（This restaurant was expensive, but the taste was average.） このパソコンは安いわりに性（せい）能（のう）がいい。（This computer has good performance for a low price.） ２２６−２３０ Your browser does not support the audio element. SHOW CONTENTS ような気がする: ような気がする is used to describe a vague sense, intuition, or feeling about something, even if it’s not based on concrete evidence. It suggests uncertainty but is often used when someone has a gut feeling or guess. 今日は雨が降りそうな気がする。（I have a feeling that it’s going to rain today.） 彼はもうすぐ来るような気がする。（I think he’s about to arrive soon.） ように: ように indicates purpose or reason, meaning that something is done in order to achieve a specific goal or result. It’s used with verbs to explain the intention behind an action. 健康のために、毎日運動をするようにしています。（I try to exercise every day in order to stay healthy.） 彼に見えるように、ライトをつけておいてください。（Please turn on the lights so that he can see.） ようとする: ようとする indicates an attempt to do something or being on the verge of doing it. It can suggest that one is in the process of trying or attempting something, but it might not be completed. ドアを開けようとしたが、鍵がかかっていた。（I tried to open the door, but it was locked.） 彼は今、出かけようとしています。（He is about to leave now.） ようとしない: ようとしない indicates that someone is not making an effort or not trying to do something, even though they could. It suggests a lack of intention or effort. 彼は全然勉強しようとしない。（He doesn\u0026rsquo;t try to study at all.） 子供が野菜を食べようとしない。（The child refuses to eat vegetables.） ずに: ずに is the negative form of て-form used to indicate that something was done without a certain action or behavior. It’s the equivalent of saying \u0026ldquo;without doing something.\u0026rdquo; 何も言わずに部屋を出た。（He left the room without saying anything.） 朝ご飯を食べずに学校へ行った。（I went to school without eating breakfast.） ２３１−２３５ Your browser does not support the audio element. SHOW CONTENTS ずにはいられない: ずにはいられない is used when someone cannot stop themselves from doing something, whether it’s an action or a feeling. It expresses an irresistible urge or compulsion to do something. 彼の話を聞くと、笑（わら）わずにはいられない。（When I hear his stories, I can\u0026rsquo;t help but laugh.） その映画は感動的で、涙（なみだ）を流（なが）さずにはいられなかった。（The movie was so emotional that I couldn’t help but cry.） あるいは: あるいは is used to present an alternative or possibility, similar to saying “or” or \u0026ldquo;perhaps\u0026rdquo; in English. It can also suggest a choice between two or more things. 会議は午後1時、あるいは午後2時に開始される予定です。（The meeting is scheduled to start either at 1 PM or 2 PM.） 明日会うか、あるいは電話するか決めよう。（Let’s decide whether we’ll meet tomorrow or maybe just call.） ぶりに: ぶりに is used to indicate something happening for the first time in a certain period. It expresses a sense of recurrence after a long gap or delay. 彼に会うのは10年ぶりだ。（It’s the first time in 10 years that I’ve met him.） 一週間ぶりに晴れの日になった。（It\u0026rsquo;s sunny for the first time in a week.） ちっとも〜ない: ちっとも〜ない is used to emphasize that something is not true at all or in the least. It adds emphasis to a negative statement. ちっとも勉強しなかったので、試験は全然できなかった。（I didn’t study at all, so I couldn’t do the exam in the least.） ちっとも面白くない映画だった。（It was not an interesting movie at all.） だけあって: だけあって is used to show that something is expected or understandable because of the qualities or circumstances surrounding it. It highlights a cause-and-effect relationship. 彼はプロのシェフだけあって、料理がとても上手だ。（Being a professional chef, it’s no surprise that he’s really good at cooking.） 学生だけあって、アルバイトをしている人が多い。（Since they’re students, it’s not surprising that many of them work part-time.） ２３６−２４０ Your browser does not support the audio element. SHOW CONTENTS だけでなく: だけでなく is used to express that something applies not only to one thing but also to another. It emphasizes an additional aspect beyond what is first mentioned. この店は安いだけでなく、品質もいい。（This shop is not only cheap but also has good quality.） 彼は英語だけでなく、中国語も話せる。（He can speak not only English but also Chinese.） だけました: だけました is used to express that something deserves gratitude, appreciation, or emotional weight. Often appears in polite contexts where one feels thankful for a certain effort, favor, or opportunity. 今度のアルバイト、自（じ）給（きゅう）は安いけど、交（こう）通（つう）費（ひ）が出るだけましです。(This part-time job pays low but I’m grateful they pay for my travelling expenses.) 先生に推（すい）薦（せん）状（じょう）を書いていただけました。（I’m grateful the professor wrote me a recommendation.） だけに: だけに is used when something happens precisely because of a specific situation, quality, or expectation. It emphasizes a cause-effect relation or heightened emotion due to a known fact. 彼は経験者だけに、仕事が早い。（Precisely because he has experience, he works quickly.） 彼女は努力家だけに、結果が出なかったのは残念だ。（She works hard, so it’s especially disappointing that there were no results.） だけのことはある: だけのことはある is used to express that a positive result is well-deserved, understandable, or expected due to someone\u0026rsquo;s effort, status, or background. 彼は５年も練習してきただけのことはある。（No wonder he’s that good—he’s practiced for 5 years.） 高かっただけのことはあって、このカメラは性能がいい。（It was expensive, but no wonder—it performs really well.） だけは: だけは is used to emphasize doing all that one can, especially when something is out of one’s control. It often implies doing the minimum or maximum possible. 努力だけはしたつもりだ。（At least I did make an effort.） 会えるかどうか分からないが、行くだけは行ってみよう。（I don’t know if I can meet them, but I’ll at least try going.） だって: だって is used to mean \u0026ldquo;because\u0026rdquo; (especially in informal speech) or to introduce a reason, excuse, or contrast. It can also mean \u0026ldquo;but\u0026rdquo; or \u0026ldquo;even\u0026rdquo;. だって、疲れたんだもん。（Because I’m tired!） だって、昨日は雨だったでしょう？（Because it rained yesterday, didn\u0026rsquo;t it?） ２４１−２４５ Your browser does not support the audio element. SHOW CONTENTS ではないか: ではないか is used to make a suggestion or invitation, often with a sense of enthusiasm or encouragement. It can also be used rhetorically to seek agreement or emphasize a point. 一緒に頑張ってみようではないか。（Let’s try our best together.） これは素晴らしい機会ではないか。（Isn’t this a great opportunity?） でしかない: でしかない emphasizes that something is no more than or merely what it is, often implying limitation or lack of importance. 私は一（いっ）介（かい）の教（きょう）師（し）でしかない。（I am merely a teacher.） それは表（ひょう）面（めん）的（てき）な違（ちが）いでしかない。（That is nothing but a superficial difference.） どころではない: どころではない is used to express that the current situation is too serious or unsuitable for doing something else. It often implies urgency or being overwhelmed. 遊びに行くどころではない。（This is no time to go out and have fun.） 病気がひどくて、仕事どころではなかった。（The illness was so bad that working was out of the question.） どうせ: どうせ expresses a resigned attitude, meaning \u0026ldquo;anyway,\u0026rdquo; \u0026ldquo;after all,\u0026rdquo; or \u0026ldquo;in any case,\u0026rdquo; often with a sense of giving up or not expecting much. どうせ間に合わないなら、ゆっくり行こう。（If we can\u0026rsquo;t make it anyway, let\u0026rsquo;s go slow.） どうせ誰も信じてくれない。（No one will believe it anyway.） どうやら: どうやら is used to express that something seems to be the case based on available clues or impressions. どうやら彼は本気らしい。（It seems he’s serious.） 電車はどうやら遅れているようだ。（It appears the train is delayed.） ２４６−２５０ Your browser does not support the audio element. SHOW CONTENTS 得る（える）／うる: 得る（える）／うる is used to express possibility or capability, meaning \u0026ldquo;can\u0026rdquo; or \u0026ldquo;is possible.\u0026rdquo; それは十（じゅう）分（ぶん）にあり得る話だ。（That is a fully possible story.） 考え得る限（かぎ）りの対（たい）策（さく）を取った。（All conceivable measures were taken.） えない: えない（得ない） expresses impossibility, meaning \u0026ldquo;cannot\u0026rdquo; or \u0026ldquo;is unlikely to happen.\u0026rdquo; そんなことはあり得ない。（That kind of thing is impossible.） 信じ得ない出（で）来（き）事（ごと）だった。（It was an unbelievable event.） 再（ふたた）び: 再び means again or once more, used to describe an action or event that happens for a second time or repeatedly. 彼は再び舞（ぶ）台（たい）に立った。（He stood on stage once again.） 再び同じミスを繰（く）り返（かえ）した。（The same mistake was repeated again.） ふうに: ふうに means in a way that\u0026hellip;, describing a manner, style, or state. 子供にもわかるふうに説明した。(I explained in a way that even children could understand.) 彼女はいつも独（どく）特（とく）なふうに物（もの）事（ごと）を捉（とら）える。(She always perceives things in her own unique way.) げ: げ is an auxiliary suffix that expresses the appearance or feeling of something, based on someone’s outward behavior or look. 彼は悲しげな表（ひょう）情（じょう）をしていた。（He had a sorrowful expression.） 彼は寂しげに一人で座っていた。(He was sitting alone looking lonely.) ２５１−２５５ Your browser does not support the audio element. SHOW CONTENTS ごとに: ごとに means \u0026ldquo;each,\u0026rdquo; \u0026ldquo;every,\u0026rdquo; or \u0026ldquo;at intervals of\u0026rdquo;, indicating something that happens regularly or individually for each case. 一時間ごとに休（きゅう）憩（けい）を取る。（Take a break every hour.） 人ごとに考え方が違う。（Each person has a different way of thinking.） 逆に: 逆に means \u0026ldquo;on the contrary\u0026rdquo; or \u0026ldquo;conversely,\u0026rdquo; used when expressing an opposite or unexpected outcome. 怒られると思ったが、逆に褒められた。（I thought I\u0026rsquo;d be scolded, but on the contrary, I was praised.） 失敗は逆にチャンスでもある。（Failure can conversely be an opportunity.） 以外: 以外 means \u0026ldquo;except for\u0026rdquo; or \u0026ldquo;other than,\u0026rdquo; used to indicate exclusion. 彼以外は全員来ている。（Everyone is here except him.） 勉強以外にも大（だい）事（じ）なことはある。（There are important things besides studying.） いよいよ: いよいよ means \u0026ldquo;at last,\u0026rdquo; \u0026ldquo;finally,\u0026rdquo; or \u0026ldquo;increasingly,\u0026rdquo; and is used to express anticipation, climax, or intensification. いよいよ試合が始まる。（The match is finally about to begin.） いよいよ忙しくなってきた。（Things are getting busier and busier.） 反面: 反面 means \u0026ldquo;on the other hand,\u0026rdquo; used to show a contrast or dual nature of something. この仕事はやりがいがある反面、責任も重い。（This job is rewarding, but on the other hand, it carries heavy responsibility.） 都会は便利な反面、ストレスも多い。（The city is convenient, but also stressful.） ２５６−２６０ SHOW CONTENTS 果たして: 果たして is used to mean \u0026ldquo;sure enough\u0026rdquo; or \u0026ldquo;really\u0026rdquo;, often to express a sense of expectation being fulfilled or to question whether something will truly happen. 果たして彼が勝てるだろうか。（Will he really be able to win?） 果たして、彼は約束どおりに来た。（Sure enough, he came as promised.） 以上: 以上 means \u0026ldquo;because\u0026rdquo; or \u0026ldquo;now that,\u0026rdquo; and is often used in formal contexts to indicate a reason based on a previous statement. 約束した以上、守るべきだ。（Now that the promise was made, it should be kept.） 学生である以上、勉強は避けられない。（Because one is a student, studying is unavoidable.） 以上に: 以上に means \u0026ldquo;more than\u0026rdquo; or \u0026ldquo;to a greater degree than,\u0026rdquo; used to compare something with a previous or expected level. 予想以上に時間がかかった。（It took more time than expected.） 前回以上に良い成績を取りたい。（I want to get better grades than last time.） いきなり: いきなり means \u0026ldquo;suddenly\u0026rdquo; or \u0026ldquo;without warning,\u0026rdquo; often used to describe abrupt actions or changes. いきなり泣き出した。（Suddenly started crying.） ドアがいきなり開いた。（The door suddenly opened.） いわゆる: いわゆる means \u0026ldquo;so-called\u0026rdquo; or \u0026ldquo;what is commonly known as,\u0026rdquo; used to define or introduce a well-known concept or term. 彼はいわゆる天才だ。（He is a so-called genius.） いわゆるブラック企業で働いていた。（Worked at a so-called \u0026ldquo;black company.\u0026quot;） ２６１−２６５ SHOW CONTENTS 上（うえ）: 上 is used to mean \u0026ldquo;from the point of view of\u0026rdquo; or \u0026ldquo;based on a certain standard or standpoint.\u0026rdquo; 法律上、それは問題ない。（From a legal standpoint, that\u0026rsquo;s not an issue.） 経験上、この方法が一番効果的だ。（From experience, this method is the most effective.） か〜ないのうちに: か〜ないのうちに means \u0026ldquo;right after\u0026rdquo; or \u0026ldquo;as soon as,\u0026rdquo; often used to indicate that something happened almost simultaneously with or immediately after another event. 席に座るか座らないのうちに、呼び出された。（Was called just as I was about to sit down.） 雨が降り出すか降り出さないのうちに、雷が鳴った。（Thunder roared as soon as it started raining.） かえって: かえって means \u0026ldquo;on the contrary\u0026rdquo; or \u0026ldquo;rather,\u0026rdquo; used when the outcome is opposite to what was expected. 手伝ったつもりが、かえって迷惑だった。（Tried to help but ended up being a nuisance.） 早く行ったら、かえって待たされた。（Went early, but ended up waiting longer.） かいがある: かいがある means \u0026ldquo;it is worth the effort,\u0026rdquo; used to express that the effort made was meaningful or had a good result. 一生懸命練習したかいがあって、合格できた。（The effort put into practicing paid off, and I passed.） 苦労したかいがあった。（The hardships were worth it.） か何か（か なにか）: か何か means \u0026ldquo;or something,\u0026rdquo; often used informally to refer to an unspecified or similar item. コーヒーか何か飲みませんか。（Would you like some coffee or something?） 手紙か何かが届いていた。（A letter or something had arrived.） ２６６−２７０ SHOW CONTENTS かねない: かねない is used to express a negative possibility, meaning \u0026ldquo;might happen\u0026rdquo; or \u0026ldquo;might do (something bad)\u0026rdquo;. It often implies a potential danger or undesirable result. そんなことをすれば、事故が起こりかねない。（Doing such a thing might cause an accident.） 彼はうっかり秘密を話しかねない。（He might accidentally reveal the secret.） かねる: かねる expresses inability or difficulty in doing something, often used in formal contexts. It translates to \u0026ldquo;unable to\u0026rdquo; or \u0026ldquo;cannot bring oneself to do\u0026rdquo;. 申し訳ありませんが、それはお引き受けしかねます。（I’m sorry, but I cannot accept that request.） 人の命に関わることなので、簡単には判断しかねる。（Since it concerns a life, it’s not easy to make a decision.） かのようだ: かのようだ is used to express a simile, meaning \u0026ldquo;as if\u0026rdquo; or \u0026ldquo;just like\u0026rdquo;, often for things that are not actually true but seem that way. 彼は何も知らないかのように振る舞った。（He acted as if he knew nothing.） 雲の上を歩いているかのような気分だった。（It felt as if walking on clouds.） からこそ: からこそ emphasizes the cause or reason, meaning \u0026ldquo;precisely because\u0026rdquo;. It\u0026rsquo;s used when something is true exactly due to that reason, often with a positive nuance. 頑張ったからこそ成功できた。(It was precisely because I worked hard that I succeeded.) 愛しているからこそ厳しくするんだ。(It\u0026rsquo;s precisely because I love you that I\u0026rsquo;m strict.) から見ると: から見ると means \u0026ldquo;from the point of view of\u0026rdquo; or \u0026ldquo;by the look of\u0026rdquo;, and is used to indicate a perspective or a way of judging. 子供の目から見ると、大人の世界は複雑だ。（From a child’s perspective, the adult world is complicated.） 状況から見ると、彼が犯人とは考えにくい。（Judging from the situation, it’s hard to believe he’s the culprit.） ２７１−２７５ SHOW CONTENTS からには: からには is used to express a natural consequence or obligation once a condition is true. It means \u0026ldquo;now that\u0026rdquo;, \u0026ldquo;since\u0026rdquo;, or \u0026ldquo;so long as\u0026rdquo;. 約束したからには、守るべきだ。（Since the promise was made, it should be kept.） 引き受けたからには、最後までやり通すつもりだ。（Now that it’s been accepted, the plan will be carried through to the end.） からして: からして is used to give an example to judge something overall, meaning \u0026ldquo;judging from\u0026rdquo; or \u0026ldquo;based on\u0026rdquo;, often highlighting something unusual or unexpected. 彼の話し方からして、教育を受けていないようだ。（Judging from his way of speaking, he seems uneducated.） あの店は外観からして高そうだ。（Even just judging from the exterior, that shop looks expensive.） からすると / からすれば: Both mean \u0026ldquo;judging from\u0026rdquo; or \u0026ldquo;considering from the standpoint of\u0026rdquo;, and show perspective or grounds for judgment. 専門家の意見からすると、あの計画には問題がある。（Judging from the expert\u0026rsquo;s opinion, that plan has problems.） 親からすれば、子供の将来が一番大切だ。（From a parent\u0026rsquo;s point of view, a child\u0026rsquo;s future is most important.） からといって: からといって is used to negate a general assumption, meaning \u0026ldquo;just because\u0026hellip;\u0026rdquo; or \u0026ldquo;even if\u0026hellip; it doesn’t mean\u0026hellip;\u0026rdquo; 忙しいからといって、挨拶をしなくていいわけではない。（Just because one is busy doesn\u0026rsquo;t mean it\u0026rsquo;s okay to skip greetings.） 高いからといって、品質がいいとは限らない。（Just because it\u0026rsquo;s expensive doesn\u0026rsquo;t mean the quality is good.） かと思ったら / かと思うと: These express unexpected change or quick succession of events, meaning \u0026ldquo;just when\u0026rdquo;, \u0026ldquo;no sooner than\u0026rdquo;, or \u0026ldquo;then again\u0026rdquo;. 雨が降ってきたかと思ったら、すぐに止んだ。（Just when it started raining, it stopped immediately.） 子供は泣き出したかと思うと、急に笑い出した。（The child started crying and then suddenly burst out laughing.） ２７６−２８０ SHOW CONTENTS 限り: 限り is used to express the idea of \u0026ldquo;as long as\u0026rdquo;, \u0026ldquo;while\u0026hellip; is the case\u0026rdquo;, or \u0026ldquo;to the extent that\u0026rdquo;. It often refers to a condition or scope. 見た限りでは、異常はなさそうだ。（As far as could be seen, there didn’t seem to be any problem.） 生きている限り、希望はある。（As long as one is alive, there is hope.） 気: 気 refers to a feeling, mood, or inclination toward doing something, often appearing in fixed expressions. 今日は何もする気がしない。（There’s no motivation to do anything today.） 彼はやる気を見せている。（He is showing a willingness to do it.） っこない: っこない is an emphatic form meaning \u0026ldquo;no chance of\u0026rdquo; or \u0026quot;\u0026hellip;is definitely not possible\u0026quot;, often used in spoken language. あんな難しい問題、できっこないよ。（There’s no way such a difficult problem can be solved.） 忘れっこない思い出だ。（It’s a memory that can never be forgotten.） ことだから: ことだから is used to make a judgment or assumption based on someone\u0026rsquo;s well-known character or usual behavior. It means \u0026ldquo;it is exactly because\u0026rdquo;. まじめな彼のことだから、きっと約束を守るだろう。（Exactly because he’s so serious, he’ll surely keep his promise.） 彼女のことだから、遅れるはずがない。（Precisely because it’s her, there’s no way she’d be late.） ことなく: ことなく is a formal structure meaning \u0026ldquo;without doing something even once\u0026rdquo; or \u0026ldquo;without incident\u0026rdquo;. 彼は一度も休むことなく、毎日働いている。（He works every day without taking a single day off.） 雨はやむことなく降り続いた。（The rain continued without stopping.） ２８１−２８５ SHOW CONTENTS ことになっている: ことになっている is used to express that something has been decided, scheduled, or is a social/customary rule. 明日は会議が開かれることになっている。（A meeting is scheduled for tomorrow.） ごみは分別して捨てることになっている。（Trash is expected to be separated before disposal.） ことにはならない: ことにはならない is used to state that just because something happens, it doesn’t automatically result in something else; it\u0026rsquo;s often used to refute assumptions. お金があれば幸せになれるということにはならない。（Just because one has money doesn’t mean happiness will follow.） 練習したからといって、すぐに上手くなることにはならない。（Practicing doesn’t mean improvement will happen immediately.） ことは〜が: ことは〜が is used to express that something is true to an extent, but there is a contrasting or limiting condition. 行くことは行くが、あまり乗り気ではない。（I’ll go, but I’m not really enthusiastic.） 難しいことは難しいが、やりがいがある。（It’s difficult, but rewarding.） まい: まい expresses intention not to do something or assumption that something won’t happen; it is formal or literary. 二度とあんな失敗はするまい。（I won’t make that kind of mistake again.） 雨は降るまいと思って傘を持たなかった。（I assumed it wouldn’t rain, so I didn’t bring an umbrella.） まったく〜ない: まったく〜ない is used to emphasize complete negation; it means \u0026ldquo;not at all\u0026rdquo; or \u0026ldquo;totally not\u0026rdquo;. 彼の言っていることはまったく理解できない。（What he’s saying is completely incomprehensible.） 最近の若者は政治にまったく関心がない。（Young people today have no interest in politics at all.） ２８６−２９０ SHOW CONTENTS も〜ば〜も: も〜ば〜も is used to emphasize multiple examples of things that are both true or happening. It often translates as “both…and” or “not only…but also.” 彼は勉強もできればスポーツもできる。（He is good at both studying and sports.） あの人は歌も上手ければダンスも上手だ。（That person is good at both singing and dancing.） もかまわず: もかまわず means “without caring about, regardless of,” showing that someone did something without regard for consequences, conditions, or others. 人目もかまわず泣いてしまった。（I cried without caring who was watching.） 彼女は雨もかまわず出かけた。（She went out regardless of the rain.） ものだから: ものだから is used to explain a reason, often with a nuance of personal circumstances or excuse. It’s often used in spoken language. 遅くなってすみません。道が混んでいたものだから。（Sorry I’m late. It\u0026rsquo;s because the roads were crowded.） 子供なものだから、つい遊びたくなってしまうんです。（Because he’s just a kid, he naturally wants to play.） ものではない: ものではない is used to express prohibition or a general moral lesson, often meaning “should not” or “must not.” 他人の悪口は言うものではない。（You shouldn’t speak ill of others.） 約束を破るものではありません。（You must not break a promise.） ものがある: ものがある is used to express deep emotion, strong judgment, or a notable quality. It adds a reflective or evaluative tone. 彼の話には心を打つものがある。（There’s something touching about his story.） この絵には人を引きつけるものがある。（This painting has something captivating about it.） ２９１−２９５ SHOW CONTENTS ものか: ものか is used to express strong denial or determination, often emotionally. It can mean “as if I would…!” or “no way I’m going to…” あんなやつに負けるものか！（As if I’d lose to someone like that!） 二度とあんなところへ行くものか。（No way I\u0026rsquo;m ever going to that place again.） ものなら: ものなら is used when expressing a hypothetical or difficult situation—“if one can (do something),” usually with an implication that it\u0026rsquo;s unlikely. 戻れるものなら、昔に戻りたい。（If I could go back, I’d return to the past.） やれるものならやってみろ。（If you think you can do it, go ahead and try!） ものの: ものの is used to contrast two facts, meaning “although” or “but.” It shows that the second part of the sentence is not what would be expected from the first part. 勉強したものの、試験は難しかった。（Although I studied, the exam was still hard.） 行くとは言ったものの、本当に行くかどうか分からない。（Although I said I’d go, I’m not sure if I really will.） もっとも: もっとも is often used as a conjunction meaning “but then,” “however,” or “though.” It softens the contrast between two statements. 彼は優秀だ。もっとも、時々ミスをすることもあるが。（He is excellent. However, he does make mistakes sometimes.） 日本に住んでいたことがある。もっとも、子供の頃だが。（I lived in Japan. Though, it was when I was a child.） もう少しで: もう少しで means “almost” or “nearly,” and is used when something was about to happen. もう少しで遅刻するところだった。（I almost came late.） もう少しで事故に遭うところだった。（I nearly got into an accident.） ２９６−３００ SHOW CONTENTS むしろ: むしろ is used to express a preference or contrast, meaning “rather,” “instead,” or “if anything.” 忙しいというより、むしろ退屈だ。（It\u0026rsquo;s not so much busy as it is boring.） 彼を責めるより、むしろ自分を反省すべきだ。（Rather than blaming him, you should reflect on yourself.） 中を: 中を literally means \u0026ldquo;through\u0026rdquo; or \u0026ldquo;in the middle of,\u0026rdquo; and emphasizes movement within a space or period. Often seen in expressions such as 雨の中を (through the rain). 雨の中を歩いた。（I walked through the rain.） 混雑した会場の中を進んだ。（I moved through the crowded venue.） なお: なお is a formal or written expression meaning “furthermore,” “still,” or “in addition.” It\u0026rsquo;s often used to add information or make a clarification. 本日は休館日です。なお、明日も休館となります。（Today we are closed. Furthermore, we’ll also be closed tomorrow.） この薬は副作用があります。なお、子供には使用できません。（This medicine has side effects. Also, it can\u0026rsquo;t be used by children.） ないではいられない: ないではいられない is used when someone cannot help but do something, similar to ずにはいられない. その話を聞いて、笑わないではいられなかった。（I couldn’t help but laugh hearing that story.） 悲しすぎて、泣かないではいられなかった。（It was too sad; I couldn’t help but cry.） ないことには〜ない: ないことには〜ない means “unless (A), (B) won’t happen.” It\u0026rsquo;s used to express necessary conditions. お金がないことには、この計画は実行できない。（Unless we have money, this plan can\u0026rsquo;t be carried out.） 実際に会ってみないことには、人柄は分からない。（Unless I actually meet the person, I can\u0026rsquo;t know what they\u0026rsquo;re like.） ３０１−３０５ SHOW CONTENTS なくはない: なくはない is a double negative expression that means \u0026ldquo;it\u0026rsquo;s not that\u0026hellip; not,\u0026rdquo; or \u0026ldquo;can/may be.\u0026rdquo; It suggests something is possible, though perhaps not ideal or certain. 行けなくはないけど、ちょっと都合が悪い。（I can go, but it\u0026rsquo;s a bit inconvenient.） 食べられなくはないが、あまり好きではない。（I can eat it, but I don\u0026rsquo;t really like it.） なにも〜ない: なにも〜ない is used to express “there’s no need to\u0026hellip;” or simply “nothing\u0026hellip;” depending on the context. It often implies that the action or worry is unnecessary. なにも心配することはないよ。（There’s nothing to worry about.） なにも謝ることはない。（There’s no need to apologize.） ねばならない（＝なければならない）: ねばならない is a formal or literary form of “must” or “have to,” mostly used in writing or official speech. 規則を守らねばならない。(We must follow the rules.) 早く行かねばならない。（I must go quickly.） にあたり: にあたり is a formal expression meaning “on the occasion of,” “at the time of,” or “when doing.” Often used in written announcements or speeches. 新年を迎えるにあたり、目標を立てました。（I set goals on the occasion of the New Year.） プロジェクトの開始にあたり、関係者が集まった。（All parties gathered at the start of the project.） に反して: に反して means “contrary to” or “against.” It is used when something is the opposite of a rule, expectation, wish, etc. 予想に反して、試験は簡単だった。（Contrary to expectations, the test was easy.） 規則に反して行動した。（They acted against the rules.） ３０６−３１０ SHOW CONTENTS にほかならない: にほかならない is used to emphasize that something is nothing other than or precisely what is stated. It shows strong conviction or conclusion. 彼の成功は努力の結果にほかならない。（His success is nothing but the result of hard work.） 親の愛情とは、無償の愛にほかならない。（Parental love is none other than unconditional love.） に限って: に限って means \u0026ldquo;only in the case of\u0026rdquo; or \u0026ldquo;particularly when\u0026hellip;\u0026rdquo; It’s often used when something unusual or unfortunate happens specifically in certain situations. 雨が降らない日が続いていたのに、出かける日に限って雨が降った。（It hadn’t rained for days, but on the day I went out, it rained.） 忙しい時に限って、電話が鳴る。（The phone rings only when I\u0026rsquo;m busy.） に限らず: に限らず means \u0026ldquo;not only\u0026hellip; but also\u0026rdquo; or \u0026ldquo;not limited to.\u0026rdquo; It shows that something applies more broadly than the stated example. このイベントは学生に限らず、誰でも参加できる。（This event is open not only to students but also to anyone.） 最近は女性に限らず、男性も化粧をするようになった。（These days, not just women but also men wear makeup.） に限る: に限る expresses a strong personal opinion that \u0026ldquo;there’s nothing better than\u0026hellip;\u0026rdquo; or \u0026ldquo;it’s best to\u0026hellip;\u0026rdquo; Often appears in casual expressions of preference. 夏はやっぱり冷たいビールに限る！（In summer, nothing beats a cold beer!） 疲れた時は寝るに限る。(When tired, there\u0026rsquo;s nothing better than sleeping.) にかかわる: にかかわる means \u0026ldquo;to relate to,\u0026rdquo; \u0026ldquo;to be involved with,\u0026rdquo; or \u0026ldquo;to affect.\u0026rdquo; It often appears in formal writing or when the matter is serious. 信用にかかわる行為は慎むべきだ。(One should avoid actions that affect one\u0026rsquo;s credibility.) 国の将来にかかわる重要な問題だ。（This is an important issue that affects the future of the country.） ３１１−３１５ SHOW CONTENTS にかかわらず: にかかわらず means \u0026ldquo;regardless of\u0026rdquo; or \u0026ldquo;no matter\u0026hellip;\u0026rdquo;, indicating that the action or situation remains unchanged despite the stated condition. 雨が降るかどうかにかかわらず、試合は行われます。（The match will be held regardless of whether it rains or not.） 年齢にかかわらず、誰でも応募できます。（Anyone can apply, regardless of age.） に決まっている: に決まっている expresses strong certainty or conviction, meaning \u0026ldquo;I\u0026rsquo;m sure that\u0026hellip;\u0026rdquo; or \u0026ldquo;It must be\u0026hellip;\u0026rdquo; あんなに練習したんだから、彼が勝つに決まっている。（He practiced so much, so he’s sure to win.） そんな話、うそに決まっているよ。（That story must be a lie.） に越したことはない: に越したことはない means \u0026ldquo;there’s nothing better than\u0026hellip;\u0026rdquo; or \u0026ldquo;it’s best to\u0026hellip;\u0026rdquo; It expresses a recommendation or ideal condition. 健康には気をつけるに越したことはない。（You can never be too careful about your health.） 安いに越したことはないが、品質も大事だ。（Cheaper is better, but quality also matters.） に応えて: に応えて means \u0026ldquo;in response to\u0026rdquo; or \u0026ldquo;in accordance with\u0026rdquo;, often used when fulfilling a request, expectation, or demand. 観客の声援に応えて、選手が手を振った。（The player waved in response to the cheers of the audience.） 期待に応えて、彼はすばらしい演奏を見せてくれた。（Responding to expectations, he gave a wonderful performance.） に加えて: に加えて means \u0026ldquo;in addition to\u0026hellip;\u0026rdquo;, used to introduce additional elements. 雨に加えて風も強くなってきた。（In addition to the rain, the wind picked up.） 英語に加えて、中国語も話せます。（Besides English, I can also speak Chinese.） ３１６−３２０ SHOW CONTENTS に基づいて: に基づいて means \u0026ldquo;based on\u0026rdquo; and is used when something is done according to rules, data, experience, or policy. 法律に基づいて判断します。（The decision is made based on the law.） 実験の結果に基づいて、レポートを書いた。（I wrote the report based on the experiment results.） にもかかわらず: にもかかわらず means \u0026ldquo;despite,\u0026rdquo; \u0026ldquo;although,\u0026rdquo; or \u0026ldquo;in spite of\u0026rdquo;, expressing contrast between two situations. 雨にもかかわらず、多くの人が集まった。（Despite the rain, many people gathered.） 病気にもかかわらず、彼は働き続けた。（He continued working despite his illness.） に向かって: に向かって means \u0026ldquo;towards\u0026rdquo; or \u0026ldquo;facing\u0026rdquo;, often referring to direction, goals, or people. 子どもたちは先生に向かって挨拶した。（The children greeted the teacher facing toward him.） ゴールに向かって全力で走った。（I ran with all my strength towards the goal.） に応じて: に応じて means \u0026ldquo;in accordance with\u0026rdquo; or \u0026ldquo;depending on\u0026rdquo;, indicating change or response according to conditions. 年齢に応じて運動量を変えるべきだ。（You should adjust the amount of exercise according to your age.） 状況に応じて対応します。（We’ll respond according to the situation.） に際して: に際して is a formal expression meaning \u0026ldquo;on the occasion of\u0026rdquo; or \u0026ldquo;at the time of\u0026rdquo;, often used in writing and speeches. 入社に際して、いくつかの書類が必要です。（Several documents are required when joining the company.） 引っ越しに際して、友人たちが手伝ってくれた。（At the time of the move, my friends helped me.） ３２１−３２５ SHOW CONTENTS に先立ち: に先立ち means \u0026ldquo;before\u0026rdquo; or \u0026ldquo;prior to\u0026rdquo;, used in formal contexts to indicate an important event that happens just before another. 開会に先立ち、国歌が演奏された。（Before the opening, the national anthem was played.） 留学に先立ち、ビザの申請が必要だ。（Prior to studying abroad, you need to apply for a visa.） にしろ / にせよ: にしろ and にせよ mean \u0026ldquo;even if,\u0026rdquo; \u0026ldquo;though,\u0026rdquo; or \u0026ldquo;whether\u0026rdquo;, showing concession or giving examples. 行くにしろ行かないにしろ、早めに連絡してください。（Whether you go or not, please contact me early.） 失敗するにせよ、やってみる価値はある。（Even if you fail, it\u0026rsquo;s worth trying.） にしろ〜にしろ: にしろ〜にしろ (or にせよ〜にせよ) means \u0026ldquo;whether\u0026hellip; or\u0026hellip;\u0026rdquo;, presenting two or more examples. 勉強するにしろ遊ぶにしろ、全力でやるべきだ。（Whether you study or play, you should do it with full effort.） 犯人にしろ被害者にしろ、話を聞く必要がある。（We need to hear the story whether from the criminal or the victim.） に従って: に従って means \u0026ldquo;as\u0026hellip;\u0026rdquo; or \u0026ldquo;in accordance with\u0026hellip;\u0026rdquo;, indicating that one thing changes in line with another. 年を取るに従って、体力が落ちてきた。（As I got older, my physical strength declined.） ルールに従って行動してください。（Please act in accordance with the rules.） にしたら: にしたら means \u0026ldquo;from the point of view of (someone)\u0026rdquo; and is often used to consider how someone else feels. 親にしたら、子どもの成功が一番嬉しい。（From a parent\u0026rsquo;s point of view, a child’s success is the greatest joy.） 学生にしたら、この課題は難しすぎる。（For students, this assignment is too difficult.） ３２６−３３０ SHOW CONTENTS にしても〜にしても: にしても〜にしても means \u0026ldquo;regardless of whether\u0026hellip; or\u0026hellip;\u0026rdquo; or \u0026ldquo;whether\u0026hellip; or\u0026hellip;\u0026rdquo;, and is used to present two or more examples or situations that lead to the same conclusion. 勉強するにしても遊ぶにしても、計画的に行動すべきだ。(Whether you study or play, you should act with a plan.) バスにしても電車にしても、通勤は大変だ。(Whether by bus or train, commuting is tough.) に相違ない: に相違ない means \u0026ldquo;must be\u0026rdquo;, \u0026ldquo;without a doubt\u0026rdquo;, or \u0026ldquo;surely is\u0026rdquo;, and expresses strong certainty based on evidence or context. 彼が犯人に相違ない。He must be the culprit. これは歴史的に重要な発見に相違ない。This is without a doubt a historically important discovery. に沿って: に沿って means \u0026ldquo;along with\u0026rdquo; or \u0026ldquo;in accordance with\u0026rdquo;, and is often used with rules, policies, or expectations. 会社の方針に沿って行動してください。Please act in accordance with the company’s policy. 川に沿って歩いた。Walked along the river. に過ぎない: に過ぎない means \u0026ldquo;nothing more than\u0026rdquo;, \u0026ldquo;just\u0026rdquo;, or \u0026ldquo;merely\u0026rdquo;, and is used to minimize or downplay something. 僕は指示に従ったに過ぎない。I merely followed instructions. それは一例に過ぎない。That is just one example. にて: にて is a formal or written form of \u0026ldquo;in,\u0026rdquo; \u0026ldquo;at,\u0026rdquo; or \u0026ldquo;by means of\u0026rdquo;, often used in business, notices, or formal announcements. 東京にて会議が行われます。The meeting will be held in Tokyo. メールにてご連絡ください。Please contact us by email. ３３１−３３５ SHOW CONTENTS に伴って: に伴って means \u0026ldquo;as\u0026hellip; happens\u0026rdquo; or \u0026ldquo;due to\u0026hellip;\u0026rdquo;, and expresses that one thing changes or happens alongside another. 経済の発展に伴って、生活も豊かになった。As the economy developed, life became richer. 地震に伴って火災が発生した。A fire broke out due to the earthquake. につけ: につけ means \u0026ldquo;every time\u0026rdquo; or \u0026ldquo;both\u0026hellip; and\u0026hellip;\u0026rdquo;, and is often used in set phrases like “見るにつけ” (every time I see) or in patterns like “AにつけBにつけ” (whether A or B). 彼の努力を見るにつけ、心を打たれる。Every time I see his effort, I’m moved. 嬉しいにつけ悲しいにつけ、彼に相談している。Whether I’m happy or sad, I consult him. につき: につき means \u0026ldquo;due to\u0026rdquo;, \u0026ldquo;because of\u0026rdquo;, or \u0026ldquo;per (unit)\u0026rdquo;, and is often used in notices or formal writing. 台風接近につき、本日は休業いたします。We are closed today due to the approaching typhoon. 一人につき500円をいただきます。We charge 500 yen per person. には: には means \u0026ldquo;in order to\u0026rdquo; or \u0026ldquo;for the purpose of\u0026rdquo;, often emphasizing the necessity or requirement for something. 健康を保つには、運動が必要だ。To stay healthy, exercise is necessary. 留学するにはお金がかかる。Studying abroad costs money. にわたって: にわたって means \u0026ldquo;throughout\u0026rdquo; or \u0026ldquo;over (a period or area)\u0026rdquo;, and is used to describe something extending over time, space, or categories. 会議は5時間にわたって行われた。The meeting was held over a period of five hours. 彼は長年にわたって研究を続けた。He continued his research for many years. ３３６−３４０ SHOW CONTENTS のももっともだ: のももっともだ means \u0026ldquo;no wonder\u0026hellip;\u0026rdquo; or \u0026ldquo;it\u0026rsquo;s only natural that\u0026hellip;\u0026rdquo;, used when the speaker acknowledges that someone’s feelings or actions are understandable. 彼が怒るのももっともだ。It\u0026rsquo;s only natural that he\u0026rsquo;s angry. そんなに頑張ったのだから、成功するのももっともだ。He worked so hard, so it\u0026rsquo;s no wonder he succeeded. のも当然だ: のも当然だ also means \u0026ldquo;it\u0026rsquo;s only natural that\u0026hellip;\u0026rdquo; or \u0026ldquo;no wonder\u0026hellip;\u0026rdquo;, similar to のももっともだ but slightly more formal or objective. こんなに働いたのだから、疲れるのも当然だ。(It\u0026rsquo;s only natural to be tired after working this much.) あれだけ練習したから、試合に勝ったのも当然だ。He practiced that much, so it\u0026rsquo;s no surprise he won. のもとで: のもとで means \u0026ldquo;under (someone\u0026rsquo;s guidance, rule, etc.)\u0026rdquo;, and indicates a situation or condition under which something occurs. 両親のもとで育った。I was raised under my parents’ care. このプロジェクトは、彼の指導のもとで行われた。This project was carried out under his supervision. のもならず: のもならず means \u0026ldquo;not only\u0026hellip;, but also\u0026hellip;\u0026rdquo; and is used to add something extra or surprising. (This is a somewhat literary or formal expression.) 彼は成績優秀なのものならず、スポーツも得意だ。Not only is he academically excellent, but he\u0026rsquo;s also good at sports. その映画は子供のものならず、大人にも人気がある。That movie is popular not only among children but also among adults. 抜きで/抜きにして: 抜きで or 抜きにして means \u0026ldquo;without\u0026rdquo; or \u0026ldquo;leaving out\u0026rdquo;, used when something is excluded or omitted. 冗談抜きで話しましょう。Let’s talk seriously (without joking). このスープは塩抜きでお願いします。Please make this soup without salt. ３４１−３４５ SHOW CONTENTS 抜く: 抜く in this context means \u0026ldquo;to do something to the end\u0026rdquo; or \u0026ldquo;completely\u0026rdquo;, emphasizing the thoroughness or persistence in an action. 最後までやり抜いた。I carried it through to the end. 力を出し抜いて走った。I ran with all my strength. を〜として: を〜として means \u0026ldquo;as\u0026rdquo; or \u0026ldquo;in the role of\u0026rdquo;, indicating a status, role, or purpose. 彼をリーダーとしてチームを作った。The team was formed with him as the leader. 日本語を趣味として勉強しています。I study Japanese as a hobby. を中心に: を中心に means \u0026ldquo;centered on\u0026rdquo;, \u0026ldquo;focused on\u0026rdquo;, or \u0026ldquo;mainly about\u0026rdquo;, and indicates the main subject or focus. 子供たちを中心にイベントが行われた。The event was held mainly for children. 東京を中心に地震が起きた。The earthquake occurred mainly around Tokyo. をこめて: をこめて means \u0026ldquo;filled with (emotion, meaning, etc.)\u0026rdquo;, expressing that something was done with sincerity or feeling. 愛をこめて手紙を書いた。I wrote the letter with love. 感謝の気持ちをこめてプレゼントを渡した。I gave the gift with gratitude. をきっかけに: をきっかけに means \u0026ldquo;with\u0026hellip; as a start\u0026rdquo; or \u0026ldquo;triggered by\u0026rdquo;, indicating that something started or changed due to a specific event or opportunity. 留学をきっかけに、自立するようになった。Studying abroad gave me the opportunity to become independent. 結婚をきっかけに田舎に引っ越した。I moved to the countryside as a result of getting married. ３４６−３５０ SHOW CONTENTS を契機に: を契機に means \u0026ldquo;as a good opportunity to\u0026rdquo; or \u0026ldquo;as a turning point\u0026rdquo;, and is often used to describe a significant trigger that led to change or action. 病気を契機に健康に気をつけるようになった。I began taking care of my health as a result of my illness. 留学を契機に視野が広がった。Studying abroad broadened my horizons. をめぐって（を巡って）: をめぐって means \u0026ldquo;concerning\u0026rdquo;, \u0026ldquo;about\u0026rdquo;, or \u0026ldquo;in regard to\u0026rdquo;, and is used when there is discussion, dispute, or action about something. 環境問題をめぐって議論が続いている。The debate continues regarding environmental issues. その事件をめぐって、様々なうわさが流れている。Various rumors are circulating about the incident. をもとに: をもとに means \u0026ldquo;based on\u0026rdquo; or \u0026ldquo;using\u0026hellip; as a basis\u0026rdquo;, often referring to using information, experience, or data to create or judge something. 調査データをもとに、報告書を作成した。(The report was prepared based on survey data.) この小説は彼の体験をもとに書かれた。This novel was written based on his experiences. を除いて: を除いて means \u0026ldquo;except for\u0026rdquo; or \u0026ldquo;with the exception of\u0026rdquo;, and is used to exclude something from a group. 彼を除いて、全員賛成した。(Everyone agreed except him.) 祝日を除いて毎日営業しています。Open every day except public holidays. を問わず: を問わず means \u0026ldquo;regardless of\u0026rdquo; or \u0026ldquo;no matter\u0026rdquo;, and is used to show that something is not restricted by conditions like age, gender, nationality, time, etc. 経験を問わず応募できます。You can apply regardless of experience. 天候を問わず試合は行われます。The game will be held regardless of the weather. ３５１−３５５ SHOW CONTENTS に通じて: に通じて means \u0026ldquo;via,\u0026rdquo; \u0026ldquo;through,\u0026rdquo; or \u0026ldquo;be well-versed in\u0026rdquo;, and can refer to a medium of communication, a route, or even a span of time (e.g., \u0026ldquo;throughout the year\u0026rdquo;). この道は駅に通じている。This road leads to the station. 一年を通じて温暖な気候です。The climate is warm throughout the year. おまけに: おまけに means \u0026ldquo;to make matters worse,\u0026rdquo; \u0026ldquo;on top of that,\u0026rdquo; or \u0026ldquo;besides\u0026rdquo;, and is used to add a negative or unexpected element to a situation. 道に迷った。おまけに雨まで降ってきた。I got lost. To make matters worse, it started to rain. 彼は遅刻してきた。おまけに宿題も忘れた。He came late. On top of that, he forgot his homework. おそらく: おそらく means \u0026ldquo;perhaps,\u0026rdquo; \u0026ldquo;likely,\u0026rdquo; or \u0026ldquo;probably\u0026rdquo;, and is used when making a prediction or estimation with some level of uncertainty. おそらく彼は来ないだろう。He probably won’t come. 明日はおそらく雨でしょう。It will likely rain tomorrow. 恐れがある（おそれがある）: 恐れがある means \u0026ldquo;there is fear that\u0026hellip;\u0026rdquo; or \u0026ldquo;there is a risk that\u0026hellip;\u0026rdquo;, and is often used in formal contexts, such as warnings or news. このままでは会社が倒産する恐れがある。At this rate, there is a risk that the company will go bankrupt. 台風で大雨の恐れがあります。There is a risk of heavy rain due to the typhoon. ろくに〜ない: ろくに〜ない means \u0026ldquo;not properly,\u0026rdquo; \u0026ldquo;not sufficiently,\u0026rdquo; or \u0026ldquo;hardly at all\u0026rdquo;, and is used to criticize or emphasize lack of effort or quality. 彼はろくに勉強もしない。He doesn’t study properly. ろくに寝ていないので、疲れている。I\u0026rsquo;m tired because I haven’t slept properly. ３５６−３６０ SHOW CONTENTS 際に（さいに）: 際に is used to mean “at the time of,” “on the occasion of,” or “in case of”, often in formal or written contexts. 出発の際には、忘れ物がないか確認してください。Please check for forgotten items at the time of departure. 火災の際には、エレベーターを使わないでください。In case of fire, do not use the elevator. 幸い（さいわい）: 幸い means “luckily” or “fortunately”, and is used when something turns out better than expected. 幸い、雨は降りませんでした。Fortunately, it didn’t rain. 幸いなことに、事故は大きなけがにはつながらなかった。Luckily, the accident didn’t result in serious injuries. さらに: さらに means “furthermore,” “in addition,” or “more and more”, and is used to add information or express progression. 彼は英語が話せる。さらにフランス語もできる。He speaks English. Furthermore, he can speak French too. 気温はさらに下がるでしょう。The temperature will drop even further. せいぜい: せいぜい means “at most” or “at best”, and is used to express an upper limit or a modest level of expectation. 彼の貯金はせいぜい10万円くらいだろう。His savings are at most around 100,000 yen. 遅れても、せいぜい10分でしょう。Even if he’s late, it’ll be at most 10 minutes. せめて: せめて means “at least” or “if only”, and is used when expressing a minimum hope or expectation in a less-than-ideal situation. 遅れてもいいから、せめて連絡はしてほしい。It’s okay if you’re late, but at least contact me. せめて一言「ありがとう」と言ってくれたらよかったのに。If only you had at least said “thank you.” ３６１−３６５ SHOW CONTENTS 次第だ/次第で: 次第だ is used to explain that the outcome or situation depends on a certain factor. 次第で emphasizes that something can change depending on a condition or context. 成功するかどうかは努力次第だ。（Whether it succeeds or not depends on effort.） 天候次第では、試合は中止になるかもしれない。（Depending on the weather, the game may be canceled.） しかも: しかも is used to add additional information, typically something surprising or impressive, much like \u0026ldquo;moreover\u0026rdquo; or \u0026ldquo;what’s more\u0026rdquo;. 彼はフランス語が話せる。しかも、英語とドイツ語も話せる。（He can speak French. Moreover, he can also speak English and German.） この料理は安くておいしい。しかも、ヘルシーだ。（This dish is cheap and tasty. Furthermore, it’s healthy.） したがって: したがって is a formal conjunction used to indicate a logical conclusion or result, similar to \u0026ldquo;therefore\u0026rdquo; or \u0026ldquo;accordingly\u0026rdquo;. 明日は祝日です。したがって、会社は休みです。（Tomorrow is a holiday. Therefore, the office will be closed.） 交通事故が多発している。したがって、安全対策が必要だ。（Traffic accidents are frequent. Accordingly, safety measures are needed.） それなのに: それなのに is used to express contrast or contradiction, meaning “and yet” or “despite that”. It shows that what follows is unexpected based on what came before. 一生懸命勉強した。それなのに、試験に落ちた。（I studied hard. And yet, I failed the exam.） 約束した。それなのに、来なかった。（There was a promise. Despite that, they didn’t show up.） それなら: それなら is used to mean \u0026ldquo;if that’s the case\u0026rdquo; or “then,” in response to someone else’s statement or condition. 明日行けない？それなら、今日会おうよ。（Can’t go tomorrow? Then let’s meet today.） この本は面白いよ。それなら、私も読んでみる。(This book is interesting.\u0026quot; B: \u0026ldquo;If that’s the case, I’ll read it too.) ３６６−３７０ SHOW CONTENTS それにしても: それにしても is used to express surprise or doubt, even acknowledging the previous context — similar to “nevertheless” or “even so.” 寒いのはわかるけど、それにしても今日は寒すぎる。（I know it\u0026rsquo;s cold, but even so, today is too cold.） 値段が高い。それにしても、この品質なら納得だ。(It\u0026rsquo;s expensive. Nevertheless, the quality justifies it.) そういえば: そういえば is used when something suddenly comes to mind, like “come to think of it.” そういえば、明日は彼の誕生日だね。（Come to think of it, tomorrow is his birthday.） そういえば、あの店は最近見かけないね。（Now that it’s mentioned, that shop hasn’t been seen lately.） そうにない: そうにない is used when something doesn’t look like it will happen or shows no signs of happening — it expresses extreme unlikelihood. 雨は止みそうにないね。（The rain doesn’t look like it will stop.） 彼が謝りそうにない。（He doesn’t seem likely to apologize.） そうすると: そうすると is used to express a natural consequence or conclusion from what was just stated — “having done that” or “if so.” この道をまっすぐ行くと駅があります。そうすると、右に見えるのが図書館です。（Go straight on this road and you’ll reach the station. Having done that, the library will be on the right.） 今日は行けないかも。そうすると、別の日にしようか。(I might not be able to go today. In that case, shall we make it another day?) 少しも〜ない: 少しも〜ない is used to emphasize complete absence — “not at all,” “not in the least.” その話は少しも面白くなかった。（That story wasn’t interesting at all.） 彼の態度には少しも反省が見られなかった。（There was not the slightest sign of remorse in his attitude.） ３７１−３７５ SHOW CONTENTS ちなわち: ちなわち is used to restate or clarify something with a more specific or simpler expression. It means \u0026ldquo;in other words\u0026rdquo; or \u0026ldquo;that is to say.\u0026rdquo; 彼は二児の父親、ちなわち、家庭を支える責任がある立場だ。（He is the father of two children—in other words, someone responsible for supporting a family.） 彼は二つの大学で学位を取得した。ちなわち、東京大学と京都大学である。（He earned degrees from two universities. In other words, the University of Tokyo and Kyoto University.） たあげく: たあげく is used to express that after a lot of effort or trouble, the result was unfortunate or disappointing. 長時間議論したあげく、結局何も決まらなかった。（After a long discussion, nothing was decided in the end.） 何度も挑戦したあげく、とうとうあきらめてしまった。（After trying many times, ended up giving up.） なおちに: なおちに is not a standard Japanese expression. It may be a typo or misreading of 直ちに (ただちに), which means “at once” or “immediately.” 火災が発生したため、直ちに避難してください。（Due to the fire, please evacuate immediately.） この薬は、直ちに効果が現れるわけではない。（This medicine does not take effect immediately.） たまえ: たまえ is an old-fashioned, somewhat authoritative or masculine imperative form used to order someone to do something. It is usually used by someone of higher status or in fictional/literary contexts. よく聞きたまえ。（Listen carefully.） 見たまえ、この素晴らしい景色を。（Look at this beautiful view.） た末 / の末: た末 (or の末) is used to describe a situation where, after much effort, thought, or time, a result—often significant—is finally reached. 長い議論の末、契約に合意した。（After long discussions, they agreed on the contract.） 悩んだ末、彼は会社を辞めることにした。（After much deliberation, he decided to quit the company.） ３７６−３８０ SHOW CONTENTS 確かに: 確かに is used to affirm that something is certainly or surely true. It often appears before presenting a contrast or concession. 確かに彼の意見は正しい。（His opinion is certainly correct.） 確かに便利だが、値段が高すぎる。（It’s definitely convenient, but the price is too high.） たって: たって is a colloquial contraction of たところで or ても, meaning “even if” or “no matter how.” Often used with verbs or adjectives. 泣いたって許してくれないよ。(Even if you cry, they won\u0026rsquo;t forgive you.) 高かったって買います。(No matter how expensive it is, I\u0026rsquo;ll buy it.) たとえば: たとえば is used when giving an example to illustrate a point or idea. 日本には多くの観光地がある。たとえば、京都や奈良などだ。（There are many tourist spots in Japan. For example, Kyoto and Nara.） 趣味は色々ある。たとえば、読書や映画鑑賞など。（There are many hobbies. For example, reading and watching movies.） たところで: たところで is used to express that even if something is done, the outcome will not change or is meaningless. 今さら謝ったところで、許されないだろう。（Even if there’s an apology now, forgiveness is unlikely.） 今から走ったところで、電車に間に合わない。(Even if I run now, I won\u0026rsquo;t catch the train.) てばかりはいられない: てばかりはいられない expresses the idea that one cannot continue doing something indefinitely and needs to take action. 遊んでばかりはいられない。試験の勉強をしなきゃ。（I can\u0026rsquo;t keep playing around. I have to study for my exams.） 悩んでばかりはいられない。行動しなければ。(I can\u0026rsquo;t just keep worrying. I have to take action.) ３８１−３８５ SHOW CONTENTS てでも: てでも is used to express strong determination to do something, even if it requires extreme means or effort. 多少無理してでも、このチャンスを逃したくない。（Don’t want to miss this chance, even if it takes some strain.） 借金してでもその絵を手に入れたい。（Want to get that painting, even if it means going into debt.） て以来: て以来 indicates that something has continued from a certain point in the past until now. 日本に来て以来、毎日が新しい発見だ。（Every day has been full of new discoveries since coming to Japan.） 大学を卒業して以来、彼とは会っていない。（Haven’t seen him since graduating from university.） ていては: ていては expresses that if a certain (usually negative or inefficient) action continues, an undesirable result will follow. こんなにミスをしていては、信頼を失ってしまう。（If mistakes keep happening like this, trust will be lost.） 毎日遅刻していては、評価が下がる。（If one keeps being late every day, evaluations will go down.） てからでないと: てからでないと is used to say that unless one action is completed, another cannot begin. 宿題をやってからでないと、遊びに行けない。（You can’t go out to play unless homework is done first.） 上司の許可をもらってからでないと、進められない。（You can’t proceed without the boss’s permission first.） てこそ: てこそ emphasizes that something has true value or meaning only after a certain condition is met. 苦労してこそ、成功の喜びがある。（Success is meaningful only after hard work.） 信頼は正直に話してこそ得られるものだ。（Trust can be gained only by being honest.） ３８６−３９０ SHOW CONTENTS 手前（てまえ）: 手前 is used to refer to one’s own standpoint or position, and it can also imply that, because of one’s role or position, one feels obligated to act in a certain way. It may also indicate the speaker’s modesty or consideration for appearances. 学生の手前、こんな簡単な問題を間違えるわけにはいかない。（From a student\u0026rsquo;s standpoint, I can\u0026rsquo;t afford to make a mistake on such an easy question.） 約束した手前、行かないわけにはいかない。（Since I made a promise, I can\u0026rsquo;t back out now.） てならない: てならない is used to express a strong, uncontrollable emotion or feeling. It is often used with words like 気になる (can\u0026rsquo;t stop thinking about), 心配だ (worried), 嬉しい (happy), and 悲しい (sad). 明日の試合が気になってならない。（I can’t stop thinking about tomorrow’s match.） 子供の将来が心配でならない。（I’m extremely worried about my child’s future.） てしょうがない: てしょうがない also expresses a strong feeling or emotion that the speaker can\u0026rsquo;t control, similar to てならない, but it’s slightly more colloquial and used in casual conversation. 暑くてしょうがない。（It’s unbearably hot.） お腹が空いてしょうがない。（I’m starving.） てたまらない: てたまらない is used to express an emotion or physical state that is so strong it’s hard to bear. It often implies a sense of urgency or suffering. 会いたくてたまらない。（I can’t stand how much I miss you.） 歯が痛くてたまらない。（My tooth hurts so badly I can’t stand it.） て当然だ: て当然だ is used to express that something is natural, justified, or to be expected. It often reflects social norms, logic, or strong reasoning. 試合に勝って当然だ。彼らはずっと練習してきたのだから。（It’s only natural they won the match. They’ve been practicing hard.） あんなひどいことを言えば、怒られて当然だ。（If you say something that awful, it’s only natural to be scolded.） ３９１−３９５ SHOW CONTENTS ては: ては is used in conditional expressions meaning \u0026ldquo;if\u0026rdquo; or \u0026ldquo;when,\u0026rdquo; and can also imply repetition (one action after another). It often expresses a negative outcome or warning when used as a condition. こんなに甘えてばかりいては、自立できないよ。（If you keep depending on others like this, you’ll never become independent.） 食べては寝る生活をしていたら、太ってしまった。（I kept eating and then sleeping, and ended up gaining weight.） てはいられない: てはいられない expresses that the speaker is in a situation where they can’t afford to do something or can’t just stay doing something. It indicates urgency or necessity for action. のんびりしてはいられない。締め切りが明日なんだから。（I can’t afford to relax. The deadline is tomorrow.） 泣いてばかりはいられない。前に進まなくちゃ。（I can’t just keep crying. I have to move forward.） てはならない: てはならない is a strong prohibition meaning \u0026ldquo;must not\u0026rdquo; or \u0026ldquo;should not.\u0026rdquo; It is formal and often used in rules, laws, or moral statements. 約束を破ってはならない。（You must not break a promise.） 公共の場で騒いではならない。（You must not make noise in public places.） 途中に / 途中で: 途中に and 途中で both mean \u0026ldquo;on the way\u0026rdquo; or \u0026ldquo;in the middle of,\u0026rdquo; but 途中で is more commonly used with verbs to indicate something happening during an action. 学校へ行く途中で友達に会った。（I met a friend on the way to school.） 会議の途中で電話がかかってきた。（I got a phone call in the middle of the meeting.） と同時に: と同時に means \u0026ldquo;at the same time as\u0026rdquo; or \u0026ldquo;as well as.\u0026rdquo; It is used to indicate simultaneous actions or situations. ドアを開けたと同時に、電話が鳴った。（Just as I opened the door, the phone rang.） 彼は勉強ができると同時に、スポーツも得意だ。（He is good at studying and also excels in sports.） ３９６−４００ SHOW CONTENTS というふうに: というふうに is used to describe a manner, way, or style in which something is done. It can be translated as \u0026ldquo;in such a way that\u0026rdquo; or \u0026ldquo;like this/that.\u0026rdquo; 彼は、何もかも自分で決めるというふうに考えている。（He thinks in such a way that he decides everything by himself.） 彼女はいつも前向きというふうに見える。（She always appears to be positive like that.） ということは: ということは is used to restate, explain, or draw a conclusion from what was said earlier. It means \u0026ldquo;that is to say\u0026rdquo; or \u0026ldquo;in other words.\u0026rdquo; 彼はもう帰ったの？ということは、今日の会議には出ないのね。（He already went home? That means he won’t attend today’s meeting.） 雨が降ってきた。ということは、試合は中止かもしれないね。（It’s started raining. That means the game might be canceled.） というものだ: というものだ expresses the speaker’s opinion or general common sense about something. It’s often used to define or characterize a situation. 人の話を最後まで聞くのが礼儀というものだ。（It’s common courtesy to listen to someone until the end.） 子供は元気に遊ぶものだ。それが自然というものだ。（Children should play energetically. That’s the natural way of things.） というものでもない: というものでもない is used to deny that something is always true or universally applicable. It means \u0026ldquo;not necessarily\u0026rdquo; or \u0026ldquo;it doesn\u0026rsquo;t mean that\u0026hellip;\u0026rdquo; 高いものが必ずしも良いというものでもない。（Expensive things aren’t necessarily good.） 努力すれば必ず成功するというものでもない。（Just because you try hard doesn’t mean you’ll always succeed.） といった: といった is used to give examples, similar to \u0026ldquo;such\u0026hellip; as\u0026rdquo; or \u0026ldquo;like.\u0026rdquo; It usually follows a list and is used before a noun that summarizes them. 寿司、天ぷら、うどんといった日本料理が好きです。（I like Japanese dishes such as sushi, tempura, and udon.） 英語、フランス語、中国語といった外国語を勉強しています。（I’m studying foreign languages such as English, French, and Chinese.） ４０１−４０５ SHOW CONTENTS とか: とか is often used in casual speech to report hearsay or uncertain information, meaning “I heard that…” or “they say…” It can also be used to list multiple examples, like “such as.” 彼は来週、転職するとか。（I heard he’s changing jobs next week.） 映画とか音楽とか、芸術が好きです。（I like things like movies, music, and art.） と考えられる: と考えられる means “it is thought that…” or “one can think that…,” and is used to express an opinion or logical conclusion. この結果は予想通りだと考えられる。（One can think that this result is as expected.） その事故は運転ミスが原因だと考えられている。（It is thought that the accident was caused by a driving error.） ところだった: ところだった is used to express that something almost happened but didn’t. It’s often translated as “was just about to…” or “nearly\u0026hellip;” 寝坊して、遅刻するところだった。（I overslept and almost was late.） 危うく事故に遭うところだった。（I nearly got into an accident.） ところに / ところへ: ところに or ところへ is used to describe a specific moment or situation when something else happens, usually unexpectedly. に emphasizes a point in time; へ emphasizes movement toward a place or situation. 出かけようとしたところに電話がかかってきた。（Just as I was about to leave, the phone rang.） 先生のところへ行ったところ、ちょうど会議中だった。（When I went to the teacher, he was in a meeting.） ところを見ると: ところを見ると means “judging from…” or “seeing that…,” and is used when drawing a conclusion based on observed facts or situations. 電気がついているところを見ると、誰か家にいるようだ。（Judging from the fact that the lights are on, it seems someone is home.） 彼の顔色が悪いところを見ると、体調が良くないのかもしれない。（Seeing that he looks pale, he might not be feeling well.） ４０６−４１０ SHOW CONTENTS とっくに: とっくに means “already” or “long ago,” emphasizing that something happened a while back, often longer ago than expected. 宿題はとっくに終わっているよ。（I already finished my homework long ago.） 彼はとっくに帰ったよ。（He went home long ago.） とも: とも is used to express “even if” or “no matter,” emphasizing that the result remains unchanged regardless of the condition. Often paired with interrogatives like いくら, だれ, 何, etc. いくら頼まれても、行かないとも。（No matter how much I\u0026rsquo;m asked, I won\u0026rsquo;t go.） だれが何と言おうとも、私は自分の道を行く。（No matter what anyone says, I’ll go my own way.） としても: としても is used to express a hypothetical situation, meaning “even if” or “assuming that…” It implies that even under that condition, the result doesn’t change. 失敗するとしても、挑戦する価値はある。（Even if I fail, it’s worth trying.） 行けないとしても、連絡はしてください。（Even if you can’t go, please contact me.） つもりで: つもりで means “with the intention of doing…” or “as if…,” and can express planned actions or pretended attitudes. プレゼントを買ったつもりで貯金している。（I’m saving money as if I bought a gift.） 旅行に行ったつもりで、この写真を見て楽しんでいる。（I’m enjoying the photos as if I went on a trip.） つつ: つつ means “while doing” or “although,” and is a more formal literary expression. It indicates simultaneous actions or a contrast. 彼は謝りつつ、心では納得していなかった。（While apologizing, he wasn’t convinced inside.） 景色を楽しみつつ、山道を歩いた。（I walked the mountain trail while enjoying the scenery.） ４１１−４１５ SHOW CONTENTS つつある: つつある is used to describe an action or condition that is in progress or gradually changing. It often appears in formal or written language. 景気は回復しつつある。（The economy is gradually recovering.） 技術は日々進化しつつある。（Technology is continuously evolving.） 上に: 上に means “in addition to” or “besides,” and is used to add more information that supports the same direction (often either all good or all bad). この店は料理がおいしい上に、値段も安い。（This restaurant not only has delicious food but is also cheap.） 彼は頭がいい上に、スポーツもできる。（He’s not only smart but also good at sports.） 上は: 上は means “now that…” or “since…,” and is used when someone accepts a condition and expresses a strong sense of duty or resolution in response. 引き受けた上は、最後までやり遂げるつもりだ。（Now that I’ve taken it on, I’ll see it through to the end.） やると決めた上は、全力を尽くします。（Since I’ve decided to do it, I’ll give it my all.） は別として: は別として means “setting aside…” or “apart from…,” and is used when excluding something from the main topic. 値段は別として、この商品はとても良い。（Apart from the price, this product is really good.） 冗談は別として、これは本当の話だよ。（Jokes aside, this is a true story.） はもとより: はもとより means “not only\u0026hellip; but also,” or “let alone,” and emphasizes that something is obvious or expected, then adds something more. 彼は英語はもとより、中国語も話せる。（He can speak not only English but also Chinese.） 健康のためには、運動はもとより食事にも気をつけるべきだ。（For your health, you should pay attention not only to exercise but also to your diet.） ４１６−４２０ SHOW CONTENTS ようでは: ようでは is used to express concern or criticism about a situation, meaning “if (someone does) such a thing…” or “if it’s like this, then\u0026hellip;” It implies that the result will not be good. こんな簡単な問題も解けないようでは、合格は難しい。（If you can’t solve even such an easy problem, passing will be difficult.） 挨拶もできないようでは、社会人として困る。（If you can’t even greet others, you’ll struggle as a working adult.） ようがない / ようもない: ようがない (or ようもない) means “there’s no way to…” or “it’s impossible to…” when there’s no method, means, or possibility of doing something. 連絡先がわからないので、知らせようがない。（I don’t know their contact info, so there’s no way to inform them.） 手がかりがなくて、調べようもなかった。（There were no clues, so there was no way to investigate.） 要するに: 要するに means “in short,” “to sum up,” or “the point is.” It’s used to summarize or clarify what was said. 要するに、君は来たくないんだね。（So basically, you don’t want to come.） 要するに、この問題は時間がかかるということです。（In short, this problem will take time.） ざるを得ない: ざるを得ない means “can’t help doing…” or “have no choice but to…” and is used to express unwilling but unavoidable action. 彼の話を信じざるを得なかった。（I had no choice but to believe his story.） 病気になって、休まざるを得なかった。（I got sick and had to take a break.） ずに済む: ずに済む means “get by without doing something” or “manage without…” and is often used to express relief. バスが来たので、歩かずに済んだ。（Since the bus came, I didn’t have to walk.） 彼が手伝ってくれて、一人でやらずに済んだ。（He helped me, so I didn’t have to do it alone.） ４２１−４２５ SHOW CONTENTS あえて: あえて means “dare to” or “take the risk to,” and is used when someone intentionally does something difficult, risky, or unnecessary. It often conveys boldness or going against expectations. 危険を承知で、あえて山に登った。（Knowing the danger, I dared to climb the mountain.） あえて反対の意見を言わせてもらいます。（I’ll dare to express a different opinion.） あくまでも: あくまでも means “to the end,” “persistently,” or “thoroughly,” and emphasizes sticking to something without compromise. It can also mean “after all” in the sense of clarifying a stance. あくまでも個人の意見です。（This is just my personal opinion.） あくまでも目標を達成するつもりだ。（I intend to achieve my goal no matter what.） 案の定: 案の定 means “just as expected” or “as one had thought,” usually used for undesirable outcomes that were predicted. 案の定、試合は雨で中止になった。（As expected, the game was canceled due to rain.） 案の定、彼は遅刻してきた。（Just as I thought, he was late.） あらかじめ: あらかじめ means “in advance” or “beforehand,” and is used when something is done ahead of time to prepare for something else. 会議の内容をあらかじめ知らせてください。（Please inform me of the meeting contents in advance.） あらかじめ予約しておいたほうがいい。（You’d better make a reservation beforehand.） あっての: あっての means “to owe everything to…” or “because of…,” emphasizing that something exists or is possible only because of something else. お客様あっての商売です。（Our business exists because of our customers.） 愛あっての結婚生活だ。（A marriage is built on love.） ４２６−４３０ SHOW CONTENTS 場合によっては: 場合によっては means “depending on the situation” or “in some cases,” and is used when the outcome or action changes according to circumstances. 場合によっては、手術が必要になるかもしれません。（Depending on the situation, surgery might be necessary.） 場合によっては、中止する可能性もある。（In some cases, it might be canceled.） ばこそ: ばこそ is used to emphasize that something happened precisely because of a certain reason, and it often precedes a positive or unexpected result. 努力すればこそ、成功するのです。（It’s only because of hard work that you succeed.） 信頼していればこそ、任せるのです。（It’s precisely because I trust you that I leave it to you.） ばそれまでだ: ばそれまでだ means “if something happens, then it’s the end,” indicating that something is meaningless or hopeless under certain conditions. 命を失えばそれまでだ。（If you lose your life, then nothing else matters.） 失敗を恐れて何もしなければ、それまでだ。（If you\u0026rsquo;re too afraid of failure to act, then it’s over.） べからず: べからず is a formal and old-fashioned way of saying “must not” or “should not.” Often seen in written warnings or rules. ここにゴミを捨てるべからず。（Do not throw garbage here.） 法を犯すべからず。（You must not break the law.） べく: べく means “in order to” or “should,” and is used in formal or written Japanese to indicate purpose or intent. 合格するべく、毎日勉強している。（I study every day in order to pass.） 問題を解決すべく、会議が開かれた。（A meeting was held in order to solve the problem.） ４３１−４３５ SHOW CONTENTS べくもない: べくもない means “there is no way to\u0026hellip;” or “can’t possibly\u0026hellip;” and is used when something is clearly impossible or unthinkable. 彼に勝つことは考えるべくもない。（There’s no way I can beat him.） あの状況では助かるべくもなかった。（In that situation, there was no way to survive.） びる: びる is a suffix that attaches to nouns or stems to indicate that something has the appearance or air of something, often used critically or sarcastically. 大人びた口調で話す。（He speaks in a grown-up way.） 彼はいつも知ったかぶりで、学者びている。（He always acts like he knows everything, pretending to be a scholar.） ぶり: ぶり indicates style, manner, or state, and is often used to express the way someone behaves or the interval since something occurred. 彼の話しぶりは自信にあふれていた。（The way he spoke was full of confidence.） 10年ぶりに彼に会った。（I met him for the first time in 10 years.） ぶる: ぶる means “to act/pretend like\u0026hellip;” and is used when someone behaves as if they were something (often used critically). 彼は偉そうに先生ぶっている。（He acts like he’s an important teacher.） 知らないふりをしているけど、実は知っているぶりだ。（He pretends not to know, but clearly he’s just acting.） だに: だに is a classical expression meaning “even\u0026hellip;” and is used with verbs like 想像（そうぞう） or 考える to express surprise, fear, or awe. 想像するだに恐ろしい。（It is frightening even to imagine.） 夢にだに見ない。（I can\u0026rsquo;t even dream about it.） ４３６−４４０ SHOW CONTENTS だの〜だの: だの〜だの is used to list examples of things (often negative, emotional, or excessive), similar to “things like A and B” or “and so on.” 宿題が多いだの、時間がないだのと文句ばかり言っている。（He keeps complaining about things like too much homework and no time.） 甘いだの辛いだの、味についてうるさい。（He’s picky about taste—sweet this, spicy that.） であれ〜であれ: であれ〜であれ means “whether A or B,” and is used to express that something is true regardless of the conditions listed. 貧乏であれ金持ちであれ、人間は平等だ。（Whether rich or poor, all people are equal.） 学生であれ社会人であれ、マナーは大切だ。（Whether you’re a student or working adult, manners are important.） であれ / であるうと: This construction is used to express “whoever,” “whatever,” or “however,” and implies that no matter what/who, the result or attitude doesn’t change. たとえ相手が誰であれ、約束は守るべきだ。（No matter who the other person is, you should keep your promise.） どんなに困難であれ、やり抜く覚悟だ。（No matter how difficult, I’m determined to carry it through.） でも何でもない: でも何でもない is a strong negation meaning “not at all,” “not in the least,” or “definitely not.” それは愛情でも何でもない、ただの自己満足だ。（That’s not love at all—just self-satisfaction.） 特別でも何でもない、普通の料理だよ。（It’s nothing special—just an ordinary dish.） でなくてなんだろう: でなくてなんだろう means “must be…” or “is definitely…,” and is used rhetorically to assert that something surely is what it appears to be. これが才能でなくてなんだろう。（If this isn’t talent, then what is it?） あの行動は勇気でなくてなんだろうか。（That act must be courage, don’t you think?） ４４１−４４５ SHOW CONTENTS すら: すら is an emphatic form of \u0026ldquo;even,\u0026rdquo; used to highlight an extreme or unexpected example. It often appears in written or formal contexts. 子どもすら理解できる内容だ。（Even a child can understand it.） 忙しくて、食事をとる時間すらなかった。（I was so busy I didn’t even have time to eat.） ではあるまいか: ではあるまいか expresses the speaker’s tentative suggestion, suspicion, or rhetorical question, often translated as “I wonder if it’s not\u0026hellip;” or “Could it be that\u0026hellip;?” 彼の行動は少しおかしいのではあるまいか。（I wonder if his behavior is a bit strange.） これは運命なのではあるまいか。（Could this be fate?） ではあるまいし: ではあるまいし is used to reject a comparison or assumption, often meaning “it’s not like\u0026hellip;” or “since it’s not\u0026hellip;” in an explanatory tone. 子どもではあるまいし、そんなことで泣くな。（You’re not a child, so don’t cry over something like that.） 魔法使いではあるまいし、急に全部は無理だよ。（It’s not like I’m a magician—doing everything at once is impossible.） ではすまない: ではすまない indicates that a matter cannot be settled with only the expected action or outcome—it requires something more serious. 謝罪だけではすまない問題だ。（It’s a problem that can’t be resolved with just an apology.） 損害を与えたなら、弁償ではすまないかもしれない。（If you caused damage, compensation alone might not be enough.） どうにも〜ない: どうにも〜ない expresses a complete lack of a solution or control, meaning “no matter what,” or “can’t possibly.” この問題はどうにも解決できない。(This problem can\u0026rsquo;t be solved by any means.) 彼の態度はどうにも理解できない。（I just can’t understand his attitude no matter what.） ４４６−４５０ SHOW CONTENTS ふと: ふと means \u0026ldquo;suddenly\u0026rdquo; or \u0026ldquo;unexpectedly,\u0026rdquo; used when something happens unintentionally or by chance. ふと思い出した。（I suddenly remembered.） ふと窓の外を見ると、雪が降っていた。（When I happened to look out the window, it was snowing.） がてら: がてら is used to indicate doing something on the same occasion as another, often translated as \u0026ldquo;while,\u0026rdquo; \u0026ldquo;on the way,\u0026rdquo; or \u0026ldquo;at the same time.\u0026rdquo; 散歩がてら買い物に行く。（I\u0026rsquo;ll go shopping while taking a walk.） ドライブがてら温泉に寄った。（We dropped by a hot spring while on a drive.） が早いか（がはやいか）: が早いか means \u0026ldquo;as soon as\u0026rdquo; and is used to describe an action that happens immediately after another. チャイムが鳴るが早いか、生徒たちは教室を飛び出した。（As soon as the bell rang, the students dashed out of the classroom.） ドアを開けるが早いか、中から猫が飛び出した。（As soon as I opened the door, a cat jumped out.） が最後（がさいご）: が最後 is used to express that once something happens, there’s no going back—it inevitably leads to a certain result, often negative. 一度嘘をついたが最後、信用を失ってしまう。（Once you lie, you lose trust.） 薬に手を出したが最後、人生が崩れてしまう。（Once you start using drugs, your life falls apart.） ごとき / ごとく: ごとき (used before nouns) and ごとく (used as a particle) are classical/formal expressions meaning \u0026ldquo;like\u0026rdquo; or \u0026ldquo;as if.\u0026rdquo; ごとき can also be humble or critical. 彼は風のごとく去っていった。(He left like the wind.) 私ごときがそんな大事な仕事をできるはずがない。(Someone like me couldn’t possibly do such important work.) ４５１−４５５ SHOW CONTENTS ぐるみ: ぐるみ means “together with” or “including,” and is often used with people or groups, especially in negative contexts like crime or responsibility. 家族ぐるみで付き合っている。（We’re close with the whole family.） 会社ぐるみで不正をしていた。（The whole company was involved in the fraud.） 羽目になる（はめになる）: 羽目になる means “to end up doing something” (usually unpleasant or undesirable). 大雨で外出できず、家に閉じこもる羽目になった。（Because of the heavy rain, I ended up being stuck at home.） 約束を忘れて、彼に謝る羽目になった。（I forgot our appointment and ended up having to apologize to him.） ひとつ: ひとつ is used conversationally to suggest trying something or giving it a go (often soft and encouraging). ひとつやってみよう。（Let’s give it a try.） それじゃ、ひとつお願いしてもいいですか。（Then, may I ask you to give it a try?） ほどのことはない: ほどのことはない expresses that something is not serious or not worth worrying about—“not to that extent” or “no need to…” 心配するほどのことはない。（It’s nothing to worry about.） 泣くほどのことはないよ。（It’s not something worth crying over.） ほかに〜ない: ほかに〜ない means “there’s no other…”—used when there’s no alternative or other option. ほかに方法がない。（There’s no other way.） ほかに頼れる人がいない。(There’s no one else to rely on.) ４５６−４６０ SHOW CONTENTS ほうがましだ: ほうがましだ is used to compare two undesirable situations, meaning “I would rather\u0026hellip;” or “it would be better to\u0026hellip;” あんな店で食事するくらいなら、コンビニ弁当のほうがましだ。（I’d rather eat a convenience store bento than eat at a place like that.） 怒鳴られるくらいなら、無視されたほうがましだ。（I’d rather be ignored than yelled at.） いかなる: いかなる is a formal expression meaning “any kind of” or “whatever.” Often used in legal, official, or literary contexts. いかなる理由があろうとも、許されない。（No matter what the reason, it’s not forgivable.） いかなる困難にも負けない。（I won\u0026rsquo;t lose to any kind of hardship.） いかんでは/いかんによっては: いかんでは/いかんによっては means “depending on\u0026hellip;” and is used in formal contexts to indicate that the outcome changes based on the situation or condition. 成績のいかんでは、奨学金がもらえるかもしれない。（Depending on the grades, you might get a scholarship.） 天候のいかんによっては、中止になる場合もあります。（Depending on the weather, it might be canceled.） いかんによらず: A formal expression meaning “regardless of\u0026hellip;” or “no matter what\u0026hellip;” 結果のいかんによらず、全力を尽くしたことは評価される。（Regardless of the result, the fact that you did your best will be recognized.） 理由のいかんによらず、遅刻は認めません。（Regardless of the reason, tardiness is not allowed.） いかに: いかに means “how,” often in the sense of “how much” or “how difficult.” It is used for emphasis and is common in written or rhetorical expressions. いかに努力しても、結果が出ないこともある。（No matter how hard you try, sometimes you won’t see results.） 彼がいかに優れているかは、誰もが知っている。（Everyone knows how excellent he is.） ４６１−４６５ SHOW CONTENTS いかにも: いかにも means “indeed,” “really,” or “just like,” and is often used to show strong agreement or that something appears exactly as expected. いかにも彼らしい答えだ。（That’s such a typical answer from him.） いかにもプロらしい演技だった。（It was indeed a professional-level performance.） いまだに: いまだに means “still” or “even now,” and is used when something expected to have changed hasn’t yet. いまだに彼から返事がない。（I still haven’t heard back from him.） いまだにその事件は解決していない。（That case still hasn’t been solved.） いずれにせよ: いずれにせよ means “in any case” or “at any rate,” and is used to shift or summarize a situation regardless of specific conditions. いずれにせよ、早く対処する必要がある。（In any case, it needs to be dealt with quickly.） いずれにせよ、結果は変わらない。（Either way, the result won’t change.） じみた: じみた means “to look like” or “to resemble,” often used negatively to describe something as dull, old-fashioned, or resembling something undesirable. 地味な服を着ると、年寄りじみて見える。（Wearing plain clothes makes you look old.） 彼はいつも大人じみたことを言う。（He always says grown-up things.） 限りだ（かぎりだ）: 限りだ is used with emotion-related words to express a strong personal feeling such as “I feel so…” or “It’s extremely…” うれしい限りです。（I’m extremely happy.） 残念な限りだ。（It’s truly regrettable.） ４６６−４７０ SHOW CONTENTS かいもなく: かいもなく is used to express that an effort or result was in vain or brought no reward. It means “even though” or “despite” (with a disappointing outcome). 努力のかいもなく、不合格だった。（Even though I worked hard, I failed.） 手術のかいもなく、彼は亡くなった。（Despite the surgery, he passed away.） か否か（かいなか）: か否か is a formal expression meaning “whether or not.” Often used in written or academic contexts. 合格するか否かは、今週中にわかる。（Whether or not I passed will be known by the end of the week.） 彼が来るか否かは、まだ決まっていない。（Whether or not he’ll come is still undecided.） 可能性がある: 可能性がある means “there’s a possibility” or “it’s possible that\u0026hellip;” 雨が降る可能性がある。（There’s a possibility it will rain.） この病気は再発の可能性がある。（This illness has a chance of recurring.） からある: からある emphasizes large quantities or numbers, meaning “as much as” or “as many as,” usually with numbers. ５キロからある荷物を運んだ。（I carried a package weighing as much as 5 kilograms.） このビルは100階からある。(This building has as many as 100 floors.) かれ〜かれ: かれ〜かれ is used to indicate “sooner or later” or “whether A or B.” The structure is often ～かれ～かれ. 遅かれ早かれ、彼に知られるだろう。（Sooner or later, he’ll find out.） 良かれ悪しかれ、結果は明日わかる。(Whether good or bad, we’ll know the result tomorrow.) ４７１−４７５ SHOW CONTENTS かたがた: かたがた means \u0026ldquo;while\u0026rdquo; or \u0026ldquo;for the purpose of,\u0026rdquo; and is used in formal contexts when doing one thing also serves as an opportunity or purpose for doing another. 挨拶かたがた、お伺いしました。（I dropped by to greet you and at the same time to visit.） 見学かたがた、工場までご案内します。（I\u0026rsquo;ll guide you to the factory for a tour as well.） かたわら: かたわら means \u0026ldquo;while\u0026rdquo; or \u0026ldquo;beside,\u0026rdquo; and is used when someone does something (often main work) while also engaging in another activity. 彼は会社員のかたわら、小説を書いている。（He writes novels while working as a company employee.） 学業のかたわら、ボランティア活動にも励んでいる。（Besides his studies, he also does volunteer work.） かつて: かつて means \u0026ldquo;once\u0026rdquo; or \u0026ldquo;before,\u0026rdquo; and refers to something that happened in the past (often with a sense of contrast to the present). 彼はかつて有名な歌手だった。（He was once a famous singer.） かつての友人に偶然再会した。（I unexpectedly met an old friend.） 嫌いがある（きらいがある）: 嫌いがある means \u0026ldquo;to have a tendency to,\u0026rdquo; usually used with a negative nuance. 彼は物事を大げさに言う嫌いがある。（He tends to exaggerate things.） 最近の若者は自己中心的な嫌いがある。（Young people these days have a tendency to be self-centered.） きっての: きっての means “the most \u0026hellip; of all” or “top-class among,” used to describe someone or something outstanding in a group. 彼はクラスきっての秀才だ。（He’s the smartest in the class.） あのレストランは街きっての高級店だ。（That restaurant is one of the most upscale in town.） ４７６−４８０ SHOW CONTENTS きりがない: きりがない means “there\u0026rsquo;s no end to” or “it’s endless.” It’s used when something could go on forever or is too numerous to count. 欲を言えばきりがない。（If you start talking about wants, there’s no end to it.） 彼の失敗を数えればきりがない。（There’s no end to counting his mistakes.） 極まる／極まりない: 極まる and 極まりない both mean “extremely,” often with a strong emotional or evaluative tone. 極まる is used with na-adjectives (e.g., 愚か極まる), and 極まりない is used more flexibly. 無礼極まる態度に腹が立った。（I was angry at his extremely rude attitude.） 危険極まりない行為だ。（It’s an exceedingly dangerous act.） 極めて（きわめて）: 極めて means “extremely” or “exceedingly,” and is used in a formal or objective tone. これは極めて重要な問題だ。（This is an extremely important issue.） その計画は極めて現実的だ。（That plan is highly realistic.） ことだし: ことだし means “since” or “because,” and is used to provide a reason or justification, often when suggesting or deciding something. 雨もやんだことだし、そろそろ出かけましょう。（Since the rain has stopped, let’s head out.） 時間もあることだし、少し休もう。（Since we have time, let’s take a short break.） ことごとく: ことごとく means “altogether,” “entirely,” or “without exception.” It emphasizes that every single thing or everyone is affected. 彼の予想はことごとく外れた。（All of his predictions were wrong.） 試みはことごとく失敗した。（Every attempt ended in failure.） ４８１−４８５ SHOW CONTENTS ことなしに: ことなしに is used to express that something does not happen without a certain action or event occurring first. It emphasizes the necessity of one action for the other to happen. 努力することなしに、成功はありえない。（There is no success without making an effort.） 十分な準備をすることなしに、試験に合格するのは難しい。（It\u0026rsquo;s hard to pass the exam without adequate preparation.） ことのないよう: ことのないよう is used to indicate a preventative measure — \u0026ldquo;so that something doesn\u0026rsquo;t happen.\u0026rdquo; It\u0026rsquo;s often used in giving instructions or expressing precautions. 忘れることのないよう、メモを取ってください。（Please take notes so that you don’t forget.） 事故のないように、安全確認をしてください。（Please check for safety so that accidents don’t happen.） こととて: こととて is a somewhat formal or literary expression meaning \u0026ldquo;because\u0026rdquo; or \u0026ldquo;due to the fact that.\u0026rdquo; It often appears in apologies or formal explanations. 初めてのこととて、失礼があったらお許しください。（Since it’s my first time, please forgive any rudeness.） 急なこととて、準備が間に合いませんでした。（Because it was sudden, I couldn\u0026rsquo;t prepare in time.） くらいなら: くらいなら is used to express a strong preference — \u0026ldquo;rather than (doing something unpleasant), I\u0026rsquo;d rather (do something else).\u0026rdquo; そんな仕事をするくらいなら、辞めたほうがましだ。（I\u0026rsquo;d rather quit than do that kind of job.） あんな男と結婚するくらいなら、一生独身でいたほうがいい。（Rather than marrying a man like that, I\u0026rsquo;d rather stay single forever.） くらいのものだ: くらいのものだ emphasizes that something is very rare, limited, or exclusive — often translated as \u0026ldquo;only\u0026rdquo; or \u0026ldquo;just.\u0026rdquo; 彼の話を信じるのは、母親くらいのものだ。（The only one who believes his story is his mother.） そんな高級レストランに行けるのは、社長くらいのものだ。（Only the company president can afford to go to such a fancy restaurant.） ４８６−４９０ SHOW CONTENTS までだ: までだ is used to indicate that something is \u0026ldquo;only\u0026rdquo; or \u0026ldquo;simply\u0026rdquo; a certain way, often to express resignation or limitation. It can also mean “there’s nothing left to do but\u0026hellip;” in situations where one has no other option. 手紙を出して、返事を待つまでだ。（All I can do is send the letter and wait for a reply.） 私は自分の義務を果たしたまでだ。（I simply did my duty.） までもない: までもない is used to express that something is so obvious or simple that there is no need to go as far as doing it. 説明するまでもないと思うが、これは非常に重要なことだ。（It goes without saying, but this is extremely important.） そんなこと、言うまでもないよ。（That goes without saying.） まじき: まじき is a classical and formal expression meaning \u0026ldquo;must not\u0026rdquo; or \u0026ldquo;should not,\u0026rdquo; usually used to indicate an unacceptable or unethical behavior, especially for someone in a particular role. 教師にあるまじき行為だ。（That’s behavior unbecoming of a teacher.） 政治家としてあるまじき発言だった。（It was a statement that a politician should never make.） ままに: ままに means \u0026ldquo;to do as\u0026rdquo; or \u0026ldquo;according to,\u0026rdquo; often implying that something happens just as someone wills or wishes. 彼の言うままに行動した。（I acted just as he said.） 自然のままに生きる。(To live as nature intended.) まみれ: まみれ means \u0026ldquo;covered in\u0026rdquo; or \u0026ldquo;smeared with,\u0026rdquo; and is used for unpleasant or messy substances. It often carries a negative or uncomfortable connotation. 血まみれの服を着た男が現れた。（A man covered in blood appeared.） 彼の部屋はゴミまみれだった。（His room was covered in garbage.） ４９１−４９５ SHOW CONTENTS まるっきり: まるっきり means “totally” or “completely,” often used with negatives to emphasize the complete absence of something. 彼の話はまるっきり信じられない。（I can’t believe his story at all.） その映画にはまるっきり興味がない。（I have absolutely no interest in that movie.） めく: めく is attached to nouns to indicate “showing signs of” or “having a touch of.” It often expresses that something resembles or hints at a certain quality or condition. 春めいてきましたね。（It’s starting to feel like spring.） 皮肉めいた言い方をされた。（He spoke in a sarcastic tone.） もはや: もはや means “already” or “no longer,” and is used when something has already changed or a situation has passed the point of return. もはや彼を止めることはできない。（We can no longer stop him.） その考え方はもはや通用しない。（That way of thinking no longer works.） も顧みず／を顧みず: も顧みず or を顧みず means “without regard for” or “despite,” and is used to criticize or highlight someone\u0026rsquo;s disregard for risk, rules, or other concerns. 危険も顧みず、彼は子どもを助けに行った。（He went to save the child despite the danger.） 自分の立場を顧みず、彼女は真実を告げた。（She told the truth without regard for her own position.） もしないで: もしないで emphasizes that someone didn’t even do something they should have. It expresses criticism or disappointment. 彼は挨拶もしないで帰った。（He left without even saying hello.） 確認もしないで文書を送るなんて、無責任だ。（It’s irresponsible to send the document without even checking it.） ４９６−５００ SHOW CONTENTS もので: もので is a slightly softer and more personal way of saying “because” or “so,” often used to explain reasons or make excuses, especially in spoken or informal language. 急いでいたもので、返事が遅くなってすみません。（I was in a hurry, so I’m sorry for the late reply.） 子どもなもので、わがままを言ってしまいました。（He’s just a child, so he acted selfishly.） ものを: ものを is a classical or literary expression used to express regret, frustration, or criticism, often translated as “if only” or “I wish.” It typically follows a conditional form like 〜ば. 早く来ればよかったものを、遅れてしまった。(I wish I had come earlier, but I was late.) 一言声をかけてくれれば手伝ったものを。（If only you had said something, I would’ve helped.） ものと思われる: ものと思われる is a formal and objective-sounding expression meaning “it is thought that\u0026hellip;” or “it is assumed that\u0026hellip;” Often used in news, reports, or analysis. 火事の原因は電気のショートによるものと思われる。（The cause of the fire is thought to be a short circuit.） この現象は気候変動の影響であるものと思われる。（This phenomenon is believed to be due to climate change.） ものとして: ものとして is used to express that something is assumed to be a certain way, or to treat something as if it were so. これは正式な申込みがあったものとして手続きします。（We will proceed as if this is an official application.） 彼はこの件に同意したものとして話を進めた。（We continued the discussion on the assumption that he agreed.） もさることながら: もさることながら means “not only\u0026hellip; but also,” and is used to emphasize that while the first thing is true or important, the second is even more so. 実力もさることながら、運も必要だ。（Not only ability, but also luck is necessary.） 見た目もさることながら、味も最高だった。（Not only did it look good, but it also tasted amazing.） ５０１−５０５ SHOW CONTENTS もしくは: もしくは means “or” or “otherwise,” and is used to present alternatives or options, often in formal or written language. 電話、もしくはメールでご連絡ください。（Please contact us by phone or email.） 本人、もしくは代理人が手続きを行ってください。（The person or a representative must complete the procedure.） ながらに／ながらの: ながらに or ながらの means “while in the state of” or “since,” expressing that something continues or exists unchanged from a certain time or condition. 生まれながらにして才能を持っている。（He has had talent since birth.） 昔ながらのやり方を守っている。（They stick to traditional methods.） ないではおかない／ずにはおかない: These expressions mean “will definitely do,” or “cannot not do.” They express strong determination or an inevitable reaction. 真実を明らかにしないではおかない。（I will definitely reveal the truth.） その映画は観る者の心を動かさずにはおかない。（That movie will definitely move anyone who watches it.） ないではすまない／ずにはすまない: These expressions mean “must” or “can’t avoid doing,” used when an action is unavoidable, either due to duty, social norms, or feelings. 謝らないではすまない状況だ。（You can’t get away without apologizing.） 重大なミスだから、報告せずにはすまない。（It’s a serious mistake, so it must be reported.） ないまでも: ないまでも means “even if not\u0026hellip;,” and is used when something doesn\u0026rsquo;t reach a certain level, but still reaches a related or lesser degree. 留学はしないまでも、海外旅行には行きたい。（Even if I don\u0026rsquo;t study abroad, I want to travel overseas.） プロにはなれないまでも、それに近いレベルに達したい。（Even if I can’t become a pro, I want to reach a comparable level.） ５０６−５１０ SHOW CONTENTS ないものか: ないものか expresses a strong hope or desire for something that is difficult or unlikely. It can be translated as “Can’t it be\u0026hellip;?” or “Isn’t there a way to\u0026hellip;?” どうにかして問題を解決できないものか。（Isn’t there some way to solve this problem?） 彼がもう一度チャンスをもらえないものか。（Can’t he be given one more chance?） ないものでもない: ないものでもない means “not entirely impossible” or “it’s not that it absolutely can’t\u0026hellip;” It implies some possibility exists. 安くならないものでもないが、難しいだろう。(It’s not that the price can’t drop, but it’d be tough.) 頑張れば、合格できないものでもない。(If you work hard, passing isn’t entirely impossible.) ないとも限らない: ないとも限らない means “might” or “not necessarily impossible,” and is used to express a possibility, especially one that\u0026rsquo;s not obvious or may be negative. 明日、雨が降らないとも限らない。（It might rain tomorrow.） 彼が嘘をついていないとも限らない。(There’s a chance he might be lying.) なくして: なくして (often followed by は or には) means “without,” and is used to express that something cannot happen or exist without something else. 努力なくして成功はあり得ない。（There is no success without effort.） 信頼なくしては、人間関係は築けない。（You can’t build relationships without trust.） 何しろ: 何しろ means “in any case,” “after all,” or “as you know,” and is used to emphasize a reason or situation. 何しろ初めてのことなので、緊張しています。（I’m nervous, since this is my first time after all.） 何しろ忙しくて、会う暇がない。（I’ve just been too busy to meet, you know.） ５１１−５１５ SHOW CONTENTS なしに: なしに means “without doing something” or “without the presence of,” and is used to emphasize that an action occurred despite lacking the usual step or condition. 許可なしに部屋に入ってはいけない。（You must not enter the room without permission.） 彼は挨拶なしに出て行った。（He left without saying goodbye.） ならでは: ならでは highlights something as unique or characteristic of someone/something, and often appears in the form “AならではのB.” これは職人ならではの技だ。（This is a skill unique to a craftsman.） 京都ならではの風情がある。（It has an atmosphere unique to Kyoto.） ならいざ知らず: ならいざ知らず is used to contrast two situations, meaning “I don’t know about A, but B is unacceptable/unreasonable/etc.” Often implies that A might be acceptable, but B is not. プロならいざ知らず、素人にこんな難しいことは無理だ。（A professional might be able to do it, but it’s too hard for an amateur.） 英語ならいざ知らず、中国語はまったく分からない。（I might understand English, but I have no idea about Chinese.） なり: なり means “as soon as” and is used in literary or formal contexts to express that something happened immediately after something else. 彼は帰るなり、寝てしまった。（As soon as he got home, he fell asleep.） ドアを開けるなり、猫が飛び出した。（As soon as I opened the door, the cat ran out.） なり〜なり: なり〜なり is used to suggest one or more possible options, similar to “or” or “for example.” Often used to give advice or suggestions. 電話なりメールなりで連絡してください。（Please contact me by phone or email.） 本を読むなり映画を見るなりして、リラックスしたら？（Why don\u0026rsquo;t you read a book or watch a movie or something to relax?） ５１６−５２０ SHOW CONTENTS なりに／なりの: なりに (adverbial) or なりの (attributive) means “in one’s own way” or “according to one’s own level/capacity.” It shows effort or adaptation within one’s limitations. 子どもは子どもなりに考えている。（Children have their own way of thinking.） 彼なりのやり方で成功した。（He succeeded in his own way.） なりとも: なりとも is a formal or old-fashioned expression meaning “even a little,” “at least,” or “just.” Often used when urging someone to do something modest or small. 一言なりとも返事をくれればよかったのに。（You could’ve at least replied with a word.） 一目なりとも会いたい。（I want to see them, even if just for a moment.） なるべく: なるべく means “as much as possible” or “if possible,” and is used to indicate an effort or preference to do something to the greatest extent feasible. なるべく早く来てください。（Please come as soon as possible.） 無駄遣いはなるべくしないようにしている。（I try not to waste money as much as possible.） に値する: にあたいする means “to be worth” or “to deserve,” and is used to evaluate actions or qualities positively (often in formal contexts). 彼の勇気は賞賛に値する。（His bravery deserves praise.） 信頼に値する人物だ。（He is a person worthy of trust.） にあたらない: にあたらない means “it’s not worth (doing something)” or “there’s no need to,” often used to downplay or deny the necessity of a reaction. 彼の意見は批判するにあたらない。(His opinion isn’t worth criticizing.) この程度の雨で慌てるにあたらない。(There’s no need to panic over this amount of rain.) ５２１−５２５ SHOW CONTENTS にあって: にあって means “in the situation/condition of” or “during,” and is used in formal writing to describe a specific time, place, or circumstance where something occurs. 非常時にあって、冷静さが求められる。（In emergencies, calmness is required.） 戦時にあっては、物資が不足しがちだ。（In times of war, supplies tend to be scarce.） にひきかえ: にひきかえ means “in contrast to” or “compared to,” and emphasizes the difference between two people, things, or situations. 姉が社交的なのにひきかえ、私は人見知りだ。（In contrast to my outgoing sister, I\u0026rsquo;m shy.） 昨年の寒さにひきかえ、今年はとても暖かい。（Compared to last year’s cold, this year is very warm.） に至るまで: にいたるまで is used to express a wide scope that includes even surprising or minor things. 彼は食事のマナーから服装に至るまで厳しい。(He’s strict about everything, from table manners to clothing.) 会議では、細かい数字に至るまで確認した。(In the meeting, we checked everything down to the smallest numbers.) に至っては: にいたっては is used to single out an extreme case as an example, often preceded by a list. It means “as for…” or “when it comes to…” 他の学生は真面目だが、彼に至っては授業に来ない。(Other students are diligent, but as for him, he doesn’t even attend class.) 東京は物価が高いが、銀座に至っては信じられないほどだ。(Tokyo is expensive, but when it comes to Ginza, it’s unbelievable.) に言わせれば: にいわせれば means “if you ask (someone)” or “from someone’s point of view.” It introduces a personal opinion or judgment. 彼に言わせれば、すべては運命だ。(If you ask him, everything is fate.) 専門家に言わせれば、その方法は効果が薄い。（Experts would say that method is not very effective.） ５２６−５３０ SHOW CONTENTS にかかっている: にかかっている means “to depend on” or “to hinge on.” It emphasizes that the outcome or result relies heavily on something. 成功するかどうかは君の努力にかかっている。（Whether you succeed depends on your effort.） 試合の勝敗は、彼の活躍にかかっている。（The outcome of the match depends on his performance.） にかたくない: にかたくない means “it’s not hard to” or “it’s easy to,” and is often used with abstract verbs like 想像する (to imagine), 理解する (to understand), etc. 被災者の気持ちは想像にかたくない。（It’s not hard to imagine how the disaster victims feel.） 子を失った親の悲しみは察するにかたくない。（It’s easy to understand the grief of a parent who lost a child.） にまつわる: にまつわる means “related to” or “concerning.” It often describes things associated with topics, people, or events. 戦争にまつわる話を祖父から聞いた。（I heard stories related to the war from my grandfather.） お金にまつわるトラブルが絶えない。（Money-related troubles never end.） にもほどがある: にもほどがある is used to criticize excessive behavior or an unacceptable level of something. It literally means “there is a limit (even) to\u0026hellip;” 冗談にもほどがある。（That joke goes too far.） 失礼にもほどがあるよ！（That’s way too rude!） にもまして: にもまして means “even more than” or “above all.” It emphasizes that something exceeds another thing in degree or importance. 去年にもまして寒い冬だ。（It’s even colder than last winter.） 前回にもまして、今回の試合は激烈だった。(Even more than last time, this match was intense.) ５３１−５３５ SHOW CONTENTS に則って: に則って is used when something is done in accordance with rules, laws, customs, or precedent. It emphasizes following a specific standard or framework. 規則に則って行動してください。（Please act in accordance with the rules.） 伝統に則って式が進められた。（The ceremony proceeded in accordance with tradition.） に先駆けて: に先駆けて is used to express that something happens before something else, often as a forerunner or in anticipation of it. 開会式に先駆けて、リハーサルが行われた。（A rehearsal was held prior to the opening ceremony.） 新商品の発売に先駆けて、キャンペーンが始まった。（A campaign began ahead of the new product launch.） にしたって: にしたって is a colloquial expression meaning \u0026ldquo;even,\u0026rdquo; \u0026ldquo;even for,\u0026rdquo; or \u0026ldquo;even if.\u0026rdquo; It emphasizes that something is true or valid regardless of the subject or condition. 子供にしたって、それくらいは分かる。（Even a child can understand that.） 彼にしたって、悪気があったわけではない。（Even he didn’t mean any harm.） にして: にして can mean \u0026ldquo;only after reaching a certain stage,\u0026rdquo; or express exclusivity (only). Often used in formal or literary contexts. 30歳にして初めて海外へ行った。(I went abroad for the first time at age 30.) これは天才にして初めて可能な技だ。（This is a feat only possible for a genius.） に即して: に即して is used to express doing something based closely on a particular case, situation, rule, or reality. It implies adapting to fit the situation. 現実に即して判断するべきだ。（We should make decisions based on reality.） 規定に即して処理します。（We will handle it in accordance with the regulations.） ５３６−５４０ SHOW CONTENTS にたえる: にたえる is used to express that something is worthy of or can endure a particular action or condition, such as listening, reading, or appreciation. Often used in formal or evaluative contexts. 彼のスピーチは聞くにたえる内容だった。（His speech was worth listening to.） 彼の作品は鑑賞にたえる美しさがある。（His work has beauty worthy of appreciation.） にたえない: にたえない is the opposite of にたえる and is used to say something is not worth doing or too painful/emotional to endure. その映画は見るにたえないほど退屈だった。（The movie was so boring that it wasn’t worth watching.） ご遺族の悲しみは察するにたえない。（I can hardly bear to imagine the family\u0026rsquo;s grief.） に足りる: に足りる means that something is sufficient or worthy enough for a certain purpose or standard. 彼は信頼に足りる人物だ。（He is a person worthy of trust.） この結果は賞賛に足りるものだ。（This result deserves praise.） に足りない: に足りない is used to say that something is not sufficient or not worth a certain reaction or evaluation. 彼の意見は考慮に足りない。(His opinion isn’t worth considering.) この金額は生活するに足りない。(This amount of money isn’t enough to live on.) に照らして: に照らして means \u0026ldquo;in comparison with\u0026rdquo; or \u0026ldquo;in light of\u0026rdquo; something like rules, standards, or experiences. It is often used when making judgments or decisions. 法律に照らして判断する。（Judgment will be made in light of the law.） 自分の経験に照らしてアドバイスした。（I gave advice based on my own experience.） のとどまらず: のとどまらず means “not limited to” and is used to express that something extends beyond a certain range or scope. 彼の活躍は日本のとどまらず、世界に広がっている。（His success is not limited to Japan but is spreading globally.） この問題は企業のとどまらず、社会全体に影響を及ぼす。（This issue affects not just companies but society as a whole.） ５４１−５４５ SHOW CONTENTS には及ばない: には及ばない is used to express that something is unnecessary, not required, or not worth the effort. It often appears in humble or polite expressions. ご心配には及びません。（There’s no need to worry.） お礼には及びませんよ。（There’s no need to thank me.） によらず: によらず means “regardless of” or “not depending on.” It is used to indicate that a result or action is not influenced by a specific method, origin, or condition. 経験の有無によらず、誰でも応募できます。（Anyone can apply regardless of experience.） 国籍によらず、平等に扱われるべきだ。（Everyone should be treated equally regardless of their nationality.） んばかりに: んばかりに means “as if” or “almost as though.” It describes a dramatic state or behavior that nearly reaches a certain point but doesn’t quite get there. 泣かんばかりに謝った。（He apologized as if he were about to cry.） 空は今にも崩れ落ちんばかりに暗かった。(The sky was so dark it looked like it might collapse at any moment.) んがため: んがため (classical/formal) means “in order to” or “for the sake of.” It is used in written or literary expressions, often with intentional, goal-driven actions. 成功せんがため、彼は全てを犠牲にした。（He sacrificed everything in order to succeed.） 命を救わんがため、全力を尽くした。（I did everything I could to save a life.） の至り: の至り expresses an extreme or utmost state of something, often used in set phrases showing honor, embarrassment, or emotion. 光栄の至りです。（It’s the utmost honor.） 名門大学に合格でき、幸せの至りです。(Getting into a prestigious university is the height of happiness.) ５４６−５５０ SHOW CONTENTS の極み: の極み expresses the utmost degree or peak of an emotion, situation, or state—either extremely positive or negative. It often overlaps in usage with の至り but is used with broader nouns. 贅沢の極みだ。（It’s the height of luxury.） 無念の極みです。（It is the ultimate in regret. ） のみか: のみか means \u0026ldquo;not only\u0026hellip; but also\u0026rdquo; and is used to emphasize that something goes beyond what is first mentioned. It\u0026rsquo;s a more formal or literary expression. この薬は効果がないのみか、副作用もある。(This medicine not only doesn\u0026rsquo;t work, but also has side effects.) 彼女は東京のみか、全国的に有名だ。(She\u0026rsquo;s famous not only in Tokyo but nationwide.) のなんのって: のなんのって is a colloquial, emphatic expression used after adjectives to show that something is extremely a certain way. Often appears in spoken language with a tone of surprise or exaggeration. 昨日の試験は難しいのなんのって、全く解けなかった。(Yesterday\u0026rsquo;s test was so incredibly difficult, I couldn\u0026rsquo;t answer anything.) 疲れたのなんのって、すぐ寝てしまった。(I was so extremely tired that I fell asleep immediately.) を踏まえて: を踏まえて means \u0026ldquo;based on\u0026rdquo; or \u0026ldquo;taking into account\u0026rdquo; and is used when an action or decision is made with prior facts, experience, or analysis in mind. 結果を踏まえて、今後の方針を決めます。（We’ll decide our next steps based on the results.） 現状を踏まえて対応してください。（Please respond in light of the current situation.） を経て: を経て means “through,” “after,” or “via” and indicates that something occurred after passing through a period, process, or place. 前回の失敗を踏まえて、新しい計画を立てた。(We made a new plan based on our previous failure.) 住民の意見を踏まえて政策を決定する。(Policies will be decided based on residents\u0026rsquo; opinions.) ５５１−５５５ SHOW CONTENTS をいいことに: をいいことに means “taking advantage of” or “using something as an excuse” to do something (usually negative or selfish). 相手チームの油断をいいことに、逆転勝ちした。(We took advantage of the opposing team\u0026rsquo;s carelessness to come from behind and win.) 母親が寝ているのをいいことに、お菓子を食べた。(Taking advantage of mom being asleep, I ate sweets.) を限(かぎ)りに: を限(かぎ)りに means “starting from” or “as of” a specific point in time, often indicating the end of something. 今日を限りにタバコをやめる。(I\u0026rsquo;m quitting smoking as of today.) 今月を限りにこの店は閉店します。(This store will close at the end of this month.) を兼(か)ねて: を兼(か)ねて means “also for the purpose of” or “serving a dual purpose.” It shows that one thing is done while also fulfilling another role. 運動を兼ねて、毎日駅まで歩いている。(I walk to the station every day, which also serves as exercise.) 打ち合わせを兼ねて昼食をとる。(We\u0026rsquo;ll have lunch while also holding our meeting.) を皮（かわ）切(き)りに: を皮（かわ）切(き)に means “starting with…” and indicates the first of a series of events or developments. 東京公演を皮切りに、全国ツアーが始まった。（Starting with the Tokyo performance, the nationwide tour began.） この作品を皮切りに、彼女は人気作家になった。（Beginning with this work, she became a popular writer.） を機(き)に: を機に means “taking the opportunity of…” or “on the occasion of…” and is used when something becomes the trigger or turning point for change. 転職を機に、ライフスタイルを変えた。（I changed my lifestyle when I changed jobs.） 結婚を機に引っ越すことにした。（I decided to move when I got married.） ５５６−５６０ SHOW CONTENTS を禁じえない: を禁じえない is used to express an uncontrollable emotional reaction, such as admiration, anger, or sympathy. It typically follows a noun indicating emotion and is often used in formal or written contexts. 彼の勇気ある行動には感動を禁じえなかった。（I couldn’t help but feel moved by his courageous actions.） この悲惨な光景を見て、怒りを禁じえなかった。（I couldn’t suppress my anger upon seeing this tragic scene.） をものともせず: をものともせず is used to describe someone who bravely or firmly continues their actions despite difficulties, dangers, or opposition. It implies strong will or courage. 彼は嵐をものともせずに山を登った。（He climbed the mountain undaunted by the storm.） 批判をものともせず、自分の信念を貫いた。（She held firm to her beliefs despite the criticism.） をもって (by means of): をもって is a formal expression used to indicate means, method, or basis for doing something. It is often used in written or official contexts. 最新の技術をもって問題を解決した。（We solved the problem by means of the latest technology.） 誠意をもって対応いたします。（We will respond with sincerity.） をもって (at the time): をもって can also mean \u0026ldquo;as of\u0026rdquo; or \u0026ldquo;at\u0026rdquo; a specific time, indicating the end or start of something. Often used in announcements or formal notices. 本日をもって営業を終了いたします。（We will close our business as of today.） 三月三一日をもって退職いたします。（I will retire as of March 31.） をおいて: をおいて is used to express that no one or nothing else is suitable or comparable, often translated as “other than” or “without.” It is typically followed by a negative expression. この仕事を任せられるのは、彼をおいてほかにいない。（There’s no one else but him who can handle this job.） あの人をおいて、この役にふさわしい人はいない。（No one is more suitable for this role than that person.） ５６１−５６５ SHOW CONTENTS を余儀なくされる: を余儀なくされる is a formal expression used when someone is compelled or forced to do something due to unavoidable circumstances. It is often used in writing or reports. 地震の影響で、住民たちは避難を余儀なくされた。（Due to the earthquake, the residents were forced to evacuate.） 経営悪化のため、事業縮小を余儀なくされた。（Due to poor business performance, we were forced to downsize.） をよそに: をよそに means “in disregard of” or “despite,” and it describes a situation where someone ignores or pays no attention to something, usually something negative like criticism, danger, or others’ feelings. 周囲の心配をよそに、彼は単独で登山に出かけた。（Ignoring everyone’s concerns, he went mountain climbing alone.） 反対の声をよそに、計画は進められた。（Despite the opposition, the plan moved forward.） 思いをする: 思いをする means \u0026ldquo;to go through an experience\u0026rdquo; or \u0026ldquo;to feel\u0026rdquo; something, often something emotional or physically intense. It is usually preceded by an adjective or description. こんなに恥ずかしい思いをしたのは初めてだ。（It was the first time I felt so embarrassed.） 彼女に会えず、寂しい思いをしている。（I feel lonely because I can\u0026rsquo;t see her.） 折に: 折に means “when” or “on the occasion of,” and it is often used in formal or polite language. It refers to a particular time, chance, or opportunity. 来日の折には、ぜひご連絡ください。（Please contact me when you visit Japan.） お会いした折に、詳しくご説明します。（I will explain in detail when we meet.） およそ: およそ is used to express a general approximation (like “about” or “roughly”) or, when used with a negative, to mean “not at all” or “by no means.” この町にはおよそ5万人が住んでいる。（The town has approximately 50,000 residents.） 彼の発言はおよそ常識とはかけ離れている。（His remarks are far from common sense.） ５６６−５７０ SHOW CONTENTS さもないと: さもないと means “otherwise” or “if not so,” and is used to warn that something undesirable will happen unless the preceding condition is met. 急ぎなさい、さもないと遅刻しますよ。（Hurry up, otherwise you\u0026rsquo;ll be late.） 勉強しなさい。さもないと試験に落ちますよ。（You’d better study. Otherwise, you’ll fail the exam.） さぞ: さぞ is an adverb that expresses strong empathy or assumption about another person’s feelings, often translated as “I’m sure” or “it must be.” It is usually followed by expressions like ～でしょう or ～と思います. ご家族を亡くされて、さぞお辛いことでしょう。（You must be deeply saddened by the loss of your family member.） さぞ驚かれたことでしょう。（You must have been very surprised.） 始末だ: 始末だ is used to describe a negative result or outcome, often after a chain of events. It implies that things have gotten worse and now reached a final undesirable conclusion. 注意しても聞かず、ついには警察沙汰になる始末だ。（He wouldn’t listen to warnings, and ended up in trouble with the police.） 借金を返せず、家を売る始末だ。（He couldn’t repay his debts and ended up having to sell his house.） そばから: そばから means “as soon as” or “just after,” and is used when something keeps happening repeatedly right after it was dealt with. It often expresses frustration or futility. 掃除したそばから子供たちが部屋を散らかす。（As soon as I clean the room, the kids mess it up again.） 教えたそばから忘れてしまう。（They forget it as soon as I teach it.） さも: さも is used to emphasize how something appears or is presented, often followed by expressions like ～そうに or ～げに, and can be translated as “as if,” “truly,” or “really.” 彼はさも嬉しそうに笑った。（He smiled as if he were truly happy.） 彼女はさも知っているかのように話した。（She spoke as if she really knew.） ５７１−５７５ SHOW CONTENTS それなりに: それなりに means “in its own way” or “as it is,” and is used to show that something may not be perfect or ideal but has its own value or adequacy. この古い家も、それなりに味がある。（This old house has its own charm.） 忙しいけれど、それなりに充実している。（I’m busy, but in its own way, life is fulfilling.） そうにもない: そうにもない is used to indicate that something is unlikely or impossible to do, often based on observation. It typically follows the verb stem + そうにもない. 雨が降りそうにもないから、傘は要らないだろう。(It doesn’t look like it’s going to rain, so we probably don’t need an umbrella.) 彼は疲れすぎて、もう歩けそうにもない。(He’s too exhausted and looks like he can’t walk anymore.) ただ〜のみだ: ただ〜のみだ is a formal or literary expression that means “there is nothing to do but…” or “can do nothing but…” It emphasizes resignation or inevitability. 今はただ待つのみだ。(Now, all we can do is wait.) 失敗した後は、ただ反省するのみだ。(After failing, all you can do is reflect.) た拍子に: た拍子に is used to describe a moment when something unexpected happens as a direct result or timing of another action. It can often imply surprise or a negative result. 転んだ拍子に足をひねった。（The moment I fell, I twisted my ankle.） 転んだ拍子に、スマホを落としてしまった。(The moment I fell, I dropped my phone.) ためしがない: ためしがない means “has never happened” or “there has never been a case.” It is used to express that something has not occurred even once, usually to emphasize a negative pattern. 時間通りに来たためしがない。（He has never come on time.） 彼は約束を守ったためしがない。（He has never kept a promise.） ５７６−５８０ SHOW CONTENTS たりとも: たりとも is used with numbers (often “one”) and means “not even” or “not any,” emphasizing that not even the smallest amount is allowed or possible. It is typically followed by a negative expression. 一秒たりとも無駄にできない。（We can’t waste even a single second.） 一人たりとも欠けてはならない。（Not even one person can be missing.） た瞬間に: た瞬間に means “the moment” or “as soon as,” and describes something that happened immediately after another action or event. 家を出た瞬間に雨が降り出した。（The moment I left the house, it started raining.） 顔を見た瞬間にすぐ彼だとわかった。（The moment I saw his face, I knew it was him.） てっきり: てっきり is used when someone is absolutely sure of something, but it turns out to be wrong. It expresses mistaken certainty. てっきり彼女は知っていると思っていた。（I was certain she knew.） てっきり今日は雨だと思っていたのに、晴れた。(I was certain it would rain today, but it turned out sunny.) てからというもの: てからというもの means “ever since” or “from the time when,” and is used to describe a lasting change or continuing state from a specific point in time. あの事件があってからというもの、彼は別人のようになった。(Ever since that incident, he\u0026rsquo;s become like a different person.) この薬を飲み始めてからというもの、調子が良くなった。(Since I started taking this medicine, I\u0026rsquo;ve been feeling better.) てかなわない: てかなわない is used to express strong dissatisfaction or discomfort, meaning “can’t stand” or “it’s unbearable.” It is often used in casual speech. この暑さには耐えてかなわない。(I can\u0026rsquo;t stand this heat.) 隣の工事がうるさくてかなわない。（The construction next door is so noisy, I can’t take it.） ５８１−５８５ SHOW CONTENTS てまで: てまで is used to express doing something to an extreme degree, often with the nuance of going too far or beyond what is considered normal or acceptable. It’s often translated as “even if it means…” or “to the extent of…” 人をだましてまで成功したくない。（I don’t want to succeed if it means deceiving people.） 健康を害してまで働くつもりはない。(I don\u0026rsquo;t intend to work to the point of harming my health.) てみせる: てみせる is used to strongly express one’s intention to definitely do something or to prove something through action. Often translated as “I’ll show you (by doing it)” or “I will definitely…” 今度こそ合格してみせる。（This time, I’ll definitely pass!） 自分の力で成功してみせる。（I’ll show you I can succeed on my own.） てもどうにもならない: てもどうにもならない expresses futility — that no matter what is done, nothing will change or help. 今さら後悔してもどうにもならない。（It’s no use regretting now.） 怒ってもどうにもならないよ。（Getting angry won’t help.） ても始まらない: ても始まらない also expresses futility, meaning that doing something (like worrying or crying) won’t solve anything or make progress. Often used to shift toward action or acceptance. 落ち込んでも始まらない。次を頑張ろう。（Being depressed won’t help. Let’s do our best next time.） 今更焦っても始まらない、落ち着いて行動しよう。(Panicking now won\u0026rsquo;t help - let\u0026rsquo;s act calmly.) ても差し支えない: ても差し支えない means “it’s okay to…” or “no problem if…,” indicating that something is permissible or acceptable without causing issues. この薬は食後に飲んでも差し支えない。（It’s okay to take this medicine after meals.） この資料はコピーしても差し支えない。(You can make copies of these materials if you need to.) ５８６−５９０ SHOW CONTENTS てしかるべきだ: てしかるべきだ is a formal expression meaning “should (rightfully)” or “it is natural to…” It expresses that something is appropriate, reasonable, or to be expected. そんな重大なミスは報告してしかるべきだ。(Such a serious mistake should naturally be reported.) 公共の場ではマスクを着用してしかるべきだ。(Masks should be worn in public places.) ってば: ってば is a casual and emphatic particle used mainly in spoken Japanese to express irritation, emphasis, or insistence—often in the form “I told you…” or “Hey!” 知らないってば！(I told you I don\u0026rsquo;t know!) うるさいってば！（I told you to be quiet!） てやまない: てやまない is a formal, literary expression that means “never stop (feeling/thinking)” and is typically used with verbs like 願う (wish), 祈る (pray), 愛する (love), etc. 皆さんのご活躍を願ってやみません。（I sincerely wish for everyone’s continued success.） 亡き友を愛してやまない。（I never stop loving my late friend.） と相まって: と相まって means “together with” or “coupled with,” and is used when two or more factors combine to produce a result. 彼の才能は努力と相まって、すばらしい結果を生んだ。(His talent combined with hard work produced excellent results.) 天候の悪さと準備不足が相まって、大会は失敗に終わった。（Poor weather conditions combined with a lack of preparation resulted in the event\u0026rsquo;s failure.） とあれば: とあれば means “if it is the case that…” or “if\u0026hellip; happens,” often implying that the speaker is willing to take action under certain conditions. 子供のためとあれば、どんなことでもする。(If it\u0026rsquo;s for my child, I\u0026rsquo;ll do anything.) 緊急時とあれば、このドアから避難してください。(If it\u0026rsquo;s an emergency, please evacuate through this door.) ５９１−５９５ SHOW CONTENTS とあって: とあって is used in written or formal language to mean “because of” or “due to the special situation that…,” often explaining a unique or unusual result. 初日の出とあって、海岸は人でいっぱいだった。(Because it was the first sunrise of the year, the beach was packed with people.) 人気歌手のコンサートとあって、チケットはすぐに売り切れた。(Given that it was a popular singer\u0026rsquo;s concert, tickets sold out immediately.) とばかりに: とばかりに means “as if to say…” and describes a dramatic action or gesture that seems to convey unspoken words or feelings. 子供は「買って」とばかりにおもちゃを抱えていた。(The child clung to the toy as though saying \u0026ldquo;Buy this for me.\u0026rdquo;) 彼は「早くしろ」とばかりに腕時計を指さした。(He pointed at his watch as if to say \u0026ldquo;Hurry up.\u0026rdquo;) といえども: といえども is a formal expression meaning “even though” or “even if,” used to introduce something that seems true but is then contrasted with reality or an exception. プロの選手といえども、時にはミスをする。(Even professional players sometimes make mistakes.) 忙しいといえども、健康には気をつけるべきだ。（Even if you\u0026rsquo;re busy, you should take care of your health.） といい〜といい: といい〜といい is used to list two or more characteristics or examples, often to emphasize how impressive or extreme something is. 景色といい空気といい、ここは最高の場所だ。（The scenery and the air—everything here is perfect.） 味といい見た目といい、この料理は文句なしだ。（The taste and appearance—this dish is flawless.） といったらない: といったらない means “extremely” or “beyond words,” used to emphasize how strong a feeling or condition is. Usually with words like うれしい, 悲しい, 迷惑, etc. 彼の失礼な態度は迷惑といったらない。（His rude attitude was extremely annoying.） 試験に合格したときのうれしさといったらなかった。（I was incredibly happy when I passed the exam.） ５９６−６００ SHOW CONTENTS という: という is used to emphasize the entirety or totality of something, meaning “all,” “every,” or “so-called.” 一日という一日、彼は勉強に集中していた。（He focused on studying every single day.） 彼は一日中、本という本を読み漁った。(He spent the whole day reading every single book he could find.) というか: というか is used to rephrase or correct oneself, meaning “or rather,” “or more precisely.” It can also introduce an alternative way of putting something. 彼は天才というか、変人だ。(He\u0026rsquo;s a genius, or rather, an eccentric.) この料理は辛いというか、食べられないレベルだ。(This dish isn\u0026rsquo;t just spicy—it\u0026rsquo;s inedible.) というか〜というか: This pattern expresses uncertainty or multiple ways of describing something, like “I’m not sure if it’s A or B” or “it’s kind of A, kind of B.” うれしいというか、恥ずかしいというか、複雑な気持ちだ。（I feel happy, or maybe embarrassed—it\u0026rsquo;s complicated.） 暑いというか、蒸し暑いというか、とにかく不快だ。（It\u0026rsquo;s hot, muggy, or just plain uncomfortable.） はおろか: はおろか means “let alone” or “not to mention,” used to show that something obvious is far-fetched, so something more extreme is even more so. 彼は漢字はおろか、ひらがなも書けない。(He can\u0026rsquo;t write hiragana, let alone kanji.) この仕事は休日はおろか、睡眠時間も削るほど忙しい。(This job keeps me so busy that I have to sleep less and less, let alone take days off.) はさておき: はさておき means “setting aside” or “leaving aside for now.” It’s used when you want to postpone discussing one topic in favor of focusing on another. 冗談はさておき、本題に入りましょう。（Jokes aside, let’s get to the main topic.） 値段はさておき、品質は素晴らしい。（Putting the price aside, the quality is excellent.） ６０１−６０５ SHOW CONTENTS や否や（やいなや）: や否や means “the moment that” or “as soon as.” It is a formal expression used to describe one action happening immediately after another. チャイムが鳴るや否や、生徒たちは教室を飛び出した。（The moment the bell rang, the students ran out of the classroom.） 彼が部屋に入るや否や、皆が立ち上がった。（As soon as he entered the room, everyone stood up.） やしない: やしない is an emphatic negative form of 〜ない, used in casual speech to express strong denial or criticism. Usually follows a verb stem. 何度言っても、彼は聞きやしない。（No matter how many times I tell him, he doesn’t listen.） 彼の言うことなんか信じやしない！(I don\u0026rsquo;t believe a word he says!) （よ）うと: （よ）うと expresses “no matter what/how…” and shows that even if a certain condition occurs, the result or stance doesn’t change. 雨が降ろうと、試合は行われる。（No matter if it rains, the match will be held.） 誰が反対しようと、この計画は実行する。(No matter who opposes it, this plan will proceed.) うが〜まいが／うと〜まいと: This pattern expresses “whether or not” someone does something, the result will be the same. It\u0026rsquo;s often used in formal or literary contexts. 雨が降ろうが降るまいが、試合は決行される。（Whether it rains or not, the game will go on.） 行こうと行くまいと、結果は変わらない。（Whether you go or not, the result won’t change.） うか〜まいか: うか〜まいか expresses a speaker\u0026rsquo;s hesitation or pondering, like “should I or shouldn’t I.” この仕事を引き受けようか引き受けまいか、迷っている。(I’m torn over whether to take this job or not.) 話すべきか話すまいか、ずっと悩んでいる。（I keep wondering if I should talk about it or not.） ６０６−６１０ SHOW CONTENTS うものなら: 〜うものなら is used to express that if one dares to do something, it will lead to a serious or undesirable consequence. It carries a strong hypothetical and often negative nuance. そんなことを言おうものなら、彼に怒られるよ。（If you say something like that, he’ll get mad.） 無断欠勤しようものなら、クビになるぞ。（If you skip work without notice, you’ll be fired.） うにも〜ない: 〜うにも〜ない means “even if one wants to do something, one can’t.” It expresses a lack of ability or circumstances preventing an action. 忙しくて遊びに行こうにも行けない。（I want to hang out, but I just can’t because I’m busy.） お金がなくて、旅行しようにもできない。（I want to travel, but I don’t have money to do so.） ようによっては: ようによっては means “depending on how (something is done or seen).” It introduces different interpretations or outcomes based on the method or point of view. 考えようによっては、これもチャンスかもしれない。（Depending on how you think about it, this might be a chance.） 使いようによっては危険にもなる。（Depending on how it\u0026rsquo;s used, it could become dangerous.） ゆえに: ゆえに is a formal or literary equivalent of “because” or “therefore.” It usually follows a noun or adjective and expresses cause or reason. 経験不足ゆえに、失敗してしまった。（Because of lack of experience, I failed.） 彼は努力家である。ゆえに成功したのだ。（He is a hard worker. That\u0026rsquo;s why he succeeded.） ざる: 〜ざる is the classical/formal negative form of verbs (equivalent to “not” or “un-”), used in compound expressions. It is used similarly to 〜ない in modern Japanese but appears in more formal or written contexts. 行かざるを得ない。（I have to go.） 見逃すことは許されざる行為だ。（Overlooking it is an unforgivable act.） ６１１−６１3 SHOW CONTENTS づじまい: 〜づじまい expresses that something ended without being done, despite the intention or expectation to do it. Often used to express mild regret. 結局、彼には会えずじまいだった。（In the end, I didn’t get to meet him.） 忙しくて、連絡しずじまいだった。(I was so busy I never got around to contacting them.) ずくめ: 〜ずくめ means “entirely” or “nothing but,” and is often used with nouns to show that everything is covered or filled with that thing. Common with positive or negative trends. 彼の生活は仕事ずくめだ。(His life is nothing but work.) 今日はいいことずくめの一日だった。(Today was full of nothing but good things.) ずとも: 〜ずとも means “even without doing (something).” It is a formal/literary expression, used like 〜なくても. 説明されずとも、わかります。(I understand even without being told.) 見ずとも、彼が来たことは感じた。(Even without seeing, I sensed he had arrived.) 語彙 1 Your browser does not support the audio element. SHOW CONTENTS 愛嬌 (あいきょう): charm, amiability 彼女は自然な愛嬌があって、みんなに好かれる。 (She has natural charm and is liked by everyone.) 足踏み (あしぶみ): stamping one\u0026rsquo;s feet, staying in place (without progress) 進（しん）捗（ちょく）がなくて、足踏みしているような気がする。 (I feel like we’re just stamping our feet without making any progress.) アタック: attack, approach (often used in sports or in a figurative sense) 彼は試合で積極（せっきょく）的にアタックを仕（し）掛（か）けた。 (He actively attacked during the match.) アフターケア: aftercare, follow-up care 退（たい）院（いん）後のアフターケアをしっかりと行うことが大切だ。 (It’s important to provide proper aftercare after being discharged from the hospital.) 絵画（かいが）: painting, artwork この美術館には有名な絵画がたくさん展（てん）示（じ）されている。 (This museum has many famous paintings on display.) 後始末（あとしまつ）: cleanup, finishing up パーティーが終わった後の後始末は私の仕事だ。 (Cleaning up after the party is my job.) 過ち（あやまち）: mistake, error 彼は過ちを犯（おか）してしまったことを悔（く）いている。 (He regrets making the mistake.) 言いそびれる (いいそびれる): to fail to say, to forget to say 大切なことを言いそびれてしまった。 (I forgot to say something important.) 行き違う (いきちがう): to miss each other, to misunderstand 私たちは駅で行き違いになった。 (We missed each other at the station.) 遺跡 (いせき): ruins, archaeological site 古（こ）代（だい）の遺跡を訪（おとず）れるのが好きだ。 (I enjoy visiting ancient ruins.) 一大事 (いちだいじ): a major event, a serious matter それは一大事だから、慎（しん）重（ちょう）に考（かんが）えなければならない。 (It’s a major event, so we need to think carefully.) 一切 (いっさい): everything, all (often used in a negative sense to mean \u0026ldquo;nothing\u0026rdquo;) 彼は一切の連絡を絶（た）った。 (He cut off all contact.) 未だ (いまだ): still, yet 未だに彼女とは連絡が取れていない。 (I still haven’t been able to get in touch with her.) 癒す (いやす): to heal, to soothe 彼の言葉は私を癒してくれた。 (His words soothed me.) 居留守 (いるす): pretending not to be home, feigning ignorance 彼は電話に出るのを避（さ）けるために居留守を使っている。 (He’s pretending not to be home to avoid answering the phone.) 青二才 (あおにさい): inexperienced young person, naïve まだ青二才だと言われた。 (I was told I’m still an inexperienced young person.) 打ち明ける (うちあける): to confide in, to reveal (one’s feelings or a secret) 彼に秘密を打ち明けることに決めた。 (I decided to confide in him about my secret.) 打ち切る (うちきる): to terminate, to discontinue 会議は予定より早く打ち切られた。 (The meeting was cut short earlier than planned.) 上がり (あがり): rise, income, finishing (in a certain context, such as a performance) 彼は上がりの収（しゅう）入（にゅう）で生（せい）活（かつ）している。 (He lives off his earnings.) あらかじめ (あらかじめ): in advance, beforehand あらかじめ予定を立てておいたほうがいい。 (It’s better to make plans in advance.) 2 Your browser does not support the audio element. SHOW CONTENTS 打ち解ける (うちとける): to open up, to become friendly 彼とはすぐに打ち解けて、友達になった。 (I opened up to him quickly and became friends.) 促す (うながす): to encourage, to prompt 先生は生徒にもっと勉強するように促した。 (The teacher encouraged the students to study more.) 麗しい (うるわしい): beautiful, lovely 彼女は麗しい笑（え）顔（がお）でみんなを魅（み）了（りょう）した。 (She captivated everyone with her beautiful smile.) 会釈 (えしゃく): a slight bow, a greeting gesture 彼は通りすがりに会釈をしてくれた。 (He gave me a slight bow as he passed by.) 縁起 (えんぎ): omen, auspice, good luck この日が結婚式の日として選ばれたのは、縁起が良いとされているからだ。 (This day was chosen for the wedding because it’s considered to be a good omen.) 行き当たりばったり (いきあたりばったり): haphazard, impromptu 旅行の計画を行き当たりばったりで決めるのは、あまり良くない。 (It’s not a good idea to make travel plans haphazardly.) 致し方ない (いたしがたない): inevitable, can’t be helped 事故で遅れたのは致し方ない。 (It can’t be helped that I was late because of the accident.) 愛しい (いとしい): dear, beloved, precious 愛しい人との時間が最も幸せだ。 (Time spent with my beloved is the happiest.) 円安 (えんやす): yen depreciation, weak yen 円安が進んで、輸（ゆ）入（にゅう）品（ひん）が高くなった。 (The depreciation of the yen has led to higher import prices.) 老いる (おいる): to grow old, to age 彼は年を取っても心は老いていない。 (Even as he ages, his heart remains young.) 押し込む (おしこむ): to push into, to shove in 荷物を車のトランクに押し込んだ。 (I shoved the luggage into the car trunk.) 営む (いとなむ): to manage, to run (a business or activity) 彼は小さなレストランを営んでいる。 (He runs a small restaurant.) 一括 (いっかつ): all together, in bulk 注文は一括でまとめて出してもらえますか？ (Could you submit the order all at once?) 一気に (いっきに): all at once, in one go その問題を一気に解決した。 (I solved the problem all at once.) 回路 (かいろ): circuit, path (in electronics) 電気回路をチェックしてみてください。 (Please check the electrical circuit.) 意欲 (いよく): will, desire, motivation 彼は仕事に対する意欲が非常に高い。 (He has very high motivation for his work.) 対応 (たいおう): response, dealing with (a situation) クレームへの対応が遅れたことを謝（しゃ）罪（ざい）した。 (I apologized for the delay in responding to the complaint.) 日付 (ひづけ): date この書類に日付を記（き）入（にゅう）してください。 (Please fill in the date on this document.) 書式 (しょしき): format, style 彼は報告書の書式に従（したが）ってレポートを提出した。 (He submitted the report following the required format.) 単位 (たんい): unit, credit (in education) この科（か）目（もく）は3単位です。 (This course is worth 3 credits.) 3 Your browser does not support the audio element. SHOW CONTENTS 隠蔽 (いんぺい): concealment, cover-up 彼は問題を隠蔽しようとしたが、すぐに発覚（はっかく）した。 (He tried to conceal the issue, but it was quickly uncovered.) 〜交う (〜こう): to mix, to mingle (used with verbs to indicate reciprocal actions) 彼らはよく議（ぎ）論（ろん）を交（まじ）えて意見を交（こう）換（かん）する。 (They often mix in discussions and exchange opinions.) 掲げる (かかげる): to raise, to carry (a flag or a cause), to display 会社の目（もく）標（ひょう）を掲げて、全員で取り組んでいる。 (We have raised the company’s goals and are working on them as a team.) 転寝 (うたたね): nap, dozing off 午後の会議の前に転寝をしてリフレッシュした。 (I took a nap before the afternoon meeting to refresh myself.) 移り変わり (うつりかわり): change, transition (often used for seasons or life stages) この地（ち）域（いき）では季節の移り変わりが美しい。 (The transition of seasons is beautiful in this area.) 格上げ (かくあげ): promotion, elevation to a higher rank 彼は昇（しょう）進（しん）して格上げされた。 (He was promoted and elevated to a higher position.) 嵩む (かさむ): to pile up, to increase in volume or cost 経（けい）費（ひ）が嵩んで、予（よ）算（さん）をオーバーしてしまった。 (The expenses piled up, and we exceeded the budget.) 過疎 (かそ): depopulation, rural decline この村は過疎化（か）が進んで、人（じん）口（こう）が減（げん）少（しょう）している。 (This village is experiencing depopulation, and the population is decreasing.) 器 (うつわ): container, vessel, capacity (both literal and figurative) 彼は大きな器を持っている人だ。 (He is a person with great capacity.) エキストラ (ekisutora): extra (in movies, plays, etc.) 彼は映画でエキストラとして出演した。 (He appeared as an extra in the movie.) 演壇 (えんだん): podium, stage for a speech 彼は演壇で演（えん）説（ぜつ）を行（おこな）った。 (He gave a speech from the podium.) 遠方 (えんぽう): distant place, faraway 遠方から来た友人と久（ひさ）しぶりに再（さい）会（かい）した。 (I reunited with an old friend who came from a distant place.) 肩書き (かたがき): title, honorific 彼は役（やく）職（しょく）に関（かか）わらず、肩書きにとらわれない。 (He doesn’t get caught up in titles, regardless of his position.) 金槌 (かなづち): hammer, or a person who cannot swim 彼は金槌なので、泳ぐのが苦（にが）手（て）だ。 (He’s a poor swimmer, so he struggles with swimming.) 旺盛 (おうせい): vigorous, enthusiastic, lively 彼は旺盛な食（しょく）欲（よく）を持っている。 (He has a vigorous appetite.) 大台 (おおだい): a major milestone or benchmark (often used for numbers like income, age, etc.) 今年、年（ねん）収（しゅう）が大台の1,000万円を超（こ）えた。 (This year, my income exceeded the major milestone of 10 million yen.) 簡潔 (かんけつ): concise, simple and clear 彼は簡潔に要（よう）点（てん）をまとめて説明した。 (He explained the point clearly and concisely.) 奥深い (おくふかい): profound, deep 彼の考えはとても奥深く、理解するのが難しい。 (His thoughts are profound and difficult to understand.) 暦法 (れきほう): calendar system その国は独（どく）自（じ）の暦法を使（し）用（よう）している。 (That country uses its own calendar system.) 基準 (きじゅん): standard, criterion この製（せい）品（ひん）は国（こく）際（さい）的（てき）な基準を満（み）たしている。 (This product meets international standards.) 4 Your browser does not support the audio element. SHOW CONTENTS 押し切る (おしきる): to force through, to push through (against resistance) 彼は反対意見を押し切って、その提案を通した。 (He pushed through his proposal despite the opposition.) 脅かす (おどかす): to threaten, to intimidate 彼は脅かして自分の意見を押し通そうとした。 (He tried to force his opinion through by threatening.) 冠婚葬祭 (かんこんそうさい): ceremonial occasions (weddings, funerals, etc.) 日本では冠婚葬祭が非常に重（じゅう）要（よう）視（し）されている。 (In Japan, ceremonial occasions such as weddings, funerals, etc., are highly valued.) 閑静 (かんせい): quiet, peaceful (used for neighborhoods or places) この住（じゅう）宅（たく）街（がい）は閑静で、静かな生活が送れる。 (This residential area is quiet, and you can enjoy a peaceful life.) 親心 (おやごころ): parental feelings, a parent’s love 親心から子どもの未来を心配するのは当（とう）然（ぜん）だ。 (It’s natural for parents to worry about their children’s future out of parental love.) 海峡 (かいきょう): strait (a narrow body of water between two land masses) その島は広い海峡を挟（はさ）んで隣の国と繋（つな）がっている。 (The island is connected to the neighboring country across a wide strait.) 完走 (かんそう): finishing a race, completing a course マラソンを完走することが目（もく）標（ひょう）だった。 (My goal was to finish the marathon.) 帰京 (ききょう): returning to Tokyo 長い出張（しゅっちょう）を終えて、帰京した。 (After a long business trip, I returned to Tokyo.) 基金 (ききん): fund (usually for a specific purpose) このプロジェクトには、政（せい）府（ふ）からの基金が支（し）援（えん）されている。 (This project is supported by a government fund.) 確信 (かくしん): conviction, certainty 彼は自分の成（せい）功（こう）に対して確信を持っている。 (He has confidence in his success.) 格段 (かくだん): particularly, greatly (often used to emphasize something superior) この新しいモデルは格段に性（せい）能（のう）が向上している。 (This new model has improved performance significantly.) 過激 (かげき): radical, extreme 彼の過激な意見は賛（さん）否（ぴ）を呼んだ。 (His extreme opinions sparked both support and opposition.) 過酷 (かこく): harsh, severe 過酷な環（かん）境（きょう）で働くことは精（せい）神（しん）的にも肉（にく）体（たい）的にも辛（づら）い。 (Working in harsh conditions is tough both mentally and physically.) 気触れる (かぶれる): to develop a rash or skin irritation; to be overly influenced (often negatively) by something (e.g., ideas, trends) その植（しょく）物（ぶつ）に触（ふ）れて気触れた。 (I touched that plant and got a rash.) 新しい思（し）想（そう）に気触れて、極（きょく）端（たん）な行（こう）動（どう）をとるようになった。 (He became overly influenced by the new ideology and started acting radically.) 関節 (かんせつ): joint (in the body) 関節が痛くなってきたので、運動を控（ひか）えることにした。 (My joints started hurting, so I decided to hold back on exercising.) 甲板 (かんぱん): deck (of a ship) 甲板に出て、海の景（けし）色（き）を楽しんだ。 (I went out on the deck to enjoy the view of the sea.) 漢方薬 (かんぽうやく): Chinese medicine 漢方薬は自然の成（せい）分（ぶん）を使った治（ち）療（りょう）法（ほう）として人気がある。 (Chinese medicine is popular as a treatment using natural ingredients.) 関与 (かんよ): involvement, participation 彼はその問題には関与していないと明（めい）言（げん）した。 (He stated clearly that he was not involved in the issue.) 季刊 (きかん): quarterly (publication) この雑誌は季刊で発行（はっこう）されている。 (This magazine is published quarterly.) 記載 (きさい): description, entry (writing down information) 申（もうし）込（こみ）書（しょ）に必要な情報を記載してください。 (Please write down the necessary information on the application form.) 5 Your browser does not support the audio element. SHOW CONTENTS 決まり悪い (きまりわるい): embarrassed, uncomfortable 彼は決まり悪そうに黙（だま）っていた。 (He remained silent, looking embarrassed.) 華奢 (きゃしゃ): delicate, fragile 彼女は華奢な体（たい）型（けい）で、歩き方も優（ゆう）雅（が）だ。 (She has a delicate figure, and her way of walking is graceful.) 驚異的 (きょういてき): phenomenal, miraculous 彼の能力は驚異的で、誰も彼には勝（か）てない。 (His ability is phenomenal, and no one can beat him.) 強硬 (きょうこう): firm, strong-willed (used for attitudes, measures) 彼は強硬な態（たい）度（ど）で交（こう）渉（しょう）を進（すす）めた。 (He proceeded with the negotiations in a firm manner.) 凝固 (ぎょうこ): solidification, freezing 液（えき）体（たい）は冷（れい）却（きゃく）されて凝固した。 (The liquid was cooled and solidified.) 切り抜ける (きりぬける): to get through, to escape from 彼は困（こん）難（なん）な状況をうまく切り抜けた。 (He managed to get through the difficult situation.) 拒否 (きょひ): rejection, refusal 彼は提案を拒否した。 (He rejected the proposal.) 空間 (くうかん): space, room (physical or abstract) 部屋に空間が広く取られていて、快（かい）適（てき）だった。 (The room had ample space, making it comfortable.) 苦渋 (くじゅう): distress, anguish (often used for making difficult decisions) 彼は苦渋の選（せん）択（たく）を迫（せま）られた。 (He was forced to make a difficult choice.) 明け暮れる (あけくれる): to spend all day (doing something), to be absorbed in 彼は毎日仕事に明け暮れている。 (He spends every day absorbed in work.) あざ笑う (あざわらう): to mock, to ridicule 彼は失敗（しっぱい）した相（あい）手（て）をあざ笑（わら）った。 (He mocked the person who failed.) 圧倒 (あっとう): overwhelming, overpowering その試合で彼は相（あい）手（て）を圧倒した。 (He overwhelmed his opponent in the match.) アットホーム: homely, comfortable (atmosphere) このカフェはアットホームな雰（ふん）囲（い）気（き）が魅力だ。 (This café has a homely atmosphere, which is its charm.) アルファベット: alphabet 英語のアルファベットは26文字から成（な）る。 (The English alphabet consists of 26 letters.) 家出 (いえで): running away from home 彼は家出して、どこかに行ってしまった。 (He ran away from home and went somewhere.) 異議 (いぎ): objection, dissent 彼はその決定（けってい）に異議を唱（とな）えた。 (He raised an objection to the decision.) 一同 (いちどう): all present, everyone 会議には一同が集（あつ）まった。 (Everyone gathered for the meeting.) 今更 (いまさら): at this late stage, now after all this time 今更謝（あやま）っても遅すぎる。 (It\u0026rsquo;s too late to apologize now.) うつ伏せ (うつぶせ): lying face down 彼は床（ゆか）にうつ伏せになって寝ていた。 (He was lying face down on the floor.) 差出人 (さしだしにん): sender (of a letter or package) 差出人の名前が書かれていなかった。 (The sender\u0026rsquo;s name wasn\u0026rsquo;t written.) 6 Your browser does not support the audio element. SHOW CONTENTS 埋め込む (うめこむ): to embed, to implant 彼は新しい技（ぎ）術（じゅつ）をシステムに埋め込む作（さ）業（ぎょう）をした。 (He worked on embedding the new technology into the system.) 運賃 (うんちん): fare (transportation) バスの運賃は250円です。 (The bus fare is 250 yen.) 英字 (えいじ): English letters この書類には英字が多く使われている。 (This document uses a lot of English letters.) 映写 (えいしゃ): projection (of a film or image) 映写機で映画を映（うつ）し出（だ）す準備が整（ととの）った。 (The projector was ready to display the movie.) 抉る (えぐる): to gouge, to dig out 彼の言葉は心を抉るような痛みを与（あた）えた。 (His words caused a painful feeling as if gouging my heart.) 負う (おう): to bear, to take on (a responsibility, a wound) 彼は大きな責任を負っている。 (He bears a great responsibility.) 横行 (おうこう): rampant, widespread (usually used for something negative) 汚（お）職（しょく）が横行している。 (Corruption is rampant.) 王者 (おうじゃ): king, champion 彼は何度も王者の座（ざ）に輝（かがや）いた。 (He has been crowned champion multiple times.) 往診 (おうしん): house call (by a doctor) 医師は往診に出かけた。 (The doctor went on a house call.) 遅番 (おそばん): late shift (work schedule) 今日は遅番なので、午後から働く予定です。 (I’m on the late shift today, so I plan to work in the afternoon.) 脅す (おどす): to threaten, to intimidate 彼は脅して金を要（よう）求（きゅう）した。 (He threatened and demanded money.) 帯びる (おびる): to carry, to take on (a characteristic or role) 彼は重い使命を帯びて、この地に来た。 (He came here carrying a heavy mission.) 面影 (おもかげ): appearance, traces (of a person, or the past) 戦（せん）災（さい）を免（まぬが）れたこの建物には、往（おう）時（じ）の繁（はん）栄（えい）の面影が残（のこ）る。(This surviving pre-war building retains traces of its past prosperity.) 重み (おもみ): weight, seriousness その問題には重みがあり、慎（しん）重（ちょう）に対（たい）処（しょ）しなければならない。 (The issue carries weight, and we must handle it carefully.) 趣 (おもむき): taste, charm, elegance (in a cultural or artistic sense) この町（ちょう）には昔ながらの趣が残（のこ）っている。 (This town retains the charm of the old days.) オリジナル: original 彼はオリジナルのレシピを考（こう）案（あん）した。 (He created an original recipe.) 解除 (かいじょ): cancellation, removal (of a restriction or ban) 監（かん）禁（きん）状（じょう）態（たい）からの解除が決まった。 (The decision to lift the confinement has been made.) 開拓 (かいたく): development, pioneering 新しい市（し）場（じょう）を開拓することが目（もく）標（ひょう）だ。 (The goal is to develop new markets.) 取引 (とりひき): transaction, deal 国（こく）際（さい）取引においては為（かわ）替（せ）リスクを考（こう）慮（りょ）しなければならない。(In international transactions, exchange rate risks must be considered.) 珍しい (めずらしい): rare, unusual 今日は珍しい花が咲（さ）いている。 (A rare flower is blooming today.) 7 Your browser does not support the audio element. SHOW CONTENTS 改良 (かいりょう): improvement, refinement この製（せい）品（ひん）は改良され、より使いやすくなった。 (This product has been improved and is now more user-friendly.) 省みる (かえりみる): to reflect on, to look back on 彼は自分の過（あやま）ちを省みることができた。 (He was able to reflect on his mistakes.) 確たる (かくたる): certain, definite 彼には確たる証（しょう）拠（こ）がある。 (He has definite evidence.) 確保 (かくほ): securing, ensuring 安（あん）全（ぜん）を確（かく）保（ほ）するために新しい手（て）順（じゅん）が必要だ。 (New procedures are necessary to ensure safety.) 架け橋 (かけはし): bridge (in a metaphorical sense, e.g., between people or cultures) この交（こう）流（りゅう）プログラムは両（りょう）国（こく）の理（り）解（かい）の架け橋となることを目（め）指（ざ）している。(This exchange program aims to be a bridge for mutual understanding between the two countries.) 掠る (かする): to graze, to skim 車が壁を掠って傷（きず）がついた。 (The car grazed the wall and got scratched.) かわるがわる: in turn, alternately 彼らはかわるがわる質問をした。 (They took turns asking questions.) 勧告 (かんこく): recommendation, advice (official) 政府は環境保（ほ）護（ご）のための勧告を出した。 (The government issued a recommendation for environmental protection.) 勘定 (かんじょう): calculation, account (e.g., bill or balance) 最（さい）後（ご）に勘定を払（はら）って店を出た。 (I paid the bill and left the store.) 起源 (きげん): origin, source この伝（でん）統（とう）は古（こ）代（だい）日本の起源を持つ。 (This tradition has its origins in ancient Japan.) 軋む (きしむ): to creak, to squeak 古いドアが軋む音がした。 (I heard the creaking sound of the old door.) 既婚 (きこん): married 彼は既婚者だ。 (He is married.) 気風 (きふう): spirit, temper, character (of a place or group) この町には独（どく）特（とく）な気風がある。 (This town has a unique spirit.) 救済 (きゅうさい): relief, rescue 災（さい）害（がい）時には迅（じん）速（そく）な救（きゅう）済（さい）活（かつ）動（どう）が求（もと）められる。 (During disasters, swift relief efforts are required.) 業界 (ぎょうかい): industry, business sector IT業界は急（きゅう）速（そく）に成（せい）長（ちょう）している。 (The IT industry is growing rapidly.) 義理堅い (ぎりがたい): dutiful, loyal 彼は義理堅く、誰に対しても誠（せい）実（じつ）だ。 (He is loyal and sincere to everyone.) 煌く (きらめく): to sparkle, to glitter 星（ほし）が夜（よ）空（ぞら）に煌いていた。 (The stars were sparkling in the night sky.) 疑惑 (ぎわく): suspicion, doubt 彼に関（かん）する疑惑が広がっている。 (Suspicion about him is spreading.) 空き巣 (あきす): burglar, house break-in 空き巣が家に入った形（けい）跡（せき）があった。 (There were signs that a burglar had broken into the house.) 緊密 (きんみつ): close, tight (relationship, connection) 彼らは緊密な協（きょう）力（りょく）関（かん）係（けい）を築（きず）いている。 (They have built a close cooperative relationship.) 8 Your browser does not support the audio element. SHOW CONTENTS 足跡 (あしあと): footprint, trace 砂（すな）浜（はま）に足跡が残っていた。 (There were footprints left on the beach.) あやふや: vague, unclear 彼の答（こた）えはあやふやで、信（しん）頼（らい）できなかった。 (His answer was vague and unreliable.) 霰 (あられ): hail 霰が降ってきて、車の窓が音を立てた。 (Hail started to fall, making a sound on the car window.) 暗雲 (あんうん): dark clouds, omen 空（そら）に暗雲が立（た）ち込（こ）めてきた。 (Dark clouds began to gather in the sky.) 萎縮 (いしゅく): shrink, wither, atrophy 厳（きび）しい上（じょう）司（し）の前で萎縮してしまい、思ったことが言えなかった。(I shrunk back in front of my strict boss and couldn\u0026rsquo;t say what I wanted.) 長（ちょう）期（き）間（かん）の運動不（ふ）足（そく）は筋（きん）肉（にく）の萎縮を引き起こす可（か）能（のう）性（せい）がある。(Long periods of lack of exercise can lead to muscle atrophy.) 異端児 (いたんじ): maverick, heretic 彼はクラスの異端児として知られている。 (He is known as the maverick of the class.) 一目 (いちもく): glance, a look 一目で彼がどこにいるか分かった。 (I knew where he was with just one glance.) 未だに (いまだに): still, even now 未だにその問題は解決していない。 (The problem has still not been solved.) ウイークデー: weekday 彼はウイークデーに忙しく働いている。 (He works hard during the weekdays.) ウエット: sentimental 彼のウエットな性格が、時々仕事の判（はん）断（だん）に影（えい）響（きょう）を与（あた）える。(His emotional personality sometimes affects his work decisions.) 受け止める (うけとめる): to catch, to accept 彼女はその知らせを冷（れい）静（せい）に受け止めた。 (She calmly accepted the news.) 疑わしい (うたがわしい): suspicious, doubtful 彼の証（しょう）言（げん）は疑わしいとされている。 (His testimony is considered suspicious.) 内気 (うちき): shy, introverted 彼はとても内気な性格だ。 (He has a very shy personality.) 空ろ (うつろ): vacant, hollow 事件後、彼女の目は空ろになり、以（い）前（ぜん）の明るさは失（うしな）われた。(After the incident, her eyes became hollow, losing their former brightness.) 概ね (おおむね): generally, in general 概ねこの計画はうまくいくはずだ。 (Generally, this plan should work well.) お返し (おかえし): return (of favor or gift) 彼からのプレゼントのお返しを考えている。 (I am thinking about how to return the favor for the gift he gave me.) 怠る (おこたる): to neglect, to be lazy 仕事を怠ると、後で大きな問題になることがある。 (Neglecting your work can lead to major problems later.) 納める (おさめる): to pay, to submit 税（ぜい）金（きん）を納める期（き）限（げん）は今月末だ。 (The deadline for paying taxes is at the end of this month.) 押し付けがましい (おしつけがましい): overbearing, imposing 彼の押し付けがましいアドバイスにはうんざりしている。(I\u0026rsquo;m tired of his pushy advice.) 惜しむ (おしむ): to regret, to be reluctant (about something) 彼女はお金を惜しんで、旅行をキャンセルした。 (She was reluctant to spend the money and canceled the trip.) 9 Your browser does not support the audio element. SHOW CONTENTS 夥しい (おびただしい): numerous, vast その部屋には夥しい数（かず）の本が積（つ）まれていた。 (The room was piled high with a vast number of books.) 覚束ない (おぼつかない): uncertain, unreliable 彼の返（へん）事（じ）は覚束なく、何を考えているのか分からなかった。 (His response was uncertain, and I couldn\u0026rsquo;t figure out what he was thinking.) 及ぶ (およぶ): to reach, to extend to その問題は全（ぜん）社（しゃ）に及ぶ影（えい）響（きょう）を及ぼす可（か）能（のう）性（せい）がある。 (The issue could potentially have an impact that extends across the entire company.) 折り返す (おりかえす): to turn back, to return 電車は終（しゅう）点（てん）で折り返し、再（ふたた）び発車（はっしゃ）した。(The train turned back at the terminal and departed again.) 愚か (おろか): foolish, absurd 彼の愚かな行動には驚（おどろ）かされた。 (I was shocked by his foolish behavior.) 快諾 (かいだく): enthusiastic consent, glad agreement 彼は快諾して、新しいプロジェクトに参加することになった。 (He gladly agreed and joined the new project.) 改定 (かいてい): revision, amendment 法（ほう）律（りつ）の改定が来月から施（し）行（こう）される。 (The revision of the law will be enforced starting next month.) 垣間見る (かいまみる): to glimpse, to catch a glimpse of 彼は窓から外を垣間見た。 (He caught a glimpse of the outside through the window.) 屈める (かがめる): to bend, to stoop 彼は低（ひく）いドアを通るために屈（かが）めなければならなかった。 (He had to bend down to pass through the low door.) 学芸 (がくげい): arts, liberal arts 彼は学芸の分（ぶん）野（や）で優（すぐ）れた才（さい）能（のう）を持っている。 (He has exceptional talent in the field of the liberal arts.) 隠れ家 (かくれが): hideout, retreat この町には静かな隠れ家がいくつかある。 (There are a few quiet retreats in this town.) 加工 (かこう): processing, manufacturing この工（こう）場（じょう）では金（きん）属（ぞく）の加（か）工（こう）を行（おこな）っている。 (This factory is involved in metal processing.) カムバック: comeback 彼のカムバックは多くのファンを喜（よろこ）ばせた。 (His comeback delighted many fans.) 火力 (かりょく): firepower 戦（せん）車（しゃ）はその火力で敵（てき）を圧倒（あっとう）した。 (The tank overwhelmed the enemy with its firepower.) 簡易 (かんい): simple, easy これは簡易な手（て）順（じゅん）で解決できる問題だ。 (This is a problem that can be solved with simple steps.) 眼科 (がんか): ophthalmology, eye doctor 眼科に行って、目の検（けん）査（さ）を受けた。 (I went to the ophthalmologist to have my eyes checked.) かんかん: furious, angry 彼はかんかんに怒っていた。 (He was furious.) 着飾る (きかざる): to dress up, to adorn 彼女はパーティーに着飾って出かけた。 (She dressed up for the party and went out.) 戯曲 (ぎきょく): play, drama 彼は戯曲を書いて、舞（ぶ）台（たい）に出（しゅつ）演（えん）した。 (He wrote a play and performed in it.) 応答 (おうとう): response, reply 彼からの応答を待っている。 (I am waiting for a response from him.) 10 Your browser does not support the audio element. SHOW CONTENTS 機構 (きこう): organization, mechanism この大学には、さまざまな学（がく）術（じゅつ）機構が存在しています。(This university has various academic organizations.) この機構は、効（こう）率（りつ）的な作（さ）業（ぎょう）を支（ささ）えるために設計された。 (This mechanism was designed to support efficient work.) 記述 (きじゅつ): description, writing 彼のレポートには詳（しょう）細（さい）な記述が含（ふく）まれていた。 (His report contained detailed descriptions.) 気品 (きひん): elegance, dignity 彼女は気品に満（み）ちた態（たい）度（ど）で部屋に入ってきた。 (She entered the room with an air of elegance.) 生真面目 (きまじめ): serious, earnest 彼は生真面目で、冗（じょう）談（だん）を言うことが少（すく）ない。 (He is very earnest and rarely cracks jokes.) 逆上 (ぎゃくじょう): rage, frenzy 彼は逆上して、冷（れい）静（せい）さを失（うしな）った。 (He became enraged and lost his composure.) 急騰 (きゅうとう): sharp rise, surge 株（かぶ）価（か）は急騰し、多くの投（とう）資（し）家（か）が驚（おどろ）いた。 (The stock price surged, and many investors were surprised.) 相容れない (あいいれない): incompatible, irreconcilable 彼らの意見は相容れないものだった。 (Their opinions were irreconcilable.) 愛くるしい (あいくるしい): adorable, charming その小さな犬はとても愛くるしかった。 (The small dog was incredibly adorable.) あえて: daringly, boldly あえてその問題を指（し）摘（てき）する必要があった。 (It was necessary to boldly point out that issue.) 赤らむ (あからむ): to redden, to flush 彼は恥（は）ずかしくて顔が赤らんだ。 (He blushed because he was embarrassed.) 朝飯前 (あさめしまえ): piece of cake, easy task この問題は朝飯前の簡単なものだ。 (This problem is a piece of cake.) 当たり (あたり): hit, success, chance 新商品が当たりをとり、売（うり）上（あげ）は前（ぜん）年（ねん）比150%になった。(The new product was a hit, achieving 150% of previous year\u0026rsquo;s sales.) その投（とう）資（し）は大きな当たりだった。 (That investment was a huge success.) 扱い (あつかい): treatment, handling 彼の扱いには注意が必要だ。 (He requires careful handling.) 甘口 (あまくち): sweet (flavor), mild 彼は甘口のワインが好きだ。 (He likes sweet wines.) 案じる (あんじる): to be concerned, to worry 彼女は私の健康を案じている。 (She is concerned about my health.) 意気込み (いきごみ): enthusiasm, eagerness 彼の意気込みには感（かん）心（しん）した。 (I was impressed by his enthusiasm.) 痛手 (いたで): blow, setback その事故は会社にとって大きな痛手だった。 (The accident was a significant setback for the company.) 悼む (いたむ): to mourn, to grieve 彼の死を悼む人々（ひとびと）が集（あつ）まった。 (People gathered to mourn his death.) 著しい (いちじるしい): remarkable, significant 彼の成（せい）績（せき）は著しく向（こう）上（じょう）した。 (His performance improved significantly.) 接続 (せつぞく): connection, linking このシステムの接続は非（ひ）常（じょう）に重（じゅう）要（よう）だ。 (The connection of this system is extremely important.) 11 Your browser does not support the audio element. SHOW CONTENTS 無効 (むこう): invalid, disabled このリンクは現（げん）在（ざい）無効になっています。 (This link is currently invalid.) 視聴 (しちょう): viewing, watching 昨日は映画をオンラインで視聴した。 (I watched a movie online yesterday.) 元に戻す（もとにもどす）：To restore/return something to its original state 誤（あやま）って削（さく）除（じょ）したファイルを「元に戻す」機（き）能（のう）で復（ふく）元（げん）した。(I restored accidentally deleted files using the \u0026ldquo;Undo\u0026rdquo; function.) 確立 (かくりつ): establishment 安全な通（つう）信（しん）が確立されました。 (A secure connection has been established.) 実行 (じっこう): execution, implementation プログラムを実行（じっこう）するには、まず設定（せってい）が必要です。 (To execute the program, you need to configure it first.) 迷惑 (めいわく): nuisance, trouble, bother 迷惑メールが大（たい）量（りょう）に届（とど）いた。 (I received a lot of spam emails.) 位置 (いち): position, location ファイルの保（ほ）存（ぞん）位置を指（し）定（てい）してください。 (Please specify the file\u0026rsquo;s save location.) 貼り付け (はりつけ): paste (text or object) コピーした内（ない）容（よう）をこの欄（らん）に貼り付けてください。 (Paste the copied content into this field.) 公開 (こうかい): release, publish 新しいアプリが昨日公開された。 (The new app was released yesterday.) 挿入 (そうにゅう): insertion 図（ず）を文（ぶん）書（しょ）に挿入してください。 (Insert the image into the document.) トークン: token (authentication or security) ログインにはトークンが必要です。 (A token is required for login.) 拡張 (かくちょう): extension, expansion このソフトには拡張機（き）能（のう）があります。 (This software has extension features.) 入力 (にゅうりょく): input パスワードを入力してください。 (Please enter your password.) 一覧 (いちらん): list, summary 商（しょう）品（ひん）の一覧を表（ひょう）示（じ）します。 (Display the product list.) 集中 (しゅうちゅう): concentration, focus 今は仕事に集中したい。 (I want to concentrate on my work now.) 端末 (たんまつ): device, terminal この端末では支（し）払（はら）いができません。 (Payment cannot be made on this device.) 不正 (ふせい): illegality, unauthorized この端末での不（ふ）正（せい）アクセスが確（かく）認（にん）されました。（Unauthorized access was detected on this terminal.） 領収書 (りょうしゅうしょ): receipt 会（かい）計（けい）の際（さい）に領収書をもらった。 (I received a receipt at checkout.) 承認 (しょうにん): approval, authorization 管（かん）理（り）者（しゃ）の承認が必要です。 (Administrator approval is required.) 受領 (じゅりょう): receipt (of goods, documents, etc.) 書（しょ）類（るい）の受領を確（かく）認（にん）しました。 (I confirmed the receipt of the documents.) 12 Your browser does not support the audio element. SHOW CONTENTS 一連 (いちれん): a series, a sequence 一連の事件について調（ちょう）査（さ）が行（おこな）われている。(An investigation is being conducted into the series of incidents.) 違和感 (いわかん): sense of discomfort, unease 彼の話し方に少し違和感を覚（おぼ）えた。(I felt a bit of discomfort with the way he spoke.) 運用 (うんよう): operation, practical use 新しいシステムの運用が始まった。(The operation of the new system has begun.) 婉曲 (えんきょく): euphemistic, indirect 彼は婉曲な表（ひょう）現（げん）で断（ことわ）った。(He declined in an indirect way.) 応急 (おうきゅう): emergency, temporary 応急処（しょ）置（ち）を施（ほどこ）した後（あと）、病院へ運（はこ）ばれた。(After giving emergency treatment, they were taken to the hospital.) 大物 (おおもの): big shot, important person あの政治家は政（せい）界（かい）の大物だ。(That politician is a big figure in the political world.) 送り状 (おくりじょう): invoice, delivery note 商品と一緒に送り状を同（どう）封（ふう）してください。(Please include the delivery note with the goods.) お袋 (おふくろ): (my) mother (colloquial) 久しぶりにお袋の料理が食べたい。(I want to eat my mom’s cooking—it’s been a while.) 解剖 (かいぼう): dissection, autopsy 死（し）因（いん）を調（しら）べるために解剖が行（おこな）われた。(An autopsy was conducted to determine the cause of death.) 皆無 (かいむ): nonexistent, none at all 経（けい）験（けん）は皆無ですが、やる気はあります。(I have no experience, but I’m highly motivated.) 掻き回す (かきまわす): stir up, disturb スープをよく掻（か）き回（まわ）してください。(Please stir the soup well.) 拡散 (かくさん): diffusion, spread SNSで情（じょう）報（ほう）が急（きゅう）速（そく）に拡散した。(The information spread rapidly on social media.) 構え (かまえ): stance, posture, readiness 彼は戦（たたか）う構えを見せた。(He took a fighting stance.) 辛うじて (かろうじて): barely, narrowly 辛うじて終電に間に合った。(I barely caught the last train.) 完結 (かんけつ): conclusion, completion シリーズがついに完結した。(The series finally concluded.) 刊行 (かんこう): publication, issue 新しい辞（じ）典（てん）が来月刊行される。(The new dictionary will be published next month.) 話し合い (はなしあい): discussion, negotiation 両（りょう）者（しゃ）の話し合いは平（へい）行（こう）線（せん）のままだった。(The discussion between the two parties remained deadlocked.) 尊重 (そんちょう): respect, esteem 相手の意見を尊重すべきだ。(We should respect the other person’s opinion.) 事象 (じしょう): event, phenomenon 自然界の事象には不（ふ）思（し）議（ぎ）なものが多い。(There are many mysterious phenomena in nature.) 以下 (いか): below, less than 彼の成（せい）績（せき）は平（へい）均（きん）以下だった。(His grades were below average.) 13 Your browser does not support the audio element. SHOW CONTENTS 簡素 (かんそ): simplicity, plainness 彼の家は簡素だが、とても居（い）心（ごこ）地（ち）がよい。(His house is simple, but very comfortable.) 気さく (きさく): friendly, open-hearted 彼女はとても気さくで、初（しょ）対（たい）面（めん）でも話しやすい。(She’s very friendly and easy to talk to, even for the first time.) 鍛える (きたえる): to train, to forge 体を鍛えるために毎日ジムに通っている。(I go to the gym every day to train my body.) 技能 (ぎのう): skill, technical ability 技能を身（み）につければ、就（しゅう）職（しょく）に有（ゆう）利（り）になる。(Acquiring skills makes it easier to get a job.) 規範 (きはん): standard, norm 社会の規範に従（したが）うことが求（もと）められる。(You are expected to follow the norms of society.) 起伏 (きふく): ups and downs, undulation 起伏の多い人（じん）生（せい）だったが、後（こう）悔（かい）はない。(My life has had many ups and downs, but I have no regrets.) 窮屈 (きゅうくつ): tight, cramped, constrained この靴は窮屈で長く歩けない。(These shoes are too tight to walk in for long.) 競合 (きょうごう): competition, rivalry 他（た）社（しゃ）との競合が激（はげ）しくなっている。(The competition with other companies is intensifying.) 相次ぐ (あいつぐ): to happen one after another 事故が相次いで発生（はっせい）した。(Accidents occurred one after another.) 悪どい (あくどい): vicious, malicious, dishonest 彼のやり方はあまりにも悪どい。(His methods are far too malicious.) 圧迫 (あっぱく): pressure, oppression 胸（むね）に圧迫感を感じたら、すぐに病院へ。(If you feel pressure in your chest, go to the hospital immediately.) 言い張る (いいはる): to insist, to assert 彼は自分が正しいと最後まで言い張（は）った。(He insisted he was right until the very end.) 家路 (いえじ): the road home 家路を急（いそ）いでいたら、突（とつ）然（ぜん）雨が降ってきた。(While hurrying home, it suddenly started to rain.) 意地 (いじ): stubbornness, willpower 意地を張（は）らずに素（す）直（なお）に謝（あやま）るべきだ。(You should stop being stubborn and just apologize.) 委託 (いたく): entrustment, outsourcing 業（ぎょう）務（む）の一（いち）部（ぶ）を外（がい）部（ぶ）に委託した。(Part of the work was outsourced.) 痛める (いためる): to injure, to hurt 無（む）理（り）に走って膝（ひざ）を痛めてしまった。(I hurt my knee by running too hard.) 卑しい (いやしい): greedy, vulgar, lowly お金に卑しい人とは付き合いたくない。(I don\u0026rsquo;t want to associate with someone who\u0026rsquo;s greedy for money.) 慰留 (いりゅう): persuasion to stay, urging not to resign 上（じょう）司（し）から慰留されたが、退（たい）職（しょく）を決（けつ）意（い）した。(Though my boss urged me to stay, I decided to resign.) 色合い (いろあい): shade, hue, color tone この絵は優しい色合いで癒（いや）される。(This painting has soothing colors and is comforting.) 通常 (つうじょう): normal, usual 通常は9時に開（かい）店（てん）します。(It usually opens at 9 o\u0026rsquo;clock.) 14 Your browser does not support the audio element. SHOW CONTENTS 後ろ盾 (うしろだて): backing, support, patron 彼には有（ゆう）力（りょく）な後ろ盾がいる。(He has powerful backing.) 梅干 (うめぼし): pickled plum お弁当に梅干が入っている。(There’s a pickled plum in the lunchbox.) 円滑 (えんかつ): smooth, harmonious 会議は円滑に進（しん）行（こう）した。(The meeting went smoothly.) 横転 (おうてん): overturn, rollover トラックが横転して通行止めになった。(A truck overturned, blocking traffic.) 大幅 (おおはば): significant, drastic 売上が大幅に増（ぞう）加（か）した。(Sales increased significantly.) 大まか (おおまか): rough, approximate 大まかな計画を立てた。(We made a rough plan.) 重苦しい (おもくるしい): oppressive, heavy (atmosphere) 部屋の空気が重苦しかった。(The atmosphere in the room was heavy.) 改行 (かいぎょう): line break 文を読みやすくするために改行した。(I inserted line breaks to make the text easier to read.) 回送 (かいそう): out-of-service (vehicle); forwarding このバスは回送中です。(This bus is in transit.) 回覧 (かいらん): circulation (of documents, etc.) 書類を部（ぶ）署（しょ）内（ない）で回覧してください。(Please circulate the document within the department.) 駆け足 (かけあし): running; quick pace 駅まで駆け足で向かった。(I ran to the station.) 肩代わり (かたがわり): taking over someone\u0026rsquo;s debt/responsibility 親が借金を肩代わりした。(The parents took over the debt.) 稼働 (かどう): operation, working (of machinery, etc.) 工場は24時間稼働している。(The factory operates 24 hours a day.) 軽んじる (かろんじる): to belittle, to make light of 規（き）則（そく）を軽んじてはいけない。(You shouldn’t take the rules lightly.) 緩和 (かんわ): easing, relaxation, mitigation 規制（きせい）が緩和された。(The regulations were eased.) 気合 (きあい): fighting spirit, motivation 試合前に気合を入れた。(I psyched myself up before the match.) 伴う (ともなう): to accompany, to entail リスクを伴う決（けつ）断（だん）だった。(It was a decision that involved risk.) 力 (ちから): power, strength 彼の力を借りて問題を解決した。(I solved the problem with his help.) 論理 (ろんり): logic, reasoning 彼の話には論理が通っている。(His argument is logically sound.) 読み書き (よみかき): reading and writing 読み書きの能力を伸（の）ばす。(Develop your reading and writing skills.) 15 Your browser does not support the audio element. SHOW CONTENTS 絆 (きずな): bond, emotional connection 家族の絆はとても強い。(The bond within the family is very strong.) 強烈 (きょうれつ): intense, strong 強烈な印（いん）象（しょう）を受けた。(I got a strong impression.) 極端 (きょくたん): extreme 彼の意見は極端すぎる。(His opinion is too extreme.) 亀裂 (きれつ): crack, rift 壁に亀裂が入っている。(There’s a crack in the wall.) 切り（きり）: end, limit, cut-off この仕事はきりがない。(This work has no end.) 究める (きわめる): to master, to investigate thoroughly 技（ぎ）術（じゅつ）を究めるのは難しい。(It’s difficult to master a skill.) 形成 (けいせい): formation チームの形成には時間がかかる。(It takes time to form a team.) 形勢 (けいせい): situation, condition (esp. in competition or battle) 試合の形勢が逆（ぎゃく）転（てん）した。(The tide of the game has turned.) 桁違い (けたちがい): of a different order (magnitude) 彼の収入は桁違いだ。(His income is on a completely different level.) 権力 (けんりょく): power, authority 彼は絶（ぜつ）大（だい）な権力を持っている。(He holds immense power.) 高額 (こうがく): high amount (money) 高額な商品の購（こう）入（にゅう）には注意が必要だ。(Be cautious when purchasing expensive items.) 構想 (こうそう): concept, vision, plan 新しいビルの構想が発表（はっぴょう）された。(The vision for the new building was announced.) 光沢 (こうたく): gloss, shine, luster この布（ぬの）には美しい光沢がある。(This fabric has a beautiful sheen.) 工程 (こうてい): process, stage of work 製造工程を見学した。(We toured the manufacturing process.) 構内 (こうない): premises, grounds (esp. school, station) 駅構内は混（こん）雑（ざつ）している。(The station premises are crowded.) 効用 (こうよう): usefulness, benefit, effect この薬には即（そっ）効（こう）性（せい）の効用がある。(This medicine has immediate benefits.) 公用 (こうよう): official business, government use 公用車で移（い）動（どう）した。(He traveled in an official vehicle.) 相性 (あいしょう): compatibility, affinity 二人の相性は抜（ばつ）群（ぐん）だ。(Their compatibility is excellent.) 割合 (わりあい): ratio, proportion 若（わか）者（もの）の割合が増（ふ）えている。(The proportion of young people is increasing.) 即時 (そくじ): immediate, instantly 彼は即時に対応した。(He responded immediately.) 16 Your browser does not support the audio element. SHOW CONTENTS あっけない: unsatisfying, disappointing, too quick (end) 試合はあっけない結（けつ）末（まつ）だった。(The match ended in an unsatisfying way.) 後回し (あとまわし): postponement, putting off 宿題を後（あと）回（まわ）しにして遊んだ。(I postponed my homework and played.) 誂える (あつらえる): to order, to have something made to order スーツを誂えた。(I had a suit made to order.) 合わす (あわす): to match, to combine (colloquial/formal of 合わせる) 力（ちから）を合わして頑（がん）張（ば）ろう。(Let’s join forces and do our best.) 暗示 (あんじ): hint, suggestion, implication 彼の言葉には暗示が含(ふく)まれていた。(His words contained a hint.) 言い分 (いいぶん): one\u0026rsquo;s say, argument, point of view 彼の言い分にも一（いち）理（り）ある。(His argument also makes some sense.) 憤り (いきどおり): indignation, anger 彼は不（ふ）当（とう）な扱（あつか）いに深い憤りを感じていた。(He felt deep indignation at the unfair treatment.) 幾多 (いくた): many, numerous 幾多の困難を乗り越えた。(He overcame many hardships.) 依然 (いぜん): still, as yet 問題は依然として解決していない。(The problem remains unsolved.) 痛ましい (いたましい): pitiful, heartbreaking 痛ましい事故が起きた。(A heartbreaking accident occurred.) 至れり尽くせり (いたれりつくせり): perfect service, thoroughly attentive 至れり尽くせりのサービスだった。(The service was perfect and thorough.) 労わる (いたわる): to care for, to be kind to 高（こう）齢（れい）者（しゃ）を労わる気持ちが大切だ。(It’s important to care for the elderly.) 一概に (いちがいに): categorically, indiscriminately それを一概に悪いとは言えない。(You can’t categorically say it’s bad.) 一か八か (いちかばちか): hit or miss, sink or swim 一か八かで試験を受けた。(I took the exam as a gamble.) 偽る (いつわる): to lie, to deceive 年齢を偽った。(He lied about his age.) 嫌味 (いやみ): sarcasm, unpleasantness 彼の嫌味な言い方に腹（はら）が立つ。(His sarcastic tone makes me angry.) 後ろめたい (うしろめたい): guilty, feeling uneasy 嘘をついたことが後ろめたい。(I feel guilty about lying.) 厚い (あつい): thick, deep (emotionally), warm-hearted 友（ゆう）情（じょう）が厚い。(Their friendship is deep.) 飴 (あめ): candy 子供に飴をあげた。(I gave candy to the child.) 田舎 (いなか): countryside, rural area 夏休みに田舎へ帰る。(I go back to the countryside during summer vacation.) 17 Your browser does not support the audio element. SHOW CONTENTS 打ち消し (うちけし): negation, denial 彼はその噂（うわさ）を打ち消した。(He denied the rumor.) 埋め立てる (うめたてる): to reclaim land, to fill in 海を埋め立てて新しい町を作った。(They reclaimed land from the sea to build a new town.) 運営 (うんえい): management, operation 学（がく）園（えん）祭（さい）の運営は学生が担（たん）当（とう）する。(The students are responsible for managing the school festival.) エキゾチック: exotic 彼女はエキゾチックな魅力を持っている。(She has an exotic charm.) 円高 (えんだか): appreciation of the yen 円高で輸（ゆ）出（しゅつ）企業は苦（くる）しんでいる。(Export companies are struggling due to the strong yen.) 大らか (おおらか): generous, broad-minded 彼は大らかな性（せい）格（かく）で、細（こま）かいことは気にしない。(He is generous and doesn’t worry about small things.) 臆病 (おくびょう): cowardly, timid 臆病で発（はつ）言（げん）できなかった。(I was too timid to speak.) 推し進める (おしすすめる): to press forward, to advance 政府は改（かい）革（かく）を推し進めている。(The government is pushing reforms forward.) 億劫 (おっくう): troublesome, tiresome 外（がい）出（しゅつ）するのが億劫だ。(Going out feels like a bother.) 思わしい (おもわしい): satisfactory, favorable 手（しゅ）術（じゅつ）後（ご）の経（けい）過（か）は思わしくない。(The recovery after surgery is not favorable.) 親兄弟 (おやきょうだい): one\u0026rsquo;s parents and siblings 親兄弟に心配をかけたくない。(I don’t want to worry my family.) 外貨 (がいか): foreign currency 海（かい）外（がい）旅行前に外貨を両（りょう）替（がえ）する。（Exchange foreign currency before traveling abroad.） 該当 (がいとう): relevant, applicable 該当する項（こう）目（もく）をチェックしてください。(Please check the applicable items.) 輝かしい (かがやかしい): brilliant, glorious 彼は輝かしい経（けい）歴（れき）を持っている。(He has a brilliant career.) 画策 (かくさく): scheme, planning (often strategic) 政（せい）権（けん）奪（だっ）取（しゅ）を画策している。(He is scheming to take power.) 格別 (かくべつ): exceptional, particularly 格別な対（たい）応（おう）に感謝します。(Thank you for your exceptional service.) 叶う (かなう): to come true, to be realized 長（なが）年（ねん）の夢が叶った。(A long-held dream came true.) 合点 (がってん): understanding, agreement (colloquial) 合点がいかない説明だ。(That explanation doesn’t make sense to me.) 祝う (いわう): to celebrate 結婚を祝うパーティーが開（ひら）かれた。(A party was held to celebrate the wedding.) 薄い (うすい): thin, weak (in color, flavor, etc.) このスープは味（あじ）が薄（うす）い。(This soup is bland.) 18 Your browser does not support the audio element. SHOW CONTENTS 兼ね備える (かねそなえる): to possess both, to combine 彼は知（ち）性（せい）とユーモアを兼ね備えている。(He possesses both intelligence and humor.) 構える (かまえる): to set up, to prepare, to adopt a posture 店を構える夢がある。(I have a dream of setting up my own shop.) 絡む (からむ): to entangle, to get involved 糸（いと）が絡んでしまった。(The threads got tangled.) 慣性 (かんせい): inertia 慣性の法（ほう）則（そく）に従（したが）って物（ぶっ）体（たい）は動（うご）き続（つづ）ける。(Objects continue to move due to the law of inertia.) 元年 (がんねん): first year (of an era) 平（へい）成（せい）元年に生まれた。(I was born in the first year of the Heisei era.) 完璧 (かんぺき): perfect, flawless 彼のプレゼンは完（かん）璧（ぺき）だった。(His presentation was perfect.) 勧誘 (かんゆう): solicitation, invitation クラブ活（かつ）動（どう）に勧誘された。(I was invited to join a club.) 規格 (きかく): standard, norm この部（ぶ）品（ひん）は国（こく）際（さい）規（き）格（かく）に合（あ）っている。(This part meets international standards.) 競う (きそう): to compete 両チームは優（ゆう）勝（しょう）を競っている。(The two teams are competing for the championship.) 強行 (きょうこう): enforcement, pushing through (by force) 法（ほう）案（あん）が強行採（さい）決（けつ）された。(The bill was forcibly passed.) 業績 (ぎょうせき): achievement, performance 昨（さく）年（ねん）の業績が大きく伸（の）びた。(Last year’s performance improved significantly.) 局限 (きょくげん): limitation, restriction 話（わ）題（だい）を一つに局限して議（ぎ）論（ろん）する。(Let’s limit the discussion to one topic.) 切れる (きれる): to cut, to run out, to be sharp, to lose temper この包（ほう）丁（ちょう）はよく切（き）れる。(This knife cuts well.) 極めて (きわめて): extremely これは極（きわ）めて重（じゅう）要（よう）な問題だ。(This is an extremely important issue.) 均衡 (きんこう): balance, equilibrium 力（ちから）の均衡が崩（くず）れた。(The balance of power has collapsed.) 相方 (あいかた): partner (esp. in comedy or work) 相方と息（いき）が合（あ）っている。(I’m in sync with my partner.) 諦め (あきらめ): resignation, giving up 諦めの早さが成功を遠（とお）ざける。(Giving up easily keeps success away.) 鮮やか (あざやか): vivid, brilliant, skillful 鮮やかな手さばきに驚（おどろ）いた。(I was amazed by the skillful hand movements.) 足がかり (あしがかり): foothold, starting point 彼の紹介が足がかりとなった。(His introduction served as a foothold.) 扱い (あつかい): treatment, handling VIPとしての扱いを受けた。(I was treated as a VIP.) 19 Your browser does not support the audio element. SHOW CONTENTS 歩む (あゆむ): to walk, to go through (life, path) 彼は苦（く）難（なん）の道（みち）を歩んできた。(He has walked a path full of hardships.) 居座る (いすわる): to remain, to stay without leaving 客が遅くまで居座った。(The guests stayed too long.) 依存 (いぞん): dependence, reliance スマホへの依存が問題になっている。(Dependence on smartphones is becoming a problem.) 一眼レフ (いちがんレフ): single-lens reflex camera (SLR) 一眼レフで風（ふう）景（けい）を撮（さつ）影（えい）するのが好きだ。(I enjoy taking landscape photos with my SLR.) 一抹 (いちまつ): a touch, a hint (usually of emotion or feeling) 一抹の不（ふう）安（あん）がよぎった。(A touch of anxiety crossed my mind.) 一様 (いちよう): uniform, equal, same 一様に意見を述（の）べた。(Everyone gave their opinion in the same way.) 逸材 (いつざい): outstanding talent チームに逸材が加（くわ）わった。(An outstanding talent joined the team.) 嫌がらせ (いやがらせ): harassment 彼は職（しょ）場（くば）で嫌がらせを受けている。(He is being harassed at work.) 受け入れる (うけいれる): to accept, to receive 彼の謝（しゃ）罪（ざい）を受け入れた。(I accepted his apology.) 後ろ向き (うしろむき): backward-looking, negative, passive 後ろ向きな考（かんが）え方（かた）はやめよう。(Let’s stop thinking negatively.) 打ち込む (うちこむ): to be devoted to, to shoot/strike into 研（けん）究（きゅう）に打ち込んでいる。(I’m deeply devoted to research.) 潤う (うるおう): to be moist, to enrich 雨で田（た）畑（はた）が潤った。(The rain enriched the fields.) 運搬 (うんぱん): transportation, carriage 荷物の運搬を頼まれた。(I was asked to transport the luggage.) エッセー: essay 旅行についてのエッセーを書く。(I’ll write an essay about my trip.) 得手 (えて): forte, strong point 英語は彼の得手だ。(English is his strong point.) 演出 (えんしゅつ): production, direction (in a play, event) 舞（ぶ）台（たい）の演（えん）出（しゅつ）が素晴らしかった。(The stage direction was amazing.) 大方 (おおかた): mostly, probably 大方の予（よ）想（そう）通りだった。(It was as most people expected.) 大御所 (おおごしょ): veteran, authority, great figure 音楽界の大御所に会った。(I met a veteran in the music world.) 遅らせる (おくらせる): to delay, to postpone 出（しゅっ）発（ぱつ）を一時間遅らせた。(We delayed the departure by one hour.) お手上げ (おてあげ): at one’s wit’s end, giving up この問題は難しすぎてお手上げだ。(This problem is too hard—I give up.) 20 Your browser does not support the audio element. SHOW CONTENTS 自ずと (おのずと): naturally, automatically 努（ど）力（りょく）すれば結（けっ）果（か）は自ずと現（あらわ）れる。(If you work hard, the results will naturally follow.) 思いやり (おもいやり): compassion, consideration 彼は思いやりのある人だ。(He is a compassionate person.) 赴く (おもむく): to go toward, to proceed to 現（げん）場（ば）に赴いた。(I went to the site.) 改悪 (かいあく): deterioration (due to revision), change for the worse 新（しん）制（せい）度（ど）は改悪だと言われている。(The new system is said to be a step backward.) 概要 (がいよう): summary, outline 計画の概要を説明してください。(Please explain the outline of the plan.) 覚醒剤 (かくせいざい): stimulant (often illegal drugs) 覚醒剤の所（しょ）持（じ）で逮（たい）捕（ほ）された。(He was arrested for possessing stimulants.) 仮説 (かせつ): hypothesis 仮説を立てて実（じっ）験（けん）を行（おこな）う。(Form a hypothesis and conduct an experiment.) 頑な (かたくな): stubborn, obstinate 彼は頑なに意（い）見（けん）を変（か）えなかった。(He stubbornly refused to change his opinion.) 勝ち組 (かちぐみ): winners (in society) 勝ち組として成（せい）功（こう）を収（おさ）めた。(He succeeded as part of the winning group.) 叶える (かなえる): to grant (a wish), to fulfill 夢（ゆめ）を叶えるために努（ど）力（りょく）する。(Work hard to make your dreams come true.) 活発 (かっぱつ): active, lively 子供たちは活発に遊んでいる。(The children are playing actively.) 過密 (かみつ): overcrowded, dense 都（と）市（し）部（ぶ）は過（か）密（みつ）状（じょう）態（たい）にある。(Urban areas are overcrowded.) 駆られる (かられる): to be driven by (emotion, desire) 芸（げい）術（じゅつ）家（か）は創（そう）造（ぞう）衝（しょう）動（どう）に駆られて作（さく）品（ひん）を作り続ける。(Artists keep creating works driven by creative impulse.) 完工 (かんこう): completion of construction ビルは今月完工予定だ。(The building is scheduled for completion this month.) 聞き逃す (ききのがす): to fail to catch (what someone said) 名前を聞き逃してしまった。(I missed hearing the name.) 気質 (きしつ): temperament, disposition 彼は職人気（き）質（しつ）だ。(He has the temperament of an artisan.) 寄贈 (きぞう): donation, presentation (usually of goods) 学校にピアノを寄贈した。(A piano was donated to the school.) 生まれる (うまれる): to be born 彼は東京で生まれた。(He was born in Tokyo.) 上着 (うわぎ): jacket, coat 上着を脱（ぬ）いでください。(Please take off your jacket.) 絵葉書 (えはがき): picture postcard 旅行先から絵葉書を送った。(I sent a picture postcard from my trip.) 21 Your browser does not support the audio element. SHOW CONTENTS 気まぐれ (きまぐれ): whim, capriciousness 彼の気まぐれには振（ふ）り回（まわ）される。(I\u0026rsquo;m always at the mercy of his whims.) 嗅覚 (きゅうかく): sense of smell, intuition 犬は人間よりもはるかに鋭（するど）い嗅覚を持っている。(Dogs have a far superior sense of smell than humans.) 脚立 (きゃたつ): stepladder 蛍（けい）光（こう）灯（とう）を替（か）えるために脚（きゃ）立（たつ）を使った。(I used a stepladder to change the fluorescent light.) キャリア: career; carrier (context-dependent) 彼女はキャリアウーマンとして成功している。(She has succeeded as a career woman.) 愛顧 (あいこ): patronage, favor いつもご愛顧ありがとうございます。(Thank you for your continued patronage.) 愛想 (あいそ / あいそう): friendliness, sociability 彼女は誰にでも愛想がいい。(She\u0026rsquo;s friendly to everyone.) 朝方 (あさがた): early morning 朝方に雨が降ったようだ。(It seems it rained in the early morning.) 仇 (あだ): foe, enemy; revenge 父の仇を討（う）つ。(Avenge my father\u0026rsquo;s death.) 圧勝 (あっしょう): overwhelming victory チームは圧勝で決（けっ）勝（しょう）に進（すす）んだ。(The team advanced to the finals with an overwhelming victory.) 案の定 (あんのじょう): just as expected 案の定、彼は遅刻した。(As expected, he was late.) 息抜き (いきぬき): breather, relaxation 息抜きに散歩した。(I went for a walk to take a break.) 異動 (いどう): job transfer 来月、本（ほん）社（しゃ）に異動することになった。(I will be transferred to the head office next month.) 今にして (いまにして): only now, in hindsight 今にして思えば、あれが分かれ道だった。(Looking back now, that was the turning point.) 嫌気 (いやけ): disgust, weariness 勉強に嫌気が差した。(I got sick of studying.) 受け継ぐ (うけつぐ): to inherit, to succeed 家（か）業（ぎょう）を受け継いだ。(I inherited the family business.) 請け合う (うけあう): to guarantee, to assure 成功は私が請け合います。(I guarantee the success.) 埋める (うめる): to fill, to bury 穴（あな）を埋めた。(I filled the hole.) 紆余曲折 (うよきょくせつ): twists and turns, complications 紆余曲折を経（へ）て成功した。(I succeeded after many twists and turns.) 縁起物 (えんぎもの): good luck charm 招（まね）き猫（ねこ）は縁起物として人気がある。(Maneki-neko is popular as a lucky charm.) 追い出す (おいだす): to expel, to drive out 部屋から追い出された。(I was driven out of the room.) 22 Your browser does not support the audio element. SHOW CONTENTS 大筋 (おおすじ): outline, general gist 話の大筋は理解できた。(I understood the general gist of the story.) 大空 (おおぞら): the sky, vast sky 大空に飛行機雲（くも）が伸（の）びている。(A contrail stretches across the vast sky.) 冒す (おかす): to brave (danger), to risk 命を冒してまで助（たす）けようとした。(He risked his life to save them.) 階層 (かいそう): hierarchy, class, layer 社会の階層構（こう）造（ぞう）について学（まな）ぶ。(We learn about the hierarchical structure of society.) 介入 (かいにゅう): intervention 政府が市（し）場（じょう）に介入した。(The government intervened in the market.) 概念 (がいねん): concept, notion 自由という概（がい）念（ねん）は人によって異（こと）なる。(The concept of freedom differs by person.) 顔負け (かおまけ): being put to shame 彼の料理の腕（うで）前（まえ）はプロも顔負けだ。(His cooking skills put even professionals to shame.) 屈む (かがむ): to crouch, to bend down 子供が地（じ）面（めん）に屈んで遊んでいた。(The child was crouching and playing on the ground.) 隔日 (かくじつ): every other day 隔日でごみを回（かい）収（しゅう）する。(Garbage is collected every other day.) 託ける (かこつける): to use as an excuse 忙しさに託けて連絡を怠（おこた）った。(I neglected to contact them, using busyness as an excuse.) 活性化 (かっせいか): revitalization, activation 地（ち）域（いき）経済の活性化が求（もと）められている。(Revitalization of the local economy is needed.) 加味 (かみ): to take into account, to add (ingredients, factors) 諸（しょ）事（じ）情（じょう）を加味して判断する。(I judge after taking all circumstances into account.) 慣習 (かんしゅう): custom, convention 昔の慣習が今も残っている。(Old customs still remain today.) 感性 (かんせい): sensitivity, sensibility 芸（げい）術（じゅつ）に対する感性が豊（ゆた）かだ。(She has a rich sensibility for art.) 勘当 (かんどう): disowning, being cut off (from a family) 父に勘当されて家を出た。(I was disowned by my father and left home.) 慣用 (かんよう): common usage, customary 慣用表（ひょう）現（げん）を覚（おぼ）えると会（かい）話（わ）が自然になる。(Learning idiomatic expressions makes conversation more natural.) 気兼ね (きがね): hesitation, constraint 気（き）兼（が）ねせずにくつろいでください。(Please relax without hesitation.) 貫禄 (かんろく): presence, dignity 部（ぶ）長（ちょう）は貫（かん）禄（ろく）がある。(The department manager has an air of authority.) 淡い (あわい): pale, faint, fleeting 淡いピンクの花が咲（さ）いていた。(Pale pink flowers were blooming.) 生きる (いきる): to live 何のために生きるのかを考える。(I think about what I live for.) 23 Your browser does not support the audio element. SHOW CONTENTS 決まって (きまって): always, without fail 彼は決まって朝7時に起きる。(He always wakes up at 7 a.m.) 決まり文句 (きまりもんく): set phrase, cliché 「頑（がん）張（ば）ってね」はよくある決まり文句だ。(“Do your best” is a common cliché.) 気味悪い (きみわるい): creepy, eerie 気味悪い音が聞こえた。(I heard a creepy sound.) 気難しい (きむずかしい): hard to please, moody 祖父は気難しい性格だ。(My grandfather is hard to please.) 究明 (きゅうめい): investigation, clarification 事故の原因を究明する。(We investigate the cause of the accident.) 器量 (きりょう): looks, ability, talent 彼女は器量も性（せい）格（かく）も良い。(She has both looks and a good personality.) 煌びやか (きらびやか): dazzling, glittering 煌びやかな衣（い）装（しょう）を身（み）にまとう。(She wears a dazzling costume.) 区切り (くぎり): division, end, punctuation ここで一つの区切りをつけよう。(Let’s make a break here.) 傾斜 (けいしゃ): slope, tilt, inclination 傾斜のある道を登る。(We climb a sloped road.) 景品 (けいひん): prize, giveaway 抽（ちゅう）選（せん）で景品が当たった。(I won a prize in a lottery.) 原告 (げんこく): plaintiff 原告は損（そん）害（がい）賠（ばい）償（しょう）を求（もと）めている。(The plaintiff is seeking compensation.) 皇居 (こうきょ): Imperial Palace 観光で皇居を訪（おとず）れた。(We visited the Imperial Palace as tourists.) 香辛料 (こうしんりょう): spices 香辛料をたっぷり使った料理だ。(This dish uses a lot of spices.) 厚生 (こうせい): welfare, public health 厚生労（ろう）働（どう）省（しょう）は健康促（そく）進（しん）を呼びかけている。(The Ministry of Health, Labour and Welfare is promoting public health.) 合弁 (ごうべん): joint venture 外（がい）国（こく）企（き）業（ぎょう）と合弁会社を設（せつ）立（りつ）した。(We established a joint venture with a foreign company.) 志 (こころざし): will, ambition, aspiration 志を高く持つことが大切だ。(It’s important to have high aspirations.) 後日 (ごじつ): at a later date 後日、詳（くわ）しく説明します。(I will explain in detail at a later date.) 拗れる (こじれる): to become complicated, to get worse 話が拗れて交（こう）渉（しょう）が中（ちゅう）断（だん）した。(The discussion got complicated and negotiations broke off.) 懲りる (こりる): to learn one’s lesson, to be discouraged by 失（しっ）敗（ぱい）に懲りて次は慎（しん）重（ちょう）にした。(I learned from my failure and was more cautious next time.) 根源 (こんげん): root, source, origin 問題の根源を探（さぐ）る。(We search for the root of the problem.) 24 Your browser does not support the audio element. SHOW CONTENTS 相手取る (あいてどる): to sue, to take someone to court 会社は顧（こ）客（きゃく）を相手取って訴（そ）訟（しょう）を起（お）こした。(The company sued the customer.) 合間 (あいま): interval, break, spare moment 勉強の合間に散（さん）歩（ぽ）した。(I took a walk during a break from studying.) 明かす (あかす): to reveal, to disclose 秘密を明かしてしまった。(I ended up revealing the secret.) 悪徳 (あくとく): immorality, unethical behavior 悪徳商（しょう）法（ほう）に注（ちゅう）意（い）してください。(Be careful of unethical business practices.) 垢 (あか): dirt, grime, dead skin お風（ふ）呂（ろ）に入（はい）って垢を落（お）とした。(I took a bath and scrubbed off the grime.) あっさり: easily, lightly, without fuss 彼は試合にあっさり負（ま）けた。(He lost the match easily.) 味わい (あじわい): flavor, taste, charm この料理は深い味わいがある。(This dish has a rich flavor.) 褪せる (あせる): to fade (color), to lose brilliance 日に当たって色が褪せた。(The color faded in the sun.) 危なげない (あぶなげない): safe-looking, steady 危なげない運（うん）転（てん）で安心した。(His steady driving reassured me.) 穴埋め (あなうめ): filling in, gap-filling 穴埋め問題を解（と）いてください。(Please solve the fill-in-the-blank questions.) 斡旋 (あっせん): mediation, arrangement 求（きゅう）人（じん）の斡旋を受けた。(I received a job placement referral.) 跡継ぎ (あとつぎ): heir, successor 跡継ぎとして会社を継（つ）いだ。(I took over the company as the successor.) 油絵 (あぶらえ): oil painting 趣味で油絵を描（えが）いている。(I paint oil paintings as a hobby.) あらかた: mostly, almost all 仕事はあらかた終わった。(The work is mostly done.) 雨足 (あまあし): intensity of rainfall 雨足が強くなってきた。(The rain is getting heavier.) 安静 (あんせい): rest, staying quiet しばらく安静が必要です。(You need to rest for a while.) 当て (あて): aim, expectation, reliance この計画に当てはない。(There’s no specific aim for this plan.) 行き先 (いきさき): destination 行き先を教えてください。(Please tell me your destination.) 幾つか (いくつか): several, a few 幾つかの案を提（てい）示（じ）した。(I presented several proposals.) 石 (いし): stone, rock 庭に大きな石がある。(There is a large stone in the garden.) 25 Your browser does not support the audio element. SHOW CONTENTS 移行 (いこう): transition, switch 新しいシステムへの移行が進んでいる。(The transition to the new system is underway.) 雨具 (あまぐ): rain gear 念（ね）のために雨具を持って行こう。(Let’s bring rain gear just in case.) 今や (いまや): now (emphasizing contrast with the past) 彼は今や有名な俳（はい）優（ゆう）だ。(He is now a famous actor.) 操る (あやつる): to manipulate, to operate 彼は数（すう）ヶ（か）国（こく）語（ご）を自（じ）由（ゆう）に操る。(He fluently speaks several languages.) 入り用 (いりよう): need, necessity, expense 今月は何かと入り用が多い。(There are many expenses this month.) 危ぶむ (あやぶむ): to fear, to have doubts 彼の成功は危ぶまれていた。(His success was in doubt.) 内幕 (うちまく): inside story, behind-the-scenes 事（じ）件（けん）の内幕が暴（あば）かれた。(The inside story of the case was revealed.) 荒らす (あらす): to devastate, to damage 泥（どろ）棒（ぼう）が部屋を荒らしていった。(The thief ransacked the room.) 疎い (うとい): unfamiliar, ignorant 私は政（せい）治（じ）に疎いです。(I’m not familiar with politics.) 荒っぽい (あらっぽい): rough, violent 荒っぽい言（こと）葉（ば）は控（ひか）えましょう。(Let’s avoid rough language.) 威嚇 (いかく): threat, intimidation 犬が威嚇して吠（ほ）えている。(The dog is barking threateningly.) 閲覧 (えつらん): viewing, inspection 書（しょ）類（るい）は自（じ）由（ゆう）に閲覧できます。(You may freely view the documents.) 育成 (いくせい): training, nurturing 若（わか）手（て）社員の育成に力（ちから）を入れている。(We are focusing on training young employees.) 潔い (いさぎよい): gracious, manly, without regret 彼は潔く負（ま）けを認（みと）めた。(He admitted defeat graciously.) 追い込む (おいこむ): to corner, to drive into 彼を絶（ぜっ）体（たい）絶（ぜつ）命（めい）の状（じょう）況（きょう）に追い込んだ。(He was driven into a desperate situation.) 衣装 (いしょう): costume, outfit 舞（ぶ）台（たい）の衣装がとても豪（ごう）華（か）だった。(The stage costumes were very elaborate.) 大柄 (おおがら): large build, large pattern 彼は大柄な体（たい）格（かく）をしている。(He has a large build.) 移植 (いしょく): transplant, implantation 臓（ぞう）器（き）移植の手（しゅ）術（じゅつ）が行（おこな）われた。(An organ transplant operation was performed.) 至る (いたる): to reach (a stage or place) 合（ごう）意（い）に至るまで長い議（ぎ）論（ろん）があった。(There were long discussions before reaching an agreement.) 従兄弟 (いとこ): cousin (male) 従兄弟と夏休みに遊んだ。(I played with my cousin during summer vacation.) 26 Your browser does not support the audio element. SHOW CONTENTS 大げさ (おおげさ): exaggerated, dramatic 彼はいつも話を大げさにする。(He always exaggerates things.) 挑む (いどむ): to challenge, to take on 彼は世界記録に挑んだ。(He challenged the world record.) 親孝行 (おやこうこう): filial piety, being a good son/daughter 親孝行したいときに親はなし。(When you want to be filial, your parents are no longer there.) 請け負う (うけおう): to undertake, to contract その仕事は私が請け負います。(I’ll take on that job.) 温和 (おんわ): mild, gentle 彼は温和な性格の持（も）ち主（ぬし）だ。(He has a gentle personality.) 腕前 (うでまえ): skill, ability 彼の料理の腕前はプロ並（な）みだ。(His cooking skills are like a pro\u0026rsquo;s.) カウンセラー: counselor 学校にはカウンセラーが常（じょう）駐（ちゅう）している。(There is a counselor stationed at the school.) 鵜呑み (うのみ): swallowing whole (literally or figuratively), accepting without question 噂（うわさ）を鵜呑みにしてはいけない。(You shouldn\u0026rsquo;t take rumors at face value.) かき乱す (かきみだす): to disturb, to throw into confusion 彼の発（はつ）言（げん）が会議をかき乱した。(His comment disrupted the meeting.) 上向く (うわむく): to improve, to look up 景（けい）気（き）が上向いてきた。(The economy has started to look up.) 箇条書き (かじょうがき): itemization, bullet points 意見を箇条書きでまとめてください。(Please list your opinions in bullet points.) 横着 (おうちゃく): laziness, cheekiness 横着しないでちゃんとやりなさい。(Stop being lazy and do it properly.) 合致 (がっち): agreement, conformity 彼の証言は事（じ）実（じつ）と合致している。(His testimony matches the facts.) 陥る (おちいる): to fall into (a trap, condition) パニックに陥るな。(Don’t fall into panic.) 敵う (かなう): to match, to compete with; to bear (e.g. the heat) 彼には敵わない。(I can’t match him.) 今日は暑くて敵わない。(It’s unbearably hot today.) 自ずから (おのずから): naturally, of itself 努（ど）力（りょく）すれば自ずから道は開（ひら）ける。(If you work hard, the path will naturally open.) 醸し出す (かもしだす): to create (a mood, atmosphere) 落（お）ち着（つ）いた雰囲気を醸し出している。(It creates a calm atmosphere.) 思惑 (おもわく): expectation, intention, speculation 彼の思惑が外（はず）れた。(His expectations were off.) 涸れる (かれる): to dry up, to run out 井（い）戸（ど）が涸れてしまった。(The well has dried up.) 換算 (かんさん): conversion, calculation 外（がい）貨（か）を円に換算する。(Convert foreign currency into yen.) 27 Your browser does not support the audio element. SHOW CONTENTS 概説 (がいせつ): general overview, outline 歴（れき）史（し）の概説を読む。(Read an overview of history.) 気心 (きごころ): temperament, nature 彼とは気心が知れている。(We understand each other well.) 快楽 (かいらく): pleasure, delight 快楽を追（お）い求（もと）める。(Pursue pleasure.) 議事堂 (ぎじどう): parliament building, assembly hall 議事堂の前でデモが行（おこな）われた。(A protest took place in front of the parliament building.) 機種 (きしゅ): model (of a machine, esp. electronics) 新しいスマホの機種を選ぶ。(Choose a new phone model.) 犠牲 (ぎせい): sacrifice, victim 自分の時間を犠牲にして働く。(Sacrifice one\u0026rsquo;s time for work.) 相次いで（あいついで）: one after the other; successively 有名企業の不（ふ）祥（しょう）事（じ）が相次いで明（あき）らかになった。（A series of scandals involving well-known companies came to light.） 希薄 (きはく): thin, weak (e.g., atmosphere, emotion) 彼は責任感が希薄だ。(He has a weak sense of responsibility.) 課する (かする): to impose (a tax, duty, task) 重（おも）い税を課される。(Be burdened with heavy taxes.) 協調 (きょうちょう): cooperation, coordination チームの協調が必要だ。(Team coordination is necessary.) 形作る (かたちづくる): to form, to shape 考（かんが）え方（かた）が人（じん）格（かく）を形作る。(Thinking forms personality.) 挫ける (くじける): to be disheartened, to lose heart 失（しっ）敗（ぱい）しても挫けるな。(Don’t lose heart even if you fail.) 合併 (がっぺい): merger, amalgamation ２つの会社が合併した。(The two companies merged.) 屈指 (くっし): leading, preeminent 彼は屈指のプレーヤーだ。(He’s one of the top players.) 花粉 (かふん): pollen 花粉アレルギーがひどい。(I have severe pollen allergies.) 屈する (くっする): to yield, to give in 圧（あつ）力（りょく）に屈しない。(Don’t give in to pressure.) 頑固 (がんこ): stubborn 彼は本当に頑固だ。(He’s really stubborn.) 敬遠 (けいえん): keeping at a distance, avoidance 難しい話（わ）題（だい）は敬遠されがちだ。(Difficult topics tend to be avoided.) 完備 (かんび): fully equipped このホテルは設（せつ）備（び）が完備している。(This hotel is fully equipped.) 蹴飛ばす (けとばす): to kick away, to kick hard ボールを蹴飛ばした。(Kicked the ball away.) 28 Your browser does not support the audio element. SHOW CONTENTS 飢饉 (ききん): famine 昔、この地域は大きな飢饉に見（み）舞（ま）われた。(This region suffered a great famine in the past.) 下落 (げらく): decline, fall (in price or value) 株（かぶ）価（か）が急（きゅう）激（げき）に下落した。(Stock prices dropped sharply.) 減益 (げんえき): decrease in profit 不（ふ）景（けい）気（き）の影（えい）響（きょう）で減益となった。(Due to the recession, profits decreased.) 気障 (きざ): affected, pretentious 彼の話し方は少し気障だと思う。(I think his way of speaking is a bit pretentious.) 権限 (けんげん): authority, jurisdiction この決（けっ）定（てい）は課長の権限を超（こ）えている。(This decision exceeds the manager\u0026rsquo;s authority.) 気性 (きしょう): temperament, disposition 彼は気性が激（はげ）しいので、注意が必要だ。(He has a fiery temper, so be cautious.) 築く (きずく): to build, to establish 二人は信（しん）頼（らい）関（かん）係（けい）を築いてきた。(They have built a relationship of trust.) 健勝 (けんしょう): good health (formal) ご健勝のこととお喜（よろこ）び申（もう）し上（あ）げます。(I am pleased to hear you are in good health.) 帰省 (きせい): returning home (especially for holidays) 正（しょう）月（がつ）には実（じっ）家（か）に帰省する予定です。(I plan to return home for New Year’s.) 検証 (けんしょう): verification, inspection 実（じっ）験（けん）結（けっ）果（か）を検証する必要がある。(We need to verify the experiment results.) 気立て (きだて): disposition, nature (especially good) 彼女はとても気立てのいい人だ。(She is a very kind-hearted person.) 窮乏 (きゅうぼう): poverty, destitution 戦後、多くの人が窮乏生（せい）活（かつ）を送（おく）った。(Many people lived in poverty after the war.) 急落 (きゅうらく): sudden fall (in prices, etc.) 円の価（か）値（ち）が急落した。(The value of the yen fell suddenly.) 倹約 (けんやく): frugality, thrift 倹約して生（せい）活（かつ）費（ひ）を抑（おさ）えている。(I’m being frugal to cut down on living expenses.) 教職 (きょうしょく): teaching profession 教職に就（つ）くことが夢（ゆめ）だった。(It was my dream to become a teacher.) 去就 (きょしゅう): one’s course of action, position 彼の去就が注（ちゅう）目（もく）されている。(Everyone is watching his next move.) 後援 (こうえん): support, sponsorship このイベントは市の後援を受けている。(This event is supported by the city.) 講習 (こうしゅう): course, training session 新（しん）人（じん）向けの講習を受けた。(I attended a training session for new employees.) 相席 (あいせき): sharing a table with someone (usually a stranger) 混（こん）雑（ざつ）していたので、相席させられた。(It was crowded, so I had to share a table.) 祈る (いのる): to pray, to wish あなたの成功を心（こころ）から祈っています。(I sincerely wish for your success.) 29 Your browser does not support the audio element. SHOW CONTENTS 悪者 (わるもの): villain, bad person 映画の中で彼は悪者の役（やく）を演（えん）じた。(He played the role of a villain in the movie.) 朝市 (あさいち): morning market 日曜日に朝市で野菜を買った。(I bought vegetables at the morning market on Sunday.) 足場 (あしば): foothold, scaffold, foundation 工（こう）事（じ）現（げん）場（ば）ではしっかりと足場が組（く）まれていた。(A sturdy scaffold was built at the construction site.) 値する (あたいする): to be worth, to deserve その勇（ゆう）気（き）は賞（しょう）賛（さん）に値する。(That courage deserves praise.) 粗筋 (あらすじ): outline, summary, plot 映画の粗筋を簡（かん）単（たん）に説明してください。(Please briefly explain the plot of the movie.) 遺棄 (いき): abandonment, desertion 公園で遺棄された動物が見つかった。(An abandoned animal was found in the park.) 経緯 (けいい): details, circumstances, sequence of events 問題が起きた経緯を説明してください。(Please explain how the problem occurred.) 意向 (いこう): intention, idea 上（じょう）司（し）の意向に従（したが）って計（けい）画（かく）を変（へん）更（こう）した。(We changed the plan according to the boss’s intentions.) 炒める (いためる): to stir-fry 野菜を油（あぶら）で炒めてください。(Please stir-fry the vegetables in oil.) 一面 (いちめん): one side, one aspect 彼の優しい一面を初めて見た。(I saw his gentle side for the first time.) 一見 (いっけん): at first glance 一見簡単そうに見えるが、実（じつ）は難しい。(It looks easy at first glance, but it’s actually hard.) 陰湿 (いんしつ): gloomy, malicious, insidious 陰湿ないじめが問題になっている。(Malicious bullying is becoming a serious problem.) 受け身 (うけみ): passive attitude; passive voice 彼はいつも受け身な態（たい）度（ど）を取る。(He always takes a passive attitude.) 裏返し (うらがえし): inside out, upside down シャツが裏返しになっているよ。(Your shirt is inside out.) 上役 (うわやく): superior, boss 上役の許（きょ）可（か）を得（え）る必要がある。(You need your superior’s approval.) 会得 (えとく): mastery, understanding 長（なが）年（ねん）の努（ど）力（りょく）で技（ぎ）術（じゅつ）を会（え）得（とく）した。(I mastered the skill through years of effort.) 縁談 (えんだん): marriage proposal, marriage arrangement 両親が縁談を進めている。(My parents are arranging a marriage.) 押し付ける (おしつける): to force on someone, to push onto 自分の意見を他（た）人（にん）に押（お）し付（つ）けないで。(Don’t force your opinion on others.) 糸 (いと): thread, string 針（はり）に糸を通（とお）した。(I threaded the needle.) 伺う (うかがう): to ask, to inquire (humble); to visit (humble) 明日、お宅（たく）に伺ってもよろしいでしょうか。(May I visit your home tomorrow?) 30 Your browser does not support the audio element. SHOW CONTENTS お節介 (おせっかい): meddling, nosiness 彼の親（しん）切（せつ）は時にお節介に感じる。(His kindness sometimes feels like meddling.) 落ち度 (おちど): fault, mistake 私にも落ち度があったと認（みと）めます。(I admit that I was also at fault.) お供 (おとも): companion, attendance 彼女は社長のお供（とも）をして出（しゅっ）張（ちょう）に行った。(She accompanied the president on a business trip.) 怯える (おびえる): to be frightened, to be scared 雷（かみなり）の音に犬が怯えている。(The dog is frightened by the sound of thunder.) 親方 (おやかた): master, boss (in crafts, sumo, etc.) 親（おや）方（かた）から技（ぎ）術（じゅつ）を学（まな）んだ。(I learned the craft from my master.) 織る (おる): to weave 美しい布（ぬの）を手で織る。(Weave beautiful cloth by hand.) 介護 (かいご): nursing care 高（こう）齢（れい）の母を介護している。(I’m taking care of my elderly mother.) 害する (がいする): to harm, to damage 健康を害する恐（おそ）れがある。(It may harm your health.) 快晴 (かいせい): clear weather 今日は快晴で気持ちがいい。(It’s clear and feels great today.) 買い求める (かいもとめる): to purchase, to buy お土産を駅で買い求（もと）めた。(I bought souvenirs at the station.) 顔立ち (かおだち): facial features 彼女は整（ととの）った顔立ちをしている。(She has well-balanced facial features.) 格差 (かくさ): disparity, gap 所（しょ）得（とく） の格差が拡（かく）大（だい）している。(The income gap is widening.) 革新 (かくしん): innovation, reform 技（ぎ）術（じゅつ）革新が進（すす）んでいる。(Technological innovation is advancing.) 過敏 (かびん): hypersensitive, overly sensitive 花（か）粉（ふん）に過敏な人が多い。(Many people are hypersensitive to pollen.) 交わす (かわす): to exchange (greetings, promises, etc.) 笑（え）顔（がお）で挨（あい）拶（さつ）を交わした。(We exchanged greetings with a smile.) 勘ぐる (かんぐる): to suspect, to imagine (usually bad things) 彼の行（こう）動（どう）を勘ぐってしまう。(I can’t help but suspect his behavior.) 肝心 (かんじん): essential, crucial 肝心なときにミスをした。(I made a mistake at a crucial moment.) 感電 (かんでん): electric shock 感電しないように注意してください。(Be careful not to get an electric shock.) 受付係 (うけつけがかり): receptionist 受付係が来（らい）客（きゃく）を案（あん）内（ない）した。(The receptionist guided the visitor.) 植える (うえる): to plant 庭に花を植えた。(I planted flowers in the garden.) 31 Your browser does not support the audio element. SHOW CONTENTS 幹部 (かんぶ): executive, management 彼は会社の幹部に昇（しょう）進（しん）した。(He was promoted to an executive position.) 肝要 (かんよう): essential, vital 冷静さを保（たも）つことが肝要だ。(Staying calm is essential.) 還暦 (かんれき): 60th birthday 父の還暦を家族で祝（いわ）った。(We celebrated my father\u0026rsquo;s 60th birthday.) 気遣う (きづかう): to worry about, to care for 母はいつも私の体（たい）調（ちょう）を気遣ってくれる。(My mother always cares about my health.) 享受 (きょうじゅ): enjoyment, receiving (a benefit) 私たちは自（じ）由（ゆう）を享受している。(We enjoy our freedom.) 矯正 (きょうせい): correction, therapy (e.g., orthodontic or behavioral) 歯（は）並（なら）びを矯正している。(I’m getting my teeth straightened.) 仰天 (ぎょうてん): being greatly surprised そのニュースに仰天した。(I was shocked by the news.) 気力 (きりょく): willpower, energy 疲（つか）れて気力が出ない。(I’m so tired I have no willpower.) 均質 (きんしつ): uniformity, homogeneity 均質な製（せい）品（ひん）を作（つく）ることが求（もと）められる。(Producing uniform products is required.) 括る (くくる): to tie up, to categorize まとめて一つに括る。(Tie everything into one bundle.) 口ずさむ (くちずさむ): to hum, to sing to oneself 好きな曲（きょく）を口ずさむ。(I hum my favorite song.) 朽ちる (くちる): to rot, to decay 木が朽ちて倒（たお）れた。(The tree decayed and fell.) 青写真 (あおじゃしん): blueprint, plan 将（しょう）来（らい）の青写真を描（えが）く。(Draw up a blueprint for the future.) 欺く (あざむく): to deceive, to trick 人を欺いてはいけない。(You shouldn’t deceive people.) 焦る (あせる): to panic, to be in a hurry 試（し）験（けん）前に焦ってしまった。(I panicked before the exam.) あながち: not necessarily (with negative), not entirely 彼の意見もあながち間（ま）違（ちが）いではない。(His opinion isn\u0026rsquo;t entirely wrong.) 誤る (あやまる): to make a mistake 判（はん）断（だん）を誤ってしまった。(I made the wrong decision.) 植える (うえる): to plant 春に花を植える予定だ。(I plan to plant flowers in spring.) 兎 (うさぎ): rabbit 兎は跳（は）ねるのが得（とく）意（い）だ。(Rabbits are good at hopping.) 動く (うごく): to move 機（き）械（かい）が動（うご）かなくなった。(The machine stopped moving.) 32 Your browser does not support the audio element. SHOW CONTENTS あり方 (ありかた): way of being, how things should be 社会のあるべきあり方について議論する。(We discuss how society should ideally function.) 暗殺 (あんさつ): assassination その政（せい）治（じ）家（か）は暗殺の危（き）険（けん）にさらされていた。(The politician was at risk of assassination.) 安楽死 (あんらくし): euthanasia 安楽死の是（ぜ）非（ひ）については議論が分かれる。(Opinions are divided on the ethics of euthanasia.) 粋 (すい): chic, stylish, refined 粋（すい）な着（き）こなしに憧（あこが）れる。(I admire stylish outfits.) 弄る (いじる): to fiddle with, to tamper with スマホを弄って時間を潰（つぶ）す。(I kill time by fiddling with my smartphone.) 移籍 (いせき): transfer (e.g., of a player, employee) 有名な選（せん）手（しゅ）が海（かい）外（がい）チームに移籍した。(The famous player transferred to an overseas team.) いそいそ: cheerfully, excitedly 彼はデートに行くためにいそいそと準（じゅん）備（び）していた。（He was getting ready cheerfully for his date.） 一心 (いっしん): wholeheartedly, with single-minded focus 一心に勉強に取（と）り組（く）む。(I study with complete focus.) 命取り (いのちとり): fatal blow, cause of ruin 小さなミスが命取りになることもある。(A small mistake can sometimes be fatal.) 嫌らしい (いやらしい): unpleasant, lewd, nasty 嫌らしい視（し）線（せん）を感じた。(I felt a creepy gaze.) 異論 (いろん): different opinion, objection その案には異論がある。(I have objections to that proposal.) 入り (いり): income, arrival, flow 今日の店の入りは上（じょう）々だ。(Today\u0026rsquo;s restaurant turnout is good.) 飲用 (いんよう): drinking (usage) この水は飲用できません。(This water is not safe for drinking.) エキス: extract, essence ハーブのエキスが入っている化（け）粧（しょう）品（ひん）。(Cosmetics containing herbal extracts.) 憂える (うれえる): to worry about, to grieve 将（しょう）来（らい）を憂える声が多い。(Many people worry about the future.) 横領 (おうりょう): embezzlement 社員が会社の資（し）金（きん）を横領した。(An employee embezzled company funds.) オーソドックス: orthodox, traditional 彼のプレゼンはオーソドックスなスタイルだった。（His presentation followed a traditional style.） 移す (うつす): to transfer, to move, to infect 本社を大阪から東京に移す。(Move the head office from Osaka to Tokyo.) 内側 (うちがわ): inside, inner part 靴の内側に名前を書いておく。(Write your name inside the shoes.) 写す (うつす): to copy, to photograph ノートを写させてもらった。(I was allowed to copy the notes.) 33 Your browser does not support the audio element. SHOW CONTENTS 驕る (おごる): to be arrogant 成功したからといって驕ってはいけない。 (You shouldn\u0026rsquo;t get arrogant just because you succeeded.) 煽てる (おだてる): to flatter, to egg on 子供を煽てて歌（うた）わせた。 (I flattered the child into singing.) 思う存分 (おもうぞんぶん): to one\u0026rsquo;s heart\u0026rsquo;s content 思う存分楽しんでください。 (Please enjoy yourself to your heart\u0026rsquo;s content.) 介抱 (かいほう): nursing, care 怪（け）我（が）人（にん）を丁（てい）寧（ねい）に介抱した。 (He carefully nursed the injured person.) 姦しい (かしましい): noisy, clamorous 教室が姦しい女（じょ）子（し）たちで騒（さわ）がしかった。 (The classroom was noisy with loud girls.) 仮に (かりに): supposing, temporarily 仮に彼が来なかったらどうする？ (Supposing he doesn\u0026rsquo;t come, what will we do?) 寛容 (かんよう): tolerance, broad-mindedness 彼は失（しっ）敗（ぱい）に対（たい）して寛容だった。 (He was tolerant of failure.) 元来 (がんらい): originally, by nature 彼は元来真（ま）面（じ）目（め）な性格だ。 (He is serious by nature.) 陥落 (かんらく): fall (of a city, etc.), surrender 城（しろ）は一（ひと）晩（ばん）で陥落した。 (The castle fell in one night.) 危害 (きがい): harm, injury 動（どう）物（ぶつ）に危害を加（くわ）えてはいけない。 (You must not harm animals.) 軌道 (きどう): orbit, track 計（けい）画（かく）がようやく軌道に乗った。 (The plan finally got on track.) 凶作 (きょうさく): bad harvest 今年は凶（きょう）作（さく）で米（こめ）が高くなる。 (This year’s bad harvest will raise rice prices.) 郷愁 (きょうしゅう): nostalgia 故（こ）郷（きょう）の歌に郷愁を感じた。 (I felt nostalgic hearing the song from my hometown.) 境地 (きょうち): state of mind, mental state 彼は悟（さと）りの境地に達（たっ）した。 (He reached a state of enlightenment.) 秋晴れ (あきばれ): clear autumn weather 秋晴れの空が広がっていた。 (A clear autumn sky spread out above.) 暴く (あばく): to expose, to uncover 彼の嘘（うそ）が暴かれた。 (His lie was exposed.) 改まる (あらたまる): to be renewed, to be formal 彼の態（たい）度（ど）が急（きゅう）に改まった。 (His attitude suddenly became formal.) 裏 (うら): back, reverse side 紙（かみ）の裏にメモが書いてあった。 (There was a note written on the back of the paper.) 羨ましい (うらやましい): envious, jealous 彼の才（さい）能（のう）が羨ましい。 (I’m envious of his talent.) 植わる (うわる): to be planted 庭（にわ）には桜の木が植（う）わっている。 (Cherry trees are planted in the garden.) 34 Your browser does not support the audio element. SHOW CONTENTS 言い渡す (いいわたす): to sentence, to declare 裁（さい）判（ばん）官（かん）は被（ひ）告（こく）に有（ゆう）罪（ざい）判決を言い渡した。 (The judge declared the defendant guilty.) 行き詰まる (いきづまる): to reach an impasse, to get stuck 交（こう）渉（しょう）が行き詰まってしまった。 (The negotiations came to a standstill.) 憩い (いこい): rest, relaxation 公園は市（し）民（みん）の憩いの場だ。 (The park is a place of rest for the citizens.) 板挟み (いたばさみ): caught in the middle 親と上司の間で板挟みになっている。 (I’m caught between my parents and my boss.) 一番乗り (いちばんのり): first to arrive 会場に一番乗りしたのは彼だった。 (He was the first to arrive at the venue.) 迂回 (うかい): detour 工（こう）事（じ）中（ちゅう）なので迂回してください。 (Please take a detour due to construction.) 右折 (うせつ): right turn 次の交（こう）差（さ）点（てん）で右折してください。 (Please turn right at the next intersection.) 内訳 (うちわけ): breakdown, itemization 支（し）出（しゅつ）の内訳を示（しめ）してください。 (Please show the breakdown of expenses.) 俯く (うつむく): to look down, to cast one\u0026rsquo;s eyes downward 彼女は恥ずかしそうに俯いた。 (She looked down shyly.) 浮気 (うわき): cheating, unfaithfulness 彼は浮気が原（げん）因（いん）で離（り）婚（こん）した。 (He got divorced due to cheating.) 獲物 (えもの): prey, catch 猟（りょう）師（し）は大きな獲物を仕（し）留（と）めた。 (The hunter caught big prey.) 炎症 (えんしょう): inflammation 傷（きず）口（ぐち）が炎症を起（お）こしている。 (The wound is inflamed.) 演じる (えんじる): to perform, to play a role 彼は映画で主（しゅ）人（じん）公（こう）を演じた。 (He played the lead role in the movie.) 円満 (えんまん): harmonious, amicable 二（ふた）人（り）は円満に別（わか）れた。 (They parted ways amicably.) 大口 (おおぐち): large order, big mouth 会社は大口の注文を受けた。 (The company received a large order.) 押し出す (おしだす): to push out, to project 彼はアイデアを強く押し出した。 (He strongly pushed his idea.) オペラ: opera 昨（さく）夜（や）、素（す）晴（ば）らしいオペラを観（み）た。 (I watched a wonderful opera last night.) 思い付き (おもいつき): idea, inspiration 彼の計（けい）画（かく）は単（たん）なる思い付きに過ぎない。 (His plan is just a spur-of-the-moment idea.) 折 (おり): occasion, time またの折にお会いしましょう。 (Let’s meet again on another occasion.) 売れる (うれる): to sell well この商品は非（ひ）常（じょう）によく売れている。 (This product is selling very well.) 35 Your browser does not support the audio element. SHOW CONTENTS 改修 (かいしゅう): renovation, repair 古いビルを全（ぜん）面（めん）的（てき）に改修した。 (The old building was completely renovated.) 外泊 (がいはく): staying out overnight 昨日は友達の家に外泊した。 (I stayed over at a friend\u0026rsquo;s house last night.) 回避 (かいひ): avoidance 危険（きけん）を回避するために別のルートを選（えら）んだ。 (We chose a different route to avoid danger.) 核家族 (かくかぞく): nuclear family 日本では核家族化が進んでいる。 (Nuclear families are increasing in Japan.) 掛け (かけ): on credit, hanging 彼は食（しょく）事（じ）代（だい）を掛けで払った。 (He paid for the meal on credit.) 霞む (かすむ): to become hazy, to be blurred 山が霧（きり）で霞んで見えない。 (The mountain is hidden in the mist.) 傍ら (かたわら): beside, while doing something 勉強の傍らアルバイトをしている。 (I work part-time while studying.) 画期的 (かっきてき): groundbreaking, revolutionary それは画期的な発（はつ）明（めい）だった。 (It was a groundbreaking invention.) 加盟 (かめい): affiliation, joining (an organization) 日本はその条（じょう）約（やく）に加盟している。 (Japan is a member of that treaty.) 閑古鳥が鳴く (かんこどりがなく): to be deserted, no customers 平日の昼間は店に閑古鳥が鳴いている。 (The shop is deserted during weekday afternoons.) 頑丈 (がんじょう): sturdy, solid この机はとても頑丈だ。 (This desk is very sturdy.) 慣例 (かんれい): custom, convention 慣例に従（したが）って式（しき）が行（おこな）われた。 (The ceremony followed customary practices.) 木耳 (きくらげ): wood ear mushroom 中（ちゅう）華（か）料（りょう）理（り）によく木耳が使われる。 (Wood ear mushrooms are often used in Chinese cuisine.) 規制 (きせい): regulation 政（せい）府（ふ）は新しい規制を導（どう）入（にゅう）した。 (The government introduced new regulations.) 既成 (きせい): established 既成の概（がい）念（ねん）にとらわれない。 (We are not bound by preconceived notions.) 機転 (きてん): quick thinking 彼の機転で事故を防（ふせ）げた。 (His quick thinking prevented the accident.) 決め付ける (きめつける): to assume, to label 最（さい）初（しょ）から犯（はん）人（にん）と決め付けないで。 (Don’t assume he’s the culprit from the beginning.) 規約 (きやく): rules, agreement 規約に違（い）反（はん）すると罰（ばっ）せられる。 (You’ll be penalized if you violate the rules.) 海老 (えび): shrimp 海老の天ぷらが好きだ。 (I like shrimp tempura.) 偉い (えらい): admirable, great 彼は本当に偉い人だ。 (He is truly a great person.) 36 Your browser does not support the audio element. SHOW CONTENTS 共存 (きょうぞん): coexistence 人間と自然が共存する社会を目指（めざ）す。 (We aim for a society where humans and nature coexist.) 強敵 (きょうてき): formidable enemy 決（けっ）勝（しょう）戦（せん）の相手は強敵だ。 (The opponent in the final is a formidable enemy.) 吟味 (ぎんみ): scrutiny, close examination 材（ざい）料（りょう）を吟味して料理を作る。 (I carefully select ingredients to cook.) 挫く (くじく): to sprain, to discourage 転（ころ）んで足（あし）首（くび）を挫いた。 (I sprained my ankle when I fell.) 口コミ (くちこみ): word of mouth 口コミで人気が広まった。 (It became popular through word of mouth.) 間柄 (あいだがら): relationship 二人は親（した）しい間柄だ。 (They have a close relationship.) 相槌 (あいづち): responses during conversation 相手の話には相槌を打（う）つのが礼（れい）儀（ぎ）だ。 (It\u0026rsquo;s polite to give responses during the conversation.) 仰ぐ (あおぐ): to look up, to seek (guidance) 空を仰ぐと星（ほし）が輝（かがや）いていた。 (When I looked up, the stars were shining.) 商い (あきない): business, trade 父は長年商いをしてきた。 (My father has been in business for many years.) 浅ましい (あさましい): wretched, shameful 浅ましい行（こう）為（い）に失（しつ）望（ぼう）した。 (I was disappointed by such shameful behavior.) 与る (あずかる): to be given (a role, honor, etc.) 栄（えい）誉（よ）に与り光（こう）栄（えい）です。 (I’m honored to receive such recognition.) 甘える (あまえる): to depend on, to behave like a spoiled child 親に甘えてばかりはいられない。 (I can’t keep relying on my parents.) 宛てる (あてる): to address (a letter) 彼に宛てて手紙を書いた。 (I wrote a letter addressed to him.) 暗算 (あんざん): mental arithmetic 暗算で答えを出す。 (I calculate the answer in my head.) 遺憾 (いかん): regretful, unfortunate 遺憾な結果となった。 (It turned out to be an unfortunate result.) 意気込む (いきごむ): to be enthusiastic 彼は意気込んで試合に臨（のぞ）んだ。 (He faced the match with great enthusiasm.) 異見 (いけん): dissenting opinion 異見を述（の）べる勇（ゆう）気（き）も必要だ。 (You also need courage to express dissent.) いささか: a little, somewhat その説明はいささか不（ふ）十（じゅう）分（ぶん）だ。 (That explanation is somewhat lacking.) 移住 (いじゅう): migration, relocation 都（と）会（かい）から地（ち）方（ほう）へ移住する人が増えている。 (More people are relocating from cities to rural areas.) 至って (いたって): extremely, very 彼は至って真（ま）面（じ）目（め）な人だ。 (He is an extremely serious person.) 37 Your browser does not support the audio element. SHOW CONTENTS 稲光 (いなびかり): lightning 夜（よ）空（ぞら）に稲光が走った。 (Lightning flashed across the night sky.) 迂闊 (うかつ): careless, thoughtless 迂闊にもパスワードを忘れた。 (I carelessly forgot my password.) 受ける (うける): to receive, to undergo 試験を受ける予定です。 (I plan to take the exam.) 打ち破る (うちやぶる): to break through, to defeat ライバルチームを打ち破った。 (We defeated the rival team.) 生まれつき (うまれつき): by nature, since birth 彼は生まれつき目が悪い。 (He has had poor eyesight since birth.) 上書き (うわがき): overwriting ファイルを上書き保存した。 (I saved the file by overwriting it.) 運行 (うんこう): operation (of vehicles) 電車は通（つう）常（じょう）通（どお）り運行している。 (The train is operating as usual.) 運送 (うんそう): transport, shipping 荷物は翌（よく）日（じつ）運送される。 (The package will be shipped the next day.) 侵す (おかす): to invade, to violate 他人の権（けん）利（り）を侵してはならない。 (You must not violate others\u0026rsquo; rights.) 押さえ込む (おさえこむ): to suppress, to contain 火事を初（しょ）期（き）のうちに押さえ込んだ。 (The fire was contained in its early stage.) 幼馴染 (おさななじみ): childhood friend 幼馴染と再（さい）会（かい）した。 (I reunited with my childhood friend.) 衰える (おとろえる): to weaken, to decline 体（たい）力（りょく）が衰えてきた。 (My physical strength has declined.) 折り返し (おりかえし): by return, shortly 折り返し電話します。 (I’ll call you back shortly.) 改革 (かいかく): reform 教（きょう）育（いく）制（せい）度（ど）の改革が進んでいる。 (Education system reforms are underway.) 階級 (かいきゅう): social class, rank 昔は階級によって差（さ）別（べつ）があった。 (There used to be discrimination based on class.) 改訂 (かいてい): revision 教（きょう）科（か）書（しょ）が改訂された。 (The textbook has been revised.) 果敢 (かかん): resolute, bold 果敢な挑（ちょう）戦（せん）を続ける。 (He continues to make bold challenges.) 楽団 (がくだん): musical band, orchestra 地（じ）元（もと）の楽団が演（えん）奏（そう）会（かい）を開（ひら）いた。 (The local orchestra held a concert.) 横断 (おうだん): crossing 横断歩（ほ）道（どう）を渡（わた）るときは注意して。 (Be careful when crossing the pedestrian crossing.) お祝い (おいわい): celebration 昇進のお祝いをする。 (We’ll celebrate the promotion.) 38 Your browser does not support the audio element. SHOW CONTENTS 囲う (かこう): to enclose, to fence in 庭を高い塀（へい）で囲う。 (Enclose the garden with a high fence.) 嵩張る (かさばる): to be bulky この荷物は嵩張って持（も）ち運（はこ）びにくい。 (This luggage is bulky and hard to carry.) 河川 (かせん): rivers この地域は多くの河川に囲（かこ）まれている。 (This area is surrounded by many rivers.) 花粉症 (かふんしょう): hay fever 春になると花粉症がひどくなる。 (My hay fever gets worse in the spring.) 過保護 (かほご): overprotection 過保護に育（そだ）てると自（じ）立（りつ）しにくくなる。 (Overprotective parenting makes independence harder.) 慣行 (かんこう): custom, practice 業（ぎょう）界（かい）の慣行に従（したが）って進（すす）める。 (Proceed according to industry practices.) 関知 (かんち): involvement, concern その件については関知していない。 (I have no involvement in that matter.) 観点 (かんてん): point of view 環（かん）境（きょう）の観点から考える必要がある。 (We need to consider it from an environmental perspective.) 感無量 (かんむりょう): deeply moved 卒（そつ）業（ぎょう）式（しき）で感無量になった。 (I was deeply moved at the graduation ceremony.) 兆し (きざし): sign, indication 景（けい）気（き）回（かい）復（ふく）の兆しが見えてきた。 (Signs of economic recovery are emerging.) 期日 (きじつ): due date, fixed date 期日までに提出してください。 (Please submit it by the due date.) 気まずい (きまずい): awkward, uneasy 言い争（あらそ）いの後、気まずい雰囲気になった。 (Things got awkward after the argument.) 虐待 (ぎゃくたい): abuse 子供への虐待は絶対に許（ゆる）されない。 (Child abuse is absolutely unacceptable.) 休止 (きゅうし): suspension, pause 工（こう）事（じ）は一時休止された。 (The construction was temporarily suspended.) 脅迫 (きょうはく): threat, blackmail 脅迫のメールが届（とど）いた。 (I received a threatening email.) 漁村 (ぎょそん): fishing village 漁村で新鮮な魚を味（あじ）わった。 (I enjoyed fresh fish in the fishing village.) 許容 (きょよう): tolerance, acceptance 誤（ご）差（さ）の範（はん）囲（い）を許容する。 (Accept the margin of error.) 仰向け (あおむけ): face up 仰向けに寝（ね）転（ころ）んだ。 (I lay down facing up.) 憧れる (あこがれる): to long for, to admire 海（かい）外（がい）での生活に憧れている。 (I long for life abroad.) 遠慮 (えんりょ): restraint, reserve 遠慮せずに食べてください。 (Please help yourself without hesitation.) 39 Your browser does not support the audio element. SHOW CONTENTS 浅はか (あさはか): shallow, thoughtless 浅はかな考えで行動して後（こう）悔（かい）した。 (I acted on a thoughtless idea and regretted it.) 合わせて (あわせて): in total, in addition 商（しょう）品（ひん）代（だい）と送（そう）料（りょう）を合わせて5,000円です。 (The product and shipping cost 5,000 yen in total.) 言いよどむ (いいよどむ): to hesitate to say 質問に対して彼は言いよどんだ。 (He hesitated to answer the question.) 一変 (いっぺん): complete change 天気が一変して雨になった。 (The weather changed completely and it started raining.) 陰気 (いんき): gloomy, melancholic 陰気な雰囲気の部屋だった。 (It was a room with a gloomy atmosphere.) ウイルス: virus このソフトはウイルスに感（かん）染（せん）している。 (This software is infected with a virus.) 打ち上げ (うちあげ): launch, party ロケットの打ち上げが成功した。 (The rocket launch was successful.) 恭しい (うやうやしい): respectful, reverent 彼は恭しい態（たい）度（ど）で頭（あたま）を下（さ）げた。 (He bowed with a respectful attitude.) 液晶 (えきしょう): liquid crystal 液晶画（が）面（めん）が割（わ）れてしまった。 (The LCD screen got cracked.) 憂い (うれい): grief, anxiety 彼の顔には深い憂いがあった。 (There was deep sorrow on his face.) 大手 (おおて): major company 彼は大手企業に就（しゅう）職（しょく）した。 (He got a job at a major company.) 厳か (おごそか): solemn, austere 結婚式は厳かな雰囲気で行（おこな）われた。 (The wedding was held in a solemn atmosphere.) 押し上げる (おしあげる): to push up, to raise 強（きょう）風（ふう）が波（なみ）を押し上げた。 (The strong wind pushed up the waves.) 外観 (がいかん): exterior, appearance 建物の外観が美しい。 (The building\u0026rsquo;s exterior is beautiful.) 会心 (かいしん): satisfying, triumphant 会心の笑（え）みを浮（う）かべた。 (He showed a satisfied smile.) 海賊版 (かいぞくばん): pirated edition 海賊版の映画を買うのは違（い）法（ほう）だ。 (Buying pirated movies is illegal.) 賭ける (かける): to bet, to wager 彼は勝（しょう）負（ぷ）にすべてを賭けた。 (He bet everything on the match.) 片思い (かたおもい): unrequited love 彼女への片思いを続けている。 (He continues his unrequited love for her.) 演奏 (えんそう): performance (musical) ピアノの演奏が始まった。 (The piano performance began.) 大型 (おおがた): large-size 大型のトラックが通（とお）った。 (A large truck passed by.) 40 Your browser does not support the audio element. SHOW CONTENTS 適う (かなう): to suit, to conform, to fulfill この靴は私の足にぴったり適う。 (These shoes fit my feet perfectly.) 庇う (かばう): to protect, to defend 彼は妹を庇って叱（しか）られた。 (He got scolded for defending his younger sister.) がんがん: pounding (head), noisily 頭ががんがんして集中できない。 (My head is pounding and I can\u0026rsquo;t concentrate.) 完勝 (かんしょう): complete victory 我（わ）がチームは相手に完勝した。 (Our team won a complete victory over the opponent.) 感触 (かんしょく): texture, feel, impression この布（ぬの）の感触がとてもいい。 (This fabric feels very nice.) 芳しい (かんばしい): fragrant, favorable (often used in the negative) 彼の評（ひょう）判（ばん）はあまり芳しくない。 (His reputation isn\u0026rsquo;t very favorable.) 簡略 (かんりゃく): simplification, brevity 手（て）続（つづ）きは簡略に行われた。 (The procedure was carried out in a simplified manner.) 規定 (きてい): regulation, rule 試験の時間は規定で決められている。 (The exam time is set by regulation.) 脚本 (きゃくほん): script, screenplay 映画の脚本を自分で書いた。 (I wrote the movie\u0026rsquo;s script myself.) 求人 (きゅうじん): job offer, recruitment 新聞に多くの求人広（こう）告（こく）がある。 (There are many job advertisements in the newspaper.) 強制 (きょうせい): coercion, enforcement 参加は強制ではありません。 (Participation is not mandatory.) 教論 (きょうろん): teaching staff, instructor 教論として大学で働いている。 (He works at a university as a teaching staff member.) 極力 (きょくりょく): to the utmost, as much as possible 極力ミスを避（さ）けたい。 (I want to avoid mistakes as much as possible.) 拒絶 (きょぜつ): refusal, rejection 彼女は申（もう）し出（で）を拒絶した。 (She rejected the offer.) 義理 (ぎり): duty, sense of obligation 義理で結婚式に出（しゅっ）席（せき）した。 (I attended the wedding out of obligation.) 拠点 (きょてん): base of operations 東京を拠点に活（かつ）動（どう）している。 (I operate out of Tokyo.) 軽快 (けいかい): light, nimble, cheerful 軽快な足（あし）取（ど）りで歩いた。 (He walked with light steps.) 掲載 (けいさい): publication, insertion (in print) その記事は新聞に掲載された。 (The article was published in the newspaper.) 軽蔑 (けいべつ): contempt, scorn 嘘をつく人は軽蔑される。 (People who lie are despised.) 屋上 (おくじょう): rooftop 屋上から夜（や）景（けい）が見える。 (You can see the night view from the rooftop.) 41 Your browser does not support the audio element. SHOW CONTENTS 経理 (けいり): accounting 経理部が毎（まい）月（つき）の収（しゅう）支（し）を管（かん）理（り）している。 (The accounting department manages the monthly income and expenses.) 欠如 (けつじょ): lack, absence 彼の発（はつ）言（げん）には思いやりが欠如していた。 (His remarks lacked compassion.) 言動 (げんどう): speech and behavior 彼の言動が問題になった。 (His speech and behavior became an issue.) 合議 (ごうぎ): consultation, conference 重（おも）い決（けっ）定（てい）は合議によってなされる。 (Serious decisions are made through consultation.) 個々 (ここ): individual, each 問題を個々に分（ぶん）析（せき）する。 (Analyze each problem individually.) 衣替え (ころもがえ): seasonal wardrobe change 春になると衣替えの季節だ。 (Spring is the season to change clothes.) 根性 (こんじょう): willpower, guts 彼には根性がある。 (He has a lot of grit.) 偽造 (ぎぞう): forgery 偽造パスポートが見つかった。 (A forged passport was found.) 気取る (きどる): to put on airs, to be pretentious 彼は気取っていて話しかけにくい。 (He\u0026rsquo;s so pretentious it\u0026rsquo;s hard to talk to him.) 急減 (きゅうげん): sharp decrease 売（うり）上（あげ）が急減した。 (Sales plummeted.) 旧知 (きゅうち): old acquaintance 彼とは旧知の仲（なか）だ。 (We’re old acquaintances.) 興じる (きょうじる): to amuse oneself, to enjoy 子供たちはゲームに興じていた。 (The children were absorbed in their game.) 協定 (きょうてい): agreement, pact 両（りょう）国（こく）は貿（ぼう）易（えき）協定を結（むす）んだ。 (The two countries signed a trade agreement.) 切り替える (きりかえる): to switch, to change over 気持ちを切り替えて次（つぎ）に進もう。 (Let’s switch gears and move on.) 食い違い (くいちがい): discrepancy, disagreement 二人の証言に食い違いがある。 (There’s a discrepancy between the two testimonies.) 経歴 (けいれき): career, personal history 彼の経歴は素晴らしい。 (His career background is impressive.) 結束 (けっそく): unity, solidarity チームの結束が勝（しょう）利（り）を呼（よ）んだ。 (Team unity brought victory.) 大幅 (おおはば): large scale, significant 大幅な値下げがあった。 (There was a significant price reduction.) 大通り (おおどおり): main street, avenue 銀行は駅前の大通りにあります。The bank is on the main street in front of the station. 42 Your browser does not support the audio element. SHOW CONTENTS 欠損 (けっそん): loss, shortage, defect この部（ぶ）品（ひん）は一（いち）部（ぶ）が欠損している。 (This part is partially defective.) 現行 (げんこう): current, existing 現行の法（ほう）律（りつ）では禁（きん）止（し）されている。 (It\u0026rsquo;s prohibited under the current law.) 元首 (げんしゅ): head of state 元首が国（こく）民（みん）に向けて声（せい）明（めい）を出（だ）した。 (The head of state issued a statement to the nation.) 厳密 (げんみつ): strict, precise 厳密に言えば、それは正（ただ）しくない。 (Strictly speaking, that\u0026rsquo;s not correct.) 克明 (こくめい): detailed, faithful 克明な記（き）録（ろく）が残（のご）っている。 (There is a detailed record remaining.) 快い (こころよい): pleasant, agreeable 快い音楽が流（なが）れている。 (Pleasant music is playing.) 越し (ごし): across, over (used as a suffix) 窓（まど）越（ご）しに彼の姿（すがた）が見えた。 (I saw him through the window.) 粉々 (こなごな): in pieces, shattered 皿が床（ゆか）に落（お）ちて粉々になった。 (The plate fell to the floor and shattered.) この方 (このかた): since then, all this time 上（じょう）京（きょう）してこの方、忙しい日々が続いている。 (I\u0026rsquo;ve been busy every day since moving to Tokyo.) 細心 (さいしん): meticulous, utmost care 細心の注意を払（はら）って作（さ）業（ぎょう）する。 (Work with meticulous care.) 差し入れ (さしいれ): provisions, supplies (often as a treat) 友人が果物を差し入れてくれた。 (A friend brought me some fruit as a treat.) 試案 (しあん): draft proposal 新制（せい）度（ど）についての試案を提出した。 (I submitted a draft proposal for the new system.) 自営 (じえい): self-employment 自営でカフェを経（けい）営（えい）している。 (I run a café as a self-employed person.) 下地 (したじ): foundation, groundwork この化（け）粧（しょう）品（ひん）は化粧の下地に最（さい）適（てき）です。 (This cosmetic is ideal as a makeup base.) 手芸 (しゅげい): handicrafts, needlework 手芸が趣味で、刺（し）繍（しゅう）をよくする。 (My hobby is handicrafts, especially embroidery.) 愛用 (あいよう): habitual use, favorite item このバッグは長（なが）年（ねん）愛用している。 (I\u0026rsquo;ve used this bag for years.) 相変わらず (あいかわらず): as usual, the same as ever 彼は相変わらず元気そうだ。 (He seems as lively as ever.) 相槌 (あいづち): backchanneling, response during a conversation 会話中にうまく相槌を打つことが大切だ。 (It\u0026rsquo;s important to respond appropriately during conversations.) 合図 (あいず): signal, cue スタートの合図で走り出した。 (I started running at the signal.) お菜 (おかず): side dish ご飯とお菜のバランスが大事だ。 (The balance between rice and side dishes is important.) 43 Your browser does not support the audio element. SHOW CONTENTS 起こす (おこす): to wake (someone) up, to cause 母が毎朝私を起こしてくれる。 (My mother wakes me up every morning.) 恐ろしい (おそろしい): terrifying, dreadful 昨（さく）夜（や）は恐ろしい夢を見た。(I had a terrifying dream last night.) 押入れ (おしいれ): closet (sliding-door style) 布（ふ）団（とん）は押入れの中にある。 (The futon is in the closet.) 落ちる (おちる): to fall, to drop 木（こ）の葉（は）が風に吹（ふ）かれて落ちる。 (Leaves fall in the wind.) 起こる (おこる): to happen, to occur 昨夜、大きな事故が起こった。 (A big accident happened last night.) 大人しい (おとなしい): quiet, obedient 彼はとても大人しい性（せい）格（かく）だ。 (He has a very quiet personality.) 思い出す (おもいだす): to recall, to remember 子供の頃のことを思い出した。 (I remembered my childhood.) 重たい (おもたい): heavy (feeling or weight) このかばんはとても重たい。 (This bag is very heavy.) 降りる (おりる): to get off, to descend バスを次の駅で降ります。 (I will get off the bus at the next stop.) お礼 (おれい): thanks, gratitude お世（せ）話（わ）になった方（かた）にお礼を言う。 (I express my thanks to the person who helped me.) 温度 (おんど): temperature 温度が急に下（さ）がってきた。 (The temperature has suddenly dropped.) 折る (おる): to break, to fold 紙を半分に折ってください。 (Please fold the paper in half.) 折れる (おれる): to break (intransitive), to bend 木の枝（えだ）が風で折れた。 (The tree branch broke in the wind.) 海岸 (かいがん): coast, seaside 海岸で貝（かい）を拾（ひろ）った。 (I picked up shells at the seaside.) 係員 (かかりいん): person in charge, staff 係員にチケットを見せた。 (I showed my ticket to the staff member.) 係 (かかり): person in charge, duty 受付係に名前を伝（つた）えた。 (I told the receptionist my name.) 変える (かえる): to change (something) 予定を変えなければならない。 (I have to change the plan.) 掛かる (かかる): to take (time, money), to be caught 駅まで30分掛かる。 (It takes 30 minutes to get to the station.) 学部 (がくぶ): (university) department, faculty 彼は経済学部の学生だ。 (He is a student in the faculty of economics.) 飾る (かざる): to decorate 部屋を花で飾った。 (I decorated the room with flowers.) 44 Your browser does not support the audio element. SHOW CONTENTS 昇給 (しょうきゅう): salary increase 今年は昇給があって嬉しい。I\u0026rsquo;m happy that I got a pay raise this year. 勝算 (しょうさん): chances of winning この試合に勝算はあるのか？ (Do we have a chance of winning this game?) 称する (しょうする): to call oneself, to pretend to be 彼は医者と称していたが、実は違（ちが）った。 (He claimed to be a doctor, but he actually wasn’t.) 除外 (じょがい): exclusion 一（いち）部（ぶ）の条（じょう）件（けん）は除外されている。 (Some conditions are excluded.) 振興 (しんこう): promotion (of a cause, industry, etc.) 観光産（さん）業（ぎょう）の振興に力（ちから）を入れている。 (We are working hard to promote the tourism industry.) 真相 (しんそう): the truth, real situatio 真相はまだ明（あき）らかになっていない。 (The truth is still unclear.) 新型 (しんがた): new model, new type 新型コロナウイルスが流（りゅう）行（こう）している。 (A new type of coronavirus is spreading.) 崇拝 (すうはい): worship, admiration 彼はその歌手を神（かみ）のように崇拝している。 (He worships that singer like a god.) すし詰め (すしづめ): packed like sardines 通（つう）勤（きん）電車はすし詰め状（じょう）態（たい）だ。 (The commuter train is packed like sardines.) 正規 (せいき): regular, official 彼は正規の社員として雇（やと）われた。 (He was hired as a regular employee.) 精巧 (せいこう): elaborate, delicate 精巧な時計を作る技（ぎ）術（じゅつ）。 (The technique for making elaborate watches.) 盛装 (せいそう): dressed up, formal dress 結婚式には盛装して参加した。 (I attended the wedding in formal dress.) 精力 (せいりょく): energy, vitality 精力的に働くビジネスマン。 (A businessman who works energetically.) 繊細 (せんさい): delicate, sensitive 繊細な感（かん）情（じょう）を持っている人。 (A person with delicate emotions.) 全盛 (ぜんせい): height of prosperity その歌手は90年（ねん）代（だい）に全盛期を迎（むか）えた。 (That singer reached the peak of their popularity in the 1990s.) 雑木 (ぞうき): mixed trees, miscellaneous trees 山には雑木が生（お）い茂（しげ）っている。 (The mountain is covered in mixed trees.) 貸し出し (かしだし): lending, rental 図書館では本の貸し出しができる。 (Books can be borrowed from the library.) 数える (かぞえる): to count 指（ゆび）で数える。 (Count with your fingers.) 硬い (かたい): hard, stiff このパンは硬すぎて食べられない。 (This bread is too hard to eat.) 悲しい (かなしい): sad 悲しい映画を見て泣（な）いてしまった。 (I cried after watching a sad movie.) 45 Your browser does not support the audio element. SHOW CONTENTS 総長 (そうちょう): president, chancellor 大学の総長が卒業式で挨拶した。 (The university chancellor gave a speech at the graduation ceremony.) 相場 (そうば): market price, going rate 今は円の相場が不（ふ）安（あん）定（てい）だ。 (The yen\u0026rsquo;s market rate is unstable now.) 尊厳 (そんげん): dignity 人間の尊厳を守（まも）るべきだ。 (We must protect human dignity.) 耐える (たえる): to endure, to withstand 厳（きび）しい訓（くん）練（れん）に耐えた。 (He endured rigorous training.) 建前 (たてまえ): public stance, formal principle 建前と本（ほん）音（ね）は違うことが多い。 (One’s public stance often differs from their true intentions.) 弛みなく (たゆみなく): unremittingly, without slackening 弛みなく努力を続ける。 (Keep working hard without letting up.) 堪能 (たんのう): proficient, enjoy thoroughly 彼は英語に堪能だ。 (He is proficient in English.) 短波 (たんぱ): shortwave 短波ラジオで海（かい）外（がい）の放（ほう）送（そう）を聞いた。 (I listened to foreign broadcasts on a shortwave radio.) 塵取り (ちりとり): dustpan ホウキと塵取りで掃除する。 (Clean up using a broom and dustpan.) 通報 (つうほう): report, notification (to authorities) 不（ふ）審（しん）者（しゃ）を警（けい）察（さつ）に通報した。 (I reported a suspicious person to the police.) 提携 (ていけい): partnership, cooperation 両（りょう）社（しゃ）は新しい技（ぎ）術（じゅつ）で提携した。 (The two companies formed a partnership for the new technology.) 締結 (ていけつ): conclusion (of a treaty or contract) 両（りょう）国（こく）が平（へい）和（わ）条（じょう）約（やく）を締結した。 (The two countries signed a peace treaty.) 手口 (てぐち): modus operandi, criminal trick 犯人の手口は巧（こう）妙（みょう）だった。 (The criminal’s method was clever.) 鯨 (くじら): whale 鯨は世界最（さい）大（だい）の哺（ほ）乳（にゅう）類（るい）だ。 (The whale is the largest mammal in the world.) 企てる (くわだてる): to plan, to scheme クーデターを企てたが失（しっ）敗（ぱい）した。 (They plotted a coup but failed.) 軽減 (けいげん): reduction, alleviation 税（ぜ）負（いふ）担（たん）の軽減を求（もと）める。 (Call for a reduction in the tax burden.) 計算高い (けいさんだかい): calculating, shrewd 計算高い性格だと言われる。 (People say I’m shrewd and calculating.) 経費 (けいひ): expenses 出（しゅっ）張（ちょう）の経費を会社が負（ふ）担（たん）する。 (The company covers the travel expenses.) 決算 (けっさん): financial statement, settlement of accounts 決算報告書が発（はっ）表（ぴょう）された。 (The financial statement was released.) 結晶 (けっしょう): crystal, crystallization 雪は氷（こおり）の美しい結晶だ。 (Snow is a beautiful crystal of ice.) 46 Your browser does not support the audio element. SHOW CONTENTS 結成 (けっせい): formation (of a group or organization) 新しいバンドが結成された。 (A new band was formed.) 兼業 (けんぎょう): side job, holding multiple jobs 彼は農（のう）業（ぎょう）を兼業している。 (He runs a farm as a side job.) 興行 (こうぎょう): performance, show, entertainment business 映画の興行収入が好（こう）調（ちょう）だ。 (The movie’s box office revenue is strong.) 告白 (こくはく): confession (especially of love or guilt) 彼女に告白したが振（ふ）られた。 (I confessed my feelings to her, but she turned me down.) 心掛ける (こころがける): to keep in mind, to try 健康に良い生活を心（こころ）掛（か）けている。 (I try to live a healthy lifestyle.) 挙って (こぞって): all together, en masse 学生たちは挙って参加した。 (The students participated all together.) 財政 (ざいせい): finance, financial affairs 財政状（じょう）況（きょう）が厳しい。 (The financial situation is tough.) 最盛期 (さいせいき): peak period 観光地は夏が最盛期だ。 (Tourist spots are at their peak in summer.) 指図 (さしず): instruction, direction, orders 他人に指図されるのは嫌（いや）だ。 (I hate being ordered around by others.) 浚う (さらう): to dredge, to sweep away, to kidnap 川を浚ってゴミを取（と）り除（のぞ）いた。 (The river was dredged to remove debris.) 残高 (ざんだか): balance (financial account) 銀（ぎん）行（こう）口（こう）座（ざ）の残高を確（かく）認（にん）する。 (Check the balance of your bank account.) 仕切る (しきる): to partition, to manage, to control 彼が会議を仕切っている。 (He’s running the meeting.) 軸 (じく): axis, pivot 地（ち）球（きゅう）は自（じ）転（てん）の軸を中（ちゅう）心（しん）に回っている。 (The Earth rotates around its axis.) 自主 (じしゅ): independence, voluntary 自主的に勉強を続けている。 (I\u0026rsquo;m studying on my own initiative.) 私情 (しじょう): personal feelings 判（はん）断（だん）に私情を挟（はさ）んではならない。 (You must not let personal feelings affect your judgment.) 下調べ (したしらべ): preliminary research 旅行の前に下調べをしておく。 (Do some preliminary research before traveling.) 渋い (しぶい): bitter, subdued, tasteful 渋いお茶が好きだ。 (I like bitter tea.) 家内 (かない): (one’s own) wife 家内と一緒に外（がい）食（しょく）した。 (I went out to eat with my wife.) 必ず (かならず): surely, certainly 約（やく）束（そく）は必ず守（まも）る。 (I always keep my promises.) 片付ける (かたづける): to tidy up, to put away 食事の後、食（しょっ）器（き）を片付けた。 (I cleaned up the dishes after the meal.) 47 Your browser does not support the audio element. SHOW CONTENTS ジャンパー: jumper, jacket 寒くなったのでジャンパーを着た。 (I put on a jumper because it got cold.) 柔軟 (じゅうなん): flexible, pliable 柔軟な考え方が求（もと）められる。 (Flexible thinking is required.) 主演 (しゅえん): starring role この映画は有名俳（はい）優（ゆう）が主演している。 (A famous actor stars in this movie.) 主体 (しゅたい): main body, core, subject 学生が主体となってイベントを企（き）画（かく）した。 (Students took the lead in organizing the event.) 出血 (しゅっけつ): bleeding 転（ころ）んでひざから出血した。 (I fell and my knee started bleeding.) 出産 (しゅっさん): childbirth 妹が無（ぶ）事（じ）に出産した。 (My sister gave birth safely.) 上機嫌 (じょうきげん): good mood 父は今日は上機嫌だ。 (My father is in a good mood today.) 正体 (しょうたい): true identity 怪（（あや））しい男（おとこ）の正体が明（あき）らかになった。 (The true identity of the suspicious man was revealed.) 常務 (じょうむ): managing director 彼は会社の常務に昇（しょう）進（しん）した。 (He was promoted to managing director at the company.) 指令 (しれい): command, instruction 上（じょう）司（し）からの指令を待っている。 (We’re waiting for instructions from our superior.) 申告 (しんこく): declaration, report (e.g., tax) 所（しょ）得（とく）税（ぜい）の申告を忘れないように。 (Don’t forget to file your income tax return.) 政策 (せいさく): policy 政府の新しい経済政策が発（はっ）表（ぴょう）された。 (The government announced a new economic policy.) 制止 (せいし): restraint, stopping 彼の暴（ぼう）力（りょく）を周（しゅう）囲（い）が制止した。 (People around him stopped his violent behavior.) 整列 (せいれつ): alignment, lining up 学生たちが校（こう）庭（てい）で整列している。 (The students are lined up in the schoolyard.) 節句 (せっく): seasonal festival ひな祭（まつ）りは日本の代表的な節句の一つだ。 (Hinamatsuri is one of Japan’s traditional seasonal festivals.) 善良 (ぜんりょう): good-natured, virtuous 彼はとても善良な人だ。 (He is a very kind and decent person.) 増益 (ぞうえき): increased profits 今年の決（けっ）算（さん）では増益が見込まれている。 (An increase in profits is expected in this year’s financial results.) 片付く (かたづく): to be put in order, to be settled 引っ越しの荷物がようやく片付いた。 (The moving boxes are finally sorted.) かつ: moreover, and 彼は優（ゆう）秀（しゅう）で、かつ努（ど）力（りょく）家（か）だ。 (He is excellent and also hardworking.) 格好 (かっこう): appearance, shape そんな格好で出かけるの？ (Are you going out dressed like that?) 48 Your browser does not support the audio element. SHOW CONTENTS 惣菜 (そうざい): side dish 夕（ゆう）食（しょく）にスーパーで惣菜を買った。 (I bought side dishes at the supermarket for dinner.) 増進 (ぞうしん): enhancement, promotion 健康の増進には運（うん）動（どう）が効（こう）果（か）的（てき）だ。 (Exercise is effective for promoting health.) 添える (そえる): to add, to attach 花に手紙を添えて贈（おく）った。 (I sent the flowers with a letter.) 給う (たまう): to grant, to bestow (classical/honorific) ご助（じょ）言（げん）を給えれば幸（さいわ）いです。 (I would be grateful if you could grant me your advice.) 中立 (ちゅうりつ): neutrality その国は戦争に対して中立を保（たも）った。 (That country maintained neutrality during the war.) 長編 (ちょうへん): full-length (novel, film) 彼の新（しん）作（さく）は長編小説だ。 (His new work is a full-length novel.) 直感 (ちょっかん): intuition 直感でこの道を選（えら）んだ。 (I chose this path based on intuition.) 司る (つかさどる): to govern, to be in charge of 神（かみ）は自然のすべてを司る存在とされる。 (God is said to govern all of nature.) 付き纏う (つきまとう): to follow around, to haunt 不安がずっと付き纏っている。 (Anxiety has been haunting me constantly.) 接ぐ (つぐ): to join, to connect 折（お）れた骨（ほね）を金（きん）属（ぞく）で接いだ。 (The broken bone was connected with metal.) 繕う (つくろう): to mend, to fix 穴（あな）の開（あ）いた靴下を繕った。 (I mended the hole in my sock.) 手掛り (てがかり): clue, lead 警察は事件の手掛りを探している。 (The police are looking for clues about the case.) 手数 (てすう): trouble, effort お手数をおかけしてすみません。 (Sorry to trouble you.) 撤廃 (てっぱい): abolition, repeal 古い制（せい）度（ど）が撤廃された。 (The old system was abolished.) 郷土 (きょうど): hometown, native region 郷土料理を味（あじ）わう。 (I enjoy local cuisine.) 競売 (きょうばい): auction その土（と）地（ち）は競売にかけられた。 (The land was put up for auction.) 工面 (くめん): managing (money, time), raising (funds) 学（がく）費（ひ）を工面するのが大変だった。 (It was difficult to manage the tuition.) 片付ける (かたづける): to tidy up, to put away 食事の後で皿を片付けた。 (I cleaned up the dishes after the meal.) 悲しがる (かなしがる): to express sadness 子どもが母の不（ふ）在（ざい）を悲しがっている。 (The child is sad about his mother’s absence.) 通う (かよう): to commute, to attend 毎日学校に通っている。 (I go to school every day.) 49 Your browser does not support the audio element. SHOW CONTENTS 継承（けいしょう）：inheritance, succession 王（おう）位（い）を継承する。(Inherit the throne.) 血管（けっかん）：blood vessel 運（うん）動（どう）は血管の健（けん）康（こう）に良い。(Exercise is good for the health of blood vessels.) 現像（げんぞう）：photo development フィルムを現像してもらった。(I had the film developed.) 鉱石（こうせき）：ore 鉱（こう）山（ざん）から鉱石を採（さい）掘（くつ）する。(Ore is mined from the mountain.) 荒廃（こうはい）：devastation, ruin 戦（せん）争（そう）で町が荒廃した。(The town was devastated by war.) 交付（こうふ）：issuance (of a document, etc.) パスポートが交付された。(The passport was issued.) 小銭（こぜに）：coins, small change 小銭がなくて自動販売機が使えない。(I can’t use the vending machine because I have no change.) 言伝（ことづて）：verbal message 田中さんからの言伝を預（あず）かっています。(I have a message from Mr. Tanaka.) 最適（さいてき）：optimal, best この方法が最適だと思う。(I think this method is optimal.) 細胞（さいぼう）：cell (biology) 人の体は数（すう）十（じゅう）兆（ちょう）の細胞でできている。(The human body is made up of tens of trillions of cells.) 差し掛かる（さしかかる）：to come near, to approach 交（こう）差（さ）点（てん）に差し掛かったところで信（しん）号（ごう）が変わった。(The traffic light changed just as I approached the intersection.) 定まる（さだまる）：to be decided, to be settled 進（しん）路（ろ）が定まった。(My career path has been decided.) 察知（さっち）：sensing, detection 異（い）常（じょう）を察知した。(An abnormality was detected.) 殺到（さっとう）：rush, flood (of people, things) セール初（しょ）日（にち）に客が殺到した。(Customers rushed in on the first day of the sale.) 宛ら（さながら）：just like, as if その景色は宛ら絵画のようだった。(The scenery was just like a painting.) 試飲（しいん）：tasting (a drink) 新商品のジュースを試飲する。(Taste a sample of the new juice product.) 締める（しめる）：to tighten, to fasten ベルトを締める。(Tighten the belt.) 謝意（しゃい）：gratitude 深い謝意を表（あらわ）します。(I express my deep gratitude.) 構う（かまう）：to care, to mind 時間なんて構わず話し続けた。(We kept talking without caring about the time.) 乾く（かわく）：to dry 洗（せん）濯（たく）物（もの）が乾いた。(The laundry has dried.) 50 Your browser does not support the audio element. SHOW CONTENTS 従事（じゅうじ）：engaged in (work), involved 医（い）療（りょう）に従事している。(Engaged in medical work.) 周知（しゅうち）：well-known, common knowledge これは周知の事（じ）実（じつ）だ。(This is a well-known fact.) 照会（しょうかい）：inquiry, reference 口（こう）座（ざ）情（じょう）報（ほう）を照会する。(Make an inquiry about the account information.) 所属（しょぞく）：affiliation, belonging 私は営業部に所属している。(I belong to the sales department.) 仕分け（しわけ）：sorting, classification 荷物を仕分けする。(Sort the packages.) 真実（しんじつ）：truth, reality 彼の話には真実が含（ふく）まれていた。(There was truth in his story.) 尽力（じんりょく）：effort, endeavor 成功のために尽力する。(Make every effort for success.) 擦る（する）：to rub, to scrape 膝（ひざ）を擦ってけがをした。(I scraped my knee and got injured.) 晴雨（せいう）：clear or rainy weather 晴雨に関（かか）わらず行（おこな）われる。(It will take place regardless of the weather.) 説教（せっきょう）：sermon, scolding 母に説教された。(I got scolded by my mother.) 切望（せつぼう）：earnest desire, longing 彼は再（さい）会（かい）を切（せつ）望（ぼう）している。(He eagerly longs to meet again.) 絶望（ぜつぼう）：despair, hopelessness 絶望の中にいた。(I was in despair.) 攻め（せめ）：offense, attack 彼の攻めは鋭（するど）かった。(His offense was sharp.) セロテープ：cellophane tape, Scotch tape 箱をセロテープで留（と`）める。(Seal the box with tape.) 全額（ぜんがく）：total amount 全額を支払った。(I paid the full amount.) 捜査（そうさ）：criminal investigation 警察が事件を捜査している。(The police are investigating the case.) 捜索（そうさく）：search (esp. for a person or thing) 行（ゆく）方（え）不（ふ）明（めい）者（しゃ）を捜索する。(Search for the missing person.) そのもの：itself, the very thing 彼の生（い）き方（かた）は芸（げい）術（じゅつ）そのものだ。(His way of life is art itself.) 大衆（たいしゅう）：the masses, general public 大衆の意見に流（なが）される。(They are swayed by the opinions of the masses.) 髪の毛（かみのけ）：hair (on the head) 髪の毛が抜（ぬ）けやすい。(Hair falls out easily.) 51 Your browser does not support the audio element. SHOW CONTENTS 台無し（だいなし）：spoiled, ruined 雨で旅行の計画が台無しになった。(The trip plans were ruined by the rain.) 多大（ただい）：great (amount), significant 多大なご迷（めい）惑（わく）をおかけしました。(I caused you great trouble.) 奉る（たてまつる）：to offer, to present (with respect) 神に供（く）物（もつ）を奉る。(Offer a gift to the gods.) 断言（だんげん）：assertion, declaration 彼が犯人だと断言できない。(I can\u0026rsquo;t assert that he is the culprit.) 断念（だんねん）：abandonment (of hope, plan), resignation 留学を断念した。(I gave up studying abroad.) 中傷（ちゅうしょう）：slander, defamation ネットで中傷されて傷（きず）ついた。(I was hurt by online slander.) 貯蓄（ちょちく）：savings, reserve 老（ろう）後（ご）のために貯蓄している。(I’m saving for old age.) 付き添う（つきそう）：to accompany (as an attendant) 病院に母を付き添った。(I accompanied my mother to the hospital.) 追跡（ついせき）：tracking, pursuit 犯人を追跡する。(Track the criminal.) 通達（つうたつ）：notification, official notice 上司から通達が出た。(A notice was issued by the boss.) 突っ張る（つっぱる）：to stiffen, to stand firm 足の筋（きん）肉（にく）が突っ張って痛い。(My leg muscles are stiff and painful.) 募る（つのる）：to solicit, to intensify 募（ぼ）金（きん）を募る。(Solicit donations.) 低迷（ていめい）：slump, stagnation 景（けい）気（き）が低迷している。(The economy is stagnating.) 手軽（てがる）：easy, simple, convenient 手軽に作れる料理です。(This is a dish you can make easily.) 同情（どうじょう）：sympathy, compassion 彼の境（きょう）遇（ぐう）に同情する。(I sympathize with his situation.) 途絶える（とだえる）：to stop, to cease 連絡が途絶えた。(Communication ceased.) 金持ち（かねもち）：rich person 彼は生まれつきの金持ちだ。(He was born into wealth.) 噛む（かむ）：to bite, to chew 食べ物をよく噛（か）んで食べなさい。(Chew your food well.) 考え方（かんがえかた）：way of thinking, mindset 考え方を変える必要がある。(You need to change your way of thinking.) 変わる（かわる）：to change, to be transformed 季節が変わる。(The seasons change.) 52 Your browser does not support the audio element. SHOW CONTENTS 土木（どぼく）：civil engineering 彼は土木工事の現（げん）場（ば）監（かん）督（とく）だ。(He is a site supervisor for civil engineering works.) 告知（こくち）：notice, announcement 来週の会議について告知する。(Announce next week’s meeting.) 極楽（ごくらく）：paradise, bliss 温泉は極楽のようだった。(The hot spring felt like paradise.) 焦げ茶（こげちゃ）：dark brown 焦げ茶のコートを着（き）ている。(Wearing a dark brown coat.) 滑稽（こっけい）：funny, comical その映画はとても滑稽だった。(That movie was very comical.) 悉く（ことごとく）：entirely, altogether 試（こころ）みは悉く失（しっ）敗（ぱい）した。(Every attempt ended in failure.) 顧問（こもん）：advisor, consultant 彼は会社の法（ほう）務（む）顧問だ。(He is the company’s legal advisor.) 言語道断（ごんごどうだん）：outrageous, inexcusable そんな行為は言語道断だ。(That kind of behavior is outrageous.) 最期（さいご）：one’s last moments, death 彼は家族に見（み）守（まも）られて最期を迎えた。(He spent his last moments surrounded by family.) 採集（さいしゅう）：collecting (specimens, data, etc.) 山で薬（やく）草（そう）を採集した。(I collected medicinal herbs in the mountains.) 殺風景（さっぷうけい）：dreary, barren 殺風景な部屋に絵を飾る。(Hang art in a dreary room.) 捌く（さばく）：to handle, to process (goods, people) 混（こん）雑（ざつ）する列（れつ）を手（て）際（ぎわ）よく捌く。(Handle a crowded line efficiently.) 桟橋（さんばし）：pier, jetty 船（ふね）が桟橋に着（つ）いた。(The boat arrived at the pier.) 産物（さんぶつ）：product, result 苦（く）労（ろう）の産物だ。(It’s the result of hard work.) 歯科（しか）：dentistry 歯科に通（かよ）っている。(I go to the dentist.) 仕返し（しかえし）：revenge, retaliation 彼に仕返しされた。(He got revenge on me.) 仕組む（しくむ）：to plan, to plot 彼は巧（こう）妙（みょう）に罠（わな）を仕組んだ。(He cleverly plotted a trap.) 試行錯誤（しこうさくご）：trial and error 試行錯誤を重（かさ）ねて完成した。(It was completed through trial and error.) 質疑（しつぎ）：questions and answers 質疑応（おう）答（とう）の時間を設（もう）ける。(Provide time for Q\u0026amp;A.) 実質（じっしつ）：substance, real value 実質的な利（り）益（えき）は少ない。(The actual benefit is small.) 53 Your browser does not support the audio element. SHOW CONTENTS 市販（しはん）：on the market, commercially available この薬は市販されている。(This medicine is available on the market.) 十字路（じゅうじろ）：crossroads, intersection 十字路で信号を待つ。(Wait at the intersection.) 首脳（しゅのう）：leader, head (of a state or organization) 両国の首脳が会（かい）談（だん）した。(The leaders of both countries held talks.) 私用（しよう）：personal use, private business 私用で会社を休んだ。(I took a day off for personal reasons.) 賞与（しょうよ）：bonus 年末に賞与が支（し）給（きゅう）された。(A bonus was paid at the end of the year.) 新興（しんこう）：emerging, rising 新興企業が市（し）場（じょう）に参入した。(An emerging company entered the market.) 進呈（しんてい）：presentation, gift (formal) 記念品を進呈します。(We will present a commemorative gift.) 信任（しんにん）：trust, confidence 新しい社長が信任された。(The new president was given a vote of confidence.) 据える（すえる）：to place, to install テレビを部屋の中（ちゅう）央（おう）に据えた。(I placed the TV in the center of the room.) 制する（せいする）：to control, to dominate 相手を制して勝（しょう）利（り）した。(He controlled the opponent and won.) 精密（せいみつ）：precise, detailed 精密機（き）器（き）を扱う。(Handle precision equipment.) 接触（せっしょく）：contact 感染者との接触を避（さ）ける。(Avoid contact with infected individuals.) 全快（ぜんかい）：complete recovery 彼は病気から全快した。(He made a full recovery from illness.) 先決（せんけつ）：prior decision, prerequisite 問題解決には原因の特（とく）定（てい）が先決だ。(Identifying the cause is a prerequisite for solving the problem.) 相殺（そうさい）：offsetting, cancellation 損（そん）益（えき）を相殺する。(Offset gains and losses.) 側面（そくめん）：side, aspect この問題には様々な側面がある。(This problem has various aspects.) 逸らす（そらす）：to divert, to avert 話題を逸らした。(He diverted the topic.) 探偵（たんてい）：detective 探偵が事件を調（ちょう）査（さ）する。(The detective investigates the case.) 考え出す（かんがえだす）：to come up with 新しいアイデアを考え出した。(I came up with a new idea.) 変わり（かわり）：substitute, alternative 彼の変わりは誰がやるの？(Who will take his place?) 54 Your browser does not support the audio element. SHOW CONTENTS 著書（ちょしょ）：written work, publication 彼の著書は多くの読（どく）者（しゃ）に読まれている。(His book is read by many readers.) 謹んで（つつしんで）：humbly, respectfully 謹んで新年のお祝いを申し上げます。(I humbly extend my New Year greetings.) 適宜（てきぎ）：as appropriate, suitably 塩を適宜加（くわ）えてください。(Add salt as appropriate.) 手引き（てびき）：guide, manual 操（そう）作（さ）手引きをよく読んでください。(Please read the user manual carefully.) 展示（てんじ）：exhibition, display 美術館で絵画を展示している。(Paintings are on display at the museum.) 転落（てんらく）：fall, plunge 崖（がけ）から転落したが無（ぶ）事（じ）だった。(He fell from a cliff but was safe.) 投球（とうきゅう）：pitching (a ball) 彼の投球はとても速い。(His pitching is very fast.) 投書（とうしょ）：letter to the editor 新聞に投書が掲（けい）載（さい）された。(The letter to the editor was published in the newspaper.) 搭乗（とうじょう）：boarding (a plane, etc.) 搭乗手続きを済（す）ませてください。(Please complete the boarding process.) 当選（とうせん）：winning (e.g., in a lottery or election) 宝（たから）くじに当選した。(I won the lottery.) 登竜門（とうりゅうもん）：gateway to success この試験はプロになるための登竜門だ。(This exam is a gateway to becoming a professional.) 遠ざかる（とおざかる）：to go away, to recede 台風は次（し）第（だい）に日本から遠ざかっている。(The typhoon is gradually moving away from Japan.) 突如（とつじょ）：suddenly 突如、雨が降り出した。(Suddenly, it started to rain.) 取り次ぐ（とりつぐ）：to convey (a message), to act as an intermediary 担（たん）当（とう）者（しゃ）に取り次ぎます。(I’ll put you through to the person in charge.) 情け（なさけ）：compassion, sympathy 情けは人のためならず。(Compassion benefits both others and oneself.) 馴らす（ならす）：to tame, to train 馬を馴らすのは難しい。(Taming a horse is difficult.) 鳴り物入り（なりものいり）：with great fanfare 鳴り物入りで新製品が発（はつ）売（ばい）された。(The new product was launched with great fanfare.) 成り行き（なりゆき）：course of events, outcome 成り行きを見（み）守（まも）るしかない。(We have no choice but to watch how things unfold.) 渇く（かわく）：to become dry, to be thirsty 喉が渇いた。(I’m thirsty.) 缶（かん）：can, tin 缶ビールを買った。(I bought canned beer.) 55 Your browser does not support the audio element. SHOW CONTENTS 煮え切らない（にえきらない）：indecisive, vague 彼の態（たい）度（ど）は煮え切らない。(His attitude is indecisive.) 値打ち（ねうち）：value, worth この絵は非常に値打ちがある。(This painting is very valuable.) 捩じれる（ねじれる）：to twist, to become distorted 針（はり）金（がね）が捩じれてしまった。(The wire got twisted.) 剥ぐ（はぐ）：to peel off, to strip 壁（かべ）紙（がみ）を剥いだ。(I stripped off the wallpaper.) 発掘（はっくつ）：excavation, discovery 遺（い）跡（せき）の発掘が行（おこな）われている。(Excavation of the ruins is underway.) 群集（ぐんしゅう）：crowd, multitude 群集が騒（さわ）ぎ始めた。(The crowd started to become noisy.) 経過（けいか）：progress, passage (of time) 手術後の経過は良（りょう）好（こう）だ。(The post-operative progress is good.) 軽率（けいそつ）：rash, careless 軽率な発（はつ）言（げん）をしてしまった。(I made a careless remark.) 経路（けいろ）：route, path 通（つう）勤（きん）経路を変（へん）更（こう）した。(I changed my commuting route.) 劇的（げきてき）：dramatic 劇的な逆（ぎゃく）転（てん）勝（しょう）利（り）だった。(It was a dramatic comeback victory.) 検閲（けんえつ）：censorship, inspection 報（ほう）道（どう）が検閲された。(The news was censored.) 検事（けんじ）：public prosecutor 検事が証（しょう）拠（こ）を提（てい）示（じ）した。(The prosecutor presented the evidence.) 幻想（げんそう）：illusion, fantasy それは単（たん）なる幻想にすぎない。(That\u0026rsquo;s nothing more than an illusion.) 煌々（こうこう）：brilliantly lit, dazzling 街（がい）灯（とう）が煌々と輝（かがや）いている。(The streetlights are shining brightly.) 高尚（こうしょう）：refined, noble 彼の趣味は非常に高尚だ。(His hobbies are very refined.) 行進（こうしん）：march, parade 学生たちが行進している。(The students are marching.) 降伏（こうふく）：surrender 敵（てき）軍（ぐん）は降伏した。(The enemy army surrendered.) 国交（こっこう）：diplomatic relations 両国は国交を樹（じゅ）立（りつ）した。(The two countries established diplomatic relations.) 殊更（ことさら）：deliberately, intentionally 殊更に無（む）視（し）された。(I was deliberately ignored.) 頑固（がんこ）：stubborn, obstinate 祖父は頑固な性（せい）格（かく）だ。(My grandfather is very stubborn.) 56 Your browser does not support the audio element. SHOW CONTENTS 固有（こゆう）：peculiar to, inherent 日本固有の文化を大切にする。(We value the culture unique to Japan.) 最上（さいじょう）：the best, supreme 最上の品質を保（ほ）証（しょう）します。(We guarantee the best quality.) 差し引き（さしひき）：deduction, balance 給（きゅう）料（りょう）から税（ぜい）金（きん）を差し引きする。(Taxes are deducted from the salary.) 摩る（さする）：to rub, to stroke 背中を優しく摩ってあげた。(I gently rubbed her back.) 作動（さどう）：operation, functioning センサーが正（せい）常（じょう）に作動した。(The sensor operated correctly.) 裁く（さばく）：to judge, to arbitrate 裁（さい）判（ばん）官（かん）が公（こう）正（せい）に裁く。(The judge rules impartially.) 次元（じげん）：dimension, level 次元の違（ちが）う議（ぎ）論（ろん）だった。(It was a discussion on a different level.) 色彩（しきさい）：color, hue 鮮（あざ）やかな色彩が印（いん）象（しょう）的（てき）だ。(The vivid colors are impressive.) 思索（しさく）：thought, contemplation 哲（てつ）学（がく）的（てき）な思索にふける。(I indulge in philosophical contemplation.) 試食（ししょく）：sampling food, tasting 新製品を試食できる。(You can sample the new product.) 失格（しっかく）：disqualification 反（はん）則（そく）で失格になった。(He was disqualified for a foul.) 私物（しぶつ）：private belongings 私物は各（かく）自（じ）で管理してください。(Please take care of your own belongings.) 視野（しや）：field of vision, perspective 視野を広げることが大切だ。(It’s important to broaden your perspective.) 遮断（しゃだん）：block, cut off 通（つう）信（しん）が遮断された。(The communication was cut off.) 若干（じゃっかん）：a few, some 若干の変（へん）更（こう）があります。(There are some changes.) ジャンボ：jumbo, huge ジャンボジェット機が離陸（りりく）した。(The jumbo jet took off.) 重心（じゅうしん）：center of gravity 重心を低（ひく）く保（たも）つ。(Keep your center of gravity low.) 元旦（がんたん）：New Year’s Day (morning) 元旦に初（はつ）詣（もう）に行く。(Go to the first shrine visit on New Year’s morning.) 患者（かんじゃ）：patient 医師が患者を診（しん）察（さつ）する。(The doctor examines the patient.) 感心（かんしん）：admiration, being impressed 彼の努（ど）力（りょく）には感心した。(I was impressed by his effort.) 57 Your browser does not support the audio element. SHOW CONTENTS 種々（しゅじゅ）：various, all kinds of 種々の問題が発（はっ）生（せい）した。(Various problems occurred.) 準じる（じゅんじる）：to conform to, to be based on 社内規（き）定（てい）に準じて処（しょ）理（り）する。(Handle it in accordance with company rules.) 上空（じょうくう）：sky, upper air 飛（ひ）行（こう）機（き）が上空を飛（と）んでいる。(A plane is flying in the sky.) 初期（しょき）：early stage 病（びょう）気（き）の初期症（しょう）状（じょう）を見（み）逃（のが）すな。(Don’t overlook the early symptoms of illness.) 記す（しるす）：to write down, to record メモに記しておく。(I’ll write it down in a memo.) 吹奏（すいそう）：wind instrument performance 吹奏楽（がく）部（ぶ）に入っている。(I belong to the brass band club.) 制御（せいぎょ）：control, regulation 温（おん）度（ど）を制御する装（そう）置（ち）。(A device to control the temperature.) 精細（せいさい）：precise, detailed 精細な分（ぶん）析（せき）が求（もと）められる。(A detailed analysis is required.) 増産（ぞうさん）：increase in production 商品の需（じゅ）要（よう）に応（いら）えて増産する。(Increase production in response to demand.) 備え付ける（そなえつける）：to equip, to install 各（かく）部屋に冷蔵庫が備え付けられている。(Each room is equipped with a refrigerator.) 代行（だいこう）：acting on behalf, agency 手（てつ）続（づ）きを代行してもらう。(Have someone handle the procedure on my behalf.) 対比（たいひ）：contrast, comparison 二つの作（さく）品（ひん）を対（たい）比（ひ）してみる。(Compare and contrast the two works.) 対話（たいわ）：dialogue, conversation 子どもとの対話が大切だ。(Dialogue with children is important.) 企み（たくらみ）：scheme, plot 彼の企みが明（あき）らかになった。(His scheme was revealed.) 棚上げ（たなあげ）：putting on hold 問題を棚上げにする。(Put the issue on hold.) 束ねる（たばねる）：to bundle, to govern 書（しょ）類（るい）を束ねて保（ほ）管（かん）する。(Keep the documents bundled.) 端的（たんてき）：frank, straightforward 端的に言えば、反（はん）対（たい）だ。(To be straightforward, I’m against it.) 団結（だんけつ）：unity, solidarity 団結して困（こん）難（なん）を乗り越える。(Overcome difficulties through unity.) 聞かせる（きかせる）：to tell, to inform, to sing/play for 子どもに昔（むかし）話（ばなし）を聞かせる。(Tell the child an old story.) 気が付く（きがつく）：to notice, to realize 忘れ物に気が付いた。(I noticed I forgot something.) 58 Your browser does not support the audio element. SHOW CONTENTS 茶の湯（ちゃのゆ）：tea ceremony 茶の湯の作（さ）法（ほう）を学（まな）ぶ。(Learn the etiquette of the tea ceremony.) 中期（ちゅうき）：middle term, mid-period 中期計画を立（た）てる。(Formulate a mid-term plan.) 追放（ついほう）：expulsion, exile 腐（ふ）敗（はい）した役（やく）人（にん）を政府から追放するべきだ。(Corrupt officials should be removed from the government.) 慎む（つつしむ）：to be careful, to refrain 言（げん）動（どう）を慎むべきだ。(You should watch your words and actions.) 手薄（てうす）：inadequate (personnel), understaffed 警（けい）備（び）が手薄だった。(Security was inadequate.) 手ごたえ（てごたえ）：response, reaction, feeling of resistance 試験は手ごたえがあった。(I felt I did well on the exam.) デメリット：demerit, disadvantage この方（ほう）法（ほう）にはデメリットもある。(This method also has disadvantages.) 照れくさい（てれくさい）：embarrassing, shy 人（ひと）前（まえ）で褒（ほ）められるのは照れくさい。(It’s embarrassing to be praised in front of others.) 組み込む（くみこむ）：to incorporate, to integrate プログラムに新機（き）能（のう）を組み込む。(Incorporate new functions into the program.) 結合（けつごう）：combination, union データを結合して分（ぶん）析（せき）する。(Combine the data for analysis.) 月謝（げっしゃ）：monthly tuition fee 英（えい）会（かい）話（わ）の月謝を払う。(Pay the monthly tuition for English lessons.) 原型（げんけい）：prototype, original form この像（ぞう）は古代の原型に基（もと）づいて作られた。(This statue was made based on an ancient prototype.) 控除（こうじょ）：deduction, subtraction 税金から医（い）療（りょう）費（ひ）が控除される。(Medical expenses are deducted from taxes.) 交渉（こうしょう）：negotiation 労（ろう）使（し）間（かん）で交渉が行われた。(Negotiations were held between labor and management.) 行楽（こうらく）：outing, excursion 秋の行楽シーズンが始まる。(The autumn excursion season begins.) 古今（ここん）：past and present 古今の名（めい）作（さく）を集（あつ）めた。(Collected masterpieces from past and present.) 媚びる（こびる）：to flatter, to fawn 上（じょう）司（し）に媚びるのは好きではない。(I don’t like flattering the boss.) 根底（こんてい）：foundation, basis その理（り）論（ろん）の根底にある考え方。(The idea underlying that theory.) 根本的（こんぽんてき）：fundamental, radical 問題を根本的に解決する必要がある。(We need to solve the problem fundamentally.) 気候（きこう）：climate 日本の気候は四（し）季（き）がはっきりしている。(Japan\u0026rsquo;s climate has distinct seasons.) 59 Your browser does not support the audio element. SHOW CONTENTS 再発（さいはつ）：recurrence, relapse 病気が再発した。(The illness recurred.) 差し支える（さしつかえる）：to interfere, to hinder 明日の予定に差し支えはありませんか？(Does it interfere with tomorrow\u0026rsquo;s schedule?) 然して（そして／しかして）：and then (classical/formal form) 然（そ）して彼は旅（たび）に出た。(And then, he set out on a journey.) 授かる（さずかる）：to be granted, to be blessed with 二人は子どもを授かった。(They were blessed with a child.) 授ける（さずける）：to grant, to bestow 彼に賞（しょう）を授ける。(Bestow an award on him.) 査定（さてい）：assessment, appraisal 保（ほ）険（けん）金（きん）の査定が行（おこな）われた。(The insurance amount was assessed.) 最中（さいちゅう）：in the middle of 会議の最中に電話が鳴（な）った。(The phone rang during the meeting.) 傘下（さんか）：affiliated, under the umbrella (of an organization) 大企業の傘下に入る。(Join under the umbrella of a large corporation.) 辞退（じたい）：refusal, declining 表（ひょう）彰（しょう）を辞退する。(Decline the award.) 下請け（したうけ）：subcontracting 工事を下請けに出す。(Subcontract the construction.) 実況（じっきょう）：live coverage, actual scene 試合を実況中（ちゅう）継（けい）する。(Broadcast the game live.) 収容（しゅうよう）：accommodation, housing, detainment 被（ひ）災（さい）者（しゃ）を避（ひ）難（なん）所（じょ）に収容する。(House disaster victims in shelters.) 樹木（じゅもく）：trees and shrubs 公園に多くの樹木が植えられている。(Many trees are planted in the park.) 照合（しょうごう）：verification, checking パスポートの情（じょう）報（ほう）を照合する。(Verify the passport information.) 消息（しょうそく）：news, whereabouts 彼の消息がつかめない。(His whereabouts are unknown.) 常用（じょうよう）：regular use 常用薬（やく）を忘れずに持っていく。(Don\u0026rsquo;t forget your regular medicine.) 所持（しょじ）：possession 武（ぶ）器（き）の所持は違（い）法（ほう）だ。(Possession of weapons is illegal.) 人格（じんかく）：character, personality 彼は人格者として知られている。(He is known as a person of character.) 傷（きず）：wound, injury, flaw 転（ころ）んで足に傷（きず）を負（お）った。(I got a wound on my leg from falling.) 着せる（きせる）：to dress (someone), to lay blame 子どもに服を着せる。(Dress the child.) 60 Your browser does not support the audio element. SHOW CONTENTS 健やか（すこやか）：healthy, sound 子どもたちが健やかに育（そだ）つことを願う。(I wish for the healthy growth of the children.) すばしこい：agile, nimble 猫はすばしこく動（うご）く。(The cat moves nimbly.) 製菓（せいか）：confectionery making 製菓会社に就（しゅう）職（しょく）したい。(I want to work at a confectionery company.) 成約（せいやく）：conclusion of a contract 契（けい）約（やく）は無（ぶ）事（じ）に成（せい）約（やく）した。(The contract was successfully concluded.) 設立（せつりつ）：establishment, founding 会社を設立する予定だ。(We plan to establish a company.) 選考（せんこう）：selection, screening 書類選考に通（つう）過（か）した。(I passed the document screening.) 送付（そうふ）：sending, forwarding 書類を事（じ）務（む）所（しょ）に送付してください。(Please send the documents to the office.) 素朴（そぼく）：simple, naive 素朴な疑問が浮（う）かんだ。(A simple question came to mind.) 代弁（だいべん）：speaking on behalf of 彼の意見を代弁した。(I spoke on his behalf.) 打撃（だげき）：blow, damage 台（たい）風（ふう）の影（えい）響（きょう）で農（のう）業（ぎょう）に大きな打撃を受けた。(Agriculture suffered a major blow due to the typhoon.) 打診（だしん）：sounding out, tentative inquiry 彼に転（てん）職（しょく）の意（い）向（こう）を打診した。(I sounded him out about changing jobs.) 漂う（ただよう）：to drift, to float 空（くう）気（き）に花の香（かお）りが漂っている。(The air is filled with the scent of flowers.) 多様（たよう）：diverse, varied 多様な価（か）値（ち）観（かん）を尊（そん）重（ちょう）すべきだ。(We should respect diverse values.) 団塊（だんかい）：mass, baby boom generation 団塊の世（せ）代（だい）が定（てい）年（ねん）を迎えている。(The baby boom generation is reaching retirement.) 単独（たんどく）：solo, single 彼は単独で山に登った。(He climbed the mountain alone.) 丹念（たんねん）：careful, painstaking 丹念に仕（し）上（あ）げた作品だ。(It is a painstakingly finished work.) 知育（ちいく）：intellectual education 知育玩（おも）具（ちゃ）は子どもの発（はっ）達（たつ）に役（やく）立（だ）つ。(Educational toys help in a child\u0026rsquo;s development.) 岸（きし）：shore, bank ボートが岸に着いた。(The boat reached the shore.) 聞こえる（きこえる）：to be heard 隣の部屋から音楽が聞こえる。(Music can be heard from the next room.) 喫煙（きつえん）：smoking 喫煙は健康に悪い。(Smoking is bad for your health.) 61 Your browser does not support the audio element. SHOW CONTENTS 懲役（ちょうえき）：penal servitude, imprisonment 彼は懲役3年の判（はん）決（けつ）を受けた。(He was sentenced to three years of imprisonment.) 賃上げ（ちんあげ）：wage increase 労（ろう）働（どう）組（くみ）合（あい）が賃上げを要（よう）求（きゅう）した。(The labor union demanded a wage increase.) 賃貸（ちんたい）：rental, lease 賃貸マンションを探している。(I’m looking for a rental mansion.) 継ぎ目（つぎめ）：joint, seam このパイプの継ぎ目が緩（ゆる）んでいる。(The joint of this pipe is loose.) 手当たり次第（てあたりしだい）：randomly, indiscriminately 手当たり次第に本を読み漁（あさ）った。(I read books indiscriminately.) 定着（ていちゃく）：taking hold, becoming established この習（しゅう）慣（かん）が社会に定着した。(This custom has become established in society.) 手近（てぢか）：close at hand, familiar 手近な材料で料理を作る。(Cook with ingredients close at hand.) 鉄筋（てっきん）：reinforced steel このビルは鉄筋コンクリートでできている。(This building is made of reinforced concrete.) 徹する（てっする）：to devote oneself, to be thorough 彼は裏（うら）方（かた）に徹した。(He devoted himself to working behind the scenes.) 手回し（てまわし）：preparation, arrangement 手回しよく準（じゅん）備（び）ができていた。(Preparations were made smoothly.) 出回る（でまわる）：to appear on the market 新しい野菜が市（し）場（じょう）に出回り始めた。(New vegetables have started appearing on the market.) 逃走（とうそう）：escape, flight 犯人が車で逃走した。(The criminal escaped by car.) 禁物（きんもつ）：taboo, forbidden thing この場での私（し）語（ご）は禁物だ。(Talking is forbidden here.) 首輪（くびわ）：collar 犬に首輪をつけた。(I put a collar on the dog.) 獣（けもの）：beast, animal 獣が森の中を走り回っていた。(A beast was running around in the forest.) 権威（けんい）：authority, prestige 彼はその分（ぶん）野（や）の権威だ。(He is an authority in that field.) 原爆（げんばく）：atomic bomb 原爆の被（ひ）害（がい）は甚（じん）大（だい）だった。(The damage from the atomic bomb was immense.) 講読（こうどく）：subscription, reading 雑誌を講読している。(I subscribe to a magazine.) 被る（こうむる）：to suffer, to incur 大きな損（そん）害（がい）を被った。(I suffered a great loss.) 絹（きぬ）：silk 絹のスカーフは手（て）触（ざわ）りが良い。(Silk scarves feel nice to the touch.) 62 Your browser does not support the audio element. SHOW CONTENTS 根拠（こんきょ）：basis, foundation その発（はつ）言（げん）には根拠がない。(There is no basis for that statement.) 財源（ざいげん）：financial resources, funding source 新しい制（せい）度（ど）の財源を確（かく）保（ほ）する。(Secure financial resources for the new system.) 査証（さしょう）：visa 入（にゅう）国（こく）には査証が必要です。(A visa is required for entry.) 雑貨（ざっか）：general goods, sundries 雑貨店でかわいい小（こ）物（もの）を買った。(I bought cute items at a variety store.) 仕掛け（しかけ）：mechanism, device, trick このおもちゃは面白い仕掛けがある。(This toy has an interesting mechanism.) 志願（しがん）：volunteering, application 彼は兵（へい）士（し）に志願した。(He volunteered to be a soldier.) 下役（したやく）：subordinate, lower-ranking role 彼はいつも下役ばかりだ。(He always gets minor roles.) 試着（しちゃく）：trying on clothes このシャツを試着してもいいですか？(Can I try on this shirt?) 執行（しっこう）：enforcement, execution 判（はん）決（けつ）が執行された。(The sentence was executed.) 気づく（きづく）：to notice, to realize 彼の変（へん）化（か）に気づかなかった。(I didn’t notice his change.) 規模（きぼ）：scale, scope 大（だい）規模な工（こう）事（じ）が始まった。(Large-scale construction has begun.) 決める（きめる）：to decide, to determine 来週の予定を決めよう。(Let’s decide the schedule for next week.) 休日（きゅうじつ）：holiday, day off 休日は家でゆっくり過（す）ごす。(I relax at home on holidays.) 胡瓜（きゅうり）：cucumber 胡瓜の漬（つけ）物（もの）が好きだ。(I like pickled cucumber.) 気を付ける（きをつける）：to be careful 車に気を付けてね。(Be careful of the cars.) 競争（きょうそう）：competition 企（き）業（ぎょう）間（かん）の競争が激（はげ）しい。(Competition between companies is intense.) 具合（ぐあい）：condition, state, health 今日の具合はいかがですか？(How are you feeling today?) 配る（くばる）：to distribute, to hand out プリントを配ってください。(Please hand out the printouts.) 口に合う（くちにあう）：to suit one\u0026rsquo;s taste この料理は私の口に合う。(This dish suits my taste.) 口喧嘩（くちげんか）：verbal argument, quarrel 兄弟でよく口喧嘩をする。(The siblings often have verbal fights.) 63 Your browser does not support the audio element. SHOW CONTENTS 淑やか（しとやか）：graceful, modest 彼女はとても淑やかな女（じょ）性（せい）だ。(She is a very graceful woman.) 実情（じつじょう）：actual circumstances 実情を説明してください。(Please explain the actual situation.) 嫉妬（しっと）：jealousy 彼の成功に嫉妬した。(I was jealous of his success.) 終息（しゅうそく）：bringing to an end パンデミックが終息した。(The pandemic has come to an end.) 出社（しゅっしゃ）：going to work 今日は早めに出社した。(I went to work early today.) 所詮（しょせん）：after all, in the end 所詮、人（にん）間（げん）は完（かん）璧（ぺき）ではない。(After all, humans aren\u0026rsquo;t perfect.) 処置（しょち）：treatment, measure 怪（け）我（が）にすぐ処置を施（ほどこ）した。(The injury was treated immediately.) 親近感（しんきんかん）：sense of closeness 彼に親近感を抱（いだ）いた。(I felt a sense of closeness with him.) 辛抱強い（しんぼうづよい）：patient, persevering 辛抱強く結果を待つ。(Wait patiently for the results.) 頗る（すこぶる）：extremely, exceedingly 今日は頗る機（き）嫌（げん）がいい。(I’m in an exceedingly good mood today.) 擦れる（すれる）：to be rubbed, to become worn 靴が擦れて足が痛（いた）い。(My shoes rubbed against my foot and it hurts.) 正装（せいそう）：formal attire 結婚式には正装で出（しゅっ）席（せき）する。(Attend the wedding in formal attire.) 整頓（せいとん）：tidiness, orderliness 部屋を整頓する。(Tidy up the room.) 勢力（せいりょく）：influence, power, force 勢力を拡大する。(Expand influence.) 折衷（せっちゅう）：compromise, blending 和（わ）洋（よう）折衷の料理が好きだ。(I like a blend of Japanese and Western cuisine.) 窃盗（せっとう）：theft 窃盗の容（よう）疑（ぎ）で逮（たい）捕（ほ）された。(He was arrested on suspicion of theft.) 切ない（せつない）：painful, heartrending 切ない恋（こい）の思い出がある。(I have a painful memory of love.) 専修（せんしゅう）：specialization 経（けい）済（ざい）学（がく）を専修している。(I’m majoring in economics.) 早急（そうきゅう／さっきゅう）：immediate, prompt 早急に対（たい）応（おう）が必要だ。(Immediate response is necessary.) 騒動（そうどう）：disturbance, uproar 騒動が警察によって鎮（しず）められた。(The disturbance was calmed by the police.) 64 Your browser does not support the audio element. SHOW CONTENTS 束縛（そくばく）：restraint, restriction 親の束縛から解（かい）放（ほう）された。(I was freed from my parents’ restraints.) 阻止（そし）：prevention, obstruction 犯（はん）罪（ざい）を阻止するために警（けい）備（び）を強（きょう）化（か）した。(Security was tightened to prevent crime.) 措置（そち）：measure, step 緊（きん）急（きゅう）措置を講（こう）じる必要がある。(Emergency measures need to be taken.) 対抗（たいこう）：opposition, resistance ライバル会社に対抗する。(Compete with a rival company.) 待望（たいぼう）：long-awaited 待望の新製品が発（はつ）売（ばい）された。(The long-awaited new product was released.) 妥協（だきょう）：compromise 妥協せずに交（こう）渉（しょう）を続けた。(We continued negotiations without compromising.) 逞しい（たくましい）：robust, strong 彼は逞しい体をしている。(He has a strong, muscular body.) 巧み（たくみ）：skillful, clever 巧みな話（わ）術（じゅつ）で人を引きつける。(Captivate people with skillful speech.) 駄作（ださく）：poor work, flop 映画は期（き）待（たい）外（はず）れの駄作だった。(The movie was a disappointing flop.) 脱出（だっしゅつ）：escape 火（か）事（じ）から奇（き）跡（せき）的（てき）に脱出した。(Miraculously escaped from the fire.) 脱退（だったい）：withdrawal (from a group) メンバーがグループを脱退した。(A member withdrew from the group.) 魂（たましい）：soul, spirit 魂を込（こ）めて演（えん）奏（そう）する。(Perform with all one’s soul.) 断固（だんこ）：firmly, resolutely 断固反（はん）対（たい）する。(I firmly oppose it.) 遅延（ちえん）：delay 電車が遅延している。(The train is delayed.) 蓄積（ちくせき）：accumulation ストレスの蓄積が原（げん）因（いん）で体（たい）調（ちょう）を崩（くず）した。（I became ill due to an accumulation of stress.） 知性（ちせい）：intellect 彼女は美しさと知性を兼（か）ね備（そな）えている。(She possesses both beauty and intellect.) 忠実（ちゅうじつ）：faithful, loyal 犬は飼（か）い主（ぬし）に忠実だ。(Dogs are loyal to their owners.) 告げる（つげる）：to inform, to tell 退（たい）職（しょく）の意（い）志（し）を上（じょう）司（し）に告げた。(I informed my boss of my intention to resign.) 突っ突く（つっつく）：to poke 肩（かた）を突っ突いて注意を引（ひ）いた。(I poked his shoulder to get his attention.) 暮らす（くらす）：to live, to spend time 静かな村で暮らしている。(I live in a quiet village.) 65 Your browser does not support the audio element. SHOW CONTENTS 勤まる（つとまる）：to be fit for (a job), to function well この仕事は私には勤まらないかもしれない。(I might not be fit for this job.) 努めて（つとめて）：as much as possible, diligently 努めて冷（れい）静（せい）に対（たい）応（おう）した。(I responded as calmly as possible.) 投入（とうにゅう）：investment, throwing in 資（し）金（きん）を大（たい）量（りょう）に投入する。(Invest a large amount of capital.) 尊ぶ（とうとぶ）：to respect, to value 彼は伝（でん）統（とう）を尊ぶ人だ。(He is someone who values tradition.) 滞る（とどこおる）：to be delayed, stagnate 支（し）払（はら）いが滞っている。(The payment is overdue.) 戸惑う（とまどう）：to be confused, puzzled 突（とつ）然（ぜん）の質問に戸惑った。(I was puzzled by the sudden question.) 勤続（きんぞく）：continuous service (at a company) 彼は30年勤続して退（たい）職（しょく）した。(He retired after 30 years of service.) 空爆（くうばく）：aerial bombing 首（しゅ）都（と）に空爆が行（おこな）われた。(The capital was bombed from the air.) 屈折（くっせつ）：refraction, distortion 光（ひかり）が水（すい）面（めん）で屈折する。(Light refracts at the water’s surface.) 公然（こうぜん）：open, public それは公然の秘密だ。(That’s an open secret.) 心地（ここち）：feeling, sensation この布（ふ）団（とん）は寝（ね）心（ごこ）地（ち）がいい。(This futon is comfortable to sleep on.) 心掛け（こころがけ）：mental attitude, intention 安全運（うん）転（てん）を心掛けている。(I try to drive safely.) 心細い（こころぼそい）：helpless, lonely 知らない土（と）地（ち）で心細い思いをした。(I felt helpless in an unfamiliar place.) 試み（こころみ）：attempt, trial 新しい方（ほう）法（ほう）の試みが行（おこな）われた。(An attempt at a new method was made.) 固定（こてい）：fixation, anchoring 料（りょう）金（きん）は固定されています。(The fee is fixed.) 拒む（こばむ）：to refuse, to reject 入（にゅう）場（じょう）を拒まれた。(I was refused entry.) 籠もる（こもる）：to shut oneself in, to be filled with 部屋に籠もって勉強する。(Shut oneself in a room to study.) コントラスト：contrast 明（めい）暗（あん）のコントラストが美しい。(The contrast between light and dark is beautiful.) 在庫（ざいこ）：stock, inventory 商品の在庫が不（ふ）足（そく）している。(We\u0026rsquo;re short on product inventory.) 黒字（くろじ）：surplus, profit 今（こん）期（き）は黒字を達（たっ）成（せい）した。(We achieved a profit this term.) 66 Your browser does not support the audio element. SHOW CONTENTS 財務（ざいむ）：finance, financial affairs 彼は会社の財務を担（たん）当（とう）している。(He is in charge of the company’s finances.) 自給（じきゅう）：self-sufficiency この村は野菜を自給している。(This village is self-sufficient in vegetables.) 静まり返る（しずまりかえる）：to fall completely silent 会場が静まり返った。(The venue fell completely silent.) 始末（しまつ）：management, dealing with; disposal ゴミの始末をお願いします。(Please take care of the trash.) 謝絶（しゃぜつ）：refusal, rejection 面（めん）会（かい）を謝絶された。(The visit was refused.) 重圧（じゅうあつ）：pressure, stress 責（せき）任（にん）の重圧を感じている。(I feel the pressure of responsibility.) 終止符（しゅうしふ）：full stop, end 長年の対（たい）立（りつ）に終止符を打った。(Put an end to a long-standing conflict.) 上演（じょうえん）：performance (of a play, etc.) 新（しん）作（さく）の舞（ぶ）台（たい）が上演される。(A new play is being performed.) 情緒（じょうちょ）：emotion, atmosphere 古い町には独（どく）特（とく）の情緒がある。(An old town has a unique atmosphere.) 上陸（じょうりく）：landing, disembarkation 台（たい）風（ふ）が九（きゅう）州（しゅう）に上陸した。(The typhoon landed in Kyushu.) 助言（じょげん）：advice, suggestion 専門家から助言をもらう。(Get advice from an expert.) 所在（しょざい）：whereabouts, location 現（げん）在（ざい）の所在は不（ふ）明（めい）だ。(The current whereabouts are unknown.) 処する（しょする）：to deal with, to punish 違反者には厳しく処する。(Violators will be strictly dealt with.) 所定（しょてい）：fixed, designated 書類を所定の場（ば）所（しょ）に提出してください。(Please submit the documents to the designated place.) 処罰（しょばつ）：punishment, penalty 法（ほう）律（りつ）に基（もと）づいて処罰される。(Punished according to the law.) 心中（しんじゅう）：double suicide; one\u0026rsquo;s true feelings 恋（こい）人（びと）と心中を図（はか）った。(Attempted a double suicide with a lover.) 心情（しんじょう）：emotions, sentiments 彼の心情を察（さっ）する。(Sympathize with his feelings.) 審議（しんぎ）：deliberation, discussion 法（ほう）案（あん）が国（こっ）会（かい）で審議されている。(The bill is being deliberated in the Diet.) 新築（しんちく）：new construction, newly built 新築のマンションに引っ越した。(I moved into a newly built apartment.) 決して（けっして）：never, by no means 決して諦めてはいけない。(You must never give up.) 67 Your browser does not support the audio element. SHOW CONTENTS 推理（すいり）：reasoning, inference 事件の推理を進める。(Proceed with reasoning about the case.) 静止（せいし）：stillness, stopping カメラの前で静止してください。(Please stay still in front of the camera.) 整然（せいぜん）：orderly, well-organized 書類が整然と並（なら）んでいる。(The documents are arranged neatly.) 正当（せいとう）：just, legitimate 正当な理由がある。(There is a legitimate reason.) 創刊（そうかん）：launching (a publication) 新しい雑誌が創刊された。(A new magazine was launched.) 壮健（そうけん）：robust health 祖父は今も壮健である。(My grandfather is still in good health.) 相対（そうたい）：relative, facing each other 二人が相対して座った。(The two sat facing each other.) 即する（そくする）：to conform to, to be based on 現実に即した判断が必要だ。(We need a decision based on reality.) 率先（そっせん）：taking the initiative 彼は率先して行動した。(He took the initiative.) 反らす（そらす）：to bend backward, to divert 話（わ）題（だい）を反らした。(Diverted the topic.) 多数決（たすうけつ）：majority vote 決（けっ）定（てい）は多数決で行（おこな）う。(We’ll decide by majority vote.) 立ち竦む（たちすくむ）：to freeze in place (from fear, etc.) 驚（おどろ）いて立ち竦んだ。(I froze in surprise.) 裁つ（たつ）：to cut (cloth), to tailor 着（き）物（もの）の布を裁つ。(Cut the fabric for a kimono.) 立て替える（たてかえる）：to pay for someone in advance 飲（の）み代（しろ）を立て替えた。(I paid the drinking bill in advance.) 単（たん）：single, simple 単なる偶（ぐう）然（ぜん）だ。(It’s just a coincidence.) 断面（だんめん）：cross-section 地（ち）層（そう）の断面図を見せる。(Show a cross-sectional diagram of the strata.) 着陸（ちゃくりく）：landing (of aircraft) 飛行機が無（ぶ）事（じ）に着陸した。(The plane landed safely.) 宙返り（ちゅうがえり）：somersault, flip 宙返りしてみせた。(Performed a somersault.) 中継（ちゅうけい）：relay, broadcast 試合が生（なま）中（ちゅう）継（けい）される。(The match is broadcast live.) 暮れる（くれる）：to get dark, to end 日が暮れてきた。(The sun is setting.) 68 Your browser does not support the audio element. SHOW CONTENTS 調停（ちょうてい）：mediation, arbitration 両（りょう）者（しゃ）の争（あらそ）いは調停によって解（かい）決（けつ）された。(The dispute was resolved through mediation.) 賃下げ（ちんさげ）：pay cut 経（けい）営（えい）不（ふ）振（しん）で賃下げが実（じっ）施（し）された。(A pay cut was implemented due to poor business performance.) 抓る（つねる）：to pinch 頬（ほお）を抓って痛みを確（かく）認（にん）した。(I pinched my cheek to check if it hurt.) つるつる：smooth, slippery この石（いし）はつるつるしている。(This stone is smooth and slippery.) 手遅れ（ておくれ）：too late 治（ち）療（りょう）するには手遅れだった。(It was too late for treatment.) 出来心（できごころ）：sudden impulse, temptation 出来心で万（まん）引（び）きしてしまった。(I shoplifted on a sudden impulse.) 手っ取り早い（てっとりばやい）：quick and easy 手っ取り早くお金を稼（かせ）ぐ方（ほう）法（ほう）はないか？(Is there a quick and easy way to earn money?) 戸締り（とじまり）：locking up (house/doors) 寝る前に戸締りを確（かく）認（にん）した。(I checked the locks before going to bed.) トラウマ：trauma 子供の頃の事故がトラウマになっている。(The childhood accident left me with trauma.) 丘陵（きゅうりょう）：hills, hill country 丘陵地（ち）帯（たい）に住（じゅう）宅（たく）が建（た）っている。(Houses are built in the hilly area.) ぎゅっと：tightly, firmly 手をぎゅっと握（にぎ）った。(I gripped the hand tightly.) 協議（きょうぎ）：discussion, conference 問題について協議を重（かさ）ねた。(We held repeated discussions about the issue.) 業者（ぎょうしゃ）：trader, vendor 修（しゅう）理（り）業者を呼（よ）んだ。(I called a repair vendor.) 共鳴（きょうめい）：resonance, sympathy 彼の考えに共鳴した。(I resonated with his ideas.) 切れ目（きれめ）：break, gap, pause 雨の切れ目に外（がい）出（しゅつ）する。(Go out during a break in the rain.) 食い違う（くいちがう）：to disagree, to be inconsistent 二人の意見が食い違っている。(Their opinions disagree.) 区画（くかく）：section, division 土（と）地（ち）を区画ごとに販（はん）売（ばい）する。(The land is sold by section.) 消しゴム（けしごむ）：eraser ノートの字を消しゴムで消（け）した。(I erased the writing in my notebook with an eraser.) 下宿（げしゅく）：boarding house 学生時代は下宿していた。(I stayed in a boarding house during college.) 欠席（けっせき）：absence 会議を欠席した理由を説明する。(Explain the reason for missing the meeting.) 69 Your browser does not support the audio element. SHOW CONTENTS 駆除（くじょ）：extermination, elimination 害（がい）虫（ちゅう）を駆除するために薬（やく）剤（ざい）を使った。(We used chemicals to exterminate the pests.) 口走る（くちばしる）：to blurt out 秘密をうっかり口走ってしまった。(I accidentally blurted out the secret.) グリーン車（ぐりーんしゃ）：first-class car (on Japanese trains) 出（しゅっ）張（ちょう）で新幹線のグリーン車を利（り）用（よう）した。(I used the first-class car on the Shinkansen for a business trip.) 群衆（ぐんしゅう）：crowd 群衆がステージの前に集（あつ）まっていた。(A crowd had gathered in front of the stage.) 警戒（けいかい）：vigilance, caution 台風接（せっ）近（きん）に警戒が必要だ。(Caution is necessary due to the approaching typhoon.) 原型（げんけい）：prototype, original form この神（じん）社（じゃ）の建（けん）築（ちく）は奈良時（じ）代（だい）の原型を保（たも）っている。(This shrine retains the prototype form from the Nara period.) 原産（げんさん）：origin, native (to a place) パイナップルは南（なん）米（べい）原産の果物だ。(Pineapples are a fruit native to South America.) 見識（けんしき）：insight, good judgment 彼の見識の高さには感（かん）心（しん）する。(I’m impressed by his depth of insight.) 原書（げんしょ）：original book (not a translation) シェイクスピアの原書で読んだ。(I read it in Shakespeare\u0026rsquo;s original text.) 交易（こうえき）：trade, commerce 古（こ）代（だい）の都市は交易の中（ちゅう）心（しん）地（ち）だった。(The ancient city was a center of trade.) 甲乙（こうおつ）：difference (usually small), ranking 二人の実（じつり）力（ょく）には甲乙つけがたい。(It\u0026rsquo;s hard to determine who is better between the two.) 公認（こうにん）：official recognition, authorization 彼は公認会（かい）計（けい）士（し）の資（し）格（かく）を持っている。(He holds a certified public accountant qualification.) 購買（こうばい）：purchasing, procurement 学校には購買部がある。(The school has a store for purchasing goods.) 心地よい（ここちよい）：pleasant, comfortable 心地よい風が吹いている。(A pleasant breeze is blowing.) 誇張（こちょう）：exaggeration 彼の話には少し誇張がある。(His story contains some exaggeration.) 骨董（こっとう）：antique 骨董品を収（しゅう）集（しゅう）するのが趣味だ。(My hobby is collecting antiques.) 拗らせる（こじらせる）：to worsen (an illness or situation) 風邪を拗らせて肺（はい）炎（えん）になった。(My cold worsened and turned into pneumonia.) 細やか（こまやか）：delicate, thoughtful 彼女の細やかな気（き）遣（づか）いに感（かん）謝（しゃ）している。(I appreciate her thoughtful attention.) 凝らす（こらす）：to apply oneself, to strain 工（く）夫（ふう）を凝らしてプレゼントを選（えら）んだ。(I put a lot of thought into choosing the gift.) 孤立（こりつ）：isolation 雪で村が孤立してしまった。(The village became isolated due to snow.) 70 Your browser does not support the audio element. SHOW CONTENTS 最善（さいぜん）：the best, utmost 最善を尽（づ）くして試験に臨（のぞ）んだ。(I did my best for the exam.) 採択（さいたく）：adoption, selection 新しい方（ほう）針（しん）が会議で採択された。(The new policy was adopted at the meeting.) 冴える（さえる）：to be clear, to be sharp 昨日は頭が冴えていて、仕事がはかどった。(My mind was sharp yesterday, and I got a lot done.) 裂ける（さける）：to tear, to split ナイフで切った袋が裂けて中（なか）身（み）がこぼれた。(The bag tore with the knife and the contents spilled out.) さては（さては）：I see, so that\u0026rsquo;s it さては君が犯人だな。(Ah, so you’re the culprit.) 仕入れ（しいれ）：stocking, purchasing (goods) 新鮮な魚を毎朝市場から仕入れている。(We buy fresh fish from the market every morning.) 施行（しこう）：enforcement, implementation 新しい法（ほう）律（りつ）が来月から施行される。(The new law will be enforced starting next month.) 試行（しこう）：trial, test 新しい制（せい）度（ど）を試行する期間が設（もう）けられた。(A trial period was established for the new system.) 下火（したび）：decline, subsiding ブームが下火になってきた。(The boom has started to subside.) 偲ぶ（しのぶ）：to reminisce, to remember 故（こ）人（じん）を偲んで静かに祈（いの）った。(I quietly prayed in remembrance of the deceased.) シビア（しびあ）：severe, strict 彼はシビアな意見をはっきり言うタイプだ。(He’s the type who expresses harsh opinions directly.) 地道（じみち）：steady, honest, sober 地道な努（ど）力（りょく）が成功につながる。(Steady effort leads to success.) 砂利（じゃり）：gravel 庭には砂利が敷（し）き詰（つ）められている。(The garden is covered with gravel.) 趣旨（しゅし）：purpose, gist このイベントの趣旨をご理解ください。(Please understand the purpose of this event.) 授与（じゅよ）：award, conferment 優（ゆう）勝（しょう）者（しゃ）にはメダルが授与される。(A medal will be awarded to the winner.) 消火（しょうか）：fire extinguishing 消（しょう）火（か）器（き）で火（ひ）を消火した。(The fire was extinguished with a fire extinguisher.) 消去（しょうきょ）：deletion, erasure ファイルを完（かん）全（ぜん）に消去した。(The file was completely deleted.) 触発（しょくはつ）：inspiration, trigger 彼の演（えん）説（ぜつ）に触発されて行（こう）動（どう）を起こした。(I was inspired by his speech and took action.) 怪我（けが）：injury スポーツ中に怪我をした。(I got injured while playing sports.) 郊外（こうがい）：suburbs 家族で郊外に引っ越した。(We moved to the suburbs as a family.) 71 Your browser does not support the audio element. SHOW CONTENTS 清純（せいじゅん）：purity, innocence 彼女は清純なイメージで人気がある。(She is popular for her pure image.) 生態（せいたい）：ecology, habitat 珍（めずら）しい鳥の生態を研（けん）究（きゅう）している。(They are studying the ecology of rare birds.) 制定（せいてい）：enactment, establishment 新しい憲（けん）法（ぽう）が制定された。(A new constitution was enacted.) 責務（せきむ）：duty, obligation 指（し）導（どう）者（しゃ）としての責務を果（は）たすべきだ。(You should fulfill your responsibilities as a leader.) 全域（ぜんいき）：entire area 台（たい）風（ふう）が市の全域に影（えい）響（きょう）を与（あた）えた。(The typhoon affected the entire city.) 全盛期（ぜんせいき）：prime, heyday この選（せん）手（しゅ）は今まさに全盛期にある。(This athlete is currently in their prime.) 前線（ぜんせん）：front line, weather front 寒（かん）冷（れい）前線が通（つう）過（か）して気（き）温（おん）が下（さ）がった。(The cold front passed and the temperature dropped.) 全滅（ぜんめつ）：annihilation, complete destruction チームは全滅してしまった。(The team was completely wiped out.) 前例（ぜんれい）：precedent これは前例のない事（じ）態（たい）だ。(This is an unprecedented situation.) 操縦（そうじゅう）：piloting, steering 彼は飛行機を操縦できる。(He can pilot a plane.) 素材（そざい）：material, ingredient 良い料理は良い素材から生（う）まれる。(Good cooking starts with good ingredients.) 備わる（そなわる）：to be equipped with, to possess 彼はリーダーに必要な素（そ）質（しつ）が備わっている。(He has the qualities required of a leader.) 退化（たいか）：degeneration, retrogression 文（ぶん）明（めい）の進（しん）歩（ぽ）によってある能力が退化した。(Certain abilities have degenerated due to civilization’s advancement.) ただでさえ：even under normal circumstances ただでさえ忙しいのに、さらに仕事が増えた。(I\u0026rsquo;m already busy, and now I have even more work.) 協同（きょうどう）：cooperation, collaboration 二（に）国（こく）は協同してプロジェクトを進めている。(The two countries are collaborating on a project.) 恐竜（きょうりゅう）：dinosaur 恐竜の化（か）石（せき）が発（はっ）見（けん）された。(A dinosaur fossil was discovered.) 巨匠（きょしょう）：master, great artist 映（えい）画（が）界（かい）の巨匠が新（しん）作（さく）を発（はっ）表（ぴょう）した。(A master of the film world released a new work.) 食い止める（くいとめる）：to check, to prevent 火（か）災（さい）の拡（かく）大（だい）を食い止めた。(The spread of the fire was prevented.) 位する（くらいする）：to rank, to be located この大学は国（こく）内（ない）でも上（じょう）位（い）に位する。(This university ranks among the top in the country.) 軒（のき）：eaves, house counter 軒（のき）先（さき）にツバメの巣（す）があった。(There was a swallow’s nest under the eaves.) 72 Your browser does not support the audio element. SHOW CONTENTS 欠員（けついん）：vacancy 新しい社員を採（さい）用（よう）して欠員を補（おぎな）った。(We hired a new employee to fill the vacancy.) 家来（けらい）：retainer, servant 将（しょう）軍（ぐん）とその家来たちは城（しろ）に戻（もど）った。(The general and his retainers returned to the castle.) 現役（げんえき）：active duty 彼は今でも現役の教（きょう）師（し）だ。(He is still an active teacher.) 原子力（げんしりょく）：nuclear power 原子力発（はつ）電（でん）所（しょ）の安（あん）全（ぜん）性（せい）が問（と）われている。(The safety of nuclear power plants is being questioned.) 減税（げんぜい）：tax reduction 政府は景（けい）気（き）対策（たいさく）として減税を実（じっ）施（し）した。(The government implemented tax cuts to boost the economy.) 顕著（けんちょ）：remarkable, striking 彼の進（しん）歩（ぽ）は顕著だった。(His progress was remarkable.) 合成（ごうせい）：synthesis, composition この写真は合成されたものだ。(This photo is a composite.) 拘束（こうそく）：restraint, restriction 容（よう）疑（ぎ）者（しゃ）は警察に拘束された。(The suspect was taken into custody by the police.) 高揚（こうよう）：uplift, elevation (of spirit) 勝（しょう）利（り）によってチームの士（し）気（き）が高揚した。(The victory boosted the team’s morale.) 心構え（こころがまえ）：mental readiness, mindset 緊（きん）急（きゅう）時（じ）に備（そな）えて心構えが必要だ。(You need to be mentally prepared for emergencies.) 孤独（こどく）：loneliness 彼は都（と）会（かい）での孤独に耐（た）えられなかった。(He couldn\u0026rsquo;t bear the loneliness of city life.) 裁決（さいけつ）：ruling, judgment 裁（さい）判（ばん）官（かん）が最（さい）終（しゅう）的（てき）な裁決を下（くだ）した。(The judge gave the final ruling.) 萎れる（しおれる）：to wilt, to droop 花が水（みず）不（ぶ）足（そく）で萎れてしまった。(The flowers wilted due to lack of water.) 強いる（しいる）：to force, to compel 無（む）理（り）を強いるような働（はたら）き方（かた）は良くない。(It\u0026rsquo;s not good to force unreasonable work.) 市街（しがい）：urban area, city streets 市街地は交（こう）通（つう）渋（じゅう）滞（たい）がひどい。(There is heavy traffic in the urban area.) 式場（しきじょう）：ceremony hall, venue 結婚式はホテルの式場で行（おこな）われた。(The wedding was held at a hotel ceremony hall.) 直訴（じきそ）：direct appeal 苦（く）情（じょう）を社長に直訴した。(I made a direct appeal to the company president.) 慕う（したう）：to yearn for, to admire 多くの弟（で）子（し）が師（し）匠（しょう）を慕って集（あつ）まった。(Many disciples gathered out of admiration for their master.) 見物人（けんぶつにん）：spectator 花火大会には多くの見物人が集（あつ）まった。(Many spectators gathered for the fireworks festival.) 見物（けんぶつ）：sightseeing, watching 京都でお寺を見物した。(We went sightseeing at temples in Kyoto.) 73 Your browser does not support the audio element. SHOW CONTENTS 実権（じっけん）：real power, actual authority 彼は会社の実権を握（にぎ）っている。(He holds the real power in the company.) シナリオ：scenario, script この映画のシナリオは非（ひ）常（じょう）に感（かん）動（どう）的（てき）だった。(The script of this movie was very moving.) 凌ぐ（しのぐ）：to surpass, to endure この冬は去年の寒さを凌いでいる。(This winter surpasses last year\u0026rsquo;s cold.) 耳鼻科（じびか）：otolaryngology (ear, nose, and throat department) 花（か）粉（ふん）症（しょう）で耳鼻科を受（じゅ）診（しん）した。(I visited the ENT department for hay fever.) 終発（しゅうはつ）：last train 終発に乗（の）り遅（おく）れてしまった。(I missed the last train.) 熟知（じゅくち）：deep understanding, familiarity 彼は法律に熟知している。(He has a deep understanding of the law.) 生涯（しょうがい）：lifetime 教師として生涯を捧（ささ）げた。(He devoted his entire life to being a teacher.) 譲歩（じょうほ）：concession, compromise 双（そう）方（ほう）が譲歩して合（ごう）意（い）に至（いた）った。(Both parties made concessions and reached an agreement.) 書評（しょひょう）：book review 雑誌に彼の新（しん）刊（かん）の書（しょ）評（ひょう）が載（の）っていた。(There was a review of his new book in the magazine.) 進展（しんてん）：progress, development 交（こう）渉（しょう）に進展が見られた。(There was progress in the negotiations.) 神秘（しんぴ）：mystery 宇（う）宙（ちゅう）は未（いま）だに多くの神（しん）秘（ぴ）に包（つつ）まれている。(The universe is still shrouded in many mysteries.) 澄ます（すます）：to clear (one’s mind, voice), to look unconcerned 彼は何（なに）事（ごと）もなかったかのように顔を澄ました。(He kept a straight face as if nothing had happened.) 制裁（せいさい）：sanction, punishment 国際社会はその国に経済制裁を科（か）した。(The international community imposed economic sanctions on that country.) 清聴（せいちょう）：courteous listening (humble) ご清聴ありがとうございました。(Thank you for your kind attention.) 声明（せいめい）：statement, declaration 政府は公（こう）式（しき）な声明を発（はっ）表（ぴょう）した。(The government issued an official statement.) 線香（せんこう）：incense stick 墓（ぼ）前（ぜん）に線香を供（そな）えた。(We offered incense at the grave.) 先方（せんぽう）：the other party この件については先方と協（きょう）議（ぎ）中（ちゅう）です。(We are currently in discussions with the other party on this matter.) 促進（そくしん）：promotion, acceleration 健康促進のために運動が推（すい）奨（しょう）されている。(Exercise is recommended to promote good health.) 講義（こうぎ）：lecture 今日の講義は経済学の基（き）本（ほん）だった。(Today’s lecture was about the basics of economics.) 講堂（こうどう）：auditorium 講堂で入学式が行（おこな）われた。(The entrance ceremony was held in the auditorium.) 74 Your browser does not support the audio element. SHOW CONTENTS 聳える（そびえる）：to tower, to rise high 山々が空に向（む）かって聳えていた。(The mountains towered into the sky.) 背く（そむく）：to disobey, to go against 命令に背いた兵（へい）士（し）は処（しょ）罰（ばつ）された。(The soldier who disobeyed the order was punished.) 携わる（たずさわる）：to be involved in, to engage in 父は医（い）療（りょう）に携わる仕事をしている。(My father works in the medical field.) 立ち退く（たちのく）：to vacate, to move out 再（さい）開（かい）発（はつ）のために立ち退きを命（ぬい）じられた。(We were ordered to vacate for redevelopment.) 探検（たんけん）：expedition, exploration 彼らはアマゾンの奥（おく）地（ち）を探検した。(They explored the depths of the Amazon.) 着席（ちゃくせき）：taking a seat 全員が着席してから会議が始まった。(The meeting began after everyone was seated.) ちらちら：flickering, glancing repeatedly 雪がちらちら降り始めた。(Snow began to fall lightly.) 月並み（つきなみ）：commonplace, ordinary その発言は月並みで印（いん）象（しょう）に残（のこ）らなかった。(The remark was ordinary and unremarkable.) 連ねる（つらねる）：to line up, to join 彼の名前も著（ちょ）者（しゃ）の一（いち）覧（らん）に連ねられていた。(His name was also listed among the authors.) 出来物（できもの）：boil, pimple 額（ひたい）に出来物ができて痛い。(I have a painful boil on my forehead.) 出くわす（でくわす）：to encounter unexpectedly 昨日、駅で偶（ぐう）然（ぜん）彼に出くわした。(I unexpectedly ran into him at the station yesterday.) 手強い（てごわい）：formidable, tough 今（こん）回（かい）の相手は手強そうだ。(This opponent seems tough.) 独裁（どくさい）：dictatorship 彼は独裁体（たい）制（せい）を築（きず）いた。(He established a dictatorship.) 土壇場（どたんば）：last moment, critical moment 土壇場で逆（ぎゃく）転（てん）に成功した。(We managed a comeback at the last moment.) 突破（とっぱ）：breakthrough, breakthrough point 厳（きび）しい審（しん）査（さ）を突破した。(We passed the rigorous screening.) 強情（ごうじょう）：stubbornness, obstinacy 彼は強情で自分の意見を曲（ま）げない。(He’s stubborn and won’t change his opinion.) 洪水（こうずい）：flood 大（おお）雨（あめ）で川が氾（はん）濫（らん）し、洪水になった。(The heavy rain caused the river to overflow and flood.) 工事（こうじ）：construction work 道（どう）路（ろ）の工事が続いている。(Road construction is ongoing.) 香水（こうすい）：perfume 新しい香水の匂（にお）いがとても良い。(The scent of the new perfume is wonderful.) 後輩（こうはい）：junior (at work or school) 後輩に仕事を丁（てい）寧（ねい）に教えた。(I taught the job carefully to my junior.) 75 Your browser does not support the audio element. SHOW CONTENTS 後退（こうたい）：retreat, recession 景気の後退が続いている。(The economic recession is continuing.) 光熱費（こうねつひ）：utility expenses (electricity and heating) 冬は光熱費が高くなる。(Utility expenses go up in winter.) 高配（こうはい）：kindness, consideration (formal, often used in set phrases) ご高配を賜（たまわ）り、誠（まこと）にありがとうございます。(Thank you sincerely for your kind consideration.) 巧妙（こうみょう）：clever, skillful 巧妙なトリックで観（かん）客（きゃく）を驚（おどろ）かせた。(He amazed the audience with a clever trick.) 心得る（こころえる）：to understand, to be aware of 社（しゃ）会（かい）人（じん）としてのマナーを心得ている。(He is well aware of professional manners.) 熟す（こなす）：to handle, to digest (tasks or information) 彼は多くの仕事を効（こう）率（りつ）よく熟している。(He handles a lot of work efficiently.) 根本（こんぽん）：foundation, root, basis 問題の根本から解決しなければならない。(We must solve the issue from the root.) 栄える（さかえる）：to prosper, to flourish 古（こ）代（だい）文（ぶん）明（めい）がこの地に栄えた。(An ancient civilization flourished in this area.) 思考（しこう）：thinking, thought 論理的な思考が求められる。(Logical thinking is required.) シック：chic, stylish 彼女はシックな服（ふく）装（そう）で現（あらわ）れた。(She appeared in a chic outfit.) 忍ぶ（しのぶ）：to endure, to hide 人（ひと）目（め）を忍んで涙（なみだ）を流（なが）した。(She shed tears in secret.) しでかす：to perpetrate, to commit (a blunder) また大きなミスをしでかしてしまった。(I’ve made another big blunder.) 社交（しゃこう）：socializing, social life 彼は社交が得（とく）意（い）だ。(He is good at socializing.) 周期（しゅうき）：cycle, period 月（つき）の満（み）ち欠（か）けの周期は約29日だ。(The moon\u0026rsquo;s cycle is about 29 days.) 三味線（しゃみせん）：shamisen (traditional Japanese three-stringed instrument) 三味線の音（ね）色（いろ）が響（ひび）いていた。(The sound of the shamisen echoed.) 収集（しゅうしゅう）：collection, gathering ゴミの収集日（び）は毎週火曜日です。(Garbage collection is on Tuesdays.) 収束（しゅうそく）：conclusion, settlement, containment 感（かん）染（せん）拡（かく）大（だい）がようやく収束した。(The spread of infection has finally been contained.) 出願（しゅつがん）：application (esp. for a patent or school) 大学に出願する手（て）続（つづ）きをした。(I applied to the university.) 故障（こしょう）：breakdown, malfunction 車が突（とつ）然（ぜん）故障した。(The car broke down suddenly.) 黒板（こくばん）：blackboard 教室の黒板に名前を書いた。(I wrote my name on the classroom blackboard.) 76 Your browser does not support the audio element. SHOW CONTENTS 主導（しゅどう）：leadership, initiative 政府が改（かい）革（かく）を主導した。(The government led the reform.) 樹立（じゅりつ）：establishment (of a system, organization, etc.) 新しい政（せい）権（けん）が樹立された。(A new administration was established.) 凄まじい（すさまじい）：tremendous, incredible 凄まじい勢（ぜ）いで雨が降っている。(It’s raining with tremendous force.) 切実（せつじつ）：earnest, serious, heartfelt 被（ひ）災（さい）者（しゃ）たちの支（し）援（えん）を切実に願っている。(We earnestly hope for support for the disaster victims.) 宣言（せんげん）：declaration, proclamation 独（どく）立（りつ）を宣言した。(They declared independence.) 先行（せんこう）：precedence, going ahead 技（ぎ）術（じゅつ）開（かい）発（はつ）で他社より先行している。(They are ahead of other companies in technological development.) 潜入（せんにゅう）：infiltration, sneaking in スパイが敵（てき）陣（じん）に潜入した。(A spy infiltrated the enemy camp.) 占領（せんりょう）：occupation, capture 敵（てき）軍（ぐん）が都市を占領した。(The enemy army occupied the city.) 添う（そう）：to accompany, to follow 両親に添って病院へ行った。(I accompanied my parents to the hospital.) 喪失（そうしつ）：loss 彼は事故で記（き）憶（おく）を喪失した。(He lost his memory in the accident.) 揃い（そろい）：set, complete (group) 家族揃いで旅行に出かけた。(The whole family went on a trip together.) 体当たり（たいあたり）：body slam, risking oneself 体当たりで説（せっ）得（とく）した。(I persuaded him with all my might.) 体質（たいしつ）：constitution, nature (of a person or system) アレルギー体質なので注意が必要だ。(I need to be careful because I have allergies.) 大胆（だいたん）：bold, daring 大胆な発（はつ）言（げん）で注（ちゅう）目（もく）を集（あつ）めた。(His bold remarks drew attention.) 妥結（だけつ）：settlement, agreement 両者はようやく妥結に至（いた）った。(The two parties finally reached an agreement.) 辿り着く（たどりつく）：to finally reach, to arrive after difficulty 山（さん）頂（ちょう）に辿り着いたときは感（かん）動（どう）した。(I was moved when I finally reached the summit.) 調和（ちょうわ）：harmony, balance 自然との調和を大切にしている。(We value harmony with nature.) 手当て（てあて）：treatment, allowance けが人の手当てをした。(We treated the injured.) 定説（ていせつ）：established theory その理（り）論（ろん）は長（なが）年（ねん）定説とされてきた。(That theory has long been considered an established one.) 越える（こえる）：to cross over, to surpass 山を越えて隣の村に行った。(We crossed the mountain to reach the neighboring village.) 77 Your browser does not support the audio element. SHOW CONTENTS 摘出（てきしゅつ）：extraction, removal 腫（しゅ）瘍（よう）を摘出する手（しゅ）術（じゅつ）を受けた。(I underwent surgery to have the tumor removed.) てっきり：surely, certainly (used when assuming something incorrectly) てっきり彼が来ると思っていた。(I was sure he would come.) 鉄棒（てつぼう）：horizontal bar, iron bar 体（たい）育（いく）の授（じゅ）業（ぎょう）で鉄棒を使った。(We used the horizontal bar in P.E. class.) 手直し（てなおし）：correction, adjustment この書類に少し手直しが必要だ。(This document needs a few adjustments.) 転じる（てんじる）：to shift, to turn 彼の関（かん）心（しん）は芸（げい）術（じゅつ）から科（か）学（がく）に転じた。(His interest shifted from art to science.) 特許（とっきょ）：patent 新技術の特許を取（しゅ）得（とく）した。(We obtained a patent for the new technology.) 泥仕合（どろじあい）：mud fight, ugly quarrel 両者の討（とう）論（ろん）は泥仕合に発（はっ）展（てん）した。(The debate between them turned into an ugly quarrel.) 並大抵（なみたいてい）：ordinary, common (usually used with negative to mean \u0026ldquo;not easy\u0026rdquo;) それは並大抵の努（ど）力（りょく）ではできない。(That can\u0026rsquo;t be done with ordinary effort.) 舐める（なめる）：to lick, to underestimate 飴（あめ）を舐めながら歩いていた。(He was walking while licking candy.) 相手を舐めてかかると痛い目（め）に遭（あ）うよ。(If you underestimate your opponent, you’ll get hurt.) 慣らす（ならす）：to accustom, to tame 毎日のランニングで体を慣らす。(I get my body used to daily running.) 似通う（にかよう）：to resemble closely 二人の考え方はよく似通っている。(Their way of thinking closely resembles each other.) 荷造り（にづくり）：packing 引っ越しのために荷造りを始めた。(I started packing for the move.) 日数（にっすう）：number of days 完成までに必要な日数を教えてください。(Please tell me how many days are needed until completion.) 抜きん出る（ぬきんでる）：to stand out, to excel 彼は他の選手よりも抜きん出ている。(He stands out among the other players.) 配列（はいれつ）：arrangement, sequence, array データを昇（しょう）順（じゅん）に配列する。(Arrange the data in ascending order.) 育む（はぐくむ）：to nurture, to foster 自然の中で子どもたちの心を育む。(We nurture children\u0026rsquo;s hearts in nature.) 暴露（ばくろ）：exposure, revelation 政治家のスキャンダルが暴露された。(The politician’s scandal was exposed.) 覆す（くつがえす）：to overturn, to reverse 常（じょう）識（しき）を覆す発（はっ）見（けん）があった。(There was a discovery that overturned common sense.) 刑務所（けいむしょ）：prison 犯人は刑務所に収（しゅう）監（かん）された。(The criminal was imprisoned.) ご存知（ごぞんじ）：knowing (honorific form) 彼をご存知ですか？(Do you know him?) 78 Your browser does not support the audio element. SHOW CONTENTS 激安（げきやす）：super cheap この店では激安セールが開（かい）催（さい）中（ちゅう）だ。(This store is holding a super cheap sale.) 決着（けっちゃく）：conclusion, settlement 長い議論がようやく決着した。(The long debate finally came to a conclusion.) 減給（げんきゅう）：salary reduction 遅刻が続いて減給された。(I got a salary cut due to repeated tardiness.) 健在（けんざい）：in good health, alive and well 祖母は90歳を過ぎても健在だ。(My grandmother is still going strong at over 90.) 件数（けんすう）：number of cases 問（と）い合（あ）わせの件数が増（ぞう）加（か）した。(The number of inquiries increased.) 見地（けんち）：point of view 法（ほう）的（てき）見地から判断する。(Judge from a legal point of view.) 高原（こうげん）：plateau, highlands 夏は高原で避（ひ）暑（しょ）を楽しんだ。(We enjoyed a summer retreat in the highlands.) 洪水（こうずい）：flood 台風の影（えい）響（きょう）で洪水が発（はっ）生（せい）した。(A flood occurred due to the typhoon.) 講壇（こうだん）：platform, podium 教（きょう）授（じゅ）は講壇に立って講（こう）義（ぎ）を始めた。(The professor stood at the podium and began the lecture.) 講読（こうどく）：reading (aloud or intensively), subscription 古（こ）典（てん）文（ぶん）学（がく）の講読を行（おこな）った。(We read classical literature intensively.) 公募（こうぼ）：public offering, open recruitment 公募で新しいロゴを募（ぼ）集（しゅう）した。(We publicly solicited new logo designs.) 小柄（こがら）：short stature, petite 彼女は小柄だが力（ちから）持ちだ。(She is petite but strong.) 心強い（こころづよい）：reassuring, encouraging 彼が一緒にいてくれて心強い。(It’s reassuring to have him with me.) 誤作動（ごさどう）：malfunction センサーが誤作動を起こした。(The sensor malfunctioned.) 誤差（ごさ）：margin of error 測（そく）定（てい）には多（た）少（しょう）の誤差がある。(There’s a slight margin of error in the measurement.) 故人（こじん）：the deceased 故人を偲（しの）んで黙（もく）祷（とう）した。(We held a moment of silence for the deceased.) 凝る（こる）：to be absorbed in, to become stiff 最近は料理に凝っている。(Lately, I’ve been really into cooking.) 肩（かた）が凝ってつらい。(My shoulders are stiff and painful.) 在来（ざいらい）：conventional, traditional 在来線に乗り換える。(Transfer to a conventional train line.) 先送り（さきおくり）：postponement 会議の議（ぎ）題（だい）が先送りされた。(The meeting agenda was postponed.) 策（さく）：plan, measure, scheme 有（ゆう）効（こう）な策を講（こう）じる必要がある。(We need to take effective measures.) 79 Your browser does not support the audio element. SHOW CONTENTS 捧げる（ささげる）：to offer, to dedicate 彼は人生を研（けん）究（きゅう）に捧げた。(He dedicated his life to research.) 定める（さだめる）：to set, to determine 法（ほう）律（りつ）で年（ねん）齢（れい）の上（じょう）限（げん）が定められている。(The age limit is set by law.) 賛否（さんぴ）：pros and cons その案には賛否が分かれている。(There are mixed opinions about the proposal.) 仕上げる（しあげる）：to finish up レポートを今（こん）夜（や）中（じゅう）に仕上げるつもりだ。(I plan to finish the report tonight.) 滴（しずく）：droplet, drop (of water) 葉（は）の先に水の滴が光（ひか）っていた。(Drops of water sparkled on the tip of the leaf.) 持続（じぞく）：continuation, sustainability 効果（こうか）を持続させるには定（てい）期（き）的（てき）な使（し）用（よう）が必要だ。(Regular use is necessary to sustain the effect.) 品薄（しなうす）：scarcity, shortage of goods 人気商品は常（つね）に品薄状（じょう）態（だい）だ。(Popular products are always in short supply.) 釈明（しゃくめい）：explanation, excuse 誤（ご）解（かい）を招（まね）いた点（てん）について釈明した。(I explained the points that caused misunderstanding.) 守衛（しゅえい）：security guard 守衛が入（いり）口（ぐち）で来（らい）訪（ほう）者（しゃ）を確認している。(The security guard is checking visitors at the entrance.) 出費（しゅっぴ）：expense 思わぬ出費で財布が空（から）になった。(Unexpected expenses emptied my wallet.) 主として（しゅとして）：mainly, primarily この仕事は主として若（わか）者（もの）が担（たん）当（とう）する。(This work is primarily handled by young people.) 手法（しゅほう）：technique, method 新しい手法を導（どう）入（にゅう）して生（せい）産（さん）性（せい）が上がった。(Productivity increased with the introduction of a new method.) 城下町（じょうかまち）：castle town その地域は昔、城下町として栄（さか）えた。(That area once flourished as a castle town.) 情勢（じょうせい）：situation, state of affairs 国（こく）際（さい）情勢が不（ふ）安（あん）定（てい）になっている。(The international situation is becoming unstable.) 親善（しんぜん）：friendship, goodwill 親善試合が行（おこな）われた。(A friendly match was held.) 辛抱（しんぼう）：patience, endurance 今は辛抱の時だ。(Now is the time to be patient.) 据え付ける（すえつける）：to install, to fix in place 新しいエアコンを据え付けた。(We installed a new air conditioner.) 廃れる（すたれる）：to go out of use, to become obsolete 一（いち）時（じ）流（りゅう）行（こう）した言（こと）葉（ば）も今では廃れてしまった。(Words that were once popular are now obsolete.) 国土（こくど）：territory, land of a country 国土を守（まも）ることは国（こっ）家（か）の責（せき）務（む）だ。(Protecting the national land is a duty of the state.) 言葉遣い（ことばづかい）：wording, way of speaking 丁（てい）寧（ねい）な言葉遣いを心（こころ）掛（が）けなさい。(Be mindful of using polite language.) 80 Your browser does not support the audio element. SHOW CONTENTS 誠意（せいい）：sincerity, good faith 誠意をもって対（たい）応（おう）します。(I will respond with sincerity.) 成否（せいひ）：success or failure プロジェクトの成否は準（じゅん）備（び）にかかっている。(The success or failure of the project depends on preparation.) 政務署（せいむしょ）：government office 書類は政務署に提（てい）出（しゅつ）してください。(Please submit the documents to the government office.) 背負う（せおう）：to carry on one’s back, to bear 彼は家族の期（き）待（たい）を背負っている。(He bears his family’s expectations.) 摂取（せっしゅ）：intake, ingestion 毎日のビタミン摂取が大切だ。(Daily vitamin intake is important.) 相応（そうおう）：suitable, appropriate 努力に相応した結（けっ）果（か）が得られた。（I got results appropriate to the effort I put in.） 増強（ぞうきょう）：reinforcement, strengthening セキュリティを増強した。(Security was reinforced.) 訴訟（そしょう）：lawsuit 彼は名（めい）誉（よ）毀（き）損（そん）で訴訟を起こした。(He filed a lawsuit for defamation.) 唆る（そそる）：to arouse, to stimulate (emotion or appetite) 食（しょく）欲（よく）を唆る香（かお）りだ。(It’s an aroma that whets the appetite.) 反る（そる）：to warp, to bend backward 暑さで板（いた）が反ってしまった。(The board warped in the heat.) 題する（だいする）：to be titled 彼は「未来への挑（ちょう）戦（せん）」と題する講（こう）演（えん）を行った。(He gave a lecture titled “Challenge to the Future.”) 棚卸し（たなおろし）：inventory, stocktaking 年（ねん）末（まつ）に棚卸しを行（おこな）う。(Inventory is done at the end of the year.) 段取り（だんどり）：arrangement, procedure 段取りをよく考えて行（こう）動（どう）する。(Plan the procedure carefully before acting.) 淡白（たんぱく）：light (flavor), indifferent 彼は性（せい）格（かく）が淡白だ。(He has a reserved personality.) 調印（ちょういん）：signing (a treaty/agreement) 両（りょう）国（こく）は和（へい）平（わ）条（じょう）約（やく）に調印した。(The two countries signed a peace treaty.) 聴診器（ちょうしんき）：stethoscope 医者は聴診器で心（しん）音（おん）を確認した。(The doctor checked the heartbeat with a stethoscope.) 重宝（ちょうほう）：convenient, handy この道（どう）具（ぐ）はとても重宝している。(This tool is very handy.) 使いこなす（つかいこなす）：to master (a tool or skill) 彼はパソコンを使いこなしている。(He has mastered using the computer.) 突く（つく）：to poke, to thrust 杖（つえ）で地（ち）面（めん）を突いた。(He poked the ground with his cane.) 細かい（こまかい）：detailed, fine 彼は細かい作（さ）業（ぎょう）が得（とく）意（い）だ。(He is good at detailed work.) 81 Your browser does not support the audio element. SHOW CONTENTS 手堅い（てがたい）：steady, reliable 彼は手堅い投（とう）資（し）を選（えら）ぶタイプだ。(He’s the type who chooses steady investments.) 適性（てきせい）：aptitude, suitability 彼は営（えい）業（ぎょう）職（しょく）に適性がある。(He has an aptitude for sales work.) 再建（さいけん）：reconstruction, rebuilding 地（じ）震（しん）で被（ひ）害（がい）を受けた町を再建する。(Rebuild the town damaged by the earthquake.) 悟る（さとる）：to perceive, to realize 自分の間（ま）違（ちが）いを悟った。(I realized my mistake.) 産出（さんしゅつ）：production, yield この地（ち）域（いき）は石（せき）油（ゆ）を多く産出する。(This region produces a lot of oil.) 参照（さんしょう）：reference, consultation 詳（しょう）細（さい）は資（し）料（りょう）を参照してください。(Please refer to the document for details.) 山脈（さんみゃく）：mountain range アルプス山脈は美しい景（け）色（しき）で有名だ。(The Alps are famous for their beautiful scenery.) 敷金（しききん）：security deposit アパートを借りる時に敷金を払った。(I paid a security deposit when I rented the apartment.) 仕切り（しきり）：partition, divider 部屋はカーテンで仕切りをつけた。(I divided the room with a curtain.) 自在（じざい）：freely, at will 彼は英語を自在に操（あやつ）る。(He uses English freely.) 史上（しじょう）：in history これは史上最（さい）大（だい）の発（はっ）見（けん）だ。(This is the greatest discovery in history.) 自炊（じすい）：cooking for oneself 一（ひと）人（り）暮（ぐ）らしを始めて自炊するようになった。(I started cooking for myself after living alone.) 下心（したごころ）：ulterior motive 彼の親（しん）切（せつ）には下心があるかもしれない。(His kindness may have an ulterior motive.) 質屋（しちや）：pawn shop 古（ふる）い時（と）計（けい）を質屋に持ち込んだ。(I took my old watch to the pawn shop.) 萎びる（しなびる）：to wilt, to shrivel 野菜が冷蔵庫で萎びてしまった。(The vegetables shriveled in the fridge.) 失念（しつねん）：forgetting 会議の時間を失念していた。(I forgot the time of the meeting.) 執拗（しつよう）：persistent, relentless 彼は執拗に質問を繰（く）り返（かえ）した。(He persistently repeated his questions.) 指摘（してき）：pointing out, indication ミスを上司に指摘された。(My boss pointed out my mistake.) 木の葉（このは）：tree leaves 秋になると木の葉が色づく。(Tree leaves change color in autumn.) 込む（こむ）：to be crowded 電車が朝からとても込んでいた。(The train was very crowded this morning.) 82 Your browser does not support the audio element. SHOW CONTENTS 修業（しゅぎょう）：training, learning 彼は寿司職（しょく）人（にん）になるために長年修業した。(He trained for many years to become a sushi chef.) 就任（しゅうにん）：inauguration, assumption of office 彼女は新しい校（こう）長（ちょう）として就任した。(She assumed office as the new principal.) 修行（しゅぎょう）：discipline, ascetic practice 武（ぶ）道（どう）の修行を積（つ）むことで精（せい）神（しん）を鍛（きた）える。(Through martial arts training, one strengthens the mind.) 受注（じゅちゅう）：receiving orders 我（わ）が社（しゃ）は海（かい）外（がい）から大（たい）量（りょう）の受注を得（え）た。(Our company received a large number of orders from overseas.) 出演（しゅつえん）：appearance (on stage, TV, etc.) 彼はテレビ番（ばん）組（ぐみ）にレギュラー出演している。(He appears regularly on a TV show.) 出動（しゅつどう）：mobilization, dispatch 消（しょう）防（ぼう）隊（たい）が火（か）災（さい）現（げん）場（ば）に出動した。(The fire brigade was dispatched to the fire scene.) 上位（じょうい）：higher rank, top position 彼は試験で常（つね）に上位に入（はい）っている。(He always ranks at the top in exams.) 推移（すいい）：transition, change 景（けい）気（き）の推移を注（ちゅう）意（い）深（ぶか）く観（かん）察（さつ）する必要がある。(It’s necessary to carefully observe economic trends.) 推進（すいしん）：promotion, propulsion 科（か）学（がく）技（ぎ）術（じゅつ）の推進が国（くに）の成（せい）長（ちょう）に不（ふ）可（か）欠（けつ）だ。(The promotion of science and technology is essential to national growth.) 精算機（せいさんき）：fare adjustment machine 改（かい）札（さつ）の横（よこ）に精算機が設（せっ）置（ち）されている。(A fare adjustment machine is installed next to the ticket gate.) 盛大（せいだい）：grand, magnificent 彼の送（そう）別（べつ）会（かい）は盛大に行（おこな）われた。(His farewell party was held in grand style.) 静的（せいてき）：static, passive 静的なページは動（どう）的（てき）ページよりも読（よ）み込（こ）みが速（はや）い。(Static pages load faster than dynamic ones.) 先代（せんだい）：predecessor 先代の社長は非常に厳（げん）格（かく）な人だった。(The previous company president was a very strict person.) 増税（ぞうぜい）：tax increase 政府は年（ねん）内（ない）に増税を検（けん）討（とう）している。(The government is considering a tax increase within the year.) 装備（そうび）：equipment, gear 登（と）山（ざん）前に必要な装備を確認してください。(Please check the necessary gear before climbing.) 続々と（ぞくぞくと）：one after another 新しい商品が続々と店（てん）頭（とう）に並（なら）んでいる。(New products are appearing in stores one after another.) 大概（たいがい）：generally, mostly 大概の問題は話（はな）し合（あ）えば解（かい）決（けつ）できる。(Most problems can be resolved through discussion.) 態勢（たいせい）：readiness, system チームは緊（きん）急（きゅう）事（じ）態（たい）に備（そな）えて態勢を整（ととの）えた。(The team prepared a system for emergency situations.) 怠慢（たいまん）：negligence, laziness 業（ぎょう）務（む）上（じょう）の怠慢が事（じ）故（こ）の原（げん）因（いん）だった。(Workplace negligence was the cause of the accident.) 対面（たいめん）：face-to-face meeting 上司と対面で話す機（き）会（かい）があった。(I had the chance to speak with my boss face-to-face.) 83 Your browser does not support the audio element. SHOW CONTENTS 打開（だかい）：breakthrough 難（なん）局（きょく）の打開策（さく）を練（ね）っている。(We are working out a strategy to break through the deadlock.) 高台（たかだい）：elevated place, high ground 津（つ）波（なみ）を避（さ）けるために高台に避（ひ）難（なん）した。(We evacuated to high ground to avoid the tsunami.) 多岐（たき）：diverse, wide-ranging 彼の研（けん）究（きゅう）は多岐にわたっている。(His research covers a wide range of topics.) 立ち往生（たちおうじょう）：being stuck, stalling 雪で車が立ち往生した。(The car got stuck due to the snow.) 弛み（たるみ）：slack, looseness ロープに弛みが出てきた。(The rope has started to slacken.) 弛む（たるむ）：to slacken, to loosen 長（ちょう）時（じ）間（かん）使ったせいでゴムが弛んでしまった。(The rubber slackened from prolonged use.) 他方（たほう）：on the other hand 一（いっ）方（ぽう）では賛（さん）成（せい）だが、他方では懸（け）念（ねん）もある。(On one hand I agree, but on the other hand, I have concerns.) 賜る（たまわる）：to be granted (honorific) ご助（じょ）言（げん）を賜り、ありがとうございます。(Thank you for your valuable advice.) 探究（たんきゅう）：inquiry, pursuit (of knowledge) 真（しん）理（り）の探究に人生を捧（ささ）げた。(He devoted his life to the pursuit of truth.) 中枢（ちゅうすう）：core, center この機（き）関（かん）は政（せい）治（じ）の中枢を担（にな）っている。(This institution is at the core of politics.) 著名（ちょめい）：famous, well-known 著名な作（さっ）家（か）の講（こう）演（えん）を聞いた。(I attended a lecture by a famous writer.) 束の間（つかのま）：brief moment 束の間の休（きゅう）息（そく）を楽しんだ。(I enjoyed a brief moment of rest.) 痛切（つうせつ）：keen, heartfelt 失敗の責（せき）任（にん）を痛切に感じている。(I feel the responsibility for the failure deeply.) 堤（つつみ）：embankment, levee 川（かわ）沿（ぞ）いに堤が築（きず）かれている。(A levee is built along the river.) 手形（てがた）：bill (of exchange), promissory note 手形の支（し）払（はら）い期（き）日（じつ）が近（ちか）づいている。(The due date for the promissory note is approaching.) 手際（てぎわ）：skill, handling 彼女の料理の手際は素晴らしい。(Her cooking skills are excellent.) 手錠（てじょう）：handcuffs 犯人に手錠がかけられた。(The suspect was handcuffed.) 出直し（でなおし）：fresh start, trying again 試験に落ちたので、出直しを決（けつ）意（い）した。(I failed the exam, so I resolved to try again.) サークル（さーくる）：club, circle (e.g., at school) 大学でテニスのサークルに入った。(I joined a tennis club at university.) 盛ん（さかん）：prosperous, active この町では農（のう）業（ぎょう）が盛んだ。(Agriculture is thriving in this town.) 84 Your browser does not support the audio element. SHOW CONTENTS 手ぶら（てぶら）：empty-handed 手ぶらで訪（たず）ねてしまって申（もう）し訳（わけ）ない。(Sorry for visiting empty-handed.) 展望（てんぼう）：view, outlook 山（さん）頂（ちょう）からの展望は素晴らしかった。(The view from the mountaintop was amazing.) 同感（どうかん）：agreement, same feeling 彼の意見には私も同感だ。(I completely agree with his opinion.) 途切れる（とぎれる）：to be interrupted, to break off 会（かい）話（わ）が途（と）中（ちゅう）で途切れてしまった。(The conversation was interrupted midway.) 特技（とくぎ）：special skill 彼の特技は早（はや）口（くち）言（こと）葉（ば）だ。(His special skill is tongue twisters.) 途上（とじょう）：on the way, in the middle of その国は発（はっ）展（てん）途上にある。(That country is in the process of development.) 清らか（きよらか）：pure, clean 清らかな水が流（なが）れている。(Pure water is flowing.) 極める（きわめる）：to master, to go to extremes 彼は書（しょ）道（どう）を極めた。(He mastered calligraphy.) 燻る（くすぶる）：to smolder, to fester 炭（すみ）が燻って煙（けむり）が出ている。(The charcoal is smoldering and giving off smoke.) 汚らわしい（けがらわしい）：filthy, disgusting 汚らわしい金（かね）には手を出（だ）さない。(I won\u0026rsquo;t touch dirty money.) 激励（げきれい）：encouragement 試合前に監督（かんとく）から激励の言（こと）葉（ば）をもらった。(We received words of encouragement from the coach before the match.) 欠乏（けつぼう）：shortage, lack 水の欠乏が深（しん）刻（こく）だ。(There is a severe shortage of water.) 健全（けんぜん）：sound, wholesome 健全な精神は健全な身体に宿（やど）る。(A sound mind dwells in a sound body.) 見聞（けんぶん）：knowledge and experience 海外旅行で見聞を広（ひろ）めた。(I broadened my knowledge and experience through traveling abroad.) 賢明（けんめい）：wise, prudent それは賢明な判（はん）断（だん）だと思う。(I think that is a wise decision.) 工作（こうさく）：handicraft, maneuver 子供たちは紙で工（こう）作（さく）を楽しんだ。(The children enjoyed making crafts out of paper.) 口述（こうじゅつ）：oral statement 証（しょう）人（にん）が口述で証（しょう）言（げん）した。(The witness testified orally.) 勾配（こうばい）：slope, gradient この坂（さか）は勾配がきつい。(This hill has a steep slope.) 小売り（こうり）：retail この商品は全（ぜん）国（こく）の小売店で購（こう）入（にゅう）できます。(This product is available at retail stores nationwide.) 好ましい（このましい）：desirable, favorable 彼の行（こう）動（どう）は非常に好ましい。(His behavior is very favorable.) 85 Your browser does not support the audio element. SHOW CONTENTS 根気（こんき）：patience, perseverance 根気よく勉強を続けた結（けっ）果（か）、合（ごう）格（かく）できた。(Thanks to persistent studying, I passed.) 採掘（さいくつ）：mining この地域では金の採掘が盛（さか）んだ。(Gold mining is active in this region.) 再現（さいげん）：reproduction, reenactment 映画で当（とう）時（じ）の街（まち）並（な）みを再現した。(The film recreated the streets of that era.) 再生（さいせい）：playback, regeneration 映（えい）像（ぞう）を再生して確認してください。(Please play back the video and check.) 作戦（さくせん）：strategy, tactics 新しい作戦で試合に勝（か）った。(We won the game with a new strategy.) 昨今（さっこん）：recently, nowadays 昨今の情（じょう）勢（せい）は不（ふ）安（あん）定（てい）だ。(The current situation is unstable.) 更なる（さらなる）：further, additional 更なる努（ど）力（りょく）が必要だ。(Further effort is necessary.) 山岳（さんがく）：mountains 山岳地（ち）帯（たい）では気（き）温（おん）の変（へん）化（か）が激（はげ）しい。(In mountain regions, temperature changes are drastic.) 自覚（じかく）：self-awareness 社会人としての自覚を持（も）つべきだ。(You should have self-awareness as a working adult.) 仕掛ける（しかける）：to set (a trap), to start 罠（わな）を仕掛けて動物を捕（つか）まえた。(I set a trap and caught an animal.) 示唆（しさ）：suggestion, implication 専門家の発（はつ）言（げん）は多くのことを示唆している。(The expert\u0026rsquo;s remarks suggest many things.) 視察（しさつ）：inspection, observation 工（こう）場（じょう）を視察して安（あん）全（ぜん）性（せい）を確認した。(We inspected the factory to check safety.) 刺繍（ししゅう）：embroidery この布（ぬの）には美しい刺繍が施（ほどこ）されている。(This cloth has beautiful embroidery.) 躾（しつけ）：discipline, training (especially for children) 子供の頃からの躾が大切だ。(Discipline from a young age is important.) 質素（しっそ）：simple, modest 質素な生（せい）活（かつ）を送（おく）っている。(I lead a modest life.) 染みる（しみる）：to soak in, to sting (emotionally or physically) 寒さが骨（ほね）身（み）に染みる。(The cold seeps into my bones.) 祝賀（しゅくが）：celebration, congratulations 優（ゆう）勝（しょう）の祝賀パーティーが開（ひら）かれた。(A celebration party was held for the victory.) 出題（しゅつだい）：question setting (exam) 試験では基本問題が多く出題された。(Many basic questions were set in the exam.) 出品（しゅっぴん）：exhibition, submission 展（てん）覧（らん）会（かい）に作（さく）品（ひん）を出品した。(I submitted my work to the exhibition.) 坂（さか）：slope, hill この坂は自転車で登（のぼ）るのが大変だ。(It’s tough to ride a bike up this hill.) 86 Your browser does not support the audio element. SHOW CONTENTS 承諾（しょうだく）：consent, acceptance 彼はその条（じょう）件（けん）を承諾した。(He accepted the terms.) 試練（しれん）：trial, ordeal この試練を乗（の）り越（こ）えれば、もっと強くなれる。(If you overcome this trial, you’ll become stronger.) 進捗（しんちょく）：progress プロジェクトの進捗を報（ほう）告（こく）してください。(Please report the progress of the project.) 親密（しんみつ）：intimate, close 彼らは親密な関（かん）係（けい）にある。(They have a close relationship.) 真理（しんり）：truth 哲（てつ）学（がく）は真理を探（たん）究（きゅう）する学（がく）問（もん）だ。(Philosophy is the study of truth.) 水源（すいげん）：source of water 山はこの地域の重（じゅう）要（よう）な水源だ。(The mountain is an important water source for this region.) 濯ぐ（すすぐ）：to rinse 洗（せん）剤（ざい）を使って食（しょっ）器（き）を濯いだ。(I rinsed the dishes with detergent.) 速やか（すみやか）：prompt, quick 速やかな対（たい）応（おう）をお願いします。(Please respond promptly.) 擂り潰す（すりつぶす）：to grind/crush into paste 大（だい）豆（ず）を擂り潰して豆（とう）腐（ふ）を作る。(Soybeans are crushed to make tofu.) 性急（せいきゅう）：hasty, impatient 性急な判（はん）断（だん）は避（さ）けた方（ほう）がいい。(It’s better to avoid hasty decisions.) 製法（せいほう）：manufacturing method このお菓子の製法は秘（ひ）伝（でん）です。(The method for making this sweet is a family secret.) 急かせる（せかせる）：to hurry someone 母に支度（したく）を急かされた。(My mom hurried me to get ready.) 世帯（せたい）：household この地域の平（へい）均（きん）世帯収（しゅう）入（にゅう）は高い。(The average household income in this area is high.) 切迫（せっぱく）：urgency, imminence 台（たい）風（ふう）の接（せっ）近（きん）で切迫した状（じょう）況（きょう）だ。(The typhoon’s approach has created an urgent situation.) 絶版（ぜっぱん）：out of print この本はもう絶版になっている。(This book is already out of print.) 先入観（せんにゅうかん）：preconception, prejudice 先入観を持たずに人と接（せっ）したい。(I want to interact with people without prejudice.) 壮大（そうだい）：grand, magnificent 壮大なスケールの映画だった。(It was a film on a grand scale.) 大家（たいか）：master, expert 彼は書（しょ）道（どう）の大家として知られている。(He is known as a master of calligraphy.) 叫ぶ（さけぶ）：to shout 助けを求（もと）めて叫（さけ）んだ。(I shouted for help.) 爽やか（さわやか）：refreshing, pleasant 爽やかな朝の空気が気持ちいい。(The refreshing morning air feels great.) 87 Your browser does not support the audio element. SHOW CONTENTS 耐久力（たいきゅうりょく）：endurance, durability この素（そ）材（ざい）は高い耐久力を誇（ほこ）る。(This material boasts high durability.) 台本（だいほん）：script, screenplay 演（えん）劇（げき）の台本を読み込んでおいてください。(Please read through the play’s script.) 高飛車（たかびしゃ）：high-handed, arrogant 彼はいつも高飛車な態（たい）度（ど）を取る。(He always takes a high-handed attitude.) 立ち会う（たちあう）：to be present (as a witness) 出（しゅっ）産（さん）に夫（おっと）が立ち会った。(Her husband was present at the birth.) 窒息（ちっそく）：suffocation 煙（けむり）で窒息しそうになった。(I nearly suffocated from the smoke.) 直面（ちょくめん）：to face (a situation) 現（げん）実（じつ）に直面して行（こう）動（どう）を改（あらた）めた。(Facing reality, he changed his behavior.) 沈黙（ちんもく）：silence その場（ば）は沈黙に包（つつ）まれた。(The room was enveloped in silence.) 共感（きょうかん）：empathy, sympathy 彼の意見に深く共感した。(I deeply empathized with his opinion.) 境遇（きょうぐう）：circumstances 似（に）た境遇の人と話すと安心する。(Talking to someone in a similar situation is comforting.) 郷里（きょうり）：hometown 正（しょう）月（がつ）には郷里に帰る予定だ。(I plan to return to my hometown for New Year\u0026rsquo;s.) 近郊（きんこう）：suburbs, outskirts 東京近郊に住んでいる。(I live in the suburbs of Tokyo.) 悔いる（くいる）：to regret 自分の発（はつ）言（げん）を悔いている。(I regret what I said.) 倉（くら）：warehouse, storehouse 古い米（こめ）倉（ぐら）が取（と）り壊（こわ）された。(The old rice storehouse was torn down.) 形態（けいたい）：form, shape, structure 働（はたら）き方（かた）の形態が多（た）様（よう）化（か）している。(Work styles are becoming more diverse.) 言及（げんきゅう）：mention, reference その問題には特（とく）に言及しなかった。(He didn’t specifically mention that issue.) 言行（げんこう）：words and actions 言行一（いっ）致（ち）の人を尊（そん）敬（けい）する。(I respect people whose words match their actions.) 原点（げんてん）：origin, starting point 初（しょ）心（しん）を原点に立（た）ち返（かえ）る。(I’m returning to my starting point.) 騒ぐ（さわぐ）：to make a noise, to make a fuss 子どもたちが大（おお）声（ごえ）で騒いでいた。(The children were making a lot of noise.) 騒ぎ（さわぎ）：commotion, uproar 騒ぎを起こさないように注意して。(Please be careful not to cause a commotion.) 下げる（さげる）：to lower, to reduce 音（おん）量（りょう）を少し下（さ）げてください。(Please lower the volume a bit.) 88 Your browser does not support the audio element. SHOW CONTENTS 原油（げんゆ）：crude oil 原油の価（か）格（かく）が急（きゅう）騰（とう）した。(The price of crude oil surged.) 兼用（けんよう）：dual use この部屋は寝（しん）室（しつ）兼用の書（しょ）斎（さい）です。(This room serves as both a bedroom and a study.) 公演（こうえん）：performance, show 有名な劇（げき）団（だん）の公演を見に行った。(I went to see a performance by a famous theater troupe.) 口外（こうがい）：divulging (a secret) この件は絶（ぜっ）対（たい）に口外しないでください。(Please don’t divulge this matter to anyone.) 交互（こうご）：alternating, mutual 赤と白の布（ぬの）を交互に並（なら）べた。(I arranged red and white cloths alternately.) 好感（こうかん）：good feeling, favorable impression 彼は初（しょ）対（たい）面（めん）でも好感が持てる人だ。(He leaves a good impression even on first meeting.) 交換（こうかん）：exchange プレゼントを交換し合（あ）った。(We exchanged gifts with each other.) 興業（こうぎょう）：entertainment business, show business 興業会社が新しい映画を公（こう）開（かい）した。(An entertainment company released a new movie.) 口頭（こうとう）：oral (e.g., exam, communication) 面（めん）接（せつ）は口頭で行（おこな）われた。(The interview was conducted orally.) 肥える（こえる）：to gain weight, to be fertile, to have a refined taste 最近、少し肥えてきた。(I’ve gained a bit of weight recently.) 小切手（こぎって）：check (bank) 支（し）払（はら）いは小切手で行（おこな）われた。(The payment was made by check.) 志す（こころざす）：to aspire to, to aim for 医者を志して勉強している。(I’m studying to become a doctor.) 試みる（こころみる）：to try, to attempt 新しい手（しゅ）法（ほう）を試みた。(I attempted a new method.) 採決（さいけつ）：vote, decision 法（ほう）案（あん）は採決によって可（か）決（けつ）された。(The bill was passed by a vote.) 歳月（さいげつ）：years and months, time 長い歳月をかけて完成した。(It was completed after many years.) 梱包（こんぽう）：packing, packaging 商品を丁（てい）寧（ねい）に梱包してください。(Please pack the item carefully.) 察する（さっする）：to guess, to sense, to sympathize 彼の気持ちを察して何も言わなかった。(I sensed how he felt and said nothing.) 産休（さんきゅう）：maternity leave 彼女は産休に入（はい）ったばかりだ。(She just started her maternity leave.) 指す（さす）：to point, to refer to 時（と）計（けい）を指して時間を知らせた。(He pointed to the clock to show the time.) 刺身（さしみ）：sashimi (sliced raw fish) 新鮮な刺身が食べたい。(I want to eat some fresh sashimi.) 89 Your browser does not support the audio element. SHOW CONTENTS 残金（ざんきん）：remaining balance 残金を来週までに支払ってください。(Please pay the remaining balance by next week.) 参上（さんじょう）：visiting (humble) 明日、午後に参上いたします。(I will humbly visit tomorrow afternoon.) 参入（さんにゅう）：entry (into a market, etc.) 新企業が市場に参入した。(A new company entered the market.) 賛美（さんび）：praise, admiration 彼の行動は多くの人から賛美された。(His actions were praised by many people.) 強いて（しいて）：by force, against one\u0026rsquo;s will 強いて言えば、こっちの方が好きだ。(If I had to choose, I prefer this one.) 自粛（じしゅく）：self-restraint, voluntary restraint パーティーは自粛することになった。(The party was voluntarily canceled.) 失脚（しっきゃく）：fall from power 不（ふ）祥（しょ）事（うじ）によって大（だい）臣（じん）が失脚した。(The minister fell from power due to a scandal.) 失効（しっこう）：expiration, lapse (e.g., of a right) パスポートが失効していた。(The passport had expired.) 実費（じっぴ）：actual cost 交通費は実費で支（し）給（きゅう）されます。(Transportation costs will be reimbursed at actual cost.) 失調（しっちょう）：imbalance, disorder 自（じ）律（りつ）神（しん）経（けい）の失調が原因です。(It’s caused by an autonomic nervous system disorder.) 持病（じびょう）：chronic illness 彼は持病の腰（よう）痛（つう）がある。(He has chronic lower back pain.) 修復（しゅうふく）：repair, restoration 壁（かべ）のひび割（わ）れを修復した。(The crack in the wall was repaired.) 主将（しゅしょう）：captain (of a team) 彼は野球部の主将を務（つと）めている。(He serves as the captain of the baseball team.) 出店（しゅってん）：opening a branch/shop; setting up a stall その企業は新宿に出店した。(The company opened a new shop in Shinjuku.) お祭（まつ）りにたくさんの出店が並（なら）んでいた。(There were many food stalls at the festival.) 症候群（しょうこうぐん）：syndrome 過（か）敏（びん）性（せい）腸（ちょう）症（しょう）候（こう）群（ぐん）に悩（なや）んでいる。(I suffer from irritable bowel syndrome.) 処方箋（しょほうせん）：prescription 医師から処方箋をもらった。(I received a prescription from the doctor.) 人材（じんざい）：human resources, talented person 優秀な人材を確（かく）保（ほ）したい。(We want to secure talented personnel.) 進出（しんしゅつ）：expansion, advance into (a new market, area, etc.) その会社は海外に進出した。(The company expanded into overseas markets.) ストライキ：strike (work stoppage) 労（ろう）働（どう）組（くみ）合（あい）がストライキを実（じっ）施（し）した。(The labor union went on strike.) ストロー：straw (for drinking) ストローを使ってジュースを飲んだ。(I drank the juice using a straw.) 90 Your browser does not support the audio element. SHOW CONTENTS 擦り切れる（すりきれる）：to be worn out このジーンズは擦り切れるまで履（は）いた。(I wore these jeans until they were completely worn out.) 精算（せいさん）：settlement (of accounts) 旅行後に交通費を精算した。(I settled the transportation costs after the trip.) 前方（ぜんぽう）：front, forward 前方に車（しゃ）両（りょう）が停（てい）止（し）しています。(A vehicle is stopped in front.) 走行（そうこう）：running, driving この車の走行距（きょ）離（り）は5万キロです。(This car has 50,000 kilometers on it.) 層（そう）：layer, stratum 雲（くも）の層が厚（あつ）く、飛行機が揺（ゆ）れた。(The thick layer of clouds made the plane shake.) 即座に（そくざに）：immediately, instantly 彼はその申（もう）し出（で）を即座に断（ことわ）った。(He instantly declined the offer.) 外回り（そとまわり）：outside work, sales visits 今日は一（いち）日（にち）中（じゅう）、外回りだった。(I was out doing sales rounds all day today.) 退治（たいじ）：extermination, eradication ゴキブリを退治した。(I exterminated the cockroach.) 対談（たいだん）：conversation, dialogue (usually formal or public) 両（りょう）作（さっ）家（か）の対談が掲（けい）載（さい）された。(A dialogue between the two writers was published.) 滞納（たいのう）：non-payment, default 家（や）賃（ちん）を三（さん）ヶ（か）月（げつ）も滞納している。(The rent has been overdue for three months.) 大部（たいぶ）：voluminous, a large portion 大部な資料を読み終（お）えた。(I finished reading the voluminous documents.) 困惑（こんわく）：bewilderment, confusion 急な質問に困惑した。(I was confused by the sudden question.) 採算（さいさん）：profitability この事（じ）業（ぎょう）は採算が取（と）れない。(This business is not profitable.) 採取（さいしゅ）：collection (of samples, data) 水のサンプルを採取した。(We collected a sample of the water.) 雑費（ざっぴ）：miscellaneous expenses 雑費が思ったよりかかった。(Miscellaneous expenses cost more than expected.) 視界（しかい）：visibility, field of vision 霧（きり）のため視界が悪（わる）くなっている。(Visibility is poor due to the fog.) 自尊心（じそんしん）：self-esteem, pride 彼は自尊心が高い。(He has a strong sense of self-esteem.) 誘う（さそう）：to invite, to tempt 友（ゆう）人（じん）を映画に誘った。(I invited my friend to a movie.) 三角（さんかく）：triangle 子どもは三角の形（かたち）を覚（おぼ）えた。(The child learned the shape of a triangle.) 殺人（さつじん）：murder, homicide 殺人事（じ）件（けん）がニュースになった。(The murder case made the news.) 91 Your browser does not support the audio element. SHOW CONTENTS 実在（じつざい）：existence (in reality) この人物は小説の中ではなく、実在した。(This person actually existed, not just in the novel.) 視点（してん）：point of view 子どもの視点で物（もの）事（ごと）を見るのは大切だ。(It\u0026rsquo;s important to see things from a child\u0026rsquo;s point of view.) 終日（しゅうじつ）：all day 昨日は終日雨が降っていた。(It rained all day yesterday.) 執着（しゅうちゃく）：attachment, obsession 過（か）去（こ）に執着していては前に進めない。(You can\u0026rsquo;t move forward if you\u0026rsquo;re obsessed with the past.) 主観（しゅかん）：subjectivity, personal opinion 主観だけでは正（ただ）しい判断はできない。(You can\u0026rsquo;t make the right decision based only on subjectivity.) 庶務（しょむ）：general affairs 彼は庶（しょ）務（む）課（か）で働いている。(He works in the general affairs department.) 真珠（しんじゅ）：pearl 彼女は真珠のネックレスをしていた。(She was wearing a pearl necklace.) 信念（しんねん）：belief, conviction 彼は強い信念を持って行動している。(He acts with strong conviction.) 急かす（せかす）：to hurry, to urge 子どもを急かして支度（したく）をさせた。(I hurried the child to get ready.) 蝉（せみ）：cicada 夏になると蝉の声が聞こえてくる。(You can hear the sound of cicadas in summer.) 先だって（さきだって）：recently, the other day 先だっての会議で決まったことです。(This was decided in the meeting the other day.) 先天的（せんてんてき）：congenital, innate 先天的な病（びょう）気（き）が見つかった。(A congenital disease was discovered.) 総会（そうかい）：general meeting 年（ねん）に一（いち）度（ど）、総会が開（ひら）かれる。(A general meeting is held once a year.) 創立（そうりつ）：founding, establishment 学（がっ）校（こう）の創立記（き）念（ねん）日（び）が近い。(The school\u0026rsquo;s founding anniversary is coming up.) 損なう（そこなう）：to harm, to damage 信（しん）頼（らい）関（かん）係（けい）を損なってしまった。(The trust was damaged.) 素質（そしつ）：aptitude, talent 彼には音楽の素質がある。(He has a talent for music.) さつま芋（さつまいも）：sweet potato 焼きさつま芋が好きです。(I like roasted sweet potatoes.) 時間目（じかんめ）：class period 三時間目は数学の授業です。(The third period is a math class.) 叱る（しかる）：to scold 母に叱られて泣（な）いてしまった。(I cried after being scolded by my mother.) 四角（しかく）：square, rectangle この箱は四角い形（かたち）をしている。(This box has a square shape.) 92 Your browser does not support the audio element. SHOW CONTENTS 存続（そんぞく）：continuation, survival その制度は今もなお存続している。(That system is still in place today.) 帯（おび）：belt, sash 着物の帯を結（むす）ぶのは難しい。(Tying the sash of a kimono is difficult.) 対決（たいけつ）：confrontation, showdown 両者の対決は避（さ）けられなかった。(A confrontation between the two was inevitable.) 高み（たかみ）：height, elevated place 彼は常（つね）に高みを目（め）指（ざ）して努（ど）力（りょく）している。(He is always striving to reach greater heights.) 断ち切る（たちきる）：to sever, to break off 過（か）去（こ）の関（かん）係（けい）を断ち切る決（けつ）意（い）をした。(I decided to sever ties with the past.) 蛋白質（たんぱくしつ）：protein 筋（きん）肉（にく）をつけるには蛋白質が必要だ。(Protein is essential for building muscles.) 付け（つけ）：tab, bill 居（い）酒（ざか）屋（や）での付けを払（はら）っていない。(I haven’t paid the tab at the izakaya.) 筒（つつ）：tube, cylinder この筒には書類が入（はい）っている。(This tube contains documents.) 釣鐘（つりがね）：temple bell 正（しょう）月（がつ）に寺で釣鐘を聞いた。(I heard the temple bell at New Year\u0026rsquo;s.) 停滞（ていたい）：stagnation, standstill 経済が停滞している。(The economy is stagnating.) 体裁（ていさい）：appearance, form 体裁ばかり気にしている。(He\u0026rsquo;s overly concerned with appearances.) 手違い（てちがい）：mistake, mix-up 手違いで予（よ）約（やく）が取れていなかった。(There was a mistake and the reservation wasn’t made.) 手直す（てなおす）：to fix, to revise 報告書を少し手直しした。(I made some revisions to the report.) 手筈（てはず）：arrangement, plan 出（しゅっ）発（ぱつ）の手筈は整（ととの）っている。(The arrangements for departure are all set.) 伝承（でんしょう）：folklore, oral tradition 地（じ）元（もと）には古い伝承が多く残（のこ）っている。(There are many old legends in the local area.) 討議（とうぎ）：discussion, debate 政策について熱い討議が行（おこな）われた。(There was a heated discussion about the policy.) 動的（どうてき）：dynamic 動的なアプローチが求（もと）められている。(A dynamic approach is needed.) 尊い（とうとい）：precious, noble 命（いのち）は何よりも尊いものだ。(Life is more precious than anything.) 仕方（しかた）：way, method これしか仕方がない。(There’s no other way.) 敷金（しききん）：security deposit アパートを借りるときに敷金が必要だ。(A security deposit is required when renting an apartment.) 93 Your browser does not support the audio element. SHOW CONTENTS 動揺（どうよう）：agitation, disturbance そのニュースに動揺を隠（かく）せなかった。(I couldn’t hide my agitation at the news.) 研ぐ（とぐ）：to sharpen, to polish, to wash (rice) 包（ほう）丁（ちょう）をよく研いでおく。(Sharpen the knife well.) 特集（とくしゅう）：special feature 今（こん）月（げつ）の雑誌は環境問題を特集している。(This month’s magazine features environmental issues.) ドライブイン：drive-in 昔は家族でドライブインに寄（よ）ったものだ。(We used to stop at drive-ins as a family.) 度忘れ（どわすれ）：lapse of memory 名前を度忘れしてしまった。(I completely forgot the name.) 和やか（なごやか）：mild, calm, peaceful 和やかな雰囲気の会議だった。(It was a meeting with a calm atmosphere.) 何なりと（なんなりと）：whatever, anything 何なりとご相談ください。(Please feel free to consult us about anything.) 憎たらしい（にくたらしい）：hateful, detestable あの憎たらしい笑（わら）い方が忘（わす）れられない。(I can’t forget that hateful way he laughed.) 粘る（ねばる）：to be persistent, to be sticky 最（さい）後（ご）まで粘って勝（しょう）利（り）をつかんだ。(He persisted to the end and won.) 納入（のうにゅう）：delivery, payment 商品の納入が遅（おく）れている。(The delivery of goods is delayed.) 配分（はいぶん）：distribution, allocation 予算の配分を見（み）直（なお）す必要がある。(We need to review the budget allocation.) 歯切れ（はぎれ）：clarity (of speech), crispness 彼の話は歯切れが悪い。(His speech is not very clear.) 阻む（はばむ）：to prevent, to block 通（つう）路（ろ）を阻む障（しょう）害（がい）物（ぶつ）があった。(There was an obstacle blocking the path.) 伝来（でんらい）：handed down, transmission この技（ぎ）術（じゅつ）は中国からの伝来だ。(This technique was handed down from China.) 問いただす（といただす）：to question closely 彼を問いただすと真（しん）実（じつ）が分かった。(When I questioned him closely, the truth came out.) 倒産（とうさん）：bankruptcy その会社は昨年倒産した。(The company went bankrupt last year.) 到底（とうてい）：cannot possibly それは到底理解できない。(I simply can’t understand it.) 独創（どくそう）：originality 彼の作（さく）品（ひん）は独創に富（と）んでいる。(His work is rich in originality.) 取り扱う（とりあつかう）：to handle, to deal with 当（とう）店（てん）では電（でん）子（し）機（き）器（き）も取り扱っています。(We also handle electronic devices in our store.) 舌（した）：tongue 舌を噛（か）んでしまった。(I bit my tongue.) 94 Your browser does not support the audio element. SHOW CONTENTS 鈍感（どんかん）：insensitive, dull 彼は人の気持ちに鈍感だ。(He is insensitive to other people\u0026rsquo;s feelings.) 馴れ初め（なれそめ）：how one first met, beginning of a romance 二人の馴れ初めは大学のサークルだった。(They first met through a university club.) 沼（ぬま）：swamp, marsh その地域には大きな沼がある。(There’s a large swamp in that area.) 練る（ねる）：to knead, to refine (a plan) 作（さく）戦（せん）を練（ね）ってから実（じっ）行（こう）する。(We\u0026rsquo;ll refine the plan before carrying it out.) 燃焼（ねんしょう）：combustion, burning このエンジンは完全燃焼を目（め）指（ざ）している。(This engine aims for complete combustion.) 望ましい（のぞましい）：desirable 健康のためには早（はや）寝（ね）早（はや）起（お）きが望（のぞ）ましい。(Going to bed early and waking up early is desirable for health.) 叩く（たたく）：to strike, to clap, to beat ドアを軽（かる）く叩いた。(I gently knocked on the door.) 発する（はっする）：to emit, to issue 彼は突（とつ）然（ぜん）大（おお）声（ごえ）を発した。(He suddenly let out a loud voice.) 甚だ（はなはだ）：extremely (formal) 甚だ迷惑な話だ。(That’s extremely troubling.) 華々しい（はなばなしい）：glorious, brilliant 彼は華々しい経（けい）歴（れき）を持っている。(He has a brilliant career.) 天辺（てっぺん）：top, summit 山の天辺に到（とう）達（たつ）した。(We reached the summit of the mountain.) 転居（てんきょ）：moving (house) 来月、隣（となり）町（まち）に転居します。(I’m moving to the neighboring town next month.) 点検（てんけん）：inspection, check 機（き）械（かい）の点検は定期的に行（おこな）うべきだ。(Machines should be inspected regularly.) 伝票（でんぴょう）：slip, voucher レジで伝票を確認してください。(Please check the receipt at the register.) 同等（どうとう）：equivalent, equal 彼の能（のう）力（りょく）はプロと同等だ。(His skills are equivalent to those of a professional.) 独占（どくせん）：monopoly, exclusive possession その企業は市場を独占している。(That company holds a monopoly on the market.) 戸惑い（とまどい）：confusion, hesitation 突（とつ）然（ぜん）の質問に戸惑いを見せた。(He showed hesitation at the sudden question.) 富（とみ）：wealth, riches 彼は莫（ばく）大（だい）な富を築（きず）いた。(He built up an enormous fortune.) トライ：try, attempt 新しい仕事にトライしてみたい。(I want to try a new job.) 事項（じこう）：item, matter 注意事項をよく読んでください。(Please read the important notes carefully.) 95 Your browser does not support the audio element. SHOW CONTENTS 取り締まる（とりしまる）：to crack down on, to police 警察がスピード違（い）反（はん）を厳（きび）しく取り締まっている。(The police are cracking down on speeding.) 問屋（とんや）：wholesaler この商品は地（じ）元（もと）の問屋から仕（し）入（い）れている。(We source this product from a local wholesaler.) 仲人（なこうど）：matchmaker 叔父（おじ）が二人の仲人を務（つと）めた。(My uncle acted as the matchmaker for the couple.) 名残（なごり）：remains, trace, farewell feeling 桜の名残がまだ庭に残（のこ）っている。(Traces of cherry blossoms still remain in the garden.) 名高い（なだかい）：famous, well-known 彼は名高い科学者だ。(He is a well-known scientist.) 宥める（なだめる）：to soothe, to calm 母親が泣（な）いている子供を宥めた。(The mother calmed her crying child.) 雪崩（なだれ）：avalanche 登（と）山（ざん）中に雪崩が発（はっ）生（せい）した。(An avalanche occurred during the climb.) 懐く（なつく）：to become emotionally attached この犬はすぐに人に懐く。(This dog quickly becomes attached to people.) 難航（なんこう）：difficult progress, rough going 交（こう）渉（しょう）は難航している。(The negotiations are going poorly.) 入浴（にゅうよく）：bathing 入浴前にストレッチをするとよい。(Stretching before bathing is beneficial.) 寝相（ねぞう）：sleeping posture 子供の寝相が悪くて布（ふ）団（とん）がずれる。(My child’s sleeping posture is so restless the blanket always slips off.) 臨む（のぞむ）：to face, to attend, to look out on 会議に臨む前に準（じゅん）備（び）を整（ととの）える。(I prepare thoroughly before attending the meeting.) 乗り出す（のりだす）：to embark on, to lean forward 新しいプロジェクトに乗り出した。(We embarked on a new project.) 化ける（ばける）：to take the form of, to transform 彼は別（べつ）人（じん）のように化けた。(He transformed like a completely different person.) 同封（どうふう）：enclosure (in a letter) 書類と一緒に写真を同封しました。(I enclosed a photo with the documents.) 唐突（とうとつ）：abrupt, sudden 唐突な質問に驚（おどろ）いた。(I was surprised by the sudden question.) 突発的（とっぱつてき）：sudden, unexpected 突発的な事故が発（はっ）生（せい）した。(An unexpected accident occurred.) 突拍子もない（とっぴょうしもない）：outrageous, preposterous 彼は突拍子もないアイデアを出すことがある。(He sometimes comes up with outrageous ideas.) 唱える（となえる）：to recite, to advocate 彼は平（へい）和（わ）の大切さを唱えた。(He advocated the importance of peace.) 飛び入り（とびいり）：joining without reservation or notice 彼は飛び入りでコンテストに参加した。(He joined the contest without prior registration.) 96 Your browser does not support the audio element. SHOW CONTENTS 惚ける（とぼける）：to play dumb, to feign ignorance 彼は質問されても惚けて答（こた）えなかった。(He played dumb and didn’t answer the question.) 取り調べる（とりしらべる）：to investigate, to interrogate 警察が容（よう）疑（ぎ）者（しゃ）を取り調べている。(The police are interrogating the suspect.) 取り混ぜる（とりまぜる）：to mix together 洋（よう）風（ふう）と和（わ）風（ふう）を取り混ぜた料理。(A dish that mixes Western and Japanese styles.) ドリル：drill (tool or exercise) 毎朝の英語ドリルで語彙を増（ふ）やしている。(I increase my vocabulary with a daily English drill.) 投げ出す（なげだす）：to throw out, to abandon 途（と）中（ちゅう）で仕事を投げ出してはいけない。(You must not abandon your work halfway.) 何より（なにより）：more than anything 健康が何より大切だ。(Health is more important than anything else.) 訛り（なまり）：accent (regional) 彼の話し方には関西の訛りがある。(His way of speaking has a Kansai accent.) 捻出（ねんしゅつ）：to manage (to produce money/time) 忙しい中で時間を捻出した。(I managed to make time despite being busy.) 長閑（のどか）：calm, peaceful 長閑な田（いな）舎（か）の風（ふう）景（けい）に癒（いや）された。(I was soothed by the peaceful countryside scenery.) ハードル：hurdle, barrier 新しい制度には高いハードルがある。(There are high hurdles with the new system.) 配置（はいち）：layout, arrangement 会場の席（せき）の配置を工（く）夫（ふう）した。(We made an effort with the seating layout of the venue.) 肌寒い（はだざむい）：chilly 今朝は少し肌寒いですね。(It’s a bit chilly this morning.) 場違い（ばちがい）：out of place, inappropriate 彼の服（ふく）装（そう）は式には場違いだった。(His outfit was out of place for the ceremony.) 発散（はっさん）：release, letting out (emotions, stress) スポーツでストレスを発散する。(I relieve stress through sports.) 取り組む（とりくむ）：to tackle, to work on 新しい課（か）題（だい）に取り組んでいる。(I’m working on a new challenge.) 取り立てて（とりたてて）：particularly, especially (often used in negative) 取り立てて問題はない。(There’s nothing particularly problematic.) 取り巻く（とりまく）：to surround, to encircle 国際問題が私たちを取り巻いている。(We are surrounded by international issues.) 生身（なまみ）：living flesh, real person 生身の人間には限（げん）界（かい）がある。(Real human beings have limits.) 悩ましい（なやましい）：distressing, seductive その選択は非常に悩ましい。(That choice is very troubling.) 賑わう（にぎわう）：to be bustling, to be lively 商店街は祭りで賑わっている。(The shopping street is bustling with the festival.) 97 Your browser does not support the audio element. SHOW CONTENTS 入居（にゅうきょ）：moving in, occupancy 来月から新しいマンションに入居する。(I’ll move into the new apartment next month.) 人情（にんじょう）：human feelings, empathy 彼の行動には人情が感じられる。(You can feel human kindness in his actions.) 任務（にんむ）：duty, mission 彼はその任務を最後までやり遂（と）げた。(He carried out the mission to the end.) 粘り（ねばり）：tenacity, persistence 粘り強（つよ）さが成功の鍵（かぎ）だ。(Persistence is the key to success.) 納期（のうき）：delivery date, deadline 納期を守（まも）ることが信（しん）頼（らい）につながる。(Meeting deadlines leads to trust.) 罵る（ののしる）：to curse, to verbally abuse 彼は怒（おこ）って相手を罵った。(He got angry and hurled insults at the other person.) 迫力（はくりょく）：impact, intensity その演（えん）技（ぎ）は迫力満（まん）点（てん）だった。(The performance was full of impact.) 発病（はつびょう）：onset of illness 強いストレスが原因で発病した。(He developed an illness due to heavy stress.) 初耳（はつみみ）：something heard for the first time それは初耳だね。(That’s news to me.) 果てる（はてる）：to end, to die 戦（たたか）いは夜（よ）明（あ）けまで続（つづ）き、ついに果（は）てた。(The battle went on until dawn and finally ended.) 花弁（はなびら）：petal 花弁が風に舞（ま）っている。(The petals are dancing in the wind.) 鈍る（にぶる）：to become dull, to weaken 使わないと感（かん）覚（かく）が鈍ってしまう。(Your senses become dull if you don’t use them.) 入荷（にゅうか）：arrival of goods 新製品が本（ほん）日（じつ）入荷しました。(The new products arrived today.) 認知症（にんちしょう）：dementia 祖母は認知症を患（わずら）っている。(My grandmother suffers from dementia.) 寝入る（ねいる）：to fall asleep 赤ちゃんが静かに寝入った。(The baby quietly fell asleep.) 念入り（ねんいり）：careful, thorough 念入りに準備をして出かけた。(I went out after making thorough preparations.) 年功序列（ねんこうじょれつ）：seniority system その会社では年功序列が重（じゅう）視（し）されている。(That company values the seniority system.) ノウハウ：know-how, expertise 長年の経（けい）験（けん）で培（つちか）ったノウハウ。(Know-how cultivated through years of experience.) 逃す（のがす）：to miss (an opportunity) 絶（ぜっ）好（こう）のチャンスを逃してしまった。(I missed a golden opportunity.) 親しい（したしい）：intimate, close 彼とは親しい間（あいだ）柄（がら）だ。(I’m on close terms with him.) 98 Your browser does not support the audio element. SHOW CONTENTS 派（は）：faction, group 彼は保（ほ）守（しゅ）派（は）に属（ぞく）している。(He belongs to the conservative faction.) 剥げる（はげる）：to peel off, to fade 壁（かべ）のペンキが剥げてきた。(The paint on the wall has started to peel.) 抜群（ばつぐん）：outstanding, excellent 彼は抜群の記（き）憶（おく）力（りょく）を持っている。(He has an outstanding memory.) 果て（はて）：the end, extremity 旅（たび）の果てに新しい自分を見つけた。(At the end of the journey, I found a new version of myself.) 華やか（はなやか）：gorgeous, showy パーティーはとても華やかだった。(The party was very glamorous.) 乏しい（とぼしい）：scarce, lacking 彼の経（けい）験（けん）はまだ乏しい。(He still lacks experience.) どん底（どんぞこ）：rock bottom, the lowest point 人生のどん底を味（あじ）わった。(I hit rock bottom in life.) 慣らす（ならす）：to accustom, to tame 新しい靴に足を慣らす。(Break in new shoes.) 馴れ馴れしい（なれなれしい）：overly familiar, too friendly 初（しょ）対（たい）面（めん）なのに馴れ馴れしく話しかけてきた。(He talked to me too familiarly even though it was our first meeting.) 難色（なんしょく）：disapproval, reluctance 上司はその提（てい）案（あん）に難色を示（しめ）した。(The boss showed reluctance toward the proposal.) 入賞（にゅうしょう）：winning a prize 作品がコンテストで入賞した。(My work won a prize in the contest.) 破綻（はたん）：breakdown, collapse 経（けい）営（えい）が破綻して会社が倒（とう）産（さん）した。(The business collapsed and the company went bankrupt.) パトロール：patrol 夜（や）間（かん）に警察がパトロールしている。(Police patrol at night.) 高が（たかが）：only, merely 高がゲームだと思って侮（あなど）ってはいけない。(Don’t underestimate it just because it’s “only” a game.) 企む（たくらむ）：to plot, to scheme 彼は陰（かげ）で何かを企んでいる。(He’s scheming something behind the scenes.) 断つ（たつ）：to cut off, to sever 彼との関係を断つことにした。(I decided to cut ties with him.) 達者（たっしゃ）：skilled, healthy 彼は英語が達者だ。(He is skilled in English.) 断然（だんぜん）：by far, definitely 彼の案の方（ほう）が断然良い。(His idea is definitely better.) 探知（たんち）：detection レーダーで敵（てき）の位（い）置（ち）を探知した。(The radar detected the enemy’s position.) 実家（じっか）：one’s parents’ home 週末に実（じっ）家（か）へ帰る予定です。(I plan to return to my parents’ home this weekend.) 99 Your browser does not support the audio element. SHOW CONTENTS 着色（ちゃくしょく）：coloring この絵には鮮（あざ）やかな着色が施（ほどこ）されている。(This painting has vivid coloring.) 調達（ちょうたつ）：procurement, obtaining 資（し）金（きん）を調達するのに苦（く）労（ろう）した。(It was difficult to procure the funds.) 調理（ちょうり）：cooking, food preparation 母は和（わ）食（しょく）の調理が得意だ。(My mother is good at cooking Japanese food.) 陳列（ちんれつ）：display, exhibition 商品がきれいに陳列されている。(The products are neatly displayed.) 仕える（つかえる）：to serve (someone) 彼は長年王に仕えていた。(He served the king for many years.) 追及（ついきゅう）：pursuit (of truth, responsibility) 責（せき）任（にん）の所（しょ）在（ざい）を追及する。(Pursue who is responsible.) 墜落（ついらく）：crash (e.g. of an aircraft) 飛行機が山（さん）中（ちゅう）に墜落した。(The plane crashed in the mountains.) 釣られる（つられる）：to be lured, to be enticed 彼女の笑（え）顔（がお）につられて私も笑（わら）った。(I was lured into smiling by her smile.) 天文（てんもん）：astronomy 天文が好きで星（ほし）を観（かん）察（さつ）している。(I like astronomy and observe the stars.) 当人（とうにん）：the person in question 当人に直（ちょく）接（せつ）聞いてください。(Please ask the person in question directly.) 当方（とうほう）：we (formal), our side 当方としては異（い）議（ぎ）はありません。(Our side has no objections.) 同盟（どうめい）：alliance 両（りょう）国（こく）は軍（ぐん）事（じ）同盟を結（むす）んでいる。(The two countries have formed a military alliance.) 綴じる（とじる）：to bind, to fasten (papers) 資料を一（いっ）冊（さつ）に綴じる。(Bind the documents into one volume.) 特権（とっけん）：privilege 特権を乱（らん）用（よう）するな。(Don’t abuse your privileges.) 土俵（どひょう）：sumo ring; field of activity その議論は土俵が違（ちが）う。(That discussion is out of context.) 捕らわれる（とらわれる）：to be caught, to be trapped (by an idea or feeling) 固（こ）定（てい）観念に捕らわれてはいけない。(Don’t be trapped by stereotypes.) 取り扱い（とりあつかい）：handling, treatment この機械は取り扱いに注意が必要だ。(This machine requires careful handling.) 投げる（なげる）：to throw ボールを力（ちから）いっぱい投げた。(I threw the ball as hard as I could.) 品物（しなもの）：goods, items 品物の品（ひん）質（しつ）がとても良い。(The quality of the goods is very good.) 確り（しっかり）：firmly, properly, reliably 彼は確り者だ。(He is a reliable person.) 100 Your browser does not support the audio element. SHOW CONTENTS 何だか (なんだか): somehow, for some reason 何だか今日は気（き）分（ぶん）がいい。(Somehow, I feel good today.) 如実 (にょじつ): vividly, clearly 結（けっ）果（か）が如実に現（あらわ）れた。(The results clearly showed.) 年長 (ねんちょう): older, senior 彼は私より年長だ。(He is older than me.) 濃密 (のうみつ): dense, rich, intense 濃密な時間を過（す）ごした。(I had an intense and fulfilling time.) バージョンアップ: version upgrade ソフトをバージョンアップした。(I upgraded the software version.) 廃棄 (はいき): disposal, discarding 古い書類を廃棄した。(The old documents were disposed of.) 敗北 (はいぼく): defeat 試合で敗北を喫した。(We suffered a defeat in the match.) 捗る (はかどる): to make progress 新しいパソコンのおかげで作業が捗っている。（Thanks to the new computer, my tasks are progressing well.） 破棄 (はき): cancellation, annulment, destruction 契（けい）約（やく）は破棄された。(The contract was annulled.) 漠然 (ばくぜん): vague, hazy 将（しょう）来（らい）に漠然とした不（ふ）安（あん）を感じる。(I feel vaguely anxious about the future.) 恥じる (はじる): to feel ashamed 自分の行（こう）動（どう）を恥じている。(I’m ashamed of my actions.) 抜粋 (ばっすい): excerpt, extract 本の一部を抜粋して紹（しょう）介（かい）する。(I’ll introduce an excerpt from the book.) 離れ離れ (はなればなれ): separated, apart 戦（せん）争（そう）で家族が離れ離れになった。(The family was separated by the war.) 転任 (てんにん): transfer (to a new post) 東京支社に転任になった。(I was transferred to the Tokyo branch.) 同意 (どうい): agreement, consent 提案に同意します。(I agree with the proposal.) 統合 (とうごう): integration, unification 部（ぶ）門（もん）を統合する計（けい）画（かく）がある。(There are plans to integrate departments.) 投じる (とうじる): to cast (a vote), to invest 政（せい）策（さく）に反（はん）対（たい）票（ひょう）を投じた。(I cast a vote against the policy.) 到達 (とうたつ): arrival, reaching 山（さん）頂（ちょう）に到達した。(We reached the summit.) 逃亡 (とうぼう): escape, flight 囚（しゅう）人（じん）が逃亡した。(The prisoner escaped.) 支度 (したく): preparation, getting ready 出（しゅっ）発（ぱつ）の支度をしている。(I\u0026rsquo;m getting ready to leave.) 101 Your browser does not support the audio element. SHOW CONTENTS 堂々 (どうどう): confidently, dignified 彼は堂々とスピーチした。(He gave his speech confidently.) 土砂 (どしゃ): earth and sand, sediment 大雨で土（ど）砂（しゃ）崩（くず）れが発（はっ）生（せい）した。(A landslide occurred due to the heavy rain.) 取り立てる (とりたてる): to collect (debts), to emphasize 家（や）賃（ちん）を取り立てに来た。(He came to collect the rent.) 取り寄せる (とりよせる): to order and have something sent カタログから商品を取り寄せた。(I ordered the product from the catalog.) 名残惜しい (なごりおしい): hard to say goodbye, reluctant to part 旅（たび）の終わりが名残惜しい。(I’m reluctant for the trip to end.) 何ら (なんら): in any way (with negation) 何ら問題はない。(There’s no problem at all.) 値切る (ねぎる): to haggle, to bargain 店で値（ね）段（だん）を値切った。(I bargained over the price at the store.) 念願 (ねんがん): long-cherished desire 念願のマイホームを手に入れた。(I got the home I had long dreamed of.) 軒並み (のきなみ): every house, all across the board 店が軒並み閉（へい）店（てん）していた。(All the shops were closed.) 背後 (はいご): behind, rear 誰かが背後に立っていた。(Someone was standing behind me.) 映える (はえる): to shine, to look good 赤いドレスがよく映えている。(The red dress looks stunning.) 薄弱 (はくじゃく): weak, feeble 彼の主（しゅ）張（ちょう）には薄弱な点（てん）がある。(His argument has weak points.) 破損 (はそん): damage 荷物が破損していた。(The package was damaged.) 幅広い (はばひろい): wide-ranging 幅広い知（ち）識（しき）が必要だ。(Wide-ranging knowledge is necessary.) 留める (とどめる): to retain, to stop, to fasten 記（き）憶（おく）に留めておく。(I’ll keep it in mind.) 途方もない (とほうもない): outrageous, tremendous 途方もない金（きん）額（がく）だった。(It was an outrageous amount of money.) 滑らか (なめらか): smooth 肌（はだ）が滑らかになった。(My skin became smooth.) 邪魔 (じゃま): hindrance, interruption 勉強中に邪魔された。(I was interrupted while studying.) 春節 (しゅんせつ): Chinese New Year (Spring Festival) 春節は家族と過ごします。(We spend the Spring Festival with family.) 主婦 (しゅふ): housewife 彼女は専（せん）業（ぎょう）主婦です。(She is a full-time housewife.) 102 Your browser does not support the audio element. SHOW CONTENTS 慣れ (なれ): habituation, getting used to 新しい環境にもすぐに慣れが生（しょう）じた。(I quickly got used to the new environment.) 染みる（しみる）: to soak into 雨が服に染みんで冷たかった。(The rain soaked into my clothes and felt cold.) 妬む (ねたむ): to envy, to be jealous 彼の成功を妬む人もいる。(Some people envy his success.) 熱意 (ねつい): enthusiasm, zeal 面（めん）接（せつ）で彼の熱意が伝（つた）わってきた。(His enthusiasm came through during the interview.) 年賀 (ねんが): New Year’s greetings 年（ねん）賀（が）状（じょう）を出（だ）し忘（わす）れた。(I forgot to send New Year’s cards.) 飲み込む (のみこむ): to swallow, to understand 彼は状（じょう）況（きょう）をすぐに飲み込んだ。(He quickly grasped the situation.) 波及 (はきゅう): spread, ripple effect 不（ふ）景（けい）気（き）の影（えい）響（きょう）が他（た）業（ぎょう）界（かい）にも波及した。(The recession\u0026rsquo;s effects rippled into other industries.) 白状 (はくじょう): confession 彼はついに罪（つみ）を白状した。(He finally confessed his crime.) 恥らう (はじらう): to be shy, to blush 恥らうように微（ほほ）笑（え）んだ。(She smiled with a blush.) ぱてる: to get tired or mentally exhausted (colloquial) 一日中働（はたら）いてぱてた。(I worked all day and I’m wiped out.) 脱する (だっする): to escape, to get out 危（き）機（き）を脱する方法を考える。(We’re thinking of a way to escape the crisis.) 辿る (たどる): to follow (a path), to trace 小（こ）道（みち）を辿って山（さん）頂（ちょう）に着いた。(We followed the trail and reached the summit.) ダビング: dubbing (copying media) 映画をDVDにダビングした。(I dubbed the movie onto a DVD.) 断行 (だんこう): enforcement, decisive action 政府は改（かい）革（かく）を断行した。(The government enforced the reforms decisively.) 知的 (ちてき): intellectual 彼はとても知的な印（いん）象（しょう）を与（あた）える。(He gives a very intellectual impression.) 着手 (ちゃくしゅ): start, commencement 新プロジェクトに着手した。(We started the new project.) 着目 (ちゃくもく): attention, focusing on コスト削（さく）減（げん）に着目した提（てい）案（あん）だ。(This is a proposal focusing on cost reduction.) 沈没 (ちんぼつ): sinking 船（ふね）が嵐（あらし）で沈没した。(The ship sank in the storm.) 突き出す (つきだす): to thrust out, to push forward 顔を窓から突き出した。(He stuck his head out the window.) 受話器 (じゅわき): telephone receiver 受話器を取ったが、誰もいなかった。(I picked up the receiver, but no one was there.) 103 Your browser does not support the audio element. SHOW CONTENTS 継ぐ (つぐ): to inherit, to succeed 彼は父の事（じ）業（ぎょう）を継いだ。(He inherited his father\u0026rsquo;s business.) 連なる (つらなる): to extend, to be lined up 山々が連なって見える。(The mountains stretch out in a row.) 貫く (つらぬく): to pierce through, to persist 自分の信（しん）念（ねん）を貫いた。(He stuck to his beliefs.) 訂正 (ていせい): correction, revision 間（ま）違（ちが）いを訂正してください。(Please correct the mistake.) 適応 (てきおう): adaptation 新しい環境への適応が早い。(He adapts quickly to new environments.) てきばき: promptly, efficiently 彼はてきばきと仕事をこなす。(He handles his work efficiently.) 盗作 (とうさく): plagiarism その論文は盗作と判（はん）明（めい）した。(The paper was found to be plagiarized.) 同調 (どうちょう): agreement, sympathy 彼の意見に同調する人が多い。(Many people agree with his opinion.) 時折 (ときおり): occasionally 時折昔のことを思い出す。(I occasionally think of the past.) 土手 (どて): embankment, levee 川の土手を散歩する。(I take a walk along the river embankment.) 内緒 (ないしょ): secret これは内緒の話だよ。(This is a secret, okay?) 生々しい (なまなましい): vivid, graphic 事（じ）故（こ）の様（よう）子（す）を生々しく語（かた）った。(He described the accident in vivid detail.) 根回し (ねまわし): groundwork, behind-the-scenes negotiation 会議の前に根回しをしておく。(Do some groundwork before the meeting.) 念 (ねん): thought, concern, care 念には念を入れる。(Better safe than sorry.) 背景 (はいけい): background 事件の背景を調（ちょう）査（さ）する。(Investigate the background of the incident.) 敗戦 (はいせん): defeat in war 第（だい）二（に）次（じ）世（せ）界（かい）大（たい）戦（せん）の敗戦。(Defeat in World War II.) 破局 (はきょく): breakup, catastrophe 二人は破局を迎えた。(The couple broke up.) 禿げる (はげる): to go bald 彼は最近少し禿げてきた。(He\u0026rsquo;s been losing some hair lately.) 憚る (はばかる): to hesitate, to be hindered 人（ひと）目（め）を憚らず泣（な）いた。(She cried without regard for others.) 少子化 (しょうしか): declining birthrate 少子化が社会問題となっている。(The declining birthrate has become a social issue.) 104 Your browser does not support the audio element. SHOW CONTENTS 出番 (でばん): one\u0026rsquo;s turn, opportunity to act ついに私の出番が来た。(Finally, it was my turn.) 転嫁 (てんか): shifting (blame/responsibility) 責任を他人に転嫁するな。(Don’t shift the blame onto others.) 添削 (てんさく): correction (especially of writing) 先生に作文を添削してもらった。(The teacher corrected my essay.) 投下 (とうか): dropping (e.g., bombs, investment) 爆（ばく）弾（だん）が投下された。(Bombs were dropped.) 動向 (どうこう): trend, movement 市場の動向を注（ちゅう）視（し）している。(We are watching market trends closely.) 道場 (どうじょう): dojo (training hall for martial arts) 彼は毎週道場で稽（けい）古（こ）をしている。(He trains at the dojo every week.) 統制 (とうせい): control, regulation 政府は物（ぶっ）価（か）を統制した。(The government controlled prices.) 登録 (とうろく): registration サイトに登録する。(Register on the website.) 遠回り (とおまわり): detour, roundabout way 遠回りして帰った。(I took a detour on the way home.) 説く (とく): to explain, to advocate 彼は平（へい）和（わ）の重要性を説（と）いた。(He advocated the importance of peace.) 情け深い (なさけぶかい): compassionate, kind-hearted 彼は情け深い人だ。(He is a compassionate person.) 詰る (なじる): to blame, to reproach 彼女は私の失（しっ）敗（ぱい）を詰った。(She reproached me for my mistake.) 憎しみ (にくしみ): hatred 彼の目には憎しみがこもっていた。(His eyes were filled with hatred.) 担う (になう): to bear (a burden), to shoulder 若（わか）者（もの）が将（しょう）来（らい）を担っている。(Young people shoulder the future.) 入手 (にゅうしゅ): acquisition, obtaining 新しい情（じょう）報（ほう）を入手した。(I obtained new information.) 熱弁 (ねつべん): passionate speech 彼は会議で熱弁を振（ふ）るった。(He gave a passionate speech at the meeting.) 配布 (はいふ): distribution チラシが駅前で配布された。(Flyers were distributed in front of the station.) 計り知れない (はかりしれない): immeasurable その影（えい）響（きょう）は計り知れない。(The impact is immeasurable.) 承知 (しょうち): consent, knowledge その件は承知しました。(I’ve understood the matter.) 食卓 (しょくたく): dining table 家族で食卓を囲（かこ）む。(We gather around the dining table as a family.) 105 Your browser does not support the audio element. SHOW CONTENTS 歯止め (はどめ): brake, check, restraint 物（ぶっ）価（か）の上（じょう）昇（しょう）に歯止めがかからない。(There is no stopping the rise in prices.) 閉じこもる (とじこもる): to shut oneself in 試験前は図書館に閉じこもって勉強した。（Before the exam, I secluded myself in the library to study.） 富む (とむ): to be rich in, to be wealthy この国は資（し）源（げん）に富んでいる。(This country is rich in resources.) 取り除く (とりのぞく): to remove, eliminate 障（しょう）害（がい）を取り除く。(Remove obstacles.) とんとん拍子 (とんとんびょうし): smoothly, without a hitch 交（こう）渉（しょう）はとんとん拍子に進んだ。(The negotiations proceeded smoothly.) 乃至 (ないし): from…to, or 会議は午後2時乃至4時の間に行（おこな）われます。（The meeting will be held between 2 p.m. and 4 p.m.） 馴染む (なじむ): to get used to, to adapt 新しい職場にすぐ馴染んだ。(I quickly got used to my new workplace.) 似たり寄ったり (にたりよったり): much of a muchness, nearly the same どの案も似たり寄ったりだ。(All the proposals are more or less the same.) 任命 (にんめい): appointment, nomination 彼は部長に任命された。(He was appointed as the department head.) 妬ましい (ねたましい): jealous, envious 彼の成功が妬ましい。(I’m envious of his success.) 強請る (ねだる): to beg, to pester 子供がお菓子を強請ってきた。(The child pestered me for sweets.) 乗っ取る (のっとる): to hijack, take over 飛行機がテロリストに乗っ取られた。(The plane was hijacked by terrorists.) 爆破 (ばくは): explosion, blowing up ビルが爆破された。(The building was blown up.) 追究 (ついきゅう): pursuit (of truth, meaning) 真（しん）理（り）の追究を続けている。(We continue to pursue the truth.) 痛感 (つうかん): keen realization 自分の力（ちから）不（ぶ）足（そく）を痛感した。(I keenly felt my lack of ability.) 通念 (つうねん): conventional wisdom それは通念にとらわれた考えだ。(That idea is bound by conventional wisdom.) 償い (つぐない): atonement, compensation 彼は罪（つみ）の償いをしようとしている。(He is trying to atone for his crime.) 提示 (ていじ): presentation, showing 身（み）分（ぶん）証（しょう）の提示を求（もと）められた。(I was asked to show my ID.) 出向 (しゅっこう): temporary transfer (to another company or department) 本社から子（こ）会（がい）社（しゃ）に出向している。(He is temporarily assigned from the head office to a subsidiary.) 106 Your browser does not support the audio element. SHOW CONTENTS 踏襲 (とうしゅう): following (precedent, policy) 前（ぜん）任（にん）者（しゃ）の方（ほう）針（しん）を踏襲する。(We will follow the predecessor’s policy.) 統率 (とうそつ): leadership, command 彼は部（ぶ）下（か）をうまく統率している。(He leads his subordinates effectively.) 当分 (とうぶん): for the time being 当分は様（よう）子（す）を見ることにしよう。(Let’s wait and see for the time being.) 道理で (どうりで): no wonder, that\u0026rsquo;s why 道理で静かだと思ったよ。(No wonder it was so quiet.) 討論 (とうろん): debate, discussion 環境問題について討論した。(We had a debate on environmental issues.) 咎める (とがめる): to blame, to reproach 彼は私の失（しつ）言（げん）を咎めた。(He blamed me for my slip of the tongue.) 特産 (とくさん): local specialty 北海道（ほっかいどう）の特産は海（かい）産（さん）物（ぶつ）だ。(Hokkaido’s specialty is seafood.) 土台 (どだい): foundation, base 家（いえ）の土台がしっかりしている。(The house has a solid foundation.) 情けない (なさけない): pathetic, shameful 自分のミスに情けなくなった。(I felt ashamed of my mistake.) 生臭い (なまぐさい): smelling of raw fish or meat; fishy (figurative too) 生臭い話は苦（にが）手（て）だ。(I’m uncomfortable with shady talk.) 忍耐力 (にんたいりょく): perseverance, patience 忍耐力が試（ため）される仕事だ。(This job tests your patience.) ねじ回し (ねじまわし): screwdriver ねじ回しで棚（たな）を組（く）み立（た）てた。(I assembled the shelf with a screwdriver.) 粘り強い (ねばりづよい): persistent, tenacious 粘り強く交（こう）渉（しょう）を続けた。(We continued negotiations tenaciously.) 納品 (のうひん): delivery (of goods) 注文の品（しな）を納品しました。(The ordered items have been delivered.) 逃れる (のがれる): to escape, avoid 責任を逃れることはできない。(You can’t escape responsibility.) 把握 (はあく): grasp, understanding 状（じょう）況（きょう）を正（ただ）しく把握する。(Accurately grasp the situation.) 場当たり (ばあたり): ad hoc, haphazard 場当たり的な対（たい）応（おう）は問題を悪（あっ）化（か）させる。(Haphazard measures worsen the problem.) 配給 (はいきゅう): distribution, rationing 戦（せん）時（じ）中（ちゅう）は食（しょく）料（りょう）が配給された。(Food was rationed during the war.) 知り合い (しりあい): acquaintance 彼は私の知り合いです。(He’s an acquaintance of mine.) 姿 (すがた): appearance, figure 彼の姿が見えなくなった。(His figure disappeared from view.) 107 Your browser does not support the audio element. SHOW CONTENTS 配線 (はいせん): wiring 古い家の配線を調べる必要がある。(We need to inspect the wiring of the old house.) 配付 (はいふ): distribution (of documents, etc.) プリントを全員に配付してください。(Please distribute the handouts to everyone.) 諮る (はかる): to consult, to deliberate この問題は委（い）員（いん）会（かい）に諮るべきだ。(This issue should be discussed with the committee.) 励む (はげむ): to strive, to work hard 試験に向（む）けて勉強に励んでいる。(I’m working hard to prepare for the exam.) 発育 (はついく): growth, development (physical) 子供の発育には栄（えい）養（よう）が重要だ。(Nutrition is important for a child’s development.) 発注 (はっちゅう): ordering (goods, etc.) 商（しょう）品（ひん）を100個発注した。(We ordered 100 units of the product.) バッド: bat (as in baseball bat) 彼はバッドを振（ふ）るのが得意だ。(He’s good at swinging a bat.) 腹が立つ (はらがたつ): to get angry あんな言い方をされて腹が立った。(I got angry at the way he spoke to me.) 孕む (はらむ): to become pregnant; to contain (danger, etc.) 彼女は命を孕んでいる。(She is pregnant.) その計（けい）画（かく）にはリスクが孕んでいる。(The plan contains potential risks.) 張り合い (はりあい): motivation, competitiveness 張り合いのある仕（し）事（ごと）だ。(It’s a motivating job.) 張る (はる): to stretch, to put up (a tent, poster, etc.) 壁（かべ）にポスターを張る。(Put up a poster on the wall.) 晴らす (はらす): to clear away (doubts, stress, etc.) 試合で勝って悔（くや）しさを晴らした。（I cleared my frustration by winning the match.） 原っぱ (はらっぱ): open field 子供たちが原っぱで遊んでいる。(Children are playing in the open field.) 早いところ (はやいところ): quickly, as soon as possible 早いところ返（へん）事（じ）をください。(Please respond as soon as possible.) 張り紙 (はりがみ): paper notice, poster 掲（けい）示（じ）板（ばん）に張り紙がしてある。(There’s a notice posted on the bulletin board.) 生やす (はやす): to grow (beard, plants, etc.) ひげを生やしている。(He’s growing a beard.) 腹立たしい (はらだたしい): irritating, annoying 無（む）責（せき）任（にん）な態度が腹立たしい。(His irresponsible attitude is infuriating.) バリアフリー: barrier-free (accessible) この駅はバリアフリー対応です。(This station is accessible.) 腫れる (はれる): to swell 転（ころ）んで足が腫れた。(My foot swelled after falling.) 少なくとも (すくなくとも): at least 少なくとも一回は挑（ちょう）戦（せん）すべきだ。(You should try at least once.) 108 Your browser does not support the audio element. SHOW CONTENTS 晴れ渡る (はれわたる): to be perfectly clear (sky) 空が晴れ渡って気持ちがいい。(The sky is perfectly clear, and it feels great.) 控える (ひかえる): to refrain; to be waiting; to be coming up 甘い物を控えている。(I\u0026rsquo;m refraining from sweets.) 会場の外に控えている。(I’m waiting outside the venue.) ばれる: to be exposed (a secret or lie) 嘘がばれた。(My lie was found out.) 半端 (はんぱ): odd, incomplete, not whole 半端な量では足りない。(An odd amount won’t be enough.) 反響 (はんきょう): echo; reaction 映画は大きな反響を呼んだ。(The movie received a huge response.) 晴れ晴れしい (はればれしい): bright, cheerful 晴れ晴れしい気持ちで出（しゅっ）発（ぱつ）した。(I set off feeling cheerful and refreshed.) 半製品 (はんせいひん): semi-finished product 半製品を完成品に仕（し）上（あ）げる。(We finish semi-finished products into final ones.) 反感 (はんかん): antipathy, hostility 彼の態（たい）度（ど）は反感を買った。(His attitude drew hostility.) 遥か (はるか): far away, distant 遥か遠（とお）くに山が見える。(You can see mountains far in the distance.) パワー: power 若（わか）者（もの）のパワーに圧（あっ）倒（とう）された。(I was overwhelmed by the energy of the youth.) 反乱 (はんらん): rebellion, revolt 軍（ぐん）の反乱が起（お）きた。(A military revolt broke out.) 腫れ上がる (はれあがる): to swell up badly 虫（むし）に刺（さ）された所が腫れ上がった。(The area where I was bitten swelled up badly.) 販路 (はんろ): sales channel, market 新しい販路を開（かい）拓（たく）する。(We’re developing new sales channels.) 控え室 (ひかえしつ): waiting room 出（で）番（ばん）まで控え室で待つ。(Wait in the waiting room until your turn.) 伴奏 (ばんそう): musical accompaniment ピアノの伴奏で歌う。(Sing with piano accompaniment.) 万人 (ばんにん): everyone, all people 万人に好（す）かれる作品。(A work that everyone likes.) 控えめ (ひかえめ): moderate, reserved 控えめな性（せい）格（かく）の人です。(He is a modest person.) 随分 (ずいぶん): very, considerably 随分寒くなったね。(It’s gotten quite cold.) 滑る (すべる): to slip, slide; to blunder 氷（こおり）の上で滑った。(I slipped on the ice.) 冗（じょう）談（だん）が滑った。(My joke fell flat.) 109 Your browser does not support the audio element. SHOW CONTENTS 繁盛 (はんじょう): prosperity, thriving (usually of a business) この店はいつも繁盛している。(This store is always busy and thriving.) 反応 (はんのう): reaction, response 彼の冗（じょう）談（だん）に誰も反応しなかった。(No one reacted to his joke.) 恨 (うらみ): grudge, resentment 彼に深い恨みを抱（いだ）いている。(I hold a deep grudge against him.) 反発 (はんぱつ): repulsion, backlash, rebound 若者たちは新しい規（き）則（そく）に反発した。(The youth rebelled against the new rules.) 氾濫 (はんらん): flooding; overflowing (also figurative) 大雨で川が氾濫した。(The river overflowed due to heavy rain.) 反則 (はんそく): foul, rule violation サッカーで反則を取られた。(He was penalized for a foul in soccer.) 日陰 (ひかげ): shade, shadow 木（こ）の下（した）の日陰で休む。(Rest in the shade under the tree.) 悲観 (ひかん): pessimism 将来を悲観してはいけない。(Don’t be pessimistic about the future.) 引け目 (ひけめ): sense of inferiority 学（がく）歴（れき）に引け目を感じている。(He feels inferior due to his education background.) ビジョン: vision, long-term perspective 明（めい）確（かく）なビジョンを持って行動する。(Act with a clear vision.) 比する (ひする): to compare 彼の才能はプロにも比する。(His talent rivals that of professionals.) 引き取る (ひきとる): to take into one\u0026rsquo;s care, to receive 店に商品を引き取りに行く。(Go to the store to pick up the item.) 率いる (ひきいる): to lead, to command 彼はチームを率いて優（ゆう）勝（しょう）した。(He led the team to victory.) びくとも: not flinch a bit, unaffected (used with negative) その犬は雷（かみなり）にもびくともしなかった。(The dog didn’t flinch even at the thunder.) 歪む (ゆがむ): to warp, be distorted (literal or emotional) 彼の心（こころ）は嫉（しっ）妬（と）で歪んでいた。(His heart was warped by jealousy.) 浸る (ひたる): to be immersed in (liquid/emotion) 過（か）去（こ）の思い出に浸る。(Immerse oneself in past memories.) 引きずる (ひきずる): to drag along; to dwell on 昔（むかし）の失（しっ）敗（ぱい）を引きずっている。(He is still dwelling on past failures.) 潜む (ひそむ): to lurk, to lie hidden 危険が潜んでいる。(Danger is lurking.) 済む (すむ): to be finished; to suffice 謝（あやま）れば済（す）む問題ではない。(This isn’t a problem you can fix just by apologizing.) 捨てる (すてる): to throw away ゴミを外に捨てた。(I threw the trash outside.) 110 Your browser does not support the audio element. SHOW CONTENTS 引き継ぐ (ひきつぐ): to take over, to inherit 彼は父の会社を引き継いだ。(He took over his father\u0026rsquo;s company.) 否決 (ひけつ): rejection, disapproval 提案は会議で否決された。(The proposal was rejected at the meeting.) 浸す (ひたす): to soak, to dip 布（ぬの）を水に浸した。(I soaked the cloth in water.) 必修 (ひっしゅう): required (course) この授業は必修科（か）目（もく）です。(This course is mandatory.) 必然 (ひつぜん): inevitable, necessity 成功は努力の必然の結（けっ）果（か）だ。(Success is the inevitable result of effort.) 日照り (ひでり): drought 長い日照りで作（さく）物（もつ）が枯（か）れた。(The crops withered due to the long drought.) 引っかく (ひっかく): to scratch 猫に手を引っかかれた。(I was scratched by a cat.) 非常勤 (ひじょうきん): part-time (esp. job or worker) 彼は非常勤講（こう）師（し）として働（はたら）いている。(He works as a part-time lecturer.) 人影 (ひとかげ): figure of a person 遠（とお）くに人影が見えた。(I saw a figure in the distance.) 一息 (ひといき): a breath, a short rest 一息ついてから作（さ）業（ぎょう）を再（さい）開（かい）した。(I took a short break before continuing the work.) 人柄 (ひとがら): personality, character 彼の人柄はとても穏（おだ）やかだ。(He has a very gentle personality.) ひと括り (ひとくくり): treating as one group 世（せ）代（だい）でひと括りにすべきではない。(You shouldn’t lump people together by generation.) 一頃 (ひところ): once, formerly 一頃は毎日運動していた。(I used to exercise every day.) 一目ぼれ (ひとめぼれ): love at first sight 彼女に一目ぼれした。(I fell in love with her at first sight.) 人質 (ひとじち): hostage 犯人は人質を取って逃（とう）走（そう）した。(The criminal took a hostage and fled.) 人並み (ひとなみ): average, ordinary 私も人並みに幸（しあわ）せになりたい。(I want to be happy like everyone else.) 人任せ (ひとまかせ): leaving to others 仕事を人任せにしてはいけない。(You shouldn\u0026rsquo;t leave your work to others.) 砂 (すな): sand 砂（すな）浜（はま）で貝（かい）を拾（ひろ）った。(I picked up shells on the sandy beach.) 咳 (せき): cough 咳が止まらない。(I can’t stop coughing.) 精神 (せいしん): mind, spirit 精神的な強（つよ）さが大切だ。(Mental strength is important.) 111 SHOW CONTENTS 非難 (ひなん): criticism, blame 彼の発言は多くの非難を浴びた。(His statement drew a lot of criticism.) 日取り (ひどり): fixed date, appointed day 結婚式の日取りが決まった。(The wedding date has been decided.) 平たい (ひらたい): flat, even この石は表面が平たい。(This stone has a flat surface.) 一人ぼっち (ひとりぼっち): all alone, lonely 彼は外国で一人ぼっちの生活をしている。(He lives all alone in a foreign country.) 秘める (ひめる): to keep secret, to hide (emotion, intent) 彼女は胸に夢を秘めていた。(She kept her dreams hidden in her heart.) 日向 (ひなた): sunny place, in the sun 猫が日向で昼寝している。(The cat is napping in the sun.) 氷河期 (ひょうがき): ice age 氷河期には多くの動物が絶滅した。(Many animals went extinct during the ice age.) 独り身 (ひとりみ): single, unmarried person 彼はまだ独り身だ。(He is still single.) 悲鳴 (ひめい): scream, shriek 驚いて悲鳴を上げた。(She let out a scream in surprise.) 避難 (ひなん): evacuation, taking refuge 台風が来る前に避難した。(We evacuated before the typhoon came.) 表する (ひょうする): to express, to show (formal/literary) 感謝の気持ちを言葉で表した。(I expressed my gratitude in words.) 病棟 (びょうとう): hospital ward 彼は集中治療の病棟に入っている。(He is in the intensive care unit.) 閃く (ひらめく): to flash, to occur (a thought/idea) 名案が閃いた。(A great idea suddenly came to me.) 微量 (びりょう): minute amount, trace 微量の毒が検出された。(A trace amount of poison was detected.) 疲労 (ひろう): fatigue 激しい運動で疲労がたまった。(Fatigue built up due to intense exercise.) 貧弱 (ひんじゃく): poor, meager, weak 彼の知識は貧弱だ。(His knowledge is poor.) 貧血 (ひんけつ): anemia 彼女は貧血で倒れた。(She fainted due to anemia.) 非力 (ひりき): powerless, weak 私はこの問題に対して非力です。(I feel powerless against this problem.) 無愛想 (ぶあいそう): unsociable, blunt 彼は無愛想な態度を取った。(He acted in a blunt manner.) 世話 (せわ): care, help 子どもの世話をするのは大変だ。(Taking care of children is tough.) 112 SHOW CONTENTS ピンチ: crisis, tough situation 試合の終盤でピンチを迎えた。(We faced a crisis in the final stage of the match.) 貧乏 (びんぼう): poverty, poor 学生時代はとても貧乏だった。(I was very poor during my student years.) 瀕する (ひんする): to be on the verge of 彼の命は危機に瀕している。(His life is on the verge of danger.) 不案内 (ふあんない): unfamiliarity, ignorance (of a place/topic) この地域には不案内です。(I’m unfamiliar with this area.) 頻繁 (ひんぱん): frequent 頻繁にメールをチェックしている。(I check my emails frequently.) 不意 (ふい): sudden, unexpected 不意の質問に答えられなかった。(I couldn’t answer the sudden question.) 封鎖 (ふうさ): blockade, lockdown 警察が現場を封鎖した。(The police blocked off the scene.) 不得手 (ふえて): poor at, weak point 彼は数学が不得手だ。(He’s not good at math.) 不穏 (ふおん): disturbing, uneasy 不穏な空気が漂っていた。(There was a tense atmosphere.) 不可避 (ふかひ): unavoidable 災害の発生は不可避だった。(The disaster was unavoidable.) 覆面 (ふくめん): mask, disguise 覆面をした強盗が現れた。(A masked robber appeared.) 風俗 (ふうぞく): customs, manners (can also mean sex industry) 江戸時代の風俗を研究する。(Study the customs of the Edo period.) 深み (ふかみ): depth, profundity 彼の演技には深みがある。(His acting has depth.) 不吉 (ふきつ): ominous, unlucky 黒猫は不吉の象徴とされる。(Black cats are considered a symbol of bad luck.) 不可解 (ふかかい): incomprehensible, puzzling 彼の行動は不可解だった。(His behavior was puzzling.) 複合 (ふくごう): combination, composite 複合施設が建設中だ。(A multi-purpose facility is under construction.) 福利 (ふくり): welfare, well-being 社員の福利厚生が充実している。(Employee welfare is well provided.) 副作用 (ふくさよう): side effect この薬には副作用がある。(This medicine has side effects.) 扇風機 (せんぷうき): electric fan 夏は扇風機が欠かせない。(Fans are essential in the summer.) 早退 (そうたい): leaving early (from work/school) 頭痛がひどくて早退した。(I left early because of a bad headache.) 113 SHOW CONTENTS 服する (ふくする): to comply with, to submit to 彼は会社の方針に服した。(He complied with the company\u0026rsquo;s policy.) 富豪 (ふごう): wealthy person, millionaire 彼は若くして富豪になった。(He became a millionaire at a young age.) 耽る (ふける): to be absorbed in 読書に耽って一日が過ぎた。(The whole day passed while I was absorbed in reading.) 負債 (ふさい): debt, liabilities 負債を減らすために節約している。(I’m saving money to reduce my debts.) 不治 (ふじ): incurable その病気は不治のものとされている。(That disease is considered incurable.) 布告 (ふこく): proclamation 新しい法律が政府によって布告された。(A new law was proclaimed by the government.) 不振 (ふしん): stagnation, slump 経営が不振に陥っている。(The business is in a slump.) 不在 (ふざい): absence 彼は今、不在です。(He is not here right now.) 不順 (ふじゅん): irregularity, unseasonableness 天候が不順で作物が育たない。(The crops aren’t growing due to unseasonable weather.) 無遠慮 (ぶえんりょ): blunt, rude 彼は無遠慮な物言いをした。(He spoke bluntly.) 不審 (ふしん): suspicious 不審な人物が周囲をうろついていた。(A suspicious person was loitering nearby.) 侮辱 (ぶじょく): insult 彼は公の場で侮辱された。(He was insulted in public.) 不信感 (ふしんかん): distrust 彼に対する不信感が広がっている。(Distrust toward him is spreading.) 復旧 (ふっきゅう): restoration, recovery 電力の復旧には数時間かかる。(It will take several hours to restore the electricity.) 不調 (ふちょう): bad condition 最近、体の不調が続いている。(I’ve been feeling unwell lately.) 普段着 (ふだんぎ): casual clothes 今日は普段着で来てください。(Please come in casual clothes today.) 物件費 (ぶっけんひ): property expenses, material costs 新しい設備の導入には物件費がかかる。(Introducing new equipment incurs property/material costs.) 物議 (ぶつぎ): public discussion, controversy その発言は物議を醸した。(That remark caused controversy.) 不摂生 (ふせっせい): neglect of health 不摂生が原因で病気になった。(I became ill due to neglecting my health.) 育てる (そだてる): to raise, to bring up 両親が私を大切に育ててくれた。(My parents raised me with great care.) 114 SHOW CONTENTS 伏せる (ふせる): to lie face down, to hide 爆発音を聞いて彼は頭を伏せた。(He ducked his head when he heard the explosion.) 物色 (ぶっしょく): to look for, to search for 犯人は逃走用の車を物色していた。(The suspect was searching for a getaway car.) 復活 (ふっかつ): revival, comeback その番組が十年ぶりに復活した。(The show made a comeback after ten years.) 物件 (ぶっけん): property, real estate item 駅の近くで物件を探している。(I’m looking for a property near the station.) 復興 (ふっこう): reconstruction, recovery 地震後の復興活動が始まった。(Reconstruction efforts began after the earthquake.) 無難 (ぶなん): safe, acceptable 無難な答えを選んでおいた。(I chose a safe answer.) 不当 (ふとう): unjust, unfair 不当な解雇に対して訴えを起こした。(He filed a lawsuit against the unfair dismissal.) 踏まえる (ふまえる): to base on, to take into account 前回の結果を踏まえて対策を考える。(We’ll consider countermeasures based on the last result.) 不服 (ふふく): dissatisfaction, objection その決定に不服を申し立てた。(I filed an objection to the decision.) 不要 (ふよう): unnecessary 不要な書類をすべて捨てた。(I threw away all the unnecessary documents.) 踏み場 (ふみば): place to step, foothold 部屋が散らかっていて踏み場もない。(The room is so messy there’s no place to step.) 不評 (ふひょう): bad reputation 新商品は消費者に不評だった。(The new product was poorly received by consumers.) 不本意 (ふほんい): unwilling, involuntary 不本意ながら転職することになった。(I had to change jobs against my will.) 不備 (ふび): deficiency, incompleteness 提出書類に不備が見つかった。(A deficiency was found in the submitted documents.) 扶養 (ふよう): support, maintenance (of a dependent) 彼は両親を扶養している。(He supports his parents.) 踏み込む (ふみこむ): to step into, to delve into 警察が容疑者の家に踏み込んだ。(The police raided the suspect\u0026rsquo;s house.) 底 (そこ): bottom, base バケツの底に穴が開いている。(There’s a hole at the bottom of the bucket.) 其処で (そこで): therefore, and so バスが来なかった。そこで歩いて行った。(The bus didn’t come. So I walked.) 相談 (そうだん): consultation, discussion 上司に進退について相談した。(I consulted with my boss about my position.) それ程 (それほど): to that extent, so much それ程難しい問題ではない。(It’s not that difficult of a problem.) 115 SHOW CONTENTS 振り返る (ふりかえる): to look back, to reflect 過去を振り返って反省する。(I reflect on the past and learn from it.) 古めかしい (ふるめかしい): old-fashioned, antiquated 古めかしい家具が部屋に合っている。(The old-fashioned furniture suits the room.) ブレーク: break, boom, hit あの芸人は去年ブレークした。(That comedian had a big breakthrough last year.) 武力 (ぶりょく): military power, force 問題を武力で解決すべきではない。(Problems should not be solved by military force.) 振り込み (ふりこみ): bank transfer 家賃は毎月口座に振り込みます。(I transfer the rent into the account every month.) 触れ合い (ふれあい): contact, interaction 地元の人との触れ合いが旅の魅力だ。(Interacting with locals is the charm of travel.) 振り替え (ふりかえ): substitution, transfer (of dates, funds, etc.) 授業は来週に振り替えられた。(The class was rescheduled to next week.) 振り出し (ふりだし): starting point, beginning 計画が振り出しに戻ってしまった。(The plan went back to square one.) 並列 (へいれつ): parallel, side by side 並列して二つの作業を進める。(Proceed with two tasks in parallel.) 平常 (へいじょう): normal, usual 事件後も彼は平常心を保っていた。(He remained calm after the incident.) 平衡 (へいこう): balance, equilibrium 平衡感覚を失って倒れそうになった。(I lost my sense of balance and nearly fell.) 弊害 (へいがい): harmful effect 競争の激化には弊害もある。(There are harmful effects of increased competition.) 平静 (へいせい): calm, serenity 彼女はいつも平静を保っている。(She always maintains her composure.) 平常心 (へいじょうしん): presence of mind, calmness 試験でも平常心を忘れずに。(Stay calm even during the exam.) 大抵 (たいてい): usually, mostly 日曜日は大抵家で過ごす。(I usually spend Sundays at home.) 大部分 (だいぶぶん): majority, most 大部分の学生が試験に合格した。(Most of the students passed the exam.) 足す (たす): to add 水を足して味を調整する。(Add water to adjust the flavor.) 確か (たしか): certain, if I remember correctly 確か彼は今アメリカにいるはずだ。(If I remember correctly, he\u0026rsquo;s in the U.S. now.) 宝くじ (たからくじ): lottery 宝くじが当たったら旅行したい。(If I win the lottery, I want to travel.) 倒れる (たおれる): to fall, to collapse 熱中症で倒れる人が増えている。(More people are collapsing due to heatstroke.) 116 SHOW CONTENTS 辟易 (へきえき): to be fed up, to be overwhelmed 彼の自慢話には辟易した。(I was fed up with his bragging.) 別居 (べっきょ): living apart (e.g. husband and wife) 彼らは離婚せずに別居している。(They are living apart without divorcing.) 粉末 (ふんまつ): powder この薬は粉末状で水に溶かして飲む。(This medicine is in powder form and should be dissolved in water.) ぺこぺこ: starving, bowing repeatedly (onomatopoeia) 朝から何も食べてなくてお腹がぺこぺこだ。(I haven’t eaten since morning and I’m starving.) 謙る (へりくだる): to humble oneself 彼はいつも謙って話す。(He always speaks humbly.) 分散 (ぶんさん): dispersion, decentralization リスクを分散するために複数の投資先を選んだ。(I chose multiple investments to spread the risk.) 付録 (ふろく): supplement, appendix, freebie この雑誌にはバッグの付録がついている。(This magazine comes with a free bag.) 分業 (ぶんぎょう): division of labor 仕事を効率よく進めるために分業する。(We divide the work to improve efficiency.) 憤慨 (ふんがい): indignation, anger 不公平な扱いに憤慨している。(I am indignant at the unfair treatment.) 奮闘 (ふんとう): struggle, hard fight 選手たちは最後まで奮闘した。(The players fought hard until the end.) 分裂 (ぶんれつ): split, division グループ内の意見対立で分裂が起きた。(A split occurred due to conflicting opinions in the group.) 経る (へる): to pass through, to go by 長い年月を経て完成した作品。(A work completed after many years.) 変形 (へんけい): deformation, transformation プラスチックは熱で変形することがある。(Plastic can deform with heat.) 便宜 (べんぎ)：convenience, accommodation 便宜上、この手続きを簡略化します。(For convenience, we’ll simplify this procedure.) 変身 (へんしん): transformation, metamorphosis 魔法で王子がカエルに変身した。(The prince transformed into a frog by magic.) 返済 (へんさい): repayment ローンを毎月返済している。(I repay the loan every month.) 返還 (へんかん): return, restitution 預かっていた品物を返還した。(I returned the item I was keeping.) 偏見 (へんけん): prejudice, bias 外国人に対する偏見をなくすべきだ。(We should eliminate prejudice against foreigners.) 竹 (たけ): bamboo この箸は竹でできている。(These chopsticks are made of bamboo.) 尋ねる (たずねる): to ask, to inquire 道を尋ねたら親切に教えてくれた。(I asked for directions and they kindly helped me.) 117 SHOW CONTENTS 弁解 (べんかい): explanation, excuse 彼は自分の遅刻について弁解をした。(He made an excuse for his tardiness.) 偏向 (へんこう): bias, inclination その新聞は政治的に偏向していると言われている。(That newspaper is said to be politically biased.) 返上 (へんじょう): giving up, relinquishing 彼は名誉職を返上した。(He resigned from the honorary position.) 弁償 (べんしょう): compensation, reimbursement 破損したものの弁償を求められた。(I was asked to compensate for the damaged item.) 編成 (へんせい): formation, organization 新しいチームを編成した。(I formed a new team.) 穂 (ほ): ear (of grain), spike 田んぼに稲の穂が実ってきた。(The rice ears are starting to ripen in the field.) 放棄 (ほうき): abandonment, renouncement 彼はその計画を放棄した。(He abandoned the plan.) 変遷 (へんせん): change, transition 彼の考え方は年月とともに変遷した。(His way of thinking has changed over time.) 方策 (ほうさく): measure, policy 会社は新しい方策を採用した。(The company adopted a new policy.) 奉仕 (ほうし): service, devotion 彼は地域社会への奉仕を惜しまなかった。(He devoted himself to serving the community.) 返答 (へんとう): response, reply 彼からの返答を待っている。(I am waiting for his response.) 法人 (ほうじん): corporation, legal entity その法人は数千人を雇っている。(The corporation employs thousands of people.) 報じる (ほうじる): to report, to announce ニュースがその事件を報じた。(The news reported on the incident.) 放出 (ほうしゅつ): emission, release 工場から有害物質が放出されている。(Harmful substances are being released from the factory.) 呆然 (ぼうぜん): bewildered, stunned 彼は驚きで呆然とした。(He was stunned with surprise.) 報酬 (ほうしゅう): reward, compensation 彼はプロジェクトの成功に対する報酬を受け取った。(He received a reward for the success of the project.) 放置 (ほうち): neglect, leaving as it is その問題は放置しておくべきではない。(That problem should not be left unattended.) 放射 (ほうしゃ): radiation 放射線が漏れる危険がある。(There is a risk of radiation leakage.) 邦人 (ほうじん): Japanese person, fellow countryman そのホテルには多くの邦人が泊まっていた。(Many Japanese people were staying at that hotel.) 訪ねる (たずねる): to visit, to inquire 彼の家を訪ねてみるつもりだ。(I plan to visit his house.) 118 SHOW CONTENTS 膨張 (ぼうちょう): expansion, swelling 宇宙は常に膨張している。(The universe is constantly expanding.) 偏重 (へんちょう): placing too much emphasis 理論の偏重は実践を妨げる。(Overemphasis on theory hinders practice.) 返品 (へんぴん): returned goods, return of goods サイズが合わなかったので返品した。(I returned it because the size didn’t fit.) 変容 (へんよう): transformation, metamorphosis 都市は急速に変容している。(The city is rapidly transforming.) 暴動 (ぼうどう): riot, uprising 政府に対する抗議が暴動に発展した。(The protest against the government turned into a riot.) 冒頭 (ぼうとう): beginning, start 会議の冒頭で挨拶が行われた。(A greeting was given at the beginning of the meeting.) 崩壊 (ほうかい): collapse, breakdown 建物が地震で崩壊した。(The building collapsed due to the earthquake.) 妨害 (ぼうがい): obstruction, interference 警察が通行の妨害を排除した。(The police removed the obstruction to traffic.) 防衛 (ぼうえい): defense, protection 国を防衛するために軍が配備された。(The military was deployed to defend the country.) ボイコット: boycott 労働者たちはその企業をボイコットした。(The workers boycotted the company.) 褒美 (ほうび): reward, prize 勝利した選手に褒美が与えられた。(A reward was given to the winning athlete.) 暴騰 (ぼうとう): sudden price surge 原油価格の暴騰が経済に影響を与えた。(The surge in oil prices affected the economy.) 法廷 (ほうてい): courtroom 証人は法廷で証言した。(The witness testified in court.) 放り込む (ほうりこむ): to throw into 荷物をバッグに放り込んだ。(I tossed the luggage into the bag.) 葬る (ほうむる): to bury, to inter 祖父は故郷の墓地に葬られた。(My grandfather was buried in his hometown cemetery.) 飽和 (ほうわ): saturation 市場はすでに飽和状態にある。(The market is already saturated.) 捕獲 (ほかく): capture, seizure 希少な動物が密猟者に捕獲された。(A rare animal was captured by poachers.) 募金 (ぼきん): fundraising, donation 被災地のために募金が行われた。(Donations were collected for the disaster area.) 建つ (たつ): to be built, to be erected 新しいビルがここに建つ予定だ。(A new building is scheduled to be built here.) 建てる (たてる): to build, to construct 家を建てるのは一生の夢だった。(Building a house was a lifelong dream.) 119 SHOW CONTENTS 補給 (ほきゅう): replenishment, supply 軍隊は食料を補給した。(The army replenished their food supplies.) 補充 (ほじゅう): supplementation, refill インクを補充する必要がある。(The ink needs to be refilled.) 補強 (ほきょう): reinforcement, strengthening 壁を補強して地震に備えた。(The wall was reinforced to prepare for earthquakes.) 綻びる (ほころびる): to come apart at the seams, to begin to open (like a smile or blossom) 袖口が綻びている。(The cuff is coming apart at the seam.) 惚ける (ぼける): to grow senile, to play dumb 最近、祖父は少し惚けてきたようだ。(Recently, my grandfather seems to be growing a bit senile.) 補助 (ほじょ): assistance, support 政府が家賃の補助を行っている。(The government provides rent assistance.) 補償 (ほしょう): compensation, indemnification 事故の被害者に補償が支払われた。(Compensation was paid to the accident victims.) ぼそぼそ: in a low, murmuring voice; in dry, crumbly manner (food) 彼はぼそぼそと話した。(He spoke in a low, mumbling voice.) ホステス: hostess (usually in bars/clubs) 彼女は銀座のクラブでホステスとして働いている。(She works as a hostess in a club in Ginza.) 補足 (ほそく): supplement, complement 彼の発言を補足して説明した。(I supplemented his statement with an explanation.) 歩調 (ほちょう): pace, step チーム全体が歩調を合わせた。(The whole team coordinated their pace.) 発足 (ほっそく): inauguration, launch (of an organization or program) 新しいプロジェクトが発足した。(A new project was launched.) 発端 (ほったん): origin, beginning 争いの発端は小さな誤解だった。(The conflict originated from a small misunderstanding.) 発作 (ほっさ): seizure, fit, attack (medical or emotional) 彼は喘息の発作を起こした。(He had an asthma attack.) 没頭 (ぼっとう): being absorbed in, immersed 彼は仕事に没頭している。(He is completely absorbed in his work.) 没収 (ぼっしゅう): confiscation, forfeiture カンニングが発覚し、試験は没収された。(He was caught cheating and the exam was confiscated.) 没落 (ぼつらく): downfall, collapse (usually of a family or status) 貴族の家系が没落した。(The noble family fell into decline.) 畳 (たたみ): tatami mat 畳の部屋で寝転んだ。(I lay down in a tatami room.) 怠い (だるい): sluggish, weary, listless 昨日から体が怠い。(I’ve felt sluggish since yesterday.) 120 SHOW CONTENTS 解ける (とける): to come undone, to be solved 靴の紐が解けた。(My shoelace came undone.) 施す (ほどこす): to give (aid), to apply, to perform 貧しい人々に食料が施された。(Food was given to the poor.) 褒め称える (ほめたたえる): to praise highly, to extol 勇敢な行動を褒め称えた。(His brave action was highly praised.) 保養 (ほよう): recuperation, rest 温泉で保養する。(Recuperate at a hot spring.) 滅ぼす (ほろぼす): to destroy, to ruin 戦争が国を滅ぼした。(The war destroyed the country.) 舞い上がる (まいあがる): to soar, to be excited 紙吹雪が空に舞い上がった。(Confetti soared into the sky.) 本音 (ほんね): real intention, true feelings 本音を言えば、行きたくない。(To be honest, I don’t want to go.) 滅びる (ほろびる): to perish, to be destroyed 文明が滅びた。(The civilization perished.) 滅ぶ (ほろぶ): to fall, to collapse (same as 滅びる, more literary) 帝国が滅ぶ日が来た。(The day came when the empire collapsed.) 本名 (ほんみょう): real name 芸名ではなく、本名で活動する。(He works under his real name, not a stage name.) 本場 (ほんば): home (of something), genuine place 本場のイタリアンを味わった。(I tasted authentic Italian food.) 本能 (ほんのう): instinct 危険を感じて本能的に逃げた。(I instinctively ran away when I sensed danger.) 本気 (ほんき): seriousness 彼は本気でその仕事に取り組んでいる。(He’s seriously committed to that job.) 埋蔵 (まいぞう): buried (usually treasure or resources) この土地には豊富な資源が埋蔵されている。(This land contains rich buried resources.) 舞う (まう): to dance, to flutter 花びらが風に舞っていた。(Petals were fluttering in the wind.) 間際 (まぎわ): just before, brink 出発間際に電話が鳴った。(The phone rang just before departure.) 前置き (まえおき): preface, introduction 前置きはいいから、本題に入ろう。(Skip the introduction and get to the point.) 紛れる (まぎれる): to be lost in, to be distracted 人混みに紛れて彼を見失った。(I lost sight of him in the crowd.) 足りる (たりる): to be enough, to suffice お金は足りていますか？(Do you have enough money?) 駄目 (だめ): no good, not allowed ここでタバコを吸っては駄目です。(You’re not allowed to smoke here.) 121 SHOW CONTENTS 賄う (まかなう): to provide for, to cover (costs) アルバイトで生活費を賄っている。(I cover my living expenses with a part-time job.) 前売り (まえうり): advance sale 映画の前売り券を買った。(I bought an advance ticket for the movie.) 勝る (まさる): to excel, to surpass 彼の才能は誰にも勝っている。(His talent surpasses everyone else\u0026rsquo;s.) 真心 (まごころ): sincerity, true heart 真心を込めて手紙を書いた。(I wrote the letter with sincerity.) 増し (まし): better, preferable これでも何もしないよりは増しだ。(This is still better than doing nothing.) 紛らわしい (まぎらわしい): confusing, misleading 紛らわしい名前に注意してください。(Be careful with confusing names.) 真上 (まうえ): directly above 月が真上に輝いている。(The moon is shining directly above.) 正しく (ただしく): correctly 答えを正しく書いてください。(Please write the answer correctly.) 前書き (まえがき): foreword, preface 本の前書きを読んでから本文に入る。(I read the foreword before starting the main text.) 交わる (まじわる): to intersect, to associate with 二つの線が交わる点。(The point where two lines intersect.) 待ち遠しい (まちどおしい): longed for, eagerly awaited 夏休みが待ち遠しい。(I\u0026rsquo;m eagerly waiting for summer vacation.) 交える (まじえる): to mix, to exchange 意見を交えて議論する。(We exchange opinions during the discussion.) 前もって (まえもって): in advance 前もって準備しておくべきだ。(You should prepare in advance.) 全うする (まっとうする): to accomplish, to carry out 任務を全うした。(He fulfilled his duty.) 前向き (まえむき): positive, forward-looking 前向きな態度を持ち続ける。(Keep a positive attitude.) 任す (まかす): to entrust (colloquial variant of 任せる) その仕事は彼に任すよ。(I\u0026rsquo;ll leave that job to him.) 跨る (またがる): to straddle, to extend across 馬の背にまたがり野山を走り回った。（I rode all over the countryside on horseback.） 末期 (まっき): terminal stage, final period 病気の末期に入った。(He entered the terminal stage of the illness.) マタニティー: maternity マタニティーウェアを買いに行った。(I went to buy maternity clothes.) 暖房 (だんぼう): heating 部屋の暖房をつけた。(I turned on the heater in the room.) 122 SHOW CONTENTS 真下 (ました): directly below 電灯の真下に立つ。(I stand directly under the light.) 真っ二つ (まっぷたつ): cleanly in two, right in half リンゴを真っ二つに切る。(Cut the apple right in half.) 麻痺 (まひ): paralysis, numbness 寒さで手が麻痺してきた。(My hands became numb from the cold.) 丸々 (まるまる): entirely, plump 丸々一週間休んだ。(I took an entire week off.) 眼差し (まなざし): gaze, look 優しい眼差しを向ける。(She gave me a gentle look.) マニア: enthusiast, maniac 鉄道マニアが集まっている。(Train enthusiasts are gathering.) 免れる (まぬかれる): to escape from, to avoid 事故を免れた。(I narrowly avoided the accident.) 眉毛 (まゆげ): eyebrows 眉毛を整える。(I trim my eyebrows.) 瞬き (まばたき): blink 瞬きをせずに見つめた。(He stared without blinking.) 満喫 (まんきつ): to fully enjoy 旅行を満喫した。(I fully enjoyed the trip.) 満月 (まんげつ): full moon 今夜は満月だ。(Tonight is a full moon.) 漫才 (まんざい): comic dialogue (Japanese stand-up comedy) 有名なコンビの漫才を見る。(I watched a famous comedy duo perform.) 真ん丸い (まんまるい): perfectly round 真ん丸い石を拾った。(I picked up a perfectly round stone.) 回りくどい (まわりくどい): roundabout, indirect 回りくどい言い方はやめて。(Stop speaking so indirectly.) 満更 (まんざら): (not) entirely (usually used with negatives) 満更でもない顔をしている。(He doesn\u0026rsquo;t seem entirely displeased.) 満場 (まんじょう): entire audience 満場一致で決定された。(It was decided by unanimous approval.) 万引き (まんびき): shoplifting 彼は万引きで捕まった。(He was caught shoplifting.) 見入る (みいる): to gaze at intently 絵に見入ってしまった。(I found myself gazing at the painting.) 注射 (ちゅうしゃ): injection 医者に注射をしてもらった。(I got an injection from the doctor.) 近頃 (ちかごろ): recently 近頃忙しくて寝不足だ。(I\u0026rsquo;ve been busy and sleep-deprived lately.) 123 SHOW CONTENTS 丸める (まるめる): to roll up, to round off 紙を丸めてゴミ箱に捨てた。(I crumpled up the paper and threw it in the trash.) 見当たる (みあたる): to be found 財布がどこにも見当たらない。(I can\u0026rsquo;t find my wallet anywhere.) 見合わせる (みあわせる): to postpone, to look at each other 台風のため、試合は見合わせた。(The match was postponed due to the typhoon.) 見落とす (みおとす): to overlook 重要な点を見落としていた。(I overlooked an important point.) 見失う (みうしなう): to lose sight of 人混みで友達を見失った。(I lost sight of my friend in the crowd.) 見極める (みきわめる): to discern, to ascertain 本物かどうかを見極める。(I try to determine whether it\u0026rsquo;s genuine.) 見込む (みこむ): to anticipate, to expect 売上の増加を見込んでいる。(We expect an increase in sales.) 微塵も (みじんも): not the slightest 彼には微塵も疑いがない。(He doesn\u0026rsquo;t have the slightest doubt.) 身ごなし (みごなし): body movement, agility 彼の身ごなしはとても軽やかだ。(His movements are very agile.) 見劣り (みおとり): looking inferior 新製品は旧製品に比べて見劣りしない。(The new product doesn\u0026rsquo;t look inferior to the old one.) 未開 (みかい): undeveloped, uncivilized その地域はまだ未開のままだ。(That area remains undeveloped.) 幹 (みき): trunk (of a tree) 木の幹に名前を刻んだ。(I carved our names into the tree trunk.) 見苦しい (みぐるしい): unsightly, disgraceful 見苦しい争いをやめろ。(Stop that disgraceful fight.) 見込み (みこみ): expectation, prospect 回復の見込みはある。(There\u0026rsquo;s hope for recovery.) 未熟 (みじゅく): immature, inexperienced 彼はまだ未熟な選手だ。(He is still an inexperienced player.) 水増し (みずまし): padding, inflation (e.g. of numbers or quantities) 経費を水増しするのは違法だ。(Inflating expenses is illegal.) 溝 (みぞ): ditch, gap, rift 道に溝ができていた。(There was a ditch in the road.) ちっとも: not at all (used with negatives) ちっとも寒くないよ。(It\u0026rsquo;s not cold at all.) 駐車場 (ちゅうしゃじょう): parking lot 駅の前に駐車場がある。(There is a parking lot in front of the station.) 付く (つく): to be attached, to stick, to be added シャツにシミが付いている。(There’s a stain on the shirt.) 124 SHOW CONTENTS 見世物 (みせもの): show, spectacle サーカスは昔ながらの見世物だ。(The circus is a traditional form of spectacle.) 水気 (みずけ): moisture 野菜の水気を切ってから調理してください。(Drain the moisture from the vegetables before cooking.) 見せびらかす (みせびらかす): to show off 新しいスマホを見せびらかしていた。(He was showing off his new smartphone.) 密接 (みっせつ): close (relationship or connection) 文化と習慣は密接に関係している。(Culture and customs are closely connected.) 乱す (みだす): to disturb, to disrupt 静けさを乱さないでください。(Please don’t disturb the quiet.) 道程 (みちのり): journey, distance traveled 家から駅までの道程は10分です。(The journey from my house to the station takes 10 minutes.) 道連れ (みちづれ): companion on a journey (often unwillingly) 彼は部下を道連れにして辞めた。(He resigned and took his subordinate down with him.) 三日坊主 (みっかぼうず): someone who doesn’t stick to anything for long ダイエットも三日坊主で終わった。(I gave up the diet after just a few days.) 身近 (みぢか): familiar, near oneself 身近な問題から考えよう。(Let’s start by thinking about problems close to us.) 満たない (みたない): less than 参加者は100人に満たなかった。(The number of participants was less than 100.) 導く (みちびく): to guide, to lead 先生が私を成功へ導いてくれた。(My teacher guided me to success.) 密集 (みっしゅう): crowding, concentration 人々が駅前に密集していた。(People were crowded in front of the station.) 密着 (みっちゃく): close contact, being glued to カメラが選手に密着して取材した。(The camera closely followed the athlete.) 密度 (みつど): density この街は人口密度が高い。(This city has a high population density.) 漲る (みなぎる): to be full of (emotion, energy, etc.) 彼の目は自信に漲っていた。(His eyes were full of confidence.) 見逃す (みのがす): to miss (e.g. an event, opportunity), to overlook 大事な場面を見逃してしまった。(I missed an important scene.) 見積もる (みつもる): to estimate 修理費用を見積もってもらった。(I had them estimate the repair cost.) 源 (みなもと): source, origin 幸せの源は健康だ。(The source of happiness is good health.) 見習う (みならう): to learn by observing, to follow an example 先輩の仕事ぶりを見習いたい。(I want to follow my senior’s example.) 見所 (みどころ): highlight, point of interest この映画の見所はラストシーンだ。(The highlight of this movie is the final scene.) 125 SHOW CONTENTS 見なす (みなす): to regard as, to consider 彼の行動は無礼と見なされた。(His behavior was considered rude.) 見栄え (みばえ): appearance, visual appeal この料理は見栄えも味も良い。(This dish has both good appearance and taste.) 見通し (みとおし): outlook, forecast, perspective 景気の見通しは明るくない。(The economic outlook is not bright.) 身の回り (みのまわり): one’s personal belongings, daily needs 身の回りのことは自分でやるべきだ。(You should take care of your personal matters yourself.) 身の上 (みのうえ): one’s personal circumstances 彼は自分の身の上を語った。(He talked about his personal circumstances.) 見計らう (みはからう): to estimate time or choose a suitable moment 帰る時間を見計らって連絡する。(I’ll contact you after estimating the right time to leave.) 見張る (みはる): to keep watch, to stand guard 警備員が入口を見張っている。(A guard is watching the entrance.) 身振り (みぶり): gesture, motion 彼は身振りを交えて話した。(He spoke using gestures.) 見晴らし (みはらし): view, outlook この部屋は見晴らしがいい。(This room has a great view.) 報う (むくう): to reward, to repay (often emotionally or spiritually) 努力が報われた。(My efforts were rewarded.) 魅了 (みりょう): fascination, to captivate 彼女の歌声に魅了された。(I was captivated by her singing voice.) 身元 (みもと): identity, background 身元を確認する必要がある。(We need to verify the identity.) 未練 (みれん): lingering attachment, regret 彼はまだ元恋人に未練がある。(He still has lingering feelings for his ex.) 報いる (むくいる): to repay, to retaliate 彼は恩に報いた。(He repaid the favor.) 見破る (みやぶる): to see through, to detect 嘘を見破られた。(My lie was seen through.) 民宿 (みんしゅく): guesthouse, private lodging 旅行中は民宿に泊まった。(I stayed at a guesthouse during the trip.) 無口 (むくち): quiet, reticent 彼は無口な性格だ。(He is a quiet person.) 未練がましい (みれんがましい): clingy, showing lingering attachment 未練がましい態度は見苦しい。(Clingy behavior is unattractive.) 無気力 (むきりょく): apathy, lack of energy 最近、無気力な日々が続いている。(Lately, I’ve been feeling apathetic every day.) 漬ける (つける): to soak, to pickle 野菜を塩に漬ける。(Soak the vegetables in salt.) 126 SHOW CONTENTS 無実 (むじつ): innocence 彼は無実を証明された。(He was proven innocent.) 無言 (むごん): silence 彼は無言で部屋を出て行った。(He left the room without saying a word.) 無惨 (むざん): cruel, tragic 無惨な事故現場を見た。(I saw a tragic accident scene.) むさ苦しい (むさくるしい): stuffy, shabby, untidy むさ苦しい部屋にはいたくない。(I don’t want to stay in such a stuffy room.) 貪る (むさぼる): to devour, to crave 彼は本を貪るように読んだ。(He devoured books voraciously.) 毟る (むしる): to pluck, to tear off 雑草を根こそぎ毟った。(I plucked out all the weeds.) 結びつき (むすびつき): connection, relation 教育と収入には強い結びつきがある。(There is a strong link between education and income.) 無茶 (むちゃ): unreasonable, reckless そんな無茶なことはやめなさい。(Stop doing such reckless things.) 無茶苦茶 (むちゃくちゃ): absurd, messy, chaotic 部屋の中は無茶苦茶だ。(The room is in complete chaos.) 空しい (むなしい): empty, vain, meaningless 努力が報われず、空しい気持ちになった。(I felt empty because my efforts were in vain.) 無念 (むねん): regret, chagrin 試合に負けて無念だった。(I was regretful about losing the match.) 無間 (むけん): endless, without pause (often used in Buddhist context) 無間地獄のような苦しみ。(Suffering like an endless hell.) 斑 (まだら): mottled, spotted 斑模様の犬が歩いていた。(A mottled dog was walking by.) 目当て (めあて): aim, purpose お金目当ての結婚はうまくいかない。(A marriage for money never goes well.) 無謀 (むぼう): reckless, rash 無謀な運転は危険だ。(Reckless driving is dangerous.) 無論 (むろん): of course, naturally 無論、彼にも責任がある。(Of course, he is also responsible.) 明暗 (めいあん): light and dark, highs and lows 試合の明暗を分けたプレーだった。(That play decided the outcome of the game.) 目先 (めさき): immediate future, near term 目先の利益にとらわれるな。(Don’t be fixated on short-term gains.) 兆 (きざし): sign, omen, indication 春の兆が見え始めた。(Signs of spring have begun to appear.) 捕まえる (つかまえる): to catch, to arrest 泥棒を捕まえた。(They caught the thief.) 127 SHOW CONTENTS 明朗 (めいろう): cheerful, bright, clear 彼は明朗な性格で、誰とでも仲良くなれる。(He has a cheerful personality and gets along with everyone.) 明白 (めいはく): clear, obvious 彼の嘘は明白だった。(His lie was obvious.) 名簿 (めいぼ): name list, register 出席者の名簿を確認した。(I checked the list of attendees.) 巡らす (めぐらす): to surround, to turn over (in one’s mind) 作戦を巡らせた。(I devised a strategy.) 恵み (めぐみ): blessing, grace 自然の恵みに感謝する。(We are thankful for nature’s blessings.) 捲る (めくる): to turn over (pages), to flip ノートのページを捲った。(I flipped through the pages of the notebook.) 名誉 (めいよ): honor, prestige 彼は名誉ある賞を受けた。(He received an honorable award.) 明瞭 (めいりょう): clarity, clearness 明瞭な発音で話す。(Speak with clear pronunciation.) めきめき: noticeably, rapidly 彼の日本語はめきめき上達している。(His Japanese is improving rapidly.) 目覚ましい (めざましい): remarkable, striking 目覚ましい進歩を遂げた。(Achieved remarkable progress.) 面会 (めんかい): interview, meeting 面会謝絶となっている。(Visitation is not permitted.) 免除 (めんじょ): exemption 税金が免除された。(The tax was exempted.) 目まぐるしい (めまぐるしい): hectic, dizzying 目まぐるしい一日だった。(It was a hectic day.) 目処 (めど): prospect, aim 再開の目処が立った。(There is now a prospect for resumption.) 目盛り (めもり): scale, graduation (on ruler, etc.) ビーカーの目盛りを読んでください。(Please read the scale on the beaker.) 面する (めんする): to face (onto) 海に面した部屋に泊まった。(I stayed in a room facing the sea.) 免じる (めんじる): to excuse, to forgive 今回だけは特別に免じよう。(I’ll make an exception just this once.) 面目 (めんぼく/めんもく): face, honor, reputation 面目を保つために必死だった。(He tried hard to save face.) 丁目 (ちょうめ): district block (used in addresses) 東京の三丁目に住んでいる。(I live in the third block of Tokyo.) 通じる (つうじる): to be understood, to be connected 気持ちが通じた瞬間だった。(It was the moment our feelings connected.) 128 SHOW CONTENTS 猛 (もう): fierce, intense 猛スピードで車が走っていた。(The car was running at a furious speed.) 網 (もう): net, network 魚を網で捕まえた。(They caught the fish with a net.) 盲目的 (もうもくてき): blind, uncritical 彼は上司に盲目的に従っている。(He blindly obeys his boss.) 設ける (もうける): to establish, to set up 相談窓口が設けられた。(A consultation desk was set up.) 申し分 (もうしぶん): objection, complaint; flaw (usually in negative expression) 申し分のない出来栄えだ。(The result is flawless.) 申し出る (もうしでる): to offer, to propose 手伝いを申し出た。(I offered to help.) モーテル: motel 旅行中にモーテルに泊まった。(I stayed at a motel during the trip.) 猛烈 (もうれつ): intense, fierce, furious 猛烈な嵐が街を襲った。(A fierce storm hit the city.) 目論む (もくろむ): to plan, to scheme 彼は一攫千金を目論んでいる。(He’s scheming to get rich quick.) 盲点 (もうてん): blind spot その仕組みには盲点がある。(There’s a blind spot in that system.) 黙々 (もくもく): silently, wordlessly 彼は黙々と作業を続けた。(He continued working silently.) 目録 (もくろく): catalog, list 図書の目録を作成した。(I made a catalog of books.) 目論見 (もくろみ): plan, intention 彼の目論見は外れた。(His plan failed.) もぎ取る (もぎとる): to wrest, to tear off チケットをもぎ取って会場に入った。(I tore off the ticket and entered the venue.) 模型 (もけい): model, replica 飛行機の模型を組み立てた。(I assembled a model airplane.) 目下 (もっか): at present, currently 目下、調査中です。(It is currently under investigation.) 専ら (もっぱら): exclusively, mainly 彼は専ら内勤をしている。(He mainly does desk work.) 物足りたい (ものたりたい) → 物足りない (ものたりない): unsatisfied, something lacking この料理はちょっと物足りない。(This dish is a bit lacking.) 持て余す (もてあます): to be too much for one, to be unable to handle 暇を持て余している。(I have more free time than I know what to do with.) 伝わる (つたわる): to be conveyed, to be transmitted 彼の思いが伝わってきた。(His feelings were conveyed to me.) 129 SHOW CONTENTS 物好き (ものずき): curious person, someone with strange tastes そんな古い本を集めるとは、彼も物好きだ。(He must be quite a curious person to collect such old books.) 持て成す (もてなす): to entertain, to treat (a guest) 客を丁寧にもてなした。(They treated the guest with great hospitality.) 模範 (もはん): model, example 彼の行動は模範となる。(His behavior serves as a model.) 模索 (もさく): search, exploration 解決策を模索している。(They are exploring possible solutions.) 持てる (もてる): to be popular (esp. with the opposite sex), to be well-off 彼は女性にとても持てる。(He is very popular with women.) 持ち切り (もちきり): hot topic, constant talk この話題で社内は持ち切りだ。(This topic is the constant talk in the company.) 模倣 (もほう): imitation, copying 子どもは親の行動を模倣する。(Children imitate the behavior of their parents.) 漏らす (もらす): to let leak, to reveal 彼は秘密を漏らしてしまった。(He let the secret slip.) 揉める (もめる): to have a dispute, to quarrel 遺産をめぐって家族が揉めた。(The family quarreled over the inheritance.) 野心 (やしん): ambition 彼には政治家になるという野心がある。(He has the ambition to become a politician.) 揉め事 (もめごと): trouble, dispute ご近所との揉め事は避けたい。(I want to avoid disputes with the neighbors.) 盛り付け (もりつけ): presentation (of food), plating 盛り付けが美しい料理だった。(The food was beautifully presented.) 矢 (や): arrow 矢が的に命中した。(The arrow hit the target.) 漏れる (もれる): to leak, to escape 情報が外部に漏れた。(The information leaked outside.) 催す (もよおす): to hold (an event), to feel (a sensation) 会議が催された。(A meeting was held.) 最寄り (もより): nearest 最寄りの駅は徒歩5分です。(The nearest station is a 5-minute walk.) 屋敷 (やしき): residence, mansion 大きな屋敷に住んでいる。(They live in a large mansion.) 養う (やしなう): to support (a family), to cultivate 彼は家族を養っている。(He supports his family.) 包む (つつむ): to wrap, to cover プレゼントをきれいに包んだ。(I wrapped the present beautifully.) 釣る (つる): to fish, to catch 川で魚を釣った。(I caught a fish in the river.) 130 SHOW CONTENTS 漏る（もる）: to leak 屋根から雨が漏っている。Rain is leaking from the roof. 屋台（やたい）: food stall, street vendor 祭りで屋台が並んでいる。Food stalls are lined up at the festival. やってのける: to manage to do (something difficult) 彼は難しい任務をやってのけた。He managed to carry out a difficult task. 優位（ゆうい）: superiority, predominance 試合は彼のチームが優位に立っている。His team has the upper hand in the match. 病む（やむ）: to fall ill, to suffer 心を病む人が増えている。More people are suffering from mental illness. 和らげる（やわらげる）: to soften, to ease 緊張を和らげる音楽。Music that eases tension. 優越（ゆうえつ）: superiority 他人に対して優越感を持つべきではない。One should not feel superior to others. 山崩れ（やまくずれ）: landslide 大雨の影響で山崩れが起きた。A landslide occurred due to heavy rain. 山積み（やまづみ）: pile, heap 仕事が山積みだ。I\u0026rsquo;m buried under a pile of work. 闇（やみ）: darkness 闇の中に何かが動いている。Something is moving in the darkness. やむを得ず: unavoidably やむを得ず出張をキャンセルした。I had to cancel the business trip unavoidably. やり繰り（やりくり）: managing, making ends meet 生活費をやり繰りするのは大変だ。It\u0026rsquo;s tough to make ends meet with living expenses. 有益（ゆうえき）: beneficial, useful その講義はとても有益だった。The lecture was very beneficial. 勇敢（ゆうかん）: brave, courageous 彼は火の中から人を救い出した勇敢な人だ。He is a brave person who saved someone from the fire. 有数（ゆうすう）: prominent, leading 彼は国内有数の経済学者だ。He is one of the leading economists in the country. 融通（ゆうづう）: flexibility, accommodation 時間に融通が利く仕事。A job with flexible hours. 優勢（ゆうせい）: superiority, dominance 戦況は敵軍が優勢だった。The enemy forces were dominant in the battle. 優先（ゆうせん）: priority 怪我人を優先して搬送した。The injured were given priority in transportation. 有する（ゆうする）: to possess, to own 彼は豊富な知識を有している。He possesses extensive knowledge. 手軽（てがる）: easy, simple 手軽に作れるレシピを探している。I\u0026rsquo;m looking for an easy-to-make recipe. 131 SHOW CONTENTS 誘導（ゆうどう）: guidance, leading 警備員が観客を出口へ誘導した。The security guard guided the audience to the exit. 遊興（ゆうきょう）: merrymaking, amusement 彼は夜ごとに遊興にふけっていた。He indulged in merrymaking every night. 誘致（ゆうち）: attraction (e.g., investment, events) オリンピックの誘致活動が始まった。Efforts to attract the Olympics have begun. 優美（ゆうび）: elegance, grace 彼女の踊りはとても優美だった。Her dance was very graceful. 裕福（ゆうふく）: wealthy, rich 彼の家は裕福な家庭だった。He came from a wealthy family. 融資（ゆうし）: financing, loan 銀行から事業資金の融資を受けた。He received a business loan from the bank. 有望（ゆうぼう）: promising, hopeful 彼は将来有望な研究者だ。He is a promising researcher. 行き届く（ゆきとどく）: to be attentive, to be thorough 彼女の気配りは本当によく行き届いている。She is truly attentive to every detail. 行く手（ゆくて）: one’s path, future course 行く手には多くの困難が待っていた。Many difficulties awaited him on his path. 有力（ゆうりょく）: influential, strong (candidate) 彼は市長選の有力候補だ。He is a strong candidate for mayor. 委ねる（ゆだねる）: to entrust, to delegate 重要な仕事を彼に委ねた。I entrusted the important task to him. ゆゆしい: grave, serious (formal/literary) ゆゆしい事態が発生した。A grave situation has occurred. 夕間（ゆうま）: evening time (rare/poetic usage) 夕間の風景がとても美しい。The scenery in the evening is very beautiful. 夕焼け（ゆうやけ）: sunset glow 夕焼けが空を赤く染めた。The sunset glow turned the sky red. 揺らぐ（ゆらぐ）: to shake, to waver 彼の信念は決して揺らがなかった。His convictions never wavered. 猶予（ゆうよ）: postponement, grace period 支払いに一週間の猶予が与えられた。A one-week grace period was granted for the payment. 誘惑（ゆうわく）: temptation 甘い誘惑に負けてしまった。I gave in to sweet temptation. 揺さぶる（ゆさぶる）: to shake, to rock 地震が建物を激しく揺さぶった。The earthquake violently shook the building. 緩む（ゆるむ）: to loosen, to slacken ネジが緩んでいる。The screw is loose. 連れる（つれる）: to take someone along 子どもを連れて動物園に行った。I took my child to the zoo. 132 SHOW CONTENTS 揺るがす（ゆるがす）: to shake, to disturb そのニュースは社会を揺るがすものだった。The news shook society to its core. 要請（ようせい）: request, demand (formal) 警察が住民に協力を要請した。The police requested the residents’ cooperation. 緩める（ゆるめる）: to loosen, to relax ベルトを少し緩めた。I loosened my belt a little. 要因（よういん）: primary factor, cause 失敗の要因は準備不足だった。The main cause of failure was lack of preparation. 横道（よこみち）: side road, digression 横道にそれず本題に戻りましょう。Let’s get back to the main point without digressing. 緩やか（ゆるやか）: gentle, gradual 緩やかな坂を上っていく。Climb the gentle slope. 容赦（ようしゃ）: mercy, forgiveness 彼は一切容赦しなかった。He showed no mercy at all. 様相（ようそう）: aspect, phase, condition 経済は新たな様相を呈している。The economy is taking on a new aspect. 養成（ようせい）: training, development 教師の養成講座に参加した。I attended a teacher training course. 予感（よかん）: premonition, hunch 嫌な予感がする。I have a bad feeling about this. 横たわる（よこたわる）: to lie down, to lie across 彼はベッドに横たわった。He lay down on the bed. 予言（よげん）: prophecy, prediction その予言は現実のものとなった。The prophecy came true. 余興（よきょう）: entertainment, performance (e.g. at a party) 結婚式の余興で歌を披露した。I performed a song as entertainment at the wedding. 欲深い（よくぶかい）: greedy 欲深い人は満足を知らない。A greedy person is never satisfied. 抑制（よくせい）: suppression, restraint 感情の抑制が大切だ。Controlling emotions is important. 抑圧（よくあつ）: oppression, repression 抑圧された民衆が立ち上がった。The oppressed people rose up. 用法（ようほう）: usage, instructions 薬の用法をよく読んでください。Please read the usage instructions for the medicine. 夜更け（よふけ）: late at night 夜更けまで本を読んでいた。I was reading a book until late at night. 適当（てきとう）: appropriate / irresponsible (depending on context) 適当な時期に話し合おう。Let’s talk at an appropriate time. 彼はいつも適当なことを言う。He always says random things. 電灯（でんとう）: electric light 電灯をつけて部屋を明るくした。I turned on the light to brighten the room. 133 SHOW CONTENTS 余地（よち）: room (for something), margin まだ改善の余地がある。There is still room for improvement. 蘇る（よみがえる）: to be revived, to come back (to life or memory) 子供時代の思い出が蘇った。Memories of my childhood came back. 良し悪し（よしあし）: good and bad, merits and demerits その案には良し悪しがある。That plan has both merits and demerits. 余程（よほど）: very, greatly, considerably 彼は余程疲れているようだ。He seems to be very tired. よもや: by no means (used with a negative verb), hardly よもや彼が裏切るとは思わなかった。I never thought he would betray us. 攀じ登る（よじのぼる）: to climb up, to scramble up 子供が木に攀じ登った。The child scrambled up the tree. 欲求（よっきゅう）: desire, urge 欲求を抑えるのは難しい。It’s hard to suppress one’s desires. 装う（よそおう）: to dress, to pretend 彼は平静を装っていた。He pretended to be calm. 読み上げる（よみあげる）: to read aloud 名前を一人ずつ読み上げた。He read the names aloud one by one. 余所見（よそみ）: looking away, distracted glance 余所見運転は危険だ。Driving while distracted is dangerous. 寄り添う（よりそう）: to snuggle up, to get close to 夫婦が寄り添って歩く。The couple walked close together. 来訪（らいほう）: visit (formal) ご来訪ありがとうございます。Thank you for your visit. 来場（らいじょう）: attendance (at an event) 多くの方にご来場いただきました。Many people attended the event. 弱気（よわき）: timid, faint-hearted 弱気になってはいけない。You must not lose your courage. 乱用（らんよう）: abuse, misuse 権力の乱用が問題になっている。Abuse of power is becoming a problem. 寄り掛かる（よりかかる）: to lean on, to rely on 壁に寄り掛かって立つ。He stood leaning against the wall. 落胆（らくたん）: discouragement, disappointment 結果に落胆した。I was disappointed with the result. 落下（らっか）: fall, drop 高い所からの落下に注意。Beware of falling objects from above. 酪農（らくのう）: dairy farming 彼の家は酪農を営んでいる。His family runs a dairy farm. 弱まる（よわまる）: to weaken, to diminish 台風の勢力が弱まった。The typhoon has weakened. 134 SHOW CONTENTS 弱まる（よわまる）: to weaken, to become less strong 雨が次第に弱まってきた。The rain gradually weakened. 弱る（よわる）: to be weakened, to be troubled 最近体が弱ってきた。My body has been getting weaker recently. 弱音（よわね）: complaint, whining 弱音を吐かずに頑張れ。Hang in there without complaining. ラグビー: rugby 彼は大学でラグビーをしている。He plays rugby at university. 拉致（らち）: abduction, kidnapping 彼は武装集団に拉致された。He was abducted by an armed group. 利己的（りこてき）: selfish, self-centered 利己的な行動は避けるべきだ。You should avoid selfish behavior. 理屈っぽい（りくつっぽい）: argumentative, too theoretical 彼は少し理屈っぽいところがある。He tends to be a bit argumentative. 陸上（りくじょう）: land; track and field 陸上競技の大会に出場した。I participated in a track and field meet. 理屈（りくつ）: logic, reason 理屈ではわかっている。I understand it logically. 利潤（りじゅん）: profit, gain 利潤を追求する企業。A company that pursues profit. 立食（りっしょく）: standing meal (buffet) パーティーは立食形式だった。The party was a standing buffet. 立体（りったい）: three-dimensional object 子供たちが立体パズルで遊んでいる。The children are playing with 3D puzzles. ライセンス: license ソフトウェアのライセンスを取得した。I obtained a software license. 理知（りち）: reason and intelligence 彼は理知的な人物だ。He is a person of reason and intellect. 理性（りせい）: reason, rationality 怒りを理性で抑える。I suppress my anger with reason. 理念（りねん）: principle, ideal 会社の理念に共感した。I sympathized with the company’s ideals. 利点（りてん）: advantage, benefit この方法には多くの利点がある。This method has many advantages. 唐辛子（とうがらし）: chili pepper 唐辛子をたっぷり使った料理。A dish that uses a lot of chili peppers. 倒産（とうさん）: bankruptcy その会社は不況で倒産した。The company went bankrupt due to the recession. 通る（とおる）: to pass through, to go along この道を通って駅へ行ける。You can get to the station via this road. 135 SHOW CONTENTS リフレッシュ: refresh, rejuvenation 週末は温泉でリフレッシュした。I refreshed myself at a hot spring over the weekend. 両立（りょうりつ）: compatibility, balance 仕事と家庭を両立させるのは大変だ。Balancing work and family is challenging. 量販（りょうはん）: mass sales 量販店でテレビを買った。I bought a TV at a mass retailer. 理論（りろん）: theory この理論はまだ証明されていない。This theory has not been proven yet. 輪郭（りんかく）: outline, contour 山の輪郭が朝日に浮かび上がった。The outline of the mountain emerged in the morning sun. 領海（りょうかい）: territorial waters 外国船が日本の領海に侵入した。A foreign ship entered Japan’s territorial waters. 良心（りょうしん）: conscience 良心がとがめる。My conscience bothers me. 領地（りょうち）: territory, domain 昔の領主は広い領地を持っていた。Feudal lords used to own vast domains. 領土（りょうど）: territory (national land) 国は領土を守る責任がある。A country is responsible for defending its territory. 倫理（りんり）: ethics 医者には高い倫理観が求められる。Doctors are expected to have a strong sense of ethics. 流暢（りゅうちょう）: fluent 彼は英語を流暢に話す。He speaks English fluently. 略奪（りゃくだつ）: looting, plunder 戦争中に村が略奪された。The village was plundered during the war. 両極（りょうきょく）: both extremes, the North and South Poles 両極端な意見がぶつかっている。Two extreme opinions are clashing. 良好（りょうこう）: good, favorable 健康状態は良好です。My health is in good condition. 類型的（るいけいてき）: stereotypical, typical 彼は類型的なサラリーマンだ。He is a stereotypical office worker. 領域（りょういき）: domain, area 科学の新たな領域を切り開いた。They opened up a new domain in science. 良識（りょうしき）: good sense, sound judgment 良識ある行動をとってほしい。Please act with good judgment. 流通（りゅうつう）: distribution, circulation 商品の流通がスムーズだ。Product distribution is smooth. 床屋（とこや）: barbershop 床屋で髪を切ってもらった。I got my hair cut at a barbershop. 所で（ところで）: by the way ところで、明日の予定は？By the way, what’s the plan for tomorrow? 136 SHOW CONTENTS 類する（るいする）: to resemble, to be similar to 彼の考えは私の意見に類している。His idea is similar to mine. 量産（りょうさん）: mass production この部品は工場で量産されている。These parts are mass-produced in the factory. 類型（るいけい）: type, category これは古い類型のドラマだ。This is a drama of an old type. 冷害（れいがい）: cold damage (to crops) 冷害のせいで米の収穫量が減った。Rice yields dropped due to cold weather damage. 冷夏（れいか）: cool summer 今年は冷夏で海水浴客が少ない。This year’s cool summer led to fewer beachgoers. 冷酷（れいこく）: cruel, cold-hearted 彼は冷酷な言葉を平気で言う。He speaks cruel words without hesitation. 零細（れいさい）: small-scale (business, etc.) 彼の会社は零細企業だ。His company is a small-scale enterprise. レバー: liver; lever 鶏のレバーが好きだ。I like chicken liver. レバーを引いてください。Please pull the lever. 歴然（れきぜん）: clear, obvious 実力の差は歴然としていた。The difference in skill was obvious. レンタカー: rental car 旅行中はレンタカーを使った。I used a rental car during the trip. 連帯（れんたい）: solidarity 連帯の気持ちが大切だ。A sense of solidarity is important. 連中（れんちゅう）: bunch, gang (often derogatory) あの連中とは関わりたくない。I don\u0026rsquo;t want to get involved with that bunch. 冷淡（れいたん）: indifferent, cold 彼は冷淡な態度をとった。He showed a cold attitude. 止める（とどめる）: to stop, to put an end to 彼の暴走を止めるのは難しい。It\u0026rsquo;s hard to stop his rampage. 特急（とっきゅう）: limited express (train) 特急列車で東京に行った。I took a limited express train to Tokyo. 届ける（とどける）: to deliver, to send 荷物を家まで届けてもらった。I had the package delivered to my house. 取り替える（とりかえる）: to exchange, to replace 電池を新しいものに取り替えた。I replaced the battery with a new one. 泥棒（どろぼう）: thief 泥棒が現金を盗んで逃げた。The thief stole cash and ran away. 虎（とら）: tiger 虎はアジアに生息する猛獣だ。Tigers are fierce animals native to Asia. どんどん: rapidly, steadily, one after another 雨がどんどん降ってきた。The rain started falling rapidly. 137 SHOW CONTENTS 連邦（れんぽう）: federation, union 連邦制を採用している国も多い。Many countries adopt a federal system. 朗報（ろうほう）: good news 朗報を聞いてみんな喜んだ。Everyone was happy to hear the good news. 沸き上がる（わきあがる）: to boil up, to rise, to surge 会場は歓声で沸き上がった。The venue surged with applause. 論理（ろんり）: logic, reason 彼の論理には欠陥がある。His logic has flaws. 路地（ろじ）: alley, lane 小さな路地を通って家に帰った。I went home through a narrow alley. 露骨（ろこつ）: explicit, blunt, frank 彼は露骨に自分の意見を言った。He bluntly expressed his opinion. 論議（ろんぎ）: discussion, argument 議題について活発な論議が行われた。A lively discussion was held on the topic. 老若男女（ろうにゃくなんにょ）: people of all ages and genders そのイベントには老若男女が参加した。People of all ages and genders participated in the event. 枠（わく）: frame, border, limit 予算の枠を超えてはいけない。You should not exceed the budget limit. 老衰（ろうすい）: old age, senility 彼は老衰で亡くなった。He passed away due to old age. 労力（ろうりょく）: labor, effort このプロジェクトには多くの労力が必要だ。This project requires a lot of effort. わくわく: excited, thrilled (onomatopoeia) 新しいゲームを始める前にわくわくしている。I\u0026rsquo;m excited before starting the new game. 割り込む（わりこむ）: to interrupt, to cut in 会話に割り込むのは失礼だ。It\u0026rsquo;s rude to interrupt a conversation. 患う（わずらう）: to suffer from, to be ill 彼は長い間病気に患っている。He has been suffering from illness for a long time. 割り当て（わりあて）: allocation, assignment 各チームに仕事を割り当てた。I assigned tasks to each team. 泥（どろ）: mud, dirt 雨で道が泥だらけになった。The road became muddy due to the rain. 中々（なかなか）: quite, considerably (with negation: not easily) この問題は中々解けない。This problem is quite hard to solve. 治る（なおる）: to heal, to recover 風邪はもう治った。The cold is already gone. 長ねぎ（ながねぎ）: long green onion, leek 長ねぎをスープに入れて煮込んだ。I put leeks into the soup and simmered it. 流れる（ながれる）: to flow, to run (e.g., water, time) 川の水が静かに流れている。The river water flows quietly. 138 SHOW CONTENTS 和風（わふう）: Japanese style このレストランは和風の内装です。This restaurant has a Japanese-style interior. 煩わしい（わずらわしい）: troublesome, annoying 煩わしい手続きは省きたい。I want to skip the troublesome procedures. 煩う（わずらう）: to worry about, to be afflicted with 病を煩って長く寝込んでいた。He was bedridden for a long time due to illness. 無くなる（なくなる）: to be lost, to disappear 財布が無くなってしまった。My wallet has gone missing. 投げる（なげる）: to throw ボールを相手に向かって投げた。I threw the ball toward my opponent. 殴る（なぐる）: to hit, to punch 彼は怒って壁を殴った。He got angry and punched the wall. 鍋（なべ）: pot, hot pot 寒い日は鍋料理が食べたくなる。I crave hot pot on cold days. 慣れる（なれる）: to get used to, to become accustomed to 新しい仕事に慣れるのに時間がかかる。It takes time to get used to a new job. 盗む（ぬすむ）: to steal 店から商品が盗まれた。Goods were stolen from the store. 逃げる（にげる）: to escape, to run away 泥棒は裏口から逃げた。The thief escaped through the back door. 人形（にんぎょう）: doll, puppet かわいい人形を買ってもらった。I was given a cute doll. 塗る（ぬる）: to paint, to spread 壁に白いペンキを塗った。I painted the wall with white paint. 除く（のぞく）: to exclude, to remove, to peek 彼を除いて全員が賛成した。Everyone agreed except him. パート: part-time job 彼女はスーパーでパートをしている。She works part-time at a supermarket. 乗り物（のりもの）: vehicle, transportation 子供は乗り物が大好きだ。Children love vehicles. 拝見（はいけん）: seeing (humble form of 見る) 資料を拝見しました。I have seen the document. 灰皿（はいざら）: ashtray 灰皿はテーブルの上にあります。The ashtray is on the table. 運ぶ（はこぶ）: to carry, to transport 荷物を部屋まで運んだ。I carried the luggage to the room. 鋏（はさみ）: scissors 鋏で紙を切ってください。Please cut the paper with scissors. 発言（はつげん）: remark, statement その発言は多くの人に影響を与えた。That statement influenced many people. 139 SHOW CONTENTS 預ける（あずける）: to entrust, to leave in someone\u0026rsquo;s care 子供を保育園に預けて働いている。I leave my child at daycare while I work. 扱う（あつかう）: to handle, to deal with この店では外国製品も扱っている。This store also deals in foreign products. 跡（あと）: trace, mark, remains 雪の上に足跡が残っていた。Footprints were left in the snow. 圧縮（あっしゅく）: compression ファイルを圧縮して送ってください。Please compress the file before sending it. 当て嵌める（あてはめる）: to apply (a rule, example), to fit このルールを全てのケースに当て嵌めるのは難しい。It’s hard to apply this rule to every case. 宛て（あて）: addressed to この手紙は山田さん宛てです。This letter is addressed to Mr. Yamada. 後片付け（あとかたづけ）: cleaning up, tidying up 食事の後片付けを手伝ってください。Please help clean up after the meal. 当てる（あてる）: to hit, to guess, to apply クイズに正解を当てた。I guessed the correct answer in the quiz. 炙る（あぶる）: to toast, to warm over a flame 餅を火で炙って食べた。I toasted the rice cake over a flame and ate it. 暴れる（あばれる）: to act violently, to rage 子供が泣いて暴れていた。The child was crying and throwing a tantrum. 溢れる（あふれる）: to overflow コップから水が溢れた。Water overflowed from the cup. 雨足（あまあし）: rainfall pattern/intensity 雨足が次第に強くなってきた。The rain is gradually getting heavier. 当て嵌まる（あてはまる）: to apply (to), to be applicable 彼の話は私にも当て嵌まる。What he said also applies to me. 雨戸（あまど）: storm shutter 台風のために雨戸を閉めた。We closed the storm shutters for the typhoon. 改まる（あらたまる）: to be renewed, to be formal 彼の態度が急に改まった。His attitude suddenly became serious. 改めて（あらためて）: again, afresh, formally 改めてお礼を申し上げます。I’d like to express my thanks again. 甘やかす（あまやかす）: to spoil (someone), to pamper 子供を甘やかしすぎてはいけない。You shouldn’t spoil your child too much. 発音（はつおん）: pronunciation 英語の発音を練習している。I’m practicing English pronunciation. 薔薇（ばら）: rose 薔薇の花束を贈った。I gave a bouquet of roses. 離れる（はなれる）: to separate, to leave, to be distant 家から駅まで少し離れている。The station is a bit far from my house. 140 SHOW CONTENTS 誤り（あやまり）: mistake, error その文章には誤りがある。There is a mistake in that sentence. 網戸（あみど）: screen door 夏は蚊を防ぐために網戸を使う。We use a screen door in summer to keep mosquitoes out. 危うい（あやうい）: dangerous, risky, critical 彼の命は危うかった。His life was in danger. 争って（あらそって）: competing, fighting 二人は優勝を争っている。The two are competing for the championship. 嵐（あらし）: storm 昨夜は嵐で眠れなかった。I couldn\u0026rsquo;t sleep because of the storm last night. 争い（あらそい）: conflict, dispute 両国の争いが激化している。The conflict between the two countries is intensifying. 著す（あらわす）: to write, to publish 彼は多数の本を著している。He has authored many books. 蟻（あり）: ant 地面に蟻の行列ができている。There’s a line of ants on the ground. 言い訳（いいわけ）: excuse 遅刻の言い訳を考えていた。I was thinking of an excuse for being late. 荒れる（あれる）: to be stormy, to be rough, to become rough (skin) 手が寒さで荒れてしまった。My hands became rough from the cold. 有り金（ありがね）: all the money one has 有り金を全部使ってしまった。I spent all the money I had. いい加減（いいかげん）: irresponsible, careless, reasonable (context-dependent) 彼の言うことはいつもいい加減だ。What he says is always unreliable. 現れ（あらわれ）: appearance, manifestation 彼の言葉には優しさの現れがある。His words show his kindness. 言い合う（いいあう）: to quarrel, to exchange words 兄弟がよく言い合っている。The siblings often quarrel. 位（くらい）: rank, position, approximately (colloquial) 彼は部長の位にある。He holds the position of department head. 言い付ける（いいつける）: to tell on someone, to order 母に兄のいたずらを言い付けた。I told my mother about my brother’s mischief. 言い伝える（いいつたえる）: to pass down (by word of mouth) 村には昔からの言い伝えがある。There is an old legend in the village. 番組（ばんぐみ）: program (TV/radio) この番組は毎週放送されている。This show is broadcast every week. 髭（ひげ）: beard, mustache 髭を剃ったら若く見えた。He looked younger after shaving his beard. 冷える（ひえる）: to get cold, to become chilly 夜になると気温が冷える。The temperature drops at night. 141 SHOW CONTENTS いざという時（いざというとき）: in case of emergency, when the time comes いざという時のために備えておこう。Let’s prepare for emergencies. アンテナ: antenna 車のアンテナが折れてしまった。The car’s antenna broke. 慌て者（あわてもの）: hasty person, scatterbrain 彼は慌て者で、よく忘れ物をする。He’s scatterbrained and often forgets things. 餡（あん）: sweet bean paste この饅頭は餡がたっぷり入っている。This steamed bun is full of red bean paste. 維持（いじ）: maintenance, preservation 健康を維持するには運動が大切だ。Exercise is important to maintain good health. 哀れ（あわれ）: pity, sorrow, pathetic その哀れな犬を誰かが保護した。Someone took in that pitiful dog. 以降（いこう）: from\u0026hellip; onward, after 明日以降、予定が詰まっている。My schedule is packed from tomorrow onward. いささか: somewhat, a little (formal, modest) その説明はいささか不十分だ。That explanation is somewhat insufficient. 勇ましい（いさましい）: brave, courageous 彼の勇ましい姿に感動した。I was moved by his courageous figure. 委員（いいん）: committee member 彼は文化祭の実行委員だ。He is a member of the cultural festival committee. 怒り（いかり）: anger, rage 彼は怒りを抑えきれなかった。He couldn’t suppress his anger. 生き残る（いきのこる）: to survive 事故で彼だけが生き残った。He was the only one to survive the accident. 傷み（いたみ）: damage, pain, spoilage 野菜の傷みが早い。The vegetables spoil quickly. 勢い（いきおい）: force, momentum, energy 勢いに乗って連勝した。Riding the momentum, they kept winning. 板（いた）: board, plank 床に板を敷く。Lay planks on the floor. 生きがい（いきがい）: reason for living, purpose in life 子供の成長が私の生きがいです。My children’s growth is my reason for living. 衣食住（いしょくじゅう）: basic needs (clothing, food, and housing) 衣食住が整えば生活は安定する。If clothing, food, and shelter are secured, life is stable. 育児（いくじ）: childcare, parenting 初めての育児は不安が多い。There are many concerns in first-time parenting. 引き出し（ひきだし）: drawer, withdrawal (of money), mental resource 財布は机の引き出しにある。The wallet is in the desk drawer. 拾う（ひろう）: to pick up 道で財布を拾った。I picked up a wallet on the street. 142 SHOW CONTENTS 泉（いずみ）: spring, fountain 山の中に美しい泉があった。There was a beautiful spring in the mountains. 意地悪（いじわる）: mean-spirited, malicious 弟は妹に意地悪をした。The younger brother was mean to his sister. 幾分（いくぶん）: somewhat, to some extent 幾分疲れているように見える。You look somewhat tired. 傷む（いたむ）: to be damaged, to go bad (food) この魚は傷んでいるかもしれない。This fish might be spoiled. 一種（いっしゅ）: a kind of, a sort of これは一種の病気です。This is a kind of illness. 至る（いたる）: to reach, to arrive at (a situation or place) 様々な努力の末に成功に至った。After various efforts, he reached success. 一色（いっしょく）: one color, entirely (dominated by one thing) 教室は祝賀ムード一色だった。The classroom was completely filled with a celebratory mood. 至る所（いたるところ）: everywhere, all over 街には至る所にカメラがある。There are cameras everywhere in the city. 今一（いまいち）: not quite, not very good (colloquial) この映画は今一だった。This movie wasn’t that great. 今時（いまどき）: nowadays, these days 今時そんな考えは古いよ。That kind of thinking is outdated these days. 一致（いっち）: agreement, match, unity 意見が一致した。Our opinions matched. 井戸（いど）: well (for water) 井戸から水を汲む。Draw water from the well. 緯度（いど）: latitude 日本は北緯約36度に位置する。Japan is located around 36 degrees north latitude. 一転（いってん）: sudden change, complete turn 天気が一転して雨になった。The weather suddenly changed and it rained. 祈り（いのり）: prayer 平和への祈りを捧げた。Offered a prayer for peace. 一層（いっそう）: more, even more 努力して一層上達した。Improved even more through hard work. 一斉に（いっせいに）: all at once, simultaneously 子供たちが一斉に笑い出した。The children all burst out laughing at once. 稲（いね）: rice plant 稲が風に揺れている。The rice plants are swaying in the wind. 衣服（いふく）: clothing 衣服を整理する。Organize the clothes. 拭く（ふく）: to wipe テーブルを布で拭く。Wipe the table with a cloth. 143 SHOW CONTENTS 一定（いってい）: fixed, constant 一定の距離を保って歩く。Walk while maintaining a constant distance. 威張る（いばる）: to boast, to act arrogantly 彼は成功してから威張るようになった。He started boasting after becoming successful. 今に（いまに）: soon, before long 今に分かるだろう。You\u0026rsquo;ll understand soon enough. 今の所（いまのところ）: for now, at present 今の所、問題はない。There’s no problem at the moment. 色付く（いろづく）: to change color (autumn leaves, etc.), to blush 山が紅葉で色付いている。The mountains are colored with autumn leaves. 今にも（いまにも）: at any moment, just about to 今にも雨が降りそうだ。It looks like it’s going to rain any moment. 祝う（いわう）: to celebrate, to congratulate 誕生日を祝う。Celebrate a birthday. 受け入れ（うけいれ）: acceptance, receiving その提案は受け入れられた。The proposal was accepted. 引用（いんよう）: quotation, citation 有名な言葉を引用する。Quote a famous saying. 引力（いんりょく）: gravitational pull, attraction 地球の引力によって物が落ちる。Objects fall due to Earth\u0026rsquo;s gravity. 承る（うけたまわる）: to hear, to be told (humble) ご注文を承りました。Your order has been received. 植木（うえき）: garden plant, potted plant 植木に水をやる。Water the potted plants. 浮く（うく）: to float, to be out of place 木の葉が水に浮いている。Leaves are floating on the water. 引退（いんたい）: retirement 彼は35歳で引退した。He retired at the age of 35. 受け取り（うけとり）: receipt, acceptance 商品の受け取りを確認してください。Please confirm receipt of the item. 受け持つ（うけもつ）: to take charge of, to be in charge of 私はこのクラスを受け持っている。I’m in charge of this class. 受け持ち（うけもち）: person or area in charge, responsibility 彼の受け持ちは3年生だ。He is responsible for the third-year students. 薄明るい（うすあかるい）: dimly lit, faintly bright 薄明るい部屋に入った。I entered a dimly lit room. 複雑（ふくざつ）: complicated, complex この問題はとても複雑だ。This issue is very complex. 普段（ふだん）: usual, everyday 彼は普段から真面目だ。He is serious by nature. 144 SHOW CONTENTS 疑い（うたがい）: doubt, suspicion 彼の話には疑いが残る。There remains doubt about his story. 右折（うせつ）: right turn 次の交差点を右折してください。Please turn right at the next intersection. 薄暗い（うすぐらい）: dim, gloomy 薄暗い部屋で本を読むのは目に悪い。Reading in a dim room is bad for your eyes. 打ち上げる（うちあげる）: to launch (e.g., fireworks, rocket) 花火を打ち上げる。Launch fireworks. 嘘つき（うそつき）: liar 嘘つきは信用されない。Liars aren\u0026rsquo;t trusted. 薄れる（うすれる）: to fade, to become dim 記憶が次第に薄れていく。The memory gradually fades. 打ち出す（うちだす）: to announce, to project 新しい政策を打ち出す。Announce a new policy. 薄型（うすがた）: thin, slim (design) 薄型テレビを買った。I bought a slim TV. 打ち消す（うちけす）: to deny, to negate 噂を打ち消す。Deny the rumor. 団扇（うちわ）: paper fan 夏祭りで団扇をもらった。I received a fan at the summer festival. 薄める（うすめる）: to dilute, to water down ジュースを水で薄める。Dilute the juice with water. 訴える（うったえる）: to sue, to appeal to 会社を訴える。Sue the company. 感情に訴える。Appeal to emotions. 雨天（うてん）: rainy weather 雨天中止。Canceled due to rain. 埋まる（うまる）: to be buried, to be filled 席が全部埋まっている。All the seats are filled. 占う（うらなう）: to tell fortune 今日の運勢を占ってもらった。I had today’s fortune told. 生む（うむ）: to give birth to, to produce 新しいアイデアを生む。Produce new ideas. 唸る（うなる）: to groan, to roar, to moan 犬が低く唸っている。The dog is growling deeply. 生み出す（うみだす）: to create, to generate 新商品を生み出す。Create a new product. 裏返す（うらがえす）: to turn over, to reverse カードを裏返してください。Please turn over the card. 有無（うむ）: existence or nonexistence, yes or no 経験の有無を確認する。Check whether the person has experience or not. 145 SHOW CONTENTS 羨ましい（うらやましい）: envious, jealous 海外で働いているなんて羨ましい。I envy that you work abroad. 敬う（うやまう）: to respect, to honor 年長者を敬うのは大切だ。It’s important to respect your elders. 裏切る（うらぎる）: to betray 彼は友人を裏切った。He betrayed his friend. 裏口（うらぐち）: back door 裏口から出てください。Please leave through the back door. 羨む（うらやむ）: to envy 成功を羨むだけでは意味がない。There\u0026rsquo;s no point in just envying success. 笑顔（えがお）: smile 彼女の笑顔はとても素敵だ。Her smile is lovely. 売り出し（うりだし）: sale, promotion 新商品の売り出しが始まった。The promotion of the new product has started. 売り切れ（うりきれ）: sold out コンサートのチケットはすでに売り切れだ。The concert tickets are already sold out. 襟（えり）: collar シャツの襟が汚れている。The collar of the shirt is dirty. 永久（えいきゅう）: eternity, permanence 永久保存版の映画。A collector’s edition movie. 永遠（えいえん）: eternity, forever 永遠の愛を誓う。Swear eternal love. 衛生（えいせい）: hygiene, sanitation 衛生状態が悪い。The sanitary conditions are poor. 液体（えきたい）: liquid この薬は液体です。This medicine is in liquid form. 売り出す（うりだす）: to launch a product, to put on sale 新車を売り出す。Launch a new car model. 絵の具（えのぐ）: paint (for pictures) 絵の具で風景を描く。Paint a landscape with paints. 映像（えいぞう）: image, video 美しい映像に感動した。I was moved by the beautiful images. 運（うん）: luck, fortune 今日は運がいい。I’m lucky today. 上回る（うわまわる）: to exceed, to surpass 売上が予想を上回った。Sales exceeded expectations. 追いかける（おいかける）: to chase, to pursue 警察が犯人を追いかけた。The police chased the suspect. 追いかけて（おいかけて）: chasing, after (continuative form of 追いかける) 夢を追いかけて頑張っている。I’m working hard, chasing my dream. 146 SHOW CONTENTS 追い越す（おいこす）: to overtake, to surpass 前の車を追い越した。I overtook the car in front. 運河（うんが）: canal ベネチアには多くの運河がある。There are many canals in Venice. 運動（うんどう）: exercise, movement 健康のために運動している。I exercise for my health. 追い抜く（おいぬく）: to pass, to overtake ランナーが次々と追い抜いていった。Runners kept overtaking one another. 応援（おうえん）: support, cheering 試合でチームを応援した。I cheered for the team during the match. 応じる（おうじる）: to respond, to comply 要望に応じて対応する。Respond according to the request. 追いつく（おいつく）: to catch up 彼にようやく追いついた。I finally caught up with him. 塩分（えんぶん）: salt content 塩分の取りすぎに注意する。Be careful not to consume too much salt. 延期（えんき）: postponement 会議は延期された。The meeting was postponed. 園芸（えんげい）: gardening, horticulture 祖母の趣味は園芸です。My grandmother’s hobby is gardening. 遠足（えんそく）: excursion, field trip 明日は遠足の日だ。Tomorrow is the day of our field trip. 演習（えんしゅう）: drill, practice, exercise 消防の演習が行われた。A fire drill was held. 演説（えんぜつ）: speech 大統領が演説を行った。The president gave a speech. 演技（えんぎ）: acting, performance 彼の演技は素晴らしかった。His performance was excellent. 大晦日（おおみそか）: New Year\u0026rsquo;s Eve 大晦日に年越しそばを食べる。We eat soba on New Year’s Eve. 延長（えんちょう）: extension, prolongation 試合は延長戦に入った。The match went into overtime. 往来（おうらい）: traffic, coming and going この通りは往来が多い。There’s heavy traffic on this street. 演劇（えんげき）: drama, theater 学園祭で演劇を披露した。We performed a play at the school festival. 応対（おうたい）: dealing with (a person), reception 電話の応対が丁寧だった。The telephone manner was polite. 太る（ふとる）: to gain weight 食べすぎて太ってしまった。I gained weight from overeating. 147 SHOW CONTENTS 狼（おおかみ）: wolf 森の中で狼が鳴いていた。A wolf was howling in the forest. 多くとも（おおくとも）: at most, at best 多くとも３日間で終わるだろう。It will take at most three days. 煙突（えんとつ）: chimney 煙突から煙が出ていた。Smoke was coming out of the chimney. 終える（おえる）: to finish, to complete 仕事を終えるのが遅かった。I finished my work late. オークション（おーくしょん）: auction その絵はオークションで売られた。The painting was sold at auction. 収める（おさめる）: to store, to obtain, to put away 本棚に本を収める。I put the books on the bookshelf. 抑える（おさえる）: to suppress, to hold back 感情を抑えるのが難しい。It\u0026rsquo;s hard to suppress my emotions. 犯す（おかす）: to commit (a crime, mistake) 彼は重大な過ちを犯した。He made a serious mistake. 屋外（おくがい）: outdoors 屋外でバーベキューをした。We had a barbecue outdoors. 補う（おぎなう）: to supplement, to make up for 知識が足りない部分を補う。I will make up for the parts where my knowledge is lacking. 拝む（おがむ）: to worship, to bow down 寺院で手を合わせて拝んだ。I bowed my hands in worship at the temple. お決まり（おきまり）: usual, established お決まりの手続きが必要だ。We need the usual procedure. 遅らせる（おくらせる）: to delay 予定を遅らせることはできません。We cannot delay the schedule. 桶（おけ）: tub, bucket 水を桶に汲んで運んだ。I fetched water in a bucket. 納める（おさめる）: to pay (taxes, fees), to store 家賃を納めるのを忘れた。I forgot to pay the rent. 恐ろしい（おそろしい）: terrifying, dreadful その映画は恐ろしかった。The movie was terrifying. 踏む（ふむ）: to step on, to tread 足元に気をつけて踏んでください。Please be careful and watch your step. 文房具（ぶんぼうぐ）: stationery 文房具を新しく買い替えた。I bought new stationery. 文系（ぶんけい）: liberal arts (field of study) 彼は文系の学部に進学した。He went on to study in the liberal arts department. 貿易（ぼうえき）: trade, commerce 日本は多くの国と貿易をしている。Japan engages in trade with many countries. 148 SHOW CONTENTS 惜しまず（おしまず）: without hesitation, generously 彼は惜しまず寄付をした。He donated generously. 治める（おさめる）: to govern, to manage, to control 彼は国を治めるために尽力した。He worked hard to govern the country. 襲う（おそう）: to attack, to assault 猛獣が村を襲った。The wild beast attacked the village. 恐らく（おそらく）: probably, likely 恐らく彼は遅れるだろう。He will probably be late. 遅くとも（おそくとも）: at the latest, at the most 遅くとも明日中に終わらせます。I will finish it by tomorrow at the latest. 教え子（おしえご）: student, pupil (one who has been taught) 彼は優秀な教え子を持つ先生だ。He is a teacher with excellent students. 落ち込む（おちこむ）: to feel down, to get depressed 失敗して落ち込んでいる。I’m feeling down because of the failure. 恐れ（おそれ）: fear, dread その恐れは現実となった。That fear became a reality. お世辞（おせじ）: compliment, flattery 彼の言うことはお世辞ばかりだ。What he says is just flattery. 教わる（おそわる）: to be taught, to learn 先生から数学を教わった。I was taught math by my teacher. 脅かす（おどかす）: to threaten, to intimidate 彼はその町の人々を脅かした。He intimidated the people of that town. 帯（おび）: belt, sash 彼女は着物に帯を締めた。She tied a sash around her kimono. 驚き（おどろき）: surprise, astonishment そのニュースには驚きました。I was surprised by the news. 訪れる（おとずれる）: to visit, to come to (a place) 友達が家に訪れた。My friend visited my house. 落し物（おとしもの）: lost item, something dropped 駅で落し物を見つけた。I found a lost item at the station. 劣る（おとる）: to be inferior to, to be worse than 彼の能力は私より劣っている。His ability is inferior to mine. 思いがけない（おもいがけない）: unexpected, surprising 思いがけないプレゼントをもらった。I received an unexpected gift. お参り（おまいり）: visit to a shrine or temple 毎年正月にはお参りに行く。I go to visit the shrine every New Year. 思い切って（おもいきって）: boldly, with determination 思い切って新しい仕事を始めた。I boldly started a new job. ほうれん草（ほうれんそう）: spinach ほうれん草をサラダに加えた。I added spinach to the salad. 149 SHOW CONTENTS 思い浮かぶ（おもいうかぶ）: to come to mind, to recall そのアイデアが突然思い浮かんだ。The idea suddenly came to mind. 思い切り（おもいきり）: with all one’s might, to one’s heart’s content 思い切り笑ってしまった。I laughed with all my heart. 思いもよらない（おもいもよらない）: unexpected, unthinkable 彼の反応は思いもよらないものだった。His reaction was something I never expected. 思い込む（おもいこむ）: to be convinced, to assume 彼は自分が正しいと思い込んでいた。He was convinced that he was right. 思いつく（おもいつく）: to think of, to come up with 新しいアイデアを思いついた。I came up with a new idea. 思うままに（おもうままに）: as one wishes, according to one’s thoughts 思うままに行動することが大切だ。It’s important to act according to your desires. 重たい（おもたい）: heavy この箱は非常に重たい。This box is very heavy. 重んじる（おもんじる）: to respect, to value 彼は伝統を重んじている。He values tradition. オルガン（おるがん）: organ (musical instrument) 教会でオルガンの演奏を聞いた。I heard an organ performance at the church. 卸売り（おろしうり）: wholesale その店は卸売りを専門にしている。The store specializes in wholesale. 織物（おりもの）: fabric, textile 彼女は高級な織物を作っている。She makes high-quality textiles. 及ぼす（およぼす）: to exert, to have an effect on その事故は広範囲に影響を及ぼした。The accident had a wide-ranging effect. 温室（おんしつ）: greenhouse 花は温室で育てられている。The flowers are grown in the greenhouse. 卸す（おろす）: to sell wholesale, to unload この商品は市場で卸されている。This product is sold wholesale at the market. 温厚（おんこう）: gentle, mild-mannered 彼は温厚な性格で誰からも好かれている。He has a gentle personality and is liked by everyone. 恩恵（おんけい）: favor, benefit 彼はその町の恩恵を受けている。He benefits from the favors of that town. 温帯（おんたい）: temperate zone この地域は温帯気候に属している。This region belongs to the temperate zone. 負ける（まける）: to lose チームは試合に負けてしまった。The team lost the game. 任せる（まかせる）: to entrust, to leave to 彼にプロジェクトを任せた。I entrusted him with the project. 参る（まいる）: to go (humble), to be defeated お手伝いに参ります。I will come to help (humble). 彼に参ってしまった。I was defeated by him. 150 SHOW CONTENTS 温暖（おんだん）: warm, mild (climate) 地球の温暖化が進んでいる。Global warming is progressing. 開花（かいか）: blooming, flowering 桜が開花した。The cherry blossoms have bloomed. 開館（かいかん）: opening of a building (e.g., museum, library) 図書館は9時に開館する。The library opens at 9 o\u0026rsquo;clock. 買い入れる（かいいれる）: to purchase, to buy in 店は新しい商品を大量に買い入れた。The store bought a large quantity of new products. 外見（がいけん）: appearance, exterior 人は外見で判断してはいけない。Don’t judge people by appearance. 会合（かいごう）: meeting, gathering 重要な会合に出席した。I attended an important meeting. 改札（かいさつ）: ticket gate 改札口で切符を見せた。I showed my ticket at the gate. 開催（かいさい）: holding (an event), hosting 東京で国際会議が開催された。An international conference was held in Tokyo. 解散（かいさん）: dissolution, breakup, disbanding 会議は解散となった。The meeting was adjourned. 解雇（かいこ）: dismissal, firing 彼は不正行為で解雇された。He was fired for misconduct. 解釈（かいしゃく）: interpretation, explanation 法律の解釈は難しい。The interpretation of laws is difficult. 誠に（まことに）: truly, indeed (formal) 誠にありがとうございます。Thank you very much. 周り（まわり）: surroundings, around 公園の周りを散歩する。I take a walk around the park. 間に合う（まにあう）: to be in time 電車に間に合った。I caught the train in time. 丸で（まるで）: just like, completely 彼は丸で子供のように遊んでいた。He was playing just like a child. マヨネーズ: mayonnaise サラダにマヨネーズをかけた。I put mayonnaise on the salad. 豆（まめ）: bean, peas 枝豆は人気のあるおつまみだ。Edamame is a popular snack. 巡る（めぐる）: to go around, to circulate 世界を巡る旅に出た。I went on a journey around the world. 認める（みとめる）: to acknowledge, to recognize, to admit 彼は自分の間違いを認めた。He admitted his mistake. 真ん中（まんなか）: center, middle 部屋の真ん中にテーブルがある。There is a table in the middle of the room. 151 SHOW CONTENTS 海水浴（かいすいよく）: sea bathing, swimming in the ocean 夏休みに家族で海水浴に行った。We went sea bathing as a family during summer vacation. 快晴（かいせい）: clear weather, fine weather 今日の空は快晴だった。The sky was perfectly clear today. 解消（かいしょう）: cancellation, resolution (of a problem), elimination ストレスを解消するために運動する。I exercise to relieve stress. 回数（かいすう）: number of times, frequency 毎日の練習回数を増やした。I increased the number of daily practices. 海賊版（かいぞくばん）: pirated edition 海賊版のソフトを使うのは違法だ。Using pirated software is illegal. 快適（かいてき）: comfortable, pleasant このホテルの部屋はとても快適だ。The hotel room is very comfortable. 懐中電灯（かいちゅうでんとう）: flashlight 停電のときに懐中電灯を使った。I used a flashlight during the power outage. 解明（かいめい）: clarification, elucidation この現象の原因を解明する。We will clarify the cause of this phenomenon. 回答（かいとう）: answer, response (especially to a questionnaire or question) アンケートに回答する。I will respond to the questionnaire. 改ざん（かいざん）: falsification, tampering データの改ざんが発覚した。The data tampering was discovered. 外部（がいぶ）: outside, external 外部の専門家に相談した。We consulted an outside expert. 海抜（かいばつ）: elevation above sea level この場所は海抜500メートルにある。This place is 500 meters above sea level. 買い求める（かいもとめる）: to purchase, to buy 駅でお土産を買い求めた。I bought souvenirs at the station. 概論（がいろん）: general remarks, introduction 経済学概論の授業を受けた。I took an introductory course in economics. 海洋（かいよう）: ocean, marine 海洋汚染が深刻な問題になっている。Marine pollution is a serious issue. 書き込む（かきこむ）: to write in, to fill in アンケート用紙に名前を書き込んだ。I filled in my name on the questionnaire. 顔付き（かおつき）: facial expression, face 彼は険しい顔付きで話していた。He was speaking with a stern expression. 見つかる（みつかる）: to be found, to be discovered なくした鍵が見つかった。The lost key was found. 港（みなと）: port, harbor 船は港に到着した。The ship arrived at the port. 麦（むぎ）: wheat, barley このパンは全粒麦で作られている。This bread is made from whole wheat. 152 SHOW CONTENTS 返る（かえる）: to return, to revert 拾った財布が持ち主に返った。The lost wallet was returned to its owner. 抱える（かかえる）: to hold (in arms), to have (problems, responsibilities) 彼は多くの問題を抱えている。He has many problems. 書き取る（かきとる）: to take dictation, to transcribe 教師の話をノートに書き取った。I took down the teacher’s lecture in my notebook. 限りない（かぎりない）: endless, infinite 彼の努力は限りない。His efforts are endless. 欠く（かく）: to lack, to miss 礼儀を欠く態度はよくない。A rude attitude lacking manners is not acceptable. 書き留める（かきとめる）: to write down, to note 忘れないようにメモに書き留めた。I jotted it down so I wouldn’t forget. 垣根（かきね）: hedge, fence 垣根の向こうに花が咲いていた。Flowers were blooming beyond the hedge. 架空（かくう）: imaginary, fictional これは架空の話です。This is a fictional story. 拡充（かくじゅう）: expansion, enhancement サービスの拡充が求められている。An expansion of services is being demanded. 学術（がくじゅつ）: academic, scholarly これは学術的な研究に基づいている。This is based on academic research. 各自（かくじ）: each person, respectively 各自が責任を持って行動してください。Each person should act responsibly. 確実（かくじつ）: certain, reliable 確実な方法で成果を出す。Achieve results through a reliable method. 格差（かくさ）: disparity, gap (e.g., economic, social) 所得の格差が拡大している。The income gap is widening. 確率（かくりつ）: probability 雨が降る確率は50%だ。The probability of rain is 50%. 学説（がくせつ）: academic theory 新しい学説が発表された。A new academic theory was published. 獲得（かくとく）: acquisition, gaining 資格を獲得した。I obtained a certification. 家計（かけい）: household budget, family finances 家計を助けるために働いている。I work to support the family finances. 崖（がけ）: cliff 崖からの景色が素晴らしかった。The view from the cliff was spectacular. 無駄（むだ）: wasteful, useless 無駄な出費を減らすべきだ。You should reduce unnecessary spending. 向かう（むかう）: to head toward, to face 駅に向かって歩いている。I’m walking toward the station. 153 SHOW CONTENTS 可決（かけつ）: approval, adoption (of a bill or proposal) 法案は国会で可決された。The bill was approved by the parliament. 下降（かこう）: descent, decline 飛行機はゆっくりと下降した。The plane descended slowly. 貸し出す（かしだす）: to lend out, to loan 図書館で本を貸し出している。The library lends out books. 加減（かげん）: adjustment, degree, condition 塩の加減がちょうどいい。The amount of salt is just right. 加算（かさん）: addition, adding 税金が加算されます。Tax will be added. 架け橋（かけはし）: bridge (literal or metaphorical), link 両国の文化の架け橋となる。Serve as a bridge between the two cultures. 重ねて（かさねて）: repeatedly, again and again ご迷惑を重ねておかけして申し訳ありません。I apologize once again for the inconvenience. 籠（かご）: basket, cage 果物を籠に入れた。I put the fruit in a basket. 駆けつける（かけつける）: to rush to, to hurry to 彼は現場にすぐ駆けつけた。He rushed to the scene. 欠ける（かける）: to be chipped, to be lacking この皿は縁が少し欠けている。This plate is slightly chipped on the edge. 貸し（かし）: loan, favor 彼には貸しがある。He owes me one. 果実（かじつ）: fruit (formal term, often used in agriculture or business) 果実の収穫が始まった。The fruit harvest has begun. 過失（かしつ）: error, accident, negligence 事故は彼の過失によるものだった。The accident was due to his negligence. 加速（かそく）: acceleration 景気回復が加速している。The economic recovery is accelerating. 貸間（かしま）: room for rent 貸間ありの看板が出ている。There’s a sign that says “Room for rent.” 型（かた）: type, model, mold 新しい型のスマートフォンが出た。A new model of smartphone was released. 貸家（かしや）: house for rent 駅の近くに貸家がある。There’s a rental house near the station. 加速度的（かそくどてき）: accelerating, exponential 問題が加速度的に増えている。The problems are increasing exponentially. 虫（むし）: insect, bug 花に虫がとまっている。There’s an insect on the flower. 無理（むり）: impossible, unreasonable そんな要求は無理だ。That demand is unreasonable. 154 SHOW CONTENTS 片足（かたあし）: one leg, one foot 彼は片足で立ってバランスを取った。He balanced himself on one foot. 課税（かぜい）: taxation, imposing taxes その商品には消費税が課税される。That product is subject to consumption tax. 下線（かせん）: underline 重要な語句に下線を引いてください。Please underline the important phrases. 過剰（かじょう）: excess, surplus 過剰なストレスは健康に悪い。Excessive stress is bad for your health. 課題（かだい）: task, issue, assignment 今後の課題について話し合った。We discussed the upcoming issues. 難い（がたい）: hard to, difficult to (used with verbs) 信じ難い話だった。It was a hard-to-believe story. 塊（かたまり）: lump, mass, cluster 氷の塊が道をふさいでいた。A lump of ice was blocking the road. 肩書き（かたがき）: title, job title 彼の肩書きは「部長」だ。His title is \u0026ldquo;department manager.\u0026rdquo; 偏る（かたよる）: to lean toward, to be biased 栄養が偏らないように食べよう。Let’s eat a balanced diet. 刀（かたな）: sword 侍は刀を腰に差していた。The samurai wore a sword at his waist. 固める（かためる）: to harden, to strengthen 防御を固める必要がある。We need to strengthen our defense. 傾く（かたむく）: to tilt, to lean 地震で家が傾いた。The house tilted due to the earthquake. 勝ち（かち）: victory, win チームに勝ちをもたらした。He brought victory to the team. 傾ける（かたむける）: to tilt, to incline 耳を傾けて話を聞く。He listened carefully (tilted his ear). 片一方（かたいっぽう）: one side, one of a pair 靴の片一方が見つからない。I can’t find one of my shoes. 勝ち抜く（かちぬく）: to win through, to survive 厳しい試合を勝ち抜いた。We fought through and won the tough match. 学会（がっかい）: academic conference, academic society 彼は国際学会で発表した。He presented at an international academic conference. 勝ち負け（かちまけ）: win or lose, outcome 勝ち負けにこだわらない。I don’t obsess over winning or losing. 活気（かっき）: energy, liveliness 市場は活気にあふれていた。The market was full of energy. 目の前（めのまえ）: in front of one’s eyes バスが目の前で行ってしまった。The bus left right in front of me. 155 SHOW CONTENTS 活用（かつよう）: practical use, application この知識を仕事に活用したい。I want to apply this knowledge to my job. 担ぐ（かつぐ）: to carry on one\u0026rsquo;s shoulder, to trick 彼は箱を肩に担いだ。He carried the box on his shoulder. 活字（かつじ）: printed type, printing 活字離れが進んでいる。People are moving away from printed media. 括弧（かっこ）: brackets, parentheses 括弧の中に答えを書いてください。Please write your answer in the parentheses. 仮定（かてい）: assumption, supposition 仮定の話をしても意味がない。It’s meaningless to talk about hypotheticals. 喝采（かっさい）: applause, cheers 観客から大きな喝采を浴びた。They received great applause from the audience. 課程（かてい）: course, curriculum 教育課程に従って授業を行う。Classes are conducted according to the curriculum. 過程（かてい）: process 成功の過程を記録する。Record the process of success. 活躍（かつやく）: activity, great efforts, playing an active role 彼はスポーツ界で活躍している。He is active in the sports world. 活力（かつりょく）: vitality, energy 活力に満ちた生活を送っている。He leads a life full of energy. 兼ねる（かねる）: to serve both as, to combine 趣味と実益を兼ねた仕事。A job that combines hobby and profit. 噛み切る（かみきる）: to bite off 紐を歯で噛み切った。He bit the string off with his teeth. 歌謡（かよう）: song, ballad 昭和の歌謡が今も人気だ。Showa-era ballads are still popular today. 貨物（かもつ）: cargo, freight 貨物列車が通過した。A freight train passed by. 釜（かま）: kettle, iron pot ご飯を釜で炊いた。We cooked rice in an iron pot. 雷（かみなり）: thunder 昨夜は雷がすごかった。There was a lot of thunder last night. 鴉（からす）: crow 鴉がゴミをあさっている。A crow is rummaging through the garbage. 噛み締める（かみしめる）: to chew thoroughly, to reflect deeply 喜びを噛み締めた。I savored the joy. 過半数（かはんすう）: majority 過半数の賛成を得た。It gained majority support. 目に入る（めにはいる）: to catch sight of, to notice 美しい花が目に入った。A beautiful flower caught my eye. 156 SHOW CONTENTS 構う（かまう）: to mind, to care about 彼は私が遅れても構わないと言った。He said he didn\u0026rsquo;t mind if I was late. 体付き（からだつき）: physique, body type 彼は筋肉質な体付きだ。He has a muscular physique. 乾く（かわく）: to dry, to become dry 洗濯物が乾いた。The laundry dried. 借り入れる（かりいれる）: to borrow, to take a loan 彼は銀行からお金を借り入れた。He took out a loan from the bank. 軽々と（けいけいと）: easily, effortlessly 彼はその仕事を軽々と終わらせた。He finished the job with ease. 瓦（かわら）: tile (roof tile) 古い家の屋根には瓦が使われている。The old house\u0026rsquo;s roof uses tiles. 勘（かん）: intuition, instinct 彼の勘は鋭い。His intuition is sharp. カルシウム（カルシウム）: calcium 牛乳にはカルシウムが豊富に含まれている。Milk is rich in calcium. 為替（かわせ）: exchange (currency exchange) 為替レートが変動している。The exchange rate is fluctuating. 観客（かんきゃく）: audience, spectators コンサートには多くの観客が集まった。Many spectators gathered for the concert. 感激（かんげき）: deep emotion, being moved その映画には感激させられた。I was moved by that movie. 感染（かんせん）: infection 感染症が広がっている。Infections are spreading. 観衆（かんしゅう）: crowd, spectators 観衆が応援していた。The crowd was cheering. 観測（かんそく）: observation, measurement 気象庁は天気を観測している。The meteorological agency is observing the weather. 監視（かんし）: surveillance, monitoring 監視カメラが設置されている。Surveillance cameras are installed. もう少しで（もうすこしで）: just about to, almost もう少しで終わるところだ。It\u0026rsquo;s almost finished. 漏らす（もらす）: to leak, to spill, to reveal 彼は秘密を漏らしてしまった。He revealed the secret. 木綿（もめん）: cotton 木綿のシャツは涼しい。Cotton shirts are cool. 焼肉（やきにく）: grilled meat, Korean BBQ 今日は焼肉を食べに行こう。Let\u0026rsquo;s go eat BBQ today. 燃える（もえる）: to burn, to be on fire 家が燃えている！The house is on fire! 157 SHOW CONTENTS 官庁（かんちょう）: government office, government agency その官庁は新しい法律を施行する。The government agency will enforce the new law. 感心（かんしん）: admiration, being impressed 彼のプレゼンテーションには感心した。I was impressed by his presentation. 勘違い（かんちがい）: misunderstanding, misjudgment 彼は私の言うことを勘違いした。He misunderstood what I said. 願書（がんしょ）: application form (for school, job, etc.) 大学の願書を提出した。I submitted my university application form. 鑑賞（かんしょう）: appreciation, viewing (art, music, etc.) 美術館で絵画を鑑賞するのが好きだ。I enjoy viewing paintings at art galleries. 歓声（かんせい）: cheers, applause, shouts of joy 会場は歓声でいっぱいだった。The venue was filled with cheers. 感動（かんどう）: deep emotion, being moved その映画は本当に感動的だった。The movie was truly moving. 消え行く（きえゆく）: to disappear, to fade away 夜空に星が消え行くのを見た。I saw the stars fading away in the night sky. 気圧（きあつ）: atmospheric pressure 気圧が低くなると天気が悪くなることが多い。When atmospheric pressure drops, the weather often gets worse. 関連（かんれん）: relation, connection この問題には重要な関連があります。There is an important connection to this issue. 観念（かんねん）: concept, idea, notion 自由の観念は人々にとって非常に大切だ。The concept of freedom is very important to people. 冠（かんむり）: crown 王は美しい冠をかぶっていた。The king wore a beautiful crown. 干ばつ（かんばつ）: drought 干ばつのため、農作物が不作だった。Due to the drought, the crops failed. 機械（きかい）: machine この機械は非常に効率的だ。This machine is very efficient. 着替える（きがえる）: to change clothes 仕事が終わったら着替えよう。Let\u0026rsquo;s change clothes after work. 議会（ぎかい）: parliament, congress 新しい法律は議会で承認された。The new law was approved in parliament. 機関（きかん）: institution, organization, mechanism その機関は世界的な影響力を持っている。The organization has global influence. 機関車（きかんしゃ）: locomotive, train engine 昔の機関車は煙を出しながら走っていた。Old locomotives used to run while emitting smoke. 聞き上手（ききじょうず）: good listener 彼はとても聞き上手だ。He is a great listener. 戻る（もどる）: to return, to go back 仕事が終わったら家に戻る。I will return home after work. 158 SHOW CONTENTS 記号（きごう）: symbol, sign 数学の記号は複雑だ。Mathematical symbols are complicated. 気軽（きがる）: lighthearted, easygoing, casual 気軽に話しかけてください。Please feel free to talk to me. 器具（きぐ）: tool, instrument, apparatus この器具を使えば、作業が楽になる。Using this tool will make the job easier. 聞き取り（ききとり）: listening comprehension 聞き取りのテストが難しい。The listening comprehension test is difficult. 飢饉（ききん）: famine 飢饉がその地域を襲った。A famine struck the region. 儀式（ぎしき）: ceremony, ritual 結婚式の儀式は感動的だった。The wedding ceremony was moving. 気象（きしょう）: weather 今日の気象予報は晴れだ。Today\u0026rsquo;s weather forecast predicts clear skies. 傷口（きずぐち）: wound, injury 彼は手に傷口を負った。He got a wound on his hand. 傷付く（きずつく）: to get hurt, to be injured 彼の言葉が私を傷付けた。His words hurt me. 基地（きち）: base, camp, station 軍の基地が山の中にある。The military base is in the mountains. 規則（きそく）: rule, regulation 学校には厳しい規則がある。There are strict rules at school. 傷付ける（きずつける）: to hurt, to injure 彼の行動は他人を傷付ける。His actions hurt others. 奇跡（きせき）: miracle 彼は奇跡的に助かった。He was miraculously saved. 忌憚（きたん）: reserve, restraint (used in expressions like \u0026ldquo;without reserve\u0026rdquo;) 忌憚のない意見を聞かせてください。Please give me your honest opinion. 起動（きどう）: activation, starting up (machine, system) コンピュータを起動させる必要がある。I need to start up the computer. 機能（きのう）: function, feature このアプリケーションは便利な機能を持っている。This application has useful features. 桃（もも）: peach 桃が甘くて美味しい。The peach is sweet and delicious. 漏れる（もれる）: to leak, to escape, to be spilled 水がタンクから漏れている。Water is leaking from the tank. 訳す（やくす）: to translate 彼は本を日本語から英語に訳した。He translated the book from Japanese to English. 焼ける（やける）: to burn, to be roasted パンがオーブンで焼けた。The bread is baked in the oven. 159 SHOW CONTENTS 貴重（きちょう）: valuable, precious この本は貴重な資料だ。This book is a valuable resource. 茸（きのこ）: mushroom 森で美味しい茸を見つけた。I found delicious mushrooms in the forest. 希薄（きはく）: thin, weak, diluted この地域の人口は希薄だ。The population in this area is sparse. 基本（きほん）: basic, fundamental 日本語を学ぶには基本から始めるべきだ。You should start with the basics when learning Japanese. 規模（きぼ）: scale, scope このプロジェクトの規模は大きい。The scale of this project is large. 気まま（きまま）: free-spirited, carefree 彼は気ままに旅行するのが好きだ。He likes to travel freely and carelessly. 基盤（きばん）: foundation, base 経済の基盤がしっかりしている。The foundation of the economy is stable. 客観（きゃっかん）: objectivity, an objective viewpoint 客観的な視点で問題を解決する。Solve the problem from an objective perspective. 客席（きゃくせき）: audience seats 演劇の客席は満席だった。The audience seats for the play were full. 客観的（きゃっかんてき）: objective (as in viewpoint or perspective) 客観的な評価が必要だ。An objective evaluation is necessary. ギャング（ぎゃんぐ）: gang その街にはギャングが存在する。There are gangs in that city. 奇妙（きみょう）: strange, odd 彼の行動は奇妙だ。His behavior is odd. 休業（きゅうぎょう）: suspension of business, closure 店は今日休業している。The shop is closed today. 急激（きゅうげき）: rapid, drastic 急激な温度変化に注意が必要だ。Be careful of drastic temperature changes. 求婚（きゅうこん）: proposal (marriage) 彼は彼女に求婚した。He proposed to her. 休息（きゅうそく）: rest, break 長時間働いた後は休息が必要だ。Rest is necessary after working for a long time. 休憩（きゅうけい）: break, rest 15分の休憩を取ります。We will take a 15-minute break. 痩せる（やせる）: to lose weight, to become thin 彼はダイエットして痩せた。He lost weight through dieting. 柔らかい（やわらかい）: soft, tender このパンはとても柔らかい。This bread is very soft. 役に立つ（やくにたつ）: useful, helpful この情報は役に立つだろう。This information will be useful. 160 SHOW CONTENTS 給与（きゅうよ）: salary, wages 毎月25日に給与が支払われる。Salary is paid on the 25th of every month. 救援（きゅうえん）: relief, aid, rescue 地震の被災者に救援物資が届けられた。Relief supplies were delivered to earthquake victims. 求職（きゅうしょく）: job hunting 大学を卒業して求職中です。I\u0026rsquo;m job hunting after graduating from university. 吸収（きゅうしゅう）: absorption, assimilation スポンジが水を吸収する。The sponge absorbs water. 救助（きゅうじょ）: rescue, help 遭難者はすぐに救助された。The stranded person was rescued immediately. 急用（きゅうよう）: urgent business 急用ができて、会議に出られなかった。I had urgent business and couldn’t attend the meeting. 休養（きゅうよう）: rest, recuperation 病気のために休養が必要だ。I need rest because of my illness. 競走（きょうそう）: race, competition 子供たちは運動場で競走している。The children are racing in the playground. 恐怖（きょうふ）: fear, terror 恐怖で体が動かなかった。I couldn’t move due to fear. 教習（きょうしゅう）: training, instruction (esp. driving) 自動車教習所で教習を受ける。I take lessons at a driving school. 行政（ぎょうせい）: administration, government 行政サービスを利用する。Use public administrative services. 供給（きょうきゅう）: supply, provision 電力の供給が止まった。The electricity supply was cut off. 境界（きょうかい）: boundary, border この川が市の境界になっている。This river forms the boundary of the city. 強化（きょうか）: strengthening, reinforcement チームの守備を強化する。Strengthen the team’s defense. 行儀（ぎょうぎ）: manners, behavior 彼はとても行儀がいい。He has very good manners. 業務（ぎょうむ）: business, affairs, duties 今日は通常の業務を行います。I will carry out regular duties today. 教訓（きょうくん）: lesson, moral 失敗から教訓を得る。Learn a lesson from failure. 曲線（きょくせん）: curve 美しい曲線を描くデザイン。A design that forms a beautiful curve. 悔いる（くいる）: to regret 過去の過ちを悔いている。I regret my past mistakes. 破れる（やぶれる）: to be torn, to be defeated シャツが破れてしまった。My shirt got torn. 試合で相手に破れた。I was defeated in the match. 161 SHOW CONTENTS 規律 (きりつ): discipline, order 規律を守ることは大切だ。(It is important to follow rules.) 禁じる (きんじる): to forbid, to prohibit 喫煙は校内で禁じられている。(Smoking is prohibited on campus.) 切り開く (きりひらく): to clear (land), to carve out (a path) 新しい道を切り開く。(Pave the way for something new.) 金魚 (きんぎょ): goldfish 子どもが金魚を飼っている。(The child is keeping a goldfish.) 教養 (きょうよう): culture, education 教養のある人と話すのは楽しい。(Talking to an educated person is enjoyable.) 漁業 (ぎょぎょう): fishery この町の主な産業は漁業だ。(The main industry of this town is fishing.) 居住 (きょじゅう): residence, dwelling 日本に長く居住している外国人。(A foreigner who has lived in Japan for a long time.) 強力 (きょうりょく): strong, powerful 強力なライバルが現れた。(A powerful rival has appeared.) 空腹 (くうふく): hunger, empty stomach 空腹で集中できない。(I can’t concentrate because I’m hungry.) 偶然 (ぐうぜん): coincidence, by chance 偶然彼に会った。(I ran into him by chance.) 筋肉 (きんにく): muscle 筋肉痛で歩けない。(I can’t walk because of muscle pain.) 金銭 (きんせん): money, cash 金銭的な支援を求めた。(I asked for financial support.) 区域 (くいき): area, zone この区域は立入禁止です。(This area is off-limits.) 金融 (きんゆう): finance, banking 金融業界で働いている。(I work in the financial industry.) 嫌う (きらう): to hate, to dislike 彼は争いを嫌う性格だ。(He dislikes conflict.) 潜る (もぐる): to dive, to go underground 海に潜って魚を観察した。(I dived into the sea and observed fish.) 区切る (くぎる): to divide, to punctuate 話を区切って説明する。(I’ll break the talk into parts and explain.) くじ引き (くじびき): lottery, drawing lots くじ引きで順番を決めた。(We decided the order by drawing lots.) 苦心 (くしん): hard effort, struggle 苦心の末、問題を解決した。(After much effort, I solved the problem.) 破れる (やぶれる): to be defeated, to be torn 試合で破れてしまった。(We were defeated in the match.) 162 SHOW CONTENTS 屑 (くず): waste, scrap 屑は分別して捨てましょう。(Let\u0026rsquo;s separate and dispose of the waste properly.) 苦情 (くじょう): complaint, grievance サービスについて苦情が寄せられた。(Complaints were received about the service.) 砕く (くだく): to break, to crush 氷を砕いて飲み物に入れた。(I crushed the ice and added it to the drink.) 釘 (くぎ): nail 板を釘で打ち付けた。(I nailed the board in place.) 草花 (くさばな): flowers and plants 春になると草花が咲き始める。(Flowers and plants begin to bloom in spring.) 崩れる (くずれる): to collapse, to crumble 雪で屋根が崩れた。(The roof collapsed due to the snow.) 口先 (くちさき): lip service, mere words 彼は口先だけで行動が伴わない。(He only pays lip service and doesn\u0026rsquo;t follow through.) 具体 (ぐたい): concrete, specific もっと具体な例を挙げてください。(Please give a more concrete example.) 嘴 (くちばし): beak 鳥は嘴で木の実をついばむ。(The bird pecks at nuts with its beak.) 口ぶり (くちぶり): manner of speaking 彼の口ぶりでは、それが本当のようだ。(Judging by his tone, it seems to be true.) 位する (いする): to rank, to occupy (a position) 彼は常に上位に位している。(He always ranks at the top.) 苦痛 (くつう): pain, suffering 手術後は苦痛を感じた。(I felt pain after the surgery.) 狂う (くるう): to go mad, to go wrong 時計が狂っている。(The clock is off.) 句読点 (くとうてん): punctuation marks 作文には適切に句読点を使いましょう。(Use punctuation marks properly in your writing.) 区分 (くぶん): classification, division ごみは種類ごとに区分されている。(Trash is sorted by category.) 苦しめる (くるしめる): to torment, to cause suffering 借金に苦しめられている。(He is tormented by debt.) 工夫 (くふう): ingenuity, device 時間を有効に使う工夫をする。(I try to find ways to use my time effectively.) 暮らす (くらす): to live, to spend time 都会で一人暮らしをしている。(I live alone in the city.) 位 (くらい): rank, grade, about 社長に次ぐ位の人だ。(He’s second in rank to the president.) 止む (やむ): to stop, to cease 雨が止んだら出かけよう。(Let\u0026rsquo;s go out after the rain stops.) 163 SHOW CONTENTS 玄人 (くろうと): expert, professional 彼は写真の玄人だ。(He is a photography expert.) 警告 (けいこく): warning 警告を無視してはいけない。(You must not ignore the warning.) 咥える (くわえる): to hold in the mouth 犬が靴を咥えて走っていった。(The dog ran off holding a shoe in its mouth.) 加わる (くわわる): to join in, to be added 新しいメンバーがチームに加わった。(A new member joined the team.) 訓練 (くんれん): training, drill 毎朝、訓練を受けている。(I undergo training every morning.) 蛍光灯 (けいこうとう): fluorescent lamp 蛍光灯をLEDに取り替えた。(I replaced the fluorescent lamp with an LED one.) 契機 (けいき): opportunity, chance 留学を契機に視野が広がった。(Studying abroad broadened my horizons.) 掲載 (けいさい): publication, appearance (in print) 彼の記事が新聞に掲載された。(His article was published in the newspaper.) 警備 (けいび): security, guard イベント会場は厳重に警備されていた。(The event venue was under strict security.) 競馬 (けいば): horse racing 週末に競馬を見に行った。(I went to watch horse racing over the weekend.) 経費 (けいひ): expenses, costs 出張の経費は会社が負担する。(The company covers business trip expenses.) 軽視 (けいし): making light of, belittling 安全対策を軽視してはいけない。(You must not make light of safety measures.) 経由 (けいゆ): via, through パリ経由でロンドンに行く。(I’m going to London via Paris.) 芸能 (げいのう): performing arts, entertainment 芸能界に興味がある。(I’m interested in the entertainment industry.) 毛皮 (けがわ): fur, pelt 毛皮のコートは高価だ。(Fur coats are expensive.) やり方 (やりかた): way of doing, method やり方を変えたほうがいい。(You should change your approach.) 豊か (ゆたか): abundant, rich 自然が豊かな地域に住んでいる。(I live in an area rich in nature.) 揺らす (ゆらす): to shake, to rock 赤ん坊を寝かせるためにゆりかごを揺らした。(I rocked the cradle to put the baby to sleep.) 許す (ゆるす): to forgive, to permit 彼の失礼を許した。(I forgave his rudeness.) 揺れる (ゆれる): to shake, to sway 地震で建物が揺れた。(The building shook due to the earthquake.) 164 SHOW CONTENTS 軽食 (けいしょく): light meal 昼は軽食で済ませた。He had a light meal for lunch. 継続 (けいぞく): continuation 勉強は毎日の継続が大切だ。Continuing your studies every day is important. 掲示 (けいじ): notice, bulletin 掲示板に新しいルールが掲示された。A new rule was posted on the bulletin board. 刑事 (けいじ): detective 刑事が事件を捜査している。A detective is investigating the case. 毛糸 (けいと): woolen yarn 毛糸でマフラーを編んだ。She knitted a scarf with woolen yarn. 系統 (けいとう): system, lineage 電気の系統に問題がある。There is a problem with the electrical system. 劇 (げき): drama, play 学校で劇を発表した。We performed a play at school. 血圧 (けつあつ): blood pressure 血圧を毎日測っている。He checks his blood pressure every day. 激増 (げきぞう): sudden increase 観光客が激増している。The number of tourists is increasing rapidly. 欠陥 (けっかん): defect 欠陥のある製品は回収された。The defective products were recalled. 桁違い (けたちがい): of a different order (magnitude) 彼の収入は私とは桁違いだ。His income is on a completely different level than mine. 決行 (けっこう): carrying out (a plan) 雨でも試合は決行される。The match will proceed even if it rains. 決議 (けつぎ): resolution (e.g., of a meeting) 会議で新しい方針が決議された。A new policy was resolved at the meeting. 劇場 (げきじょう): theater 劇場でミュージカルを見た。I watched a musical at the theater. 決意 (けつい): determination 留学する決意をした。I made the decision to study abroad. 景色 (けしき): scenery, view 山からの景色は素晴らしい。The view from the mountain is wonderful. 激安 (げきやす): super cheap あの店は激安セール中だ。That store is having a super cheap sale. 傑作 (けっさく): masterpiece この映画は彼の傑作だ。This movie is his masterpiece. 決勝 (けっしょう): finals (e.g., of a competition) チームは決勝に進出した。The team advanced to the finals. 汚れる (けがれる / よごれる): to get dirty / to be defiled シャツが泥で汚れた。My shirt got dirty with mud. 165 SHOW CONTENTS 決断 (けつだん): decision, determination 彼は会社を辞める決断をした。He made the decision to quit his job. 欠点 (けってん): flaw, shortcoming 誰にでも欠点はある。Everyone has flaws. 結論 (けつろん): conclusion 会議の結論はまだ出ていない。The meeting hasn\u0026rsquo;t reached a conclusion yet. 気配 (けはい): sign, indication 雨が降りそうな気配がする。There are signs it might rain. 烟る (けむる): to smoke, to be hazy 部屋がタバコで烟っていた。The room was hazy with cigarette smoke. 下品 (げひん): vulgar, crude 彼の冗談は下品だった。His jokes were vulgar. 険しい (けわしい): steep, grim, harsh 険しい山道を登った。We climbed a steep mountain path. 原稿 (げんこう): manuscript, draft 原稿の締切が近い。The manuscript deadline is near. 見解 (けんかい): opinion, view この問題に対する見解を述べます。I’ll express my view on this issue. 原産 (げんさん): origin (of a product or species) パイナップルは南米原産です。Pineapples originate from South America. 原始 (げんし): primitive, prehistoric 原始時代の人々の生活は質素だった。Life in the primitive age was simple. 厳重 (げんじゅう): strict, severe 荷物は厳重にチェックされた。The luggage was thoroughly checked. 限定 (げんてい): limitation, restriction この商品は限定販売です。This product is sold in limited quantities. 限度 (げんど): limit, bounds 忍耐にも限度がある。Patience has its limits. 原則 (げんそく): principle 原則として外出は禁止されています。In principle, going out is prohibited. 健闘 (けんとう): good fight, strenuous effort チームは最後まで健闘した。The team fought hard until the end. 県庁 (けんちょう): prefectural office 県庁で手続きを行った。I completed the procedure at the prefectural office. 汚れ (よごれ / けがれ): dirt / impurity シャツの汚れが落ちない。The stain on the shirt won’t come off. 様子 (ようす): situation, appearance, condition 彼の様子が変だった。He looked strange. 世の中 (よのなか): society, the world 世の中は思い通りにいかない。Life doesn’t always go the way you want. 166 SHOW CONTENTS 顕微鏡 (けんびきょう): microscope 顕微鏡で細胞を観察した。I observed the cells under a microscope. 現地 (げんち): actual place, local 現地で調査を行った。The investigation was conducted on-site. 現場 (げんば): site (of an event, incident), scene 警察が現場に急行した。The police rushed to the scene. 見当 (けんとう): estimate, guess 見当がつかない。I have no clue. 現に (げんに): actually, in fact 現に彼は成功している。In fact, he is successful. 原文 (げんぶん): original text 原文を読まないと意味がわからない。You need to read the original text to understand it. 倹約 (けんやく): thrift, frugality 彼女は倹約家だ。She is a thrifty person. 原理 (げんり): principle, theory この機械は簡単な原理で動く。This machine works on a simple principle. 権利 (けんり): right, privilege 教育を受ける権利がある。Everyone has the right to education. 憲法 (けんぽう): constitution 日本の憲法は平和主義を掲げている。Japan’s constitution advocates pacifism. 高価 (こうか): expensive, high-priced 高価な時計をなくした。I lost an expensive watch. 恋しい (こいしい): dear, missed, longed for 故郷が恋しい。I miss my hometown. 工員 (こういん): factory worker 工員たちは一生懸命働いている。The factory workers are working hard. 強引 (ごういん): pushy, coercive 彼のやり方は強引すぎる。His approach is too forceful. 講演 (こうえん): lecture, speech 有名な教授の講演を聞いた。I attended a lecture by a famous professor. 後悔 (こうかい): regret あんなことを言って後悔している。I regret saying such a thing. 恋する (こいする): to fall in love 初めて恋する気持ちを知った。I learned what it feels like to fall in love for the first time. 握手 (あくしゅ): handshake 初対面で握手を交わした。We shook hands on our first meeting. 開ける (あける): to open (a door, box, etc.) ドアを開けてください。Please open the door. 上げる (あげる): to raise, to give 手を上げてください。Please raise your hand. 167 SHOW CONTENTS 幸運 (こううん): good luck, fortune 幸運にも事故には遭わなかった。Fortunately, I wasn\u0026rsquo;t in the accident. 好意 (こうい): goodwill, kindness 彼の好意に感謝している。I appreciate his kindness. 郊外 (こうがい): suburbs, outskirts 郊外に一軒家を買った。I bought a house in the suburbs. 交差 (こうさ): crossing, intersection 道路が交差している地点で事故が起きた。An accident occurred where the roads intersect. 工芸 (こうげい): craft, industrial art 日本の伝統工芸は世界的に有名だ。Traditional Japanese crafts are world-renowned. 貢献 (こうけん): contribution 環境保護に貢献したい。I want to contribute to environmental protection. 抗議 (こうぎ): protest, objection 学生たちが学費の値上げに抗議した。The students protested the tuition hike. 好奇心 (こうきしん): curiosity 彼は好奇心が旺盛だ。He has a strong sense of curiosity. 好況 (こうきょう): prosperous conditions, economic boom 景気は今好況だ。The economy is currently booming. 光景 (こうけい): scene, spectacle 感動的な光景だった。It was a moving scene. 攻撃 (こうげき): attack, assault サーバーがハッカーに攻撃された。The server was attacked by hackers. 公式 (こうしき): official, formula 公式発表を待ちましょう。Let’s wait for the official announcement. 口座 (こうざ): bank account 新しい口座を開設した。I opened a new bank account. 口実 (こうじつ): excuse, pretext 忙しいというのは口実にすぎない。Saying you\u0026rsquo;re busy is just an excuse. 功績 (こうせき): achievement, merit 彼の功績が認められた。His achievements were recognized. 後者 (こうしゃ): the latter 二つのうち、後者を選びました。I chose the latter of the two. 公正 (こうせい): fairness, justice 公正な判断が求められる。A fair judgment is required. 香水 (こうすい): perfume 彼女は上品な香水をつけていた。She wore elegant perfume. 強情 (ごうじょう): obstinacy, stubbornness 彼はとても強情だ。He is very stubborn. 公衆 (こうしゅう): the public, general public 公衆の面前で恥をかいた。I was embarrassed in front of the public. 168 SHOW CONTENTS 構図 (こうず): composition (of a picture), layout この写真の構図はとても美しい。The composition of this photo is very beautiful. 校舎 (こうしゃ): school building 新しい校舎が建設中だ。A new school building is under construction. 高層 (こうそう): high-rise, multistory 高層ビルが立ち並んでいる。High-rise buildings line the street. 向上心 (こうじょうしん): ambition, desire to improve 向上心のある人は成長が早い。People with ambition grow quickly. 構造 (こうぞう): structure, construction この建物の構造は非常に頑丈だ。The structure of this building is very sturdy. 耕地 (こうち): arable land, farmland 耕地を広げて作物を増やす。Expand the farmland to grow more crops. 高度 (こうど): altitude, advanced level 高度三千メートルの山に登った。We climbed a mountain 3,000 meters in altitude. 肯定 (こうてい): affirmation, positive response 彼の意見に肯定的な反応を示した。They gave a positive reaction to his opinion. 後半 (こうはん): second half, later half 試合の後半で逆転した。We made a comeback in the second half of the game. 好調 (こうちょう): favorable condition, good shape 売上は今月好調だ。Sales are good this month. 合否 (ごうひ): success or failure (in an exam) 合否の結果が発表された。The pass/fail results were announced. 交代 (こうたい): alternation, substitution 選手が交代した。The player was substituted. 校庭 (こうてい): schoolyard, playground 子どもたちが校庭で遊んでいる。Children are playing in the schoolyard. 合同 (ごうどう): combination, joint 合同で練習を行った。We held a joint practice. 公表 (こうひょう): official announcement, publication 結果が公表された。The results were officially announced. 鉱物 (こうぶつ): mineral 鉱物資源が豊富な地域。A region rich in mineral resources. 好物 (こうぶつ): favorite food チョコレートは彼の好物だ。Chocolate is his favorite food. 行楽 (こうらく): outing, excursion 秋は行楽に最適な季節だ。Autumn is the perfect season for excursions. 欠伸 (あくび): yawn 授業中に欠伸が出た。I yawned during class. 明らか (あきらか): clear, obvious 彼の嘘は明らかだった。His lie was obvious. 169 SHOW CONTENTS 候補 (こうほ): candidate, contender 新しいリーダーの候補が決まった。A candidate for the new leader has been chosen. 公務 (こうむ): official duty, public duty 彼は公務で海外へ出張した。He went abroad on official duty. 紅葉 (こうよう / もみじ): autumn leaves, red leaves 紅葉が見頃を迎えている。The autumn leaves are at their best. 合理 (ごうり): rationality, reasonableness 合理的な考え方をする。He thinks in a rational way. 興奮 (こうふん): excitement, agitation 興奮して眠れなかった。I was too excited to sleep. 公立 (こうりつ): public (institution, school, etc.) 彼は公立高校に通っている。He attends a public high school. 考慮 (こうりょ): consideration, taking into account 環境への影響を考慮する。Take environmental impact into consideration. 効力 (こうりょく): effectiveness, validity この契約は明日から効力を持つ。This contract becomes valid from tomorrow. 語学 (ごがく): language study 語学の勉強に力を入れている。I\u0026rsquo;m focusing on language learning. 高齢化 (こうれいか): aging population 日本では高齢化が進んでいる。Japan\u0026rsquo;s population is aging rapidly. 漕ぐ (こぐ): to row, to pedal ボートを漕いで川を下った。We rowed a boat down the river. 焦がす (こがす): to burn, to scorch 鍋を焦がしてしまった。I burned the pot. 心得 (こころえ): knowledge, understanding 礼儀作法の心得がある。He has a knowledge of etiquette. 穀物 (こくもつ): grains, cereals 米や小麦は主な穀物だ。Rice and wheat are major grains. 小声 (こごえ): low voice, whisper 小声で話していた。They were speaking in a whisper. 焦げる (こげる): to burn, to be scorched パンが焦げた。The bread got burnt. 黒板 (こくばん): blackboard 黒板に字を書く。Write on the blackboard. 凍える (こごえる): to freeze (from cold) 寒さで手が凍えた。My hands froze from the cold. 心得る (こころえる): to understand, to be aware ルールを心得ている。I understand the rules. 飽きる (あきる): to get tired of, to lose interest 同じ料理に飽きた。I\u0026rsquo;m tired of eating the same food. 170 SHOW CONTENTS 克服 (こくふく): overcoming, conquest 恐怖を克服した。I overcame my fear. 心当たり (こころあたり): having an idea, something that comes to mind 心当たりはありませんか？Do you have any idea? 心掛かり (こころがかり): worry, concern 子供の成績が心掛かりだ。I\u0026rsquo;m concerned about my child\u0026rsquo;s grades. 心構え (こころがまえ): mental preparedness, mindset 事前に心構えが必要だ。You need to be mentally prepared in advance. 個人的 (こじんてき): personal, individual これは個人的な意見です。This is a personal opinion. 古今 (ここん): ancient and modern, all ages 古今東西の名作を集めた。Collected masterpieces from all ages and countries. 心遣い (こころづかい): thoughtfulness, consideration 彼の心遣いに感謝している。I appreciate his thoughtfulness. 拘り (こだわり): obsession, insistence, attention to detail 食材に強い拘りがある。He’s very particular about ingredients. 応える (こたえる): to respond, to live up to 期待に応えたい。I want to live up to expectations. 国境 (こっきょう): national border 国境を越える。Cross the national border. 腰掛 (こしかけ): seat, bench (also sitting for a while) 腰掛に座ってください。Please sit on the bench. 越す (こす): to cross, to pass, to go beyond 山を越えて村に着いた。We arrived at the village after crossing the mountain. 骨 (ほね): bone 骨が折れた。I broke a bone. 古典 (こてん): classic (literature, etc.) 古典文学を研究している。I study classical literature. 異なる (ことなる): to differ, to be different 考え方が異なる。Their ways of thinking are different. 好む (このむ): to like, to prefer 甘いものを好む。I prefer sweets. 味見 (あじみ): tasting (food), sampling スープを味見する。Taste the soup. 足元 (あしもと): at one’s feet, footing 足元に注意してください。Watch your step. 朝日 (あさひ): morning sun 朝日が昇った。The morning sun rose. 与える (あたえる): to give, to grant 子供に影響を与える。Have an influence on children. 171 SHOW CONTENTS 殊に (ことに): especially, particularly 今週は殊に忙しい。This week is particularly busy. 事柄 (ことがら): matter, affair, thing 複雑な事柄について話し合う。Discuss a complicated matter. 寿退社 (ことぶきたいしゃ): retirement due to marriage (usually women) 彼女は寿退社した。She retired due to marriage. 言い付ける (いいつける): to tell on (someone), to order 弟が母に言い付けた。My little brother told on me to mom. ご無沙汰 (ごぶさた): long silence, not contacting someone for a while ご無沙汰しております。It\u0026rsquo;s been a while (since we last talked). こつこつ: steadily, diligently こつこつ貯金している。I save money steadily. 諺 (ことわざ): proverb 「急がば回れ」という諺がある。There\u0026rsquo;s a proverb: \u0026ldquo;More haste, less speed.\u0026rdquo; この度 (このたび): this time, recently この度はありがとうございました。Thank you for your help this time. 零れる (こぼれる): to spill, to overflow コップから水が零れた。Water spilled from the cup. 娯楽 (ごらく): entertainment, amusement 映画は良い娯楽だ。Movies are a good form of entertainment. 混合 (こんごう): mixing, mixture 二つの薬品を混合する。Mix two chemicals. 堪える (こたえる): to endure, to bear 寒さに堪えられない。I can\u0026rsquo;t stand the cold. 混雑 (こんざつ): congestion, crowd 通勤時間は混雑している。It\u0026rsquo;s crowded during rush hour. 雇用 (こよう): employment, hiring 雇用を促進する政策。Policies to promote employment. 転がす (ころがす): to roll (something) ボールを転がす。Roll the ball. 根気 (こんき): perseverance, patience 根気強く取り組む。Tackle it with perseverance. 献立 (こんだて): menu, meal plan 今日の献立はカレーです。Today\u0026rsquo;s menu is curry. 汗 (あせ): sweat 運動して汗をかいた。I sweated after exercising. 宛名 (あてな): addressee (name on a letter) 宛名をはっきり書いてください。Please write the recipient\u0026rsquo;s name clearly. 当たる (あたる): to hit, to win, to be right 宝くじに当たった。I won the lottery. 172 SHOW CONTENTS 献立 (こんだて): menu, meal plan 今日の献立は魚料理です。Today\u0026rsquo;s menu is a fish dish. 昆虫 (こんちゅう): insect 昆虫の観察が好きです。I like observing insects. 混同 (こんどう): confusion, mixing up 事実と意見を混同してはいけない。Don\u0026rsquo;t confuse facts with opinions. 婚約 (こんやく): engagement 二人は婚約したばかりだ。They just got engaged. 細工 (さいく): craftsmanship, trick, manipulation 木の細工が美しい。The woodwork is beautiful. 在籍 (ざいせき): enrollment (e.g., in school, company) 今も大学に在籍しています。I’m still enrolled at the university. 再会 (さいかい): reunion 十年ぶりに再会した。We reunited after ten years. 在庫 (ざいこ): stock, inventory この商品は在庫切れです。This product is out of stock. 再三 (さいさん): repeatedly 再三注意したのに。I warned you repeatedly. 在学 (ざいがく): being enrolled in school 彼は今、大学在学中です。He is currently enrolled in college. 催促 (さいそく): urging, pressing 支払いを催促された。I was urged to make the payment. 最中 (さいちゅう): in the middle of 会議の最中に電話が鳴った。The phone rang during the meeting. 採択 (さいたく): adoption (of a plan or proposal) 新しい制度が採択された。The new system was adopted. 裁判 (さいばん): trial, court case 裁判に勝った。I won the trial. さえずる: to chirp, to chatter 鳥がさえずっている。The birds are chirping. 逆様 (さかさま): upside down, reverse 絵が逆様に飾られていた。The painting was hung upside down. 当たり前 (あたりまえ): natural, obvious, of course そんなの当たり前だよ。That\u0026rsquo;s only natural. 穴 (あな): hole 靴下に穴が開いている。There’s a hole in my sock. 宛先 (あてさき): address, recipient 宛先を間違えないでください。Please don’t get the recipient’s address wrong. あっという間に: in the blink of an eye 楽しい時間はあっという間に過ぎる。Fun times fly by in the blink of an eye. 173 SHOW CONTENTS 逆立ち (さかだち): handstand 子供たちは逆立ちの練習をしている。The children are practicing handstands. 逆さ (さかさ): upside down, inverted コップが逆さに置かれていた。The cup was placed upside down. 境 (さかい): boundary, border この川が二つの町の境だ。This river is the boundary between two towns. 裁縫 (さいほう): sewing 母は裁縫が得意です。My mother is good at sewing. 材料 (ざいりょう): materials, ingredients ケーキの材料を買いました。I bought the ingredients for a cake. 歳末 (さいまつ): year-end 歳末セールが始まった。The year-end sale has started. 材木 (ざいもく): lumber, timber 家を建てるために材木が必要だ。We need timber to build a house. 遡る (さかのぼる): to go back (in time or upstream) 話は10年前に遡る。The story goes back ten years. 酒場 (さかば): bar, tavern 彼は毎晩酒場に通っている。He goes to the bar every night. 盛り (さかり): peak, prime (of life, season, etc.) 桜が今盛りだ。The cherry blossoms are in full bloom now. 逆らう (さからう): to go against, to defy 親に逆らってはいけない。You shouldn’t defy your parents. 索引 (さくいん): index (in a book) 単語の意味を索引で調べた。I looked up the word\u0026rsquo;s meaning in the index. 削減 (さくげん): reduction, cut 経費の削減が必要だ。We need to cut expenses. 裂く (さく): to tear, to split 紙を二つに裂いた。I tore the paper in two. 桜並木 (さくらなみき): row of cherry blossom trees 桜並木を歩くのが好きです。I like walking along the row of cherry trees. 作物 (さくもつ): crops, produce 作物の収穫が始まった。The crop harvest has begun. 探る (さぐる): to search, to explore ポケットを探って鍵を取り出した。I searched my pocket and took out the key. 怪しい (あやしい): suspicious, doubtful 怪しい男が店の前にいた。A suspicious man was in front of the store. 網 (あみ): net 漁師が魚を網で捕まえた。The fisherman caught fish with a net. 余る (あまる): to be left over, to remain 食べ物がたくさん余った。A lot of food was left over. 174 SHOW CONTENTS 叫び (さけび): shout, scream 彼の叫びが遠くまで響いた。His scream echoed far away. 差し伸べる (さしのべる): to hold out, to extend (e.g., a hand) 彼は手を差し伸べてくれた。He held out his hand to me. 座敷 (ざしき): tatami room, parlor 伝統的な日本旅館には座敷がある。Traditional Japanese inns have tatami rooms. 差し出す (さしだす): to hand over, to present パスポートを係員に差し出した。I handed my passport to the staff. 刺す (さす): to stab, to prick, to bite (by insect) 蚊に刺された。I was bitten by a mosquito. 叫ぶ (さけぶ): to shout, to yell 彼は助けを求めて叫んだ。He shouted for help. 些少 (さしょう): a small amount, a trifle (formal) 些少ですが、お納めください。It’s not much, but please accept it. 囁く (ささやく): to whisper 彼は耳元で囁いた。He whispered in my ear. 差し支え (さしつかえ): hindrance, inconvenience 差し支えなければ、教えてください。If it’s not a problem, please tell me. 差し引く (さしひく): to deduct, to subtract 税金を差し引いた額が支給される。The amount is paid after taxes are deducted. 注す (さす): to pour, to apply (e.g., medicine, eye drops) 目薬を注した。I applied eye drops. 匙 (さじ): spoon スープを匙ですくった。I scooped the soup with a spoon. 誘う (さそう): to invite 映画に誘われた。I was invited to a movie. サバイバル: survival サバイバル能力が求められる。Survival skills are required. 撮影 (さつえい): filming, shooting (a photo or video) 映画の撮影が始まった。Filming of the movie has begun. 雑談 (ざつだん): small talk, chatting 友達と雑談を楽しんだ。I enjoyed chatting with my friends. さっと: quickly, suddenly 彼はさっと部屋を出た。He quickly left the room. 殺人 (さつじん): murder 殺人事件が発生した。A murder case occurred. さっぱり: feeling refreshed; not at all (when used with negation) シャワーを浴びてさっぱりした。I felt refreshed after a shower. その話はさっぱりわからない。I don’t understand the story at all. 雑音 (ざつおん): noise, interference 電話に雑音が入っている。There’s noise on the phone line. 175 SHOW CONTENTS 作曲 (さっきょく): composition (of music) 彼はクラシック音楽を作曲している。He composes classical music. 錯覚 (さっかく): illusion, hallucination, misconception 彼が笑ったのは錯覚だった。It was an illusion that he smiled. 錆びる (さびる): to rust 雨に濡れて自転車が錆びた。The bike rusted from the rain. 砂漠 (さばく): desert サハラ砂漠は世界最大の砂漠の一つだ。The Sahara is one of the largest deserts in the world. 座布団 (ざぶとん): floor cushion (used when sitting on tatami) お客様に座布団を出した。I gave a cushion to the guest. サプリメント: supplement ビタミンのサプリメントを飲んでいる。I take vitamin supplements. 作法 (さほう): manners, etiquette 茶道には厳しい作法がある。There are strict manners in the tea ceremony. 妨げる (さまたげる): to obstruct, to hinder 通行を妨げないでください。Please don’t block the passage 残酷 (ざんこく): cruelty, brutality 残酷な現実を受け入れる。Accept the cruel reality. 覚める (さめる): to wake up, to become sober, to lose passion 夢から覚めた。I woke up from the dream. 去る (さる): to leave, to go away 彼は静かにその場を去った。He quietly left the place. 差別 (さべつ): discrimination 人種差別に反対する。Oppose racial discrimination. 左右 (さゆう): left and right; to influence 成功は努力に左右される。Success is influenced by effort. 残暑 (ざんしょ): lingering summer heat 残暑が厳しいですね。The lingering heat is intense. 賛成 (さんせい): approval, agreement その提案に賛成です。I agree with that proposal. 酸性 (さんせい): acidity 酸性雨は環境に悪影響を及ぼす。Acid rain harms the environment. 山腹 (さんぷく): mountainside 山腹に小さな村がある。There’s a small village on the mountainside. 仕方がない (しかたがない): it can\u0026rsquo;t be helped 電車が遅れても仕方がない。The train is late—it can’t be helped. 騒がしい (さわがしい): noisy, boisterous この通りは夜になると騒がしい。This street gets noisy at night. 編む (あむ): to knit, to braid 彼女はマフラーを編んでいる。She is knitting a scarf. 176 SHOW CONTENTS 山林 (さんりん): mountain forest 山林を散策するのが好きだ。I enjoy walking in the mountain forests. 触り (さわり): touch, feel; the main point この布は触りがいい。This fabric feels good to the touch. 指示 (しじ): instruction, direction 上司の指示に従ってください。Please follow your supervisor’s instructions. 至急 (しきゅう): urgent, as soon as possible 至急の連絡をお願いします。Please contact me as soon as possible. 静める (しずめる): to calm, to quiet 彼女は子供の泣き声を静めた。She calmed the crying child. 試乗 (しじょう): test drive 新車を試乗してみた。I took the new car for a test drive. 直に (じかに / じきに): directly / soon 手で直に触らないでください。Don’t touch it directly with your hands. 嗜好 (しこう): taste, preference 人それぞれ食べ物の嗜好が違う。Everyone has different food preferences. 試作品 (しさくひん): prototype このロボットは試作品だ。This robot is a prototype. 静まる (しずまる): to become quiet, to subside 嵐が静まった。The storm has subsided. 沈める (しずめる): to sink something, to submerge 石を水に沈めた。I sank the stone in water. 視線 (しせん): gaze, glance 彼の視線を感じた。I felt his gaze. 子孫 (しそん): descendants 彼は有名な武士の子孫だ。He is a descendant of a famous samurai. 施設 (しせつ): facility, institution この町には福祉施設が多い。There are many welfare facilities in this town. 事態 (じたい): situation, state of affairs 事態はますます悪化している。The situation is getting worse. 事前 (じぜん): beforehand, in advance 事前に予約が必要です。A reservation is required in advance. 時速 (じそく): speed per hour (e.g., km/h) この車は時速100キロで走る。This car runs at 100 km/h. 次第 (しだい): depending on, as soon as 天候次第で中止することもある。It may be canceled depending on the weather. 到着次第、連絡してください。Please contact me as soon as you arrive. 危うく (あやうく): barely, narrowly 危うく事故に巻き込まれるところだった。I almost got caught in an accident. 新た (あらた): new, fresh 新たな挑戦が始まる。A new challenge begins. 177 SHOW CONTENTS 四則算 (しそくさん): the four basic arithmetic operations (addition, subtraction, multiplication, division) 小学校で四則算を学ぶ。Children learn the four basic operations in elementary school. 次第に (しだいに): gradually 空が次第に暗くなってきた。The sky gradually became darker. 死体 (したい): corpse, dead body 死体は警察によって発見された。The body was discovered by the police. 自宅 (じたく): one\u0026rsquo;s home 今日は自宅で仕事をする。I’m working from home today. 支度 (したく): preparation 旅行の支度をしている。I’m preparing for the trip. 躾ける (しつける): to discipline, to train (esp. children or pets) 犬をよく躾けた。I trained the dog well. 下町 (したまち): downtown, traditional shopping and residential district 下町の雰囲気が好きだ。I like the atmosphere of the downtown area. 下回る (したまわる): to fall below (a level, value, etc.) 今年の売上は予想を下回った。This year’s sales fell below expectations. 市町村 (しちょうそん): municipalities (cities, towns, and villages) 日本には多くの市町村がある。There are many municipalities in Japan. 自治 (じち): self-government, autonomy 地域の自治を尊重する。We respect the local self-government. 湿気 (しっけ): moisture, humidity 梅雨の時期は湿気が多い。There is a lot of humidity during the rainy season. 実施 (じっし): implementation, enforcement 新しい制度が実施された。The new system was implemented. 実践 (じっせん): practice, putting into practice 学んだことを実践する。I put what I learned into practice. 質素 (しっそ): simple, modest 彼の生活はとても質素だ。His lifestyle is very modest. 実用 (じつよう): practical use この道具は実用的だ。This tool is practical. 湿度 (しつど): humidity (as a percentage) 今日の湿度は80％だ。Today’s humidity is 80%. 争う (あらそう): to argue, to fight 二人は土地のことで争っている。The two are fighting over land. 荒い (あらい): rough, wild, harsh 波が荒いので泳がない方がいい。The waves are rough, so it’s better not to swim. 或いは (あるいは): or, possibly 電話、或いはメールで連絡してください。Please contact me by phone or email. 泡 (あわ): bubble, foam 石けんの泡がたくさん出た。The soap produced a lot of foam. 178 SHOW CONTENTS 実態 (じったい): actual condition, reality 事件の実態が明らかになった。The reality of the incident became clear. 実物 (じつぶつ): the real thing, actual object 写真ではなく実物を見たい。I want to see the real thing, not just a photo. 執筆 (しっぴつ): writing (as a profession or task) 彼は小説を執筆している。He is writing a novel. 私鉄 (してつ): private railway この路線は私鉄が運営している。This line is operated by a private railway company. しとしと: drizzling (rain) 雨がしとしと降っている。It\u0026rsquo;s drizzling. 支配 (しはい): rule, control, domination 国を支配する権力。The power to control a country. 実例 (じつれい): actual example, real case 実例を挙げて説明する。Explain with real examples. 時点 (じてん): point in time その時点では何も分からなかった。At that point in time, nothing was known. 芝居 (しばい): play, drama, acting 芝居を見に行く。Go to see a play. 資本 (しほん): capital, funds 新しい事業には資本が必要だ。We need capital for the new business. 湿る (しめる): to become damp, moist 洗濯物が湿っている。The laundry is still damp. 地盤 (じばん): ground, foundation, support base 地盤が弱い地域。An area with weak ground. 耳鼻科 (じびか): otolaryngology (ear, nose, throat doctor) 鼻が詰まって耳鼻科に行った。I went to the ENT because of a stuffy nose. 始発 (しはつ): first train or bus of the day 始発電車で出発した。I left on the first train. 縞 (しま): stripe 縞模様のシャツ。A striped shirt. 紙幣 (しへい): paper money, banknote 千円紙幣を持っていますか？Do you have a 1,000 yen note? 萎む (しぼむ): to wither, to deflate 風船が萎んでしまった。The balloon has deflated. 地道 (じみち): steady, honest, sober 地道に努力を続ける。Keep working steadily. 脂肪 (しぼう): fat (body or dietary) 脂肪を減らしたい。I want to reduce body fat. 社説 (しゃせつ): editorial (newspaper opinion article) 新聞の社説を読む。Read the newspaper’s editorial. 179 SHOW CONTENTS 占める (しめる): to occupy, to account for 女性が社員の半数を占めている。Women make up half of the employees. 借り家 (かりや): rented house 借り家に引っ越した。I moved into a rented house. 地元 (じもと): local, one\u0026rsquo;s hometown 地元の祭りに参加した。I participated in the local festival. 蛇口 (じゃぐち): faucet, tap 蛇口をひねって水を出す。Turn the tap to let the water out. 地面 (じめん): ground, surface of the earth 地面に穴を掘る。Dig a hole in the ground. 弱点 (じゃくてん): weak point, weakness 彼の弱点を突いた。I targeted his weak point. 若干 (じゃっかん): a few, some, a little 若干の遅れがある。There’s a slight delay. 写生 (しゃせい): sketching, drawing from nature 公園で写生をする。Do sketching in the park. 車輪 (しゃりん): wheel 車輪が回らない。The wheel won’t turn. 集会 (しゅうかい): meeting, assembly 住民の集会が開かれた。A neighborhood meeting was held. 収穫 (しゅうかく): harvest, crop 米の収穫が始まった。The rice harvest has begun. 就学 (しゅうがく): entering school, schooling 子供が就学年齢に達した。The child has reached school age. 銃 (じゅう): gun 銃の所持は禁止されている。Gun possession is prohibited. 寄る (よる): to stop by, to approach 帰りにスーパーに寄った。I stopped by the supermarket on my way home. 喜ぶ (よろこぶ): to be delighted, to be glad 彼は結果を聞いて喜んだ。He was glad to hear the result. 喜び (よろこび): joy, delight 合格の喜びを分かち合う。Share the joy of passing. 乱暴 (らんぼう): violence, roughness, reckless 乱暴な運転をするな。Don’t drive recklessly. 両側 (りょうがわ): both sides 道の両側に木が並んでいる。Trees line both sides of the road. 留守 (るす): absence from home 彼は今留守にしています。He is away from home right now. 冷暖房 (れいだんぼう): air conditioning and heating この部屋は冷暖房完備です。This room is fully air-conditioned and heated. 180 SHOW CONTENTS 周囲 (しゅうい): surroundings, circumference 周囲の人々に感謝する。Be grateful to the people around you. 宗教 (しゅうきょう): religion 宗教の自由は守られている。Freedom of religion is protected. 修正 (しゅうせい): correction, revision 計画を修正する必要がある。The plan needs to be revised. 集金 (しゅうきん): money collection 毎月の集金日が決まっている。The money collection date is set each month. 収支 (しゅうし): income and expenditure 収支のバランスを取る。Balance income and expenses. 集計 (しゅうけい): totalization, tallying 選挙結果を集計する。Tally the election results. 集合 (しゅうごう): gathering, meeting up 駅前に集合してください。Please meet in front of the station. 充実 (じゅうじつ): fulfillment, enrichment 充実した一日を過ごした。I had a fulfilling day. 就業 (しゅうぎょう): employment, starting work 就業時間は午前9時です。Work starts at 9 a.m. 修飾 (しゅうしょく): modification (grammar), decoration 形容詞は名詞を修飾する。Adjectives modify nouns. 終始 (しゅうし): from beginning to end, consistently 彼は終始笑顔だった。He smiled the entire time. 習字 (しゅうじ): penmanship, calligraphy 習字の授業で漢字を書いた。We practiced writing kanji in calligraphy class. 修繕 (しゅうぜん): repair, mending 建物の修繕工事が行われた。The building was repaired. 重体 (じゅうたい): serious condition (illness/injury) 事故で重体になった。He was critically injured in the accident. 重複 (ちょうふく): duplication, overlap データが重複している。The data is duplicated. 絨毯 (じゅうたん): carpet, rug 床に赤い絨毯を敷いた。I laid a red carpet on the floor. 修得 (しゅうとく): learning, acquisition (of skills or knowledge) 技術を修得する。Acquire a skill. 終着 (しゅうちゃく): terminal (station), end point この電車は終着駅まで行く。This train goes to the terminal station. 列 (れつ): row, line 店の前に長い列ができていた。There was a long line in front of the store. 冷房 (れいぼう): air conditioning 冷房をつけて部屋を冷やす。Turn on the air conditioner to cool the room. 181 SHOW CONTENTS 出世 (しゅっせ): success in life, promotion 彼は若くして出世した。He achieved success at a young age. 主役 (しゅやく): leading role, main character 彼女はその映画の主役を演じた。She played the lead role in the movie. 純情 (じゅんじょう): pure-hearted, innocent 彼はとても純情な青年だ。He is a very innocent young man. 順々に (じゅんじゅんに): in order, one by one 学生たちは順々に教室に入っていった。The students entered the classroom one by one. 循環 (じゅんかん): circulation, cycle 血液は体内を循環している。Blood circulates through the body. 瞬間 (しゅんかん): moment, instant その瞬間、全てが変わった。At that moment, everything changed. 純粋 (じゅんすい): pure, genuine 純粋な気持ちを大切にする。Cherish pure feelings. 省エネ (しょうエネ): energy saving 省エネ家電を使っています。I\u0026rsquo;m using energy-saving appliances. 消化 (しょうか): digestion; understanding この料理は消化がいい。This dish is easy to digest. 新しい知識をうまく消化した。I successfully absorbed the new knowledge. 障害 (しょうがい): obstacle, disability 通信に障害が発生した。A communication failure occurred. 仕様 (しよう): specifications 新製品の仕様を確認する。Check the specifications of the new product. 上映 (じょうえい): screening (of a movie) 映画は午後7時に上映される。The movie will be screened at 7 p.m. 賞金 (しょうきん): prize money 優勝者には賞金が与えられる。The winner will receive prize money. 忘れ物 (わすれもの): forgotten item 電車に忘れ物をした。I left something on the train. 分かれる (わかれる): to split, to diverge 道が二つに分かれる。The road splits into two. 分ける (わける): to divide, to separate チームを二つに分ける。Divide into two teams. 沸かす (わかす): to boil (something) お湯を沸かしてください。Please boil some water. 笑わせる (わらわせる): to make someone laugh 彼の冗談はみんなを笑わせた。His joke made everyone laugh. 割る (わる): to break, to divide ガラスを割ってしまった。I broke the glass. 割れる (われる): to be broken, to split 窓が割れた。The window broke. 182 SHOW CONTENTS 上昇 (じょうしょう): rise, ascent 気温が急に上昇した。The temperature rose suddenly. 症状 (しょうじょう): symptoms 風邪の症状が出た。I have symptoms of a cold. 上京 (じょうきょう): going to Tokyo 彼は大学進学のために上京した。He went to Tokyo to attend university. 将棋 (しょうぎ): shogi (Japanese chess) 父と将棋を指すのが好きだ。I enjoy playing shogi with my father. 障子 (しょうじ): paper sliding door 障子を開けて庭を眺めた。I opened the shoji and looked at the garden. 上下 (じょうげ): up and down, vertical エレベーターは上下に動く。The elevator moves up and down. 定規 (じょうぎ): ruler (measuring tool) 定規で線を引いてください。Draw a line with the ruler. 常勤 (じょうきん): full-time work 彼は常勤の講師です。He is a full-time lecturer. 昇進 (しょうしん): promotion 彼は部長に昇進した。He was promoted to department manager. 少数 (しょうすう): minority, small number 少数の人しか知らなかった。Only a small number of people knew. 消息 (しょうそく): news, whereabouts 彼の消息は不明だ。His whereabouts are unknown. 勝敗 (しょうはい): victory or defeat 試合の勝敗は紙一重だった。The result of the match was very close. 上等 (じょうとう): first-class, superior 上等なワインをいただいた。We received some fine wine. 消毒 (しょうどく): disinfection 傷口を消毒してください。Please disinfect the wound. 象徴 (しょうちょう): symbol, emblem 鳩は平和の象徴だ。The dove is a symbol of peace. 商人 (しょうにん): merchant, trader 商人たちは市場で商品を売っている。Merchants sell goods at the market. 焦点 (しょうてん): focus, focal point 問題の焦点をはっきりさせる。Clarify the focal point of the issue. 小児科 (しょうにか): pediatrics 子どもを小児科に連れて行った。I took my child to pediatrics. 招待 (しょうたい): invitation 友達の結婚式に招待された。I was invited to a friend\u0026rsquo;s wedding. 曖昧 (あいまい): vague, ambiguous 曖昧な返事はやめてください。Please don’t give vague answers. 183 SHOW CONTENTS 承認 (しょうにん): approval, authorization 提案は会議で承認された。The proposal was approved at the meeting. 情熱 (じょうねつ): passion 彼は音楽に情熱を注いでいる。He pours his passion into music. 蒸発 (じょうはつ): evaporation, disappearance 水が太陽の熱で蒸発した。The water evaporated due to the sun’s heat. 賞品 (しょうひん): prize, award クイズ大会で賞品をもらった。I received a prize in the quiz contest. 奨励 (しょうれい): encouragement, promotion 読書が奨励されている。Reading is encouraged. 消防 (しょうぼう): firefighting 消防署に通報した。I reported it to the fire department. 正味 (しょうみ): net weight, actual content この商品の正味は500グラムです。The net weight of this product is 500 grams. 静脈 (じょうみゃく): vein 注射は静脈に行われた。The injection was given into a vein. 賞味 (しょうみ): savoring, enjoy eating 今が一番の賞味時期です。Now is the best time to enjoy it. 女王 (じょおう): queen 彼女は女王のような風格がある。She has the dignity of a queen. 照明 (しょうめい): lighting, illumination 照明を暗くした。The lighting was dimmed. 勝利 (しょうり): victory チームは勝利を収めた。The team secured a victory. 消耗 (しょうもう): exhaustion, wear and tear 長時間の労働で体力を消耗した。I was physically drained by long hours of work. 省略 (しょうりゃく): omission, abbreviation 詳細は省略されていた。The details were omitted. 助教授 (じょきょうじゅ): assistant professor 彼は大学の助教授に昇進した。He was promoted to assistant professor at the university. 初歩 (しょほ): basics, rudiments 初歩から英語を学ぶ。Learn English from the basics. 食塩 (しょくえん): table salt 食塩を少し加えてください。Please add a little table salt. 職人 (しょくにん): craftsman, artisan 彼は腕のいい職人だ。He is a skilled craftsman. 所属 (しょぞく): affiliation, belonging 私は営業部に所属しています。I belong to the sales department. 愛用 (あいよう): habitual use, favorite item このカバンは私の愛用品です。This bag is my favorite item. 184 SHOW CONTENTS 処分 (しょぶん): disposal, punishment 不要な書類を処分した。I disposed of unnecessary documents. 所得 (しょとく): income, earnings 彼の年間所得は高い。His annual income is high. 書籍 (しょせき): books, publications 書籍コーナーで本を探した。I looked for books in the book section. 世帯 (せたい): household 日本では核家族の世帯が増えている。Nuclear family households are increasing in Japan. 書道 (しょどう): calligraphy 書道の教室に通っている。I attend a calligraphy class. 署名 (しょめい): signature 書類に署名してください。Please sign the document. 女優 (じょゆう): actress 彼女は人気のある女優だ。She is a popular actress. 徐々に (じょじょに): gradually 景気は徐々に回復している。The economy is gradually recovering. 助言 (じょげん): advice 先生の助言は役に立った。The teacher’s advice was helpful. 知らず (しらず): unconsciously, unaware 知らず知らずに時間が過ぎた。Time passed without me noticing. 職務 (しょくむ): duty, task 彼は職務に忠実だ。He is faithful to his duties. 白髪 (しらが): gray hair 最近白髪が増えた。I\u0026rsquo;ve been getting more gray hair lately. 書物 (しょもつ): books (formal or classical term) 書物に囲まれて育った。I grew up surrounded by books. 嘱望 (しょくぼう): expectation, hope 若手に嘱望されている選手だ。He’s a player expected to do well. 助手 (じょしゅ): assistant 医師の助手として働いている。She works as a doctor’s assistant. 書斎 (しょさい): study room, home office 書斎で読書を楽しむ。I enjoy reading in my study. 初旬 (しょじゅん): beginning of the month (first 10 days) 五月の初旬に旅行する。I’ll travel in early May. 知らず知らず (しらずしらず): unconsciously, before realizing 知らず知らずのうちに疲れていた。I was tired before I knew it. 自立 (じりつ): independence 大学卒業後、自立した。I became independent after graduating from college. 空き (あき): vacancy, free space 駐車場に空きがある。There is a vacancy in the parking lot. 185 SHOW CONTENTS 素人 (しろうと): amateur, novice 彼はまだ素人なので練習が必要だ。He’s still a novice and needs more practice. 城 (しろ): castle 姫路城は日本の有名な城の一つだ。Himeji Castle is one of Japan\u0026rsquo;s famous castles. 資料 (しりょう): materials, data 会議のために資料を準備する。Prepare materials for the meeting. 汁 (しる): juice, soup, broth 味噌汁は日本の伝統的な汁物だ。Miso soup is a traditional Japanese broth. 進化 (しんか): evolution, development 人間は長い年月をかけて進化した。Humans evolved over a long period. 侵害 (しんがい): violation, infringement 著作権の侵害は犯罪です。Copyright infringement is a crime. 震災 (しんさい): earthquake disaster その地域は震災の被害を受けた。The area suffered damage from an earthquake disaster. 新規 (しんき): new, fresh 新規ユーザーに特典があります。There are perks for new users. 神経 (しんけい): nerves, sensitivity 神経が細かい人はストレスを感じやすい。People with sensitive nerves tend to feel stress easily. 芯 (しん): core, wick, center 鉛筆の芯が折れた。The pencil lead broke. 真空 (しんくう): vacuum この容器は真空状態になっている。This container is in a vacuum state. 真剣 (しんけん): serious, earnest 彼は真剣にその仕事に取り組んでいる。He’s tackling the job seriously. 審査 (しんさ): screening, examination 審査に通るかどうか心配だ。I\u0026rsquo;m worried about passing the screening. 進行 (しんこう): progress, advancement 会議が順調に進行している。The meeting is progressing smoothly. 信仰 (しんこう): faith, belief (usually religious) 彼は仏教を信仰している。He practices Buddhism. 人身事故 (じんしんじこ): personal injury accident (often train-related) 朝の電車が人身事故で遅れた。The morning train was delayed due to a personal injury accident. 審判 (しんぱん): referee, judgment 審判が試合を止めた。The referee stopped the match. 人造 (じんぞう): artificial, man-made 人造ダイヤモンドは天然と見分けがつかない。Artificial diamonds are indistinguishable from natural ones. 心身 (しんしん): mind and body 心身の健康が大切だ。Mental and physical health are important. 表す (あらわす): to express, to represent 気持ちを言葉で表すのは難しい。It’s hard to express feelings in words. 186 SHOW CONTENTS 人種 (じんしゅ): race (of people) 世界にはさまざまな人種が存在する。There are various races in the world. 親族 (しんぞく): relatives, kin 結婚式には多くの親族が集まった。Many relatives gathered for the wedding. 進出 (しんしゅつ): expansion, advance into その企業は海外市場に進出した。The company expanded into overseas markets. 侵略 (しんりゃく): invasion, aggression 国境を越えることは侵略と見なされる。Crossing the border is considered an invasion. 寝台 (しんだい): bed, sleeping berth 寝台列車で旅をした。I traveled by sleeper train. 振動 (しんどう): vibration 地震の振動で目が覚めた。I woke up from the vibration of the earthquake. 人脈 (じんみゃく): personal connections, network 彼は広い人脈を持っている。He has a wide network of connections. 申請 (しんせい): application (for a request) ビザの申請を行った。I submitted a visa application. 人命 (じんめい): human life 事故で多くの人命が失われた。Many human lives were lost in the accident. 診療 (しんりょう): medical examination and treatment 診療時間は午後5時までです。The consultation hours are until 5 p.m. 甚大 (じんだい): enormous, serious (usually damage) 台風で甚大な被害が出た。The typhoon caused enormous damage. 人文 (じんぶん): humanities 彼は人文科学を専攻している。He majors in the humanities. 身体 (しんたい): body 身体を鍛えるためにジムに通っている。I go to the gym to strengthen my body. 震動 (しんどう): shaking, tremor (variant of 振動) 建物は震動に強く設計されている。The building is designed to resist tremors. 深夜 (しんや): late at night, midnight 深夜に電話がかかってきた。I received a call late at night. 人類 (じんるい): humanity, mankind 人類は火を使うことを学んだ。Mankind learned to use fire. 推薦 (すいせん): recommendation 教授から推薦状をもらった。I received a letter of recommendation from my professor. 水準 (すいじゅん): standard, level 日本の生活水準は高い。The standard of living in Japan is high. 炊事 (すいじ): cooking (household) 母は毎日炊事をしている。My mother does the cooking every day. 合わせる (あわせる): to match, to combine 力を合わせて問題を解決しよう。Let’s combine our efforts to solve the problem. 187 SHOW CONTENTS 推移 (すいい): transition, change 景気の推移を観察する。Observe the economic transition. 水素 (すいそ): hydrogen 水は水素と酸素でできている。Water is made of hydrogen and oxygen. 巣 (す): nest 木の上に鳥の巣があった。There was a bird’s nest in the tree. 針路 (しんろ): course, direction 船は北の針路を取った。The ship set a course northward. 神話 (しんわ): myth ギリシャ神話に興味がある。I’m interested in Greek mythology. 進路 (しんろ): course, path (e.g., career or direction) 卒業後の進路について考える。Think about career paths after graduation. 随一 (ずいいち): best, unparalleled 彼は学力随一の生徒だ。He is the top student academically. 推測 (すいそく): guess, conjecture 彼の気持ちを推測するのは難しい。It’s hard to guess his feelings. 垂直 (すいちょく): vertical 壁に垂直に立てかける。Lean it vertically against the wall. 水面 (すいめん): water surface 水面に月が映っていた。The moon was reflected on the water surface. 水筒 (すいとう): canteen, water bottle ハイキングに水筒を持っていく。Bring a water bottle on the hike. 水滴 (すいてき): water drop 窓ガラスに水滴がついている。There are water drops on the window. 随筆 (ずいひつ): essay, miscellany 彼女の随筆は読みやすい。Her essays are easy to read. 図々しい (ずうずうしい): impudent, shameless 彼は図々しくお金を借りに来た。He shamelessly came to borrow money. 推定 (すいてい): presumption, estimation 被害額は1億円と推定されている。The damage is estimated at 100 million yen. 水平 (すいへい): horizontal 水平に線を引いてください。Draw a line horizontally. 水道水 (すいどうすい): tap water 日本の水道水は安全に飲める。Tap water in Japan is safe to drink. ずっと: all the way, the whole time 彼はずっと立ちっぱなしだった。He stood the whole time. 水平線 (すいへいせん): horizon (over water) 海に水平線が見える。The horizon is visible over the sea. 粗い (あらい): coarse, rough この布は目が粗い。This fabric has a coarse weave. 188 SHOW CONTENTS 空かす (すかす): to empty (especially one\u0026rsquo;s stomach) お腹を空かして待っていた。Waited with an empty stomach. 杉 (すぎ): cedar (Japanese cedar tree) 杉の木が花粉を飛ばしている。The cedar trees are releasing pollen. 好く (すく): to like, to love 彼女は犬を好いている。She likes dogs. 透き通る (すきとおる): to be transparent, to be clear 透き通るような青い海だった。It was a clear blue sea. 優れる (すぐれる): to excel, to be superior 彼は数学に優れている。He excels in math. 図鑑 (ずかん): illustrated reference book 昆虫図鑑で虫の名前を調べた。I looked up the insect\u0026rsquo;s name in an illustrated insect book. 救う (すくう): to save, to rescue 命を救ってくれた医者に感謝する。I\u0026rsquo;m grateful to the doctor who saved my life. 掬う (すくう): to scoop up (with hands or ladle) 手ですくって水を飲んだ。I drank water scooped with my hands. 図形 (ずけい): figure, shape 図形の面積を求める。Find the area of a figure. 筋 (すじ): muscle, logic, storyline 彼の話には筋が通っている。His story makes logical sense. 涼む (すずむ): to cool oneself 夕方に縁側で涼んだ。I cooled off on the porch in the evening. 少しも (すこしも): not at all (with negatives) 少しも怖くなかった。I wasn\u0026rsquo;t scared at all. 鈴 (すず): bell 鈴の音が聞こえる。I hear the sound of a bell. 勧め (すすめ): recommendation, advice 医者の勧めで入院した。I was hospitalized on the doctor\u0026rsquo;s advice. 雀 (すずめ): sparrow 雀が庭で遊んでいる。Sparrows are playing in the garden. 現れる (あらわれる): to appear 彼は突然目の前に現れた。He suddenly appeared in front of me. 有難い (ありがたい): grateful, appreciated ご助言、誠に有難いです。I\u0026rsquo;m truly grateful for your advice. 慌ただしい (あわただしい): hectic, busy 年末は慌ただしい日々が続く。Year-end is full of hectic days. 慌てる (あわてる): to panic, to rush 火事を見て慌てて逃げた。I panicked and fled when I saw the fire. 言い換える (いいかえる): to rephrase もっと分かりやすく言い換えてください。Please rephrase it more clearly. 189 SHOW CONTENTS 薦める (すすめる): to recommend, to suggest この本をぜひ薦めたい。I definitely want to recommend this book. 裾 (すそ): hem, cuff, bottom edge スカートの裾が汚れている。The hem of the skirt is dirty. 素早い (すばやい): quick, nimble 彼は素早い動きで逃げた。He escaped with quick movements. 墨 (すみ): ink (for calligraphy) 墨で文字を書く。Write characters with ink. ステッキ: walking stick, cane おじいさんはステッキを使って歩く。The old man walks with a cane. 頭脳 (ずのう): brain, intellect 彼は優れた頭脳の持ち主だ。He has an excellent intellect. 図表 (ずひょう): chart, diagram 図表を使って説明した。I explained using a chart. 済ませる (すませる): to finish, to get done with 宿題を済ませてから遊ぶ。Play after finishing homework. スナック: snack bar, light meal 友達とスナックでお酒を飲んだ。I had drinks with friends at a snack bar. 鋭い (するどい): sharp, keen 鋭いナイフに気をつけて。Be careful with the sharp knife. 刷る (する): to print 新聞を刷る工場。A factory that prints newspapers. 案外 (あんがい): unexpectedly 試験は案外簡単だった。The exam was unexpectedly easy. 暗記 (あんき): memorization 単語を暗記する。Memorize vocabulary words. 言い出す (いいだす): to start talking, to suggest 急に旅行に行こうと言い出した。Suddenly suggested going on a trip. 言い直す (いいなおす): to rephrase, to restate 間違いを言い直した。I corrected what I said. 生き物 (いきもの): living thing, creature 生き物の世話をする。Take care of living creatures. 生き生き (いきいき): lively, vividly 子供たちは生き生きと遊んでいた。The children were playing lively. 居酒屋 (いざかや): Japanese-style pub 居酒屋で同僚と飲んだ。I drank with coworkers at an izakaya. 虐め (いじめ): bullying 学校で虐めが問題になっている。Bullying is a problem at school. 一応 (いちおう): for the time being, just in case 一応パスポートを持って行く。I\u0026rsquo;ll take my passport just in case. 190 SHOW CONTENTS 清む (すむ): to become clear (of water or air) 川の水が清んでいる。The river water is clear. すらすら: smoothly, effortlessly 彼は問題をすらすら解いた。He solved the problems effortlessly. 住み着く (すみつく): to settle down, to take up residence 野良猫が庭に住み着いた。A stray cat settled in the yard. 速やか (すみやか): prompt, speedy 速やかな対応をお願いします。Please respond promptly. 擦れ違う (すれちがう): to pass by each other, to miss each other 駅で彼と擦れ違った。I passed by him at the station. 擦れ違い (すれちがい): passing by without meeting, disagreement タイミングの擦れ違いで会えなかった。We couldn\u0026rsquo;t meet due to timing mismatch. 寸法 (すんぽう): measurement, dimension テーブルの寸法を測る。Measure the dimensions of the table. 正 (せい): right, correct, justice 答えは正だ。The answer is correct. 成熟 (せいじゅく): maturity, ripeness 果物が成熟する。The fruit ripens. 誠実 (せいじつ): sincere, honest 誠実な人柄が信頼される。A sincere personality earns trust. 清潔 (せいけつ): cleanliness 清潔な部屋を保つ。Keep the room clean. 税関 (ぜいかん): customs (at a border) 空港の税関を通過する。Pass through customs at the airport. 世紀 (せいき): century 21世紀に生きている。We live in the 21st century. 清書 (せいしょ): fair copy, final draft 下書きを清書する。Make a fair copy of the draft. 精一杯 (せいいっぱい): with all one\u0026rsquo;s might 精一杯努力します。I’ll do my best. 生育 (せいいく): growth (of a plant or child) 作物の生育が順調だ。The crops are growing well. 請求 (せいきゅう): request, claim (e.g., for payment) 請求書を送る。Send an invoice. 生計 (せいけい): livelihood 農業で生計を立てている。They make a living through farming. 正常化 (せいじょうか): normalization 関係の正常化が進む。Normalization of relations progresses. 悪戯 (いたずら): prank, mischief 子供の悪戯に困っている。I’m troubled by the child’s pranks. 191 SHOW CONTENTS 整然と (せいぜんと): orderly, systematically 書類が整然と並べられている。The documents are arranged in an orderly fashion. 晴天 (せいてん): clear weather 晴天に恵まれた日曜日。A Sunday blessed with clear skies. 青年 (せいねん): youth, young man 彼は立派な青年に成長した。He has grown into a fine young man. 整備 (せいび): maintenance, servicing 車の整備をする。Perform maintenance on the car. 世代 (せだい): generation 世代を超えて人気がある。Popular across generations. 政党 (せいとう): political party 新しい政党が結成された。A new political party was formed. 世帯 (せたい): household この地域には500世帯が住んでいる。There are 500 households in this area. 製造 (せいぞう): manufacture, production 日本で製造された車。A car manufactured in Japan. 清掃 (せいそう): cleaning 毎朝ビルの清掃が行われる。The building is cleaned every morning. 制度 (せいど): system, institution 教育制度を改革する。Reform the education system. 接近 (せっきん): approach, getting close 台風が接近している。A typhoon is approaching. 接する (せっする): to touch, to come in contact, to attend to 外国人に接する機会が増えた。Opportunities to interact with foreigners have increased. 接続 (せつぞく): connection (e.g., network) インターネットに接続する。Connect to the internet. 設置 (せっち): installation, establishment エアコンを設置する。Install an air conditioner. 成分 (せいぶん): ingredient, component 食品の成分表示を確認する。Check the ingredient label of food. 声優 (せいゆう): voice actor 人気声優のイベントが開かれた。An event was held for a popular voice actor. 偉大 (いだい): great, grand 偉大な科学者。A great scientist. 一方 (いっぽう): one side, on the other hand 彼は賛成だが、一方では反対の意見もある。He agrees, but on the other hand, there are opposing opinions. 一周 (いっしゅう): one lap, one round 公園を一周する。Take one lap around the park. 一体 (いったい): (1) what on earth (as a question word), (2) one body/unit 一体どうなっているんだ？What on earth is going on? 192 SHOW CONTENTS 接触 (せっしょく): contact, touch 事故後、警察と接触を取った。After the accident, I made contact with the police. 正門 (せいもん): main gate 大学の正門を通り抜ける。Pass through the main gate of the university. 生理 (せいり): menstruation, physiology 生理が始まった。Her period has started. 西暦 (せいれき): Gregorian calendar, AD 西暦2025年にイベントが開催される。The event will be held in the year 2025. 隻 (せき): counter for ships, boats 2隻の船が港に停泊している。Two ships are docked at the harbor. 咳止め (せきどめ): cough medicine 咳止めを飲んで楽になった。I took some cough medicine and felt better. 赤道 (せきどう): equator 赤道を越えるのは大きな旅の一部だ。Crossing the equator is part of a big journey. 瀬戸物 (せともの): pottery, ceramics 瀬戸物の茶碗を購入した。I bought a ceramic teacup. 攻める (せめる): to attack, to assault 相手チームが攻めてきた。The opposing team attacked. 責める (せめる): to blame, to accuse 彼を責めるのはやめよう。Let’s stop blaming him. 説得力 (せっとくりょく): persuasive power, credibility 彼の意見には説得力がある。His opinion has persuasive power. 窃盗 (せっとう): theft, larceny 窃盗罪で逮捕された。He was arrested for theft. 世間 (せけん): society, the world 世間の目を気にしすぎるな。Don’t worry too much about what society thinks. 絶滅 (ぜつめつ): extinction あの動物は絶滅の危機に瀕している。That animal is on the verge of extinction. 世論 (せろん): public opinion 世論は改革を支持している。Public opinion supports the reform. 迫る (せまる): to approach, to draw near 締め切りが迫っている。The deadline is approaching. 台詞 (せりふ): lines (in a play or movie), speech 彼は台詞を完璧に覚えた。He memorized his lines perfectly. 是非 (ぜひ): certainly, without fail 是非参加してください。Please join without fail. 栓 (せん): stopper, cork ボトルの栓を閉めてください。Please close the bottle’s stopper. 一般 (いっぱん): general, ordinary これは一般の人々にも役立つ情報だ。This is useful information for the general public. 193 SHOW CONTENTS 全集 (ぜんしゅう): complete works 作家の全集を購入した。I bought the complete works of the author. 線 (せん): line 地図に赤い線を引いた。I drew a red line on the map. 前進 (ぜんしん): advance, progress 計画は順調に前進している。The plan is progressing smoothly. 善 (ぜん): good, virtue 善と悪の区別を学ぶ。Learn the difference between good and evil. 前者 (ぜんしゃ): the former 犬と猫では前者の方が好きだ。Between dogs and cats, I prefer the former. 繊維 (せんい): fiber, textile 繊維産業が盛んな地域だ。This region has a thriving textile industry. 戦術 (せんじゅつ): tactics, strategy 新しい戦術で試合に勝った。We won the match with new tactics. 宣告 (せんこく): sentence, pronouncement 死刑を宣告された。He was sentenced to death. 先祖 (せんぞ): ancestor 先祖の墓参りに行く。Visit the grave of my ancestors. 専属 (せんぞく): exclusive, dedicated 専属のデザイナーがいる。We have an exclusive designer. 先端 (せんたん): tip, forefront 技術の先端を行く会社だ。It’s a company at the forefront of technology. 選定 (せんてい): selection, choice 委員会が候補者を選定した。The committee selected the candidates. 素案 (そあん): draft plan 素案を提出してください。Please submit a draft plan. 先着 (せんちゃく): first arrival 先着100名にプレゼントがある。Gifts for the first 100 arrivals. 送金 (そうきん): remittance, money transfer 家族に仕送りとして送金する。Send money to family as a remittance. 沿い (そい): along 川沿いを散歩する。Take a walk along the river. 総 (そう): whole, total 総売上が発表された。The total sales were announced. 一方通行 (いっぽうつうこう): one-way traffic この通りは一方通行だ。This street is one-way. 一遍 (いっぺん): once, one time 一遍で覚えられなかった。I couldn\u0026rsquo;t remember it in one go. 移転 (いてん): relocation, transfer 本社が東京に移転した。The headquarters was relocated to Tokyo. 194 SHOW CONTENTS 相違 (そうい): difference 意見の相違が見られる。A difference in opinions can be seen. 銭湯 (せんとう): public bath 友達と銭湯に行った。I went to a public bath with my friend. 相互 (そうご): mutual 相互理解が必要だ。Mutual understanding is necessary. 前提 (ぜんてい): premise, condition 信頼を前提に話を進める。Proceed the conversation on the premise of trust. 先頭 (せんとう): head, front マラソンで先頭に立つ。Take the lead in the marathon. 戦闘 (せんとう): battle, combat 激しい戦闘が続いている。Intense combat continues. 専念 (せんねん): dedication 勉強に専念する。Dedicate oneself to studying. 専用 (せんよう): exclusive use この車両は女性専用です。This car is for women only. 洗面 (せんめん): washing one’s face 朝は洗面から始まる。My morning starts with washing my face. 全般 (ぜんぱん): general, whole 経済全般について議論する。Discuss the economy in general. 戦略 (せんりゃく): strategy 新しい販売戦略を考える。Consider a new sales strategy. 戦力 (せんりょく): war potential, capability チームの戦力が上がった。The team\u0026rsquo;s capability has improved. 総合 (そうごう): synthesis, integration 総合病院に行く。Go to a general hospital. 装置 (そうち): equipment, device 冷却装置を設置する。Install a cooling device. 造船 (ぞうせん): shipbuilding この町は造船で有名だ。This town is known for shipbuilding. 装飾 (そうしょく): decoration 会場を花で装飾する。Decorate the venue with flowers. 相続 (そうぞく): inheritance 財産を相続する。Inherit property. 騒々しい (そうぞうしい): noisy, boisterous 隣の部屋が騒々しい。The room next door is noisy. 増大 (ぞうだい): increase, enlargement 需要が増大している。Demand is increasing. 居眠り (いねむり): dozing, nodding off 授業中に居眠りする。Doze off during class. 195 SHOW CONTENTS 葬式 (そうしき): funeral 祖父の葬式に参列した。I attended my grandfather’s funeral. 想定 (そうてい): assumption, supposition 地震を想定した訓練。A drill based on the assumption of an earthquake. 創造 (そうぞう): creation 芸術は創造の力を示す。Art shows the power of creation. 早退 (そうたい): leaving early 頭痛で学校を早退した。I left school early due to a headache. 贈答 (ぞうとう): gift-giving, exchange of gifts 贈答品を選ぶのは難しい。Choosing a gift can be difficult. 相当 (そうとう): considerable, appropriate 彼の努力は相当なものだ。His effort is considerable. 属する (ぞくする): to belong to この団体に属している。I belong to this organization. 続出 (ぞくしゅつ): appearing one after another 問題が続出している。Problems are occurring one after another. 送別 (そうべつ): farewell 送別会を開く。Hold a farewell party. 総理大臣 (そうりだいじん): Prime Minister 日本の総理大臣と会談した。Met with Japan’s Prime Minister. 組織 (そしき): organization 組織の再編が行われた。The organization was restructured. 草履 (ぞうり): traditional Japanese sandals 着物に草履を合わせる。Wear zōri with a kimono. 遭難 (そうなん): disaster, being stranded 山で遭難する。Get stranded in the mountains. 続々 (ぞくぞく): one after another お客が続々と来る。Guests keep arriving one after another. 測量 (そくりょう): surveying, measurement 土地の測量をする。Survey the land. 素材 (そざい): material, ingredient 素材にこだわった料理。Dishes made with carefully selected ingredients. 素質 (そしつ): aptitude, potential 音楽の素質がある。He has musical talent. 損失 (そんしつ): loss 投資で大きな損失を出した。Suffered a big loss in investment. 鼾 (いびき): snoring 父の鼾がうるさい。My father’s snoring is loud. 今頃 (いまごろ): about this time, now 今頃になって気づいた。I realized it only now. 196 SHOW CONTENTS 揃える (そろえる): to gather, to arrange 書類をきちんと揃える。Neatly arrange the documents. 率直 (そっちょく): frank, honest 率直な意見を言う。Give an honest opinion. 揃い (そろい): set, all present 家族揃いで旅行に行く。The whole family went on a trip. 損害 (そんがい): damage, loss 火事で大きな損害を受けた。We suffered heavy damage from the fire. 染まる (そまる): to be dyed, to be influenced 空が赤く染まった。The sky turned red. 備える (そなえる): to prepare for, to equip 地震に備えて食料を買う。Buy food in preparation for an earthquake. 橇 (そり): sled, sleigh 雪で子供たちが橇を楽しんでいる。Children are enjoying sledding in the snow. 算盤 (そろばん): abacus 昔は算盤で計算していた。In the past, calculations were done with an abacus. 損得 (そんとく): gain and loss, advantage and disadvantage 損得を考えて行動する。Act based on gains and losses. 退会 (たいかい): withdrawal from membership クラブを退会した。I left the club. 体温 (たいおん): body temperature 体温を測る。Take one\u0026rsquo;s temperature. 体格 (たいかく): physique 彼は体格がいい。He has a good build. 退学 (たいがく): dropping out of school 問題行動で退学になった。He was expelled due to misconduct. 題 (だい): title, theme 作文の題は「夢について」だった。The topic of the essay was \u0026ldquo;About Dreams.\u0026rdquo; 退屈 (たいくつ): boredom 授業が退屈だった。The class was boring. 待遇 (たいぐう): treatment, compensation 従業員の待遇を改善する。Improve employee treatment. 岩 (いわ): rock 岩の上に座る。Sit on a rock. イメージ: image, impression 新商品のイメージを大切にする。Value the image of the new product. 入れ物 (いれもの): container お菓子の入れ物を探す。Look for a container for the sweets. 嫌がる (いやがる): to dislike, to be unwilling 子供が薬を飲むのを嫌がる。The child resists taking medicine. 197 SHOW CONTENTS 体系 (たいけい): system, organization 文法の体系を学ぶ。Learn the grammatical system. 太鼓 (たいこ): drum 太鼓の音が響く。The sound of the drum echoes. 大層 (たいそう): very, greatly (also exaggerated) 大層驚いた。I was greatly surprised. 対処 (たいしょ): dealing with, coping 問題に冷静に対処する。Deal calmly with the problem. 滞在 (たいざい): stay (at a place) 東京に一週間滞在する。Stay in Tokyo for a week. 大使 (たいし): ambassador 日本大使が歓迎された。The Japanese ambassador was welcomed. 大半 (たいはん): majority, most 大半の人が賛成した。The majority of people agreed. 対戦 (たいせん): match, battle 強敵と対戦する。Face off against a tough opponent. 対照 (たいしょう): contrast 二つの意見を対照する。Contrast the two opinions. 大豆 (だいず): soybean 大豆は栄養豊富だ。Soybeans are rich in nutrients. 体制 (たいせい): structure, system 新しい体制が始まった。A new system has begun. 大木 (たいぼく): large tree 大木が強風で倒れた。A large tree fell due to strong wind. 代理 (だいり): representation, proxy 会議に代理として出席する。Attend the meeting as a proxy. ダイヤ: schedule, diamond 電車のダイヤが乱れている。The train schedule is disrupted. 題名 (だいめい): title 小説の題名を思い出せない。I can’t recall the title of the novel. 大役 (たいやく): important role 彼は大役を任された。He was entrusted with an important role. 蓄える (たくわえる): to store, to save 食料を蓄える。Store food. 絶える (たえる): to die out, to cease 笑い声が絶えない。Laughter never ceases. 印鑑 (いんかん): personal seal 書類に印鑑を押す。Stamp the document with a seal. 院生 (いんせい): graduate student 彼は大学院生だ。He is a graduate student. 198 SHOW CONTENTS 対立 (たいりつ): opposition, conflict 両国は長年にわたって対立している。The two countries have been in conflict for many years. 多種多様 (たしゅたよう): a great variety 多種多様な商品が並んでいる。A wide variety of products are displayed. 出し入れ (だしいれ): depositing and withdrawing, taking in and out 金庫に現金を出し入れする。Deposit and withdraw cash from the safe. 田植え (たうえ): rice planting 春には田植えの作業が始まる。Rice planting begins in spring. 炊く (たく): to cook (rice) 毎朝ご飯を炊く。I cook rice every morning. 宝くじ (たからくじ): lottery 宝くじが当たったら旅行に行く。If I win the lottery, I’ll go on a trip. 耕す (たがやす): to cultivate 畑を耕して野菜を植える。Cultivate the field and plant vegetables. 滝 (たき): waterfall 滝の音が心を癒してくれる。The sound of the waterfall soothes the heart. 多数 (たすう): majority, large number 会議には多数の意見が出た。Many opinions were voiced at the meeting. 助け (たすけ): help, assistance 彼の助けがなければ無理だった。It would’ve been impossible without his help. 直ちに (ただちに): immediately 火災が発生したら直ちに避難してください。Evacuate immediately in case of fire. 携わる (たずさわる): to be involved in 教育に携わる仕事をしている。I’m engaged in educational work. 抱っこ (だっこ): carrying a baby in one’s arms 赤ちゃんを抱っこしてあやす。Soothe the baby by holding them. 達する (たっする): to reach, attain 売上が目標に達した。Sales reached the target. 立ち止まる (たちどまる): to stop (walking), pause 急に立ち止まって振り返った。He suddenly stopped and looked back. 経つ (たつ): to pass (time) その事件から10年が経った。Ten years have passed since the incident. 疑う (うたがう): to doubt, suspect 彼の話を疑う理由はない。There’s no reason to doubt his story. インフルエンザ (いんふるえんざ): influenza, flu 毎年冬になるとインフルエンザが流行する。Influenza spreads every winter. 動かす (うごかす): to move (something) 椅子を少し動かしてください。Please move the chair a little. ウール (うーる): wool このセーターはウール100%です。This sweater is 100% wool. 199 SHOW CONTENTS 絶つ (たつ): to sever, cut off 彼とはすでに連絡を絶っている。I’ve already cut off contact with him. 立ち上げる (たちあげる): to start up (a project, business, computer, etc.) 新しい会社を立ち上げた。I started a new company. 立ち入り (たちいり): entering, access 関係者以外立ち入り禁止です。No entry except for authorized personnel. 達人 (たつじん): master, expert 彼は将棋の達人だ。He’s a master of shogi. 立ち直る (たちなおる): to recover, bounce back 失敗からすぐに立ち直った。He quickly recovered from the failure. 立ち去る (たちさる): to leave, go away 彼は何も言わずにその場を立ち去った。He left the place without saying anything. 達成 (たっせい): achievement, accomplishment 売上目標を達成した。We achieved our sales target. 旅立つ (たびだつ): to set off on a journey 彼は夢を追って旅立った。He set off in pursuit of his dreams. 脱線 (だっせん): derailment, digression 話が脱線してしまった。The conversation went off-topic. 楽しみ (たのしみ): enjoyment, pleasure, anticipation 旅行がとても楽しみです。I’m really looking forward to the trip. 多忙 (たぼう): very busy 多忙な毎日を送っている。I’m living a very busy life. 溜め息 (ためいき): sigh 彼女は深いため息をついた。She let out a deep sigh. 建前 (たてまえ): official stance, principle (often opposed to real intention) 建前と本音が違う。The official stance differs from the real intention. 妥当 (だとう): valid, appropriate 妥当な判断だと思う。I think it’s a reasonable decision. 頼もしい (たのもしい): reliable, dependable 頼もしい仲間がいると安心する。It’s reassuring to have reliable teammates. 足袋 (たび): traditional Japanese socks 着物に足袋を合わせて着る。I wear tabi socks with kimono. 試す (ためす): to try, test 新しい方法を試してみる。Try out a new method. 打ち合わせ (うちあわせ): meeting, prior arrangement 明日のイベントについて打ち合わせする。We’ll have a meeting about tomorrow’s event. 浮かぶ (うかぶ): to float, come to mind いいアイデアが浮かんだ。A good idea came to mind. 歌声 (うたごえ): singing voice 彼女の歌声はとても美しい。Her singing voice is very beautiful. 200 SHOW CONTENTS 頼りない (たよりない): unreliable, undependable 彼はまだ新人で少し頼りない。He’s still a rookie and a bit unreliable. 足る (たる): to be sufficient, to suffice 彼は信頼に足る人物だ。He is a person worthy of trust. だらけ: full of, covered with (often something undesirable) 彼の部屋はゴミだらけだった。His room was full of trash. 誰一人 (だれひとり): not a single person (with negative verb) 誰一人助けてくれなかった。Not a single person helped me. 誰しも (だれしも): everyone, anyone 誰しも失敗することはある。Everyone makes mistakes. 頼り (たより): reliance, dependence; news, correspondence 彼だけが私の頼りです。He is my only support. 保つ (たもつ): to maintain, keep 健康を保つために運動している。I exercise to maintain my health. 枝垂れる (しだれる): to droop, to hang down (like willow branches) 枝垂れ桜が美しく咲いていた。The drooping cherry blossoms were beautifully blooming. 炭鉱 (たんこう): coal mine この町はかつて炭鉱で栄えていた。This town once prospered thanks to coal mining. 単なる (たんなる): mere, simple 単なる冗談だった。It was just a joke. 単純 (たんじゅん): simple, simplistic 単純なミスで失敗した。I failed due to a simple mistake. 短編 (たんぺん): short story, short piece 彼は短編小説を書くのが得意だ。He’s good at writing short stories. 男優 (だんゆう): male actor 彼は有名な男優だ。He is a famous male actor. 単調 (たんちょう): monotony, dullness 単調な作業が続いた。The monotonous work went on. 地位 (ちい): position, status 社会的な地位を気にする人もいる。Some people care about social status. 単数 (たんすう): singular (in grammar) 「本」は日本語で単数です。“Hon” is singular in Japanese. 打ち合わせる (うちあわせる): to arrange in advance, to discuss 来週のイベントについて打ち合わせる。We’ll discuss next week’s event. 浮かべる (うかべる): to float, show (emotion), recall 彼女は微笑みを顔に浮かべた。She showed a smile on her face. 受かる (うかる): to pass (an exam) 試験に受かった！I passed the exam! 嗽 (うがい): gargling 帰宅したら手洗いと嗽をしましょう。Let’s wash hands and gargle after coming home. 201 SHOW CONTENTS 短縮 (たんしゅく): shortening, reduction 通勤時間を短縮したい。I want to shorten my commute time. 淡水 (たんすい): fresh water 淡水魚は川や湖に生息する。Freshwater fish live in rivers and lakes. 知恵 (ちえ): wisdom, intelligence 知恵を絞って問題を解決した。I used my wisdom to solve the problem. 誓う (ちかう): to swear, to vow 彼は成功を誓った。He swore to succeed. 地下 (ちか): underground, basement 地下鉄に乗る。Take the subway. 違える (ちがえる): to differ, to make a mistake 道を違えてしまった。I took the wrong road. 近々 (ちかぢか): soon, in the near future 近々引っ越す予定だ。I\u0026rsquo;m planning to move soon. 地下水 (ちかすい): groundwater 地下水の汚染が問題になっている。Groundwater pollution has become a problem. 縮まる (ちぢまる): to shrink, to shorten 丈が洗濯で縮まった。The length shrank in the wash. 力づける (ちからづける): to encourage, to cheer up 友人の言葉が私を力づけてくれた。My friend’s words encouraged me. 知人 (ちじん): acquaintance 彼は私の古い知人です。He’s an old acquaintance of mine. 地区 (ちく): district, area この地区は住宅が多い。This district has many houses. 知事 (ちじ): governor (of a prefecture) 彼は大阪府の知事だ。He is the governor of Osaka Prefecture. 地質 (ちしつ): geological features 地質調査が行われた。A geological survey was conducted. 近道 (ちかみち): shortcut この道を使えば近道になる。This way is a shortcut. 力づく (ちからづく): by force, forcibly 彼は力づくでドアを開けた。He forced the door open. 秩序 (ちつじょ): order, discipline 社会の秩序を守ることが大切だ。It’s important to maintain social order. 地帯 (ちたい): zone, area 危険地帯には入らないでください。Do not enter the danger zone. チップ: tip (gratuity), chip (fragment or electronic component) レストランでチップを払った。I left a tip at the restaurant. 内側 (うちがわ): inside, interior ドアの内側に貼り紙があった。There was a notice on the inside of the door. 202 SHOW CONTENTS 着実 (ちゃくじつ): steady, reliable 彼は着実に成果を出している。He is steadily producing results. 地平線 (ちへいせん): horizon 太陽が地平線の向こうに沈んだ。The sun set beyond the horizon. 知能 (ちのう): intelligence 彼は非常に高い知能を持っている。He has very high intelligence. 地点 (ちてん): point, location 出発地点に戻った。We returned to the starting point. 中間 (ちゅうかん): middle, intermediate 中間テストが来週ある。The midterm exam is next week. 着々 (ちゃくちゃく): steadily, step by step 計画は着々と進んでいる。The plan is progressing steadily. 中央 (ちゅうおう): center, middle 会場の中央にステージがある。There is a stage in the center of the venue. 忠告 (ちゅうこく): advice, warning 医者の忠告を聞いたほうがいい。You should follow the doctor\u0026rsquo;s advice. 抽象的 (ちゅうしょうてき): abstract 抽象的な表現では伝わりにくい。It’s hard to convey with abstract expressions. 超過 (ちょうか): excess, surplus 荷物の重量が超過している。The baggage weight is over the limit. 彫刻 (ちょうこく): sculpture, carving その彫刻は有名な芸術家の作品だ。That sculpture is by a famous artist. 中退 (ちゅうたい): dropping out (of school) 彼は高校を中退した。He dropped out of high school. 中世 (ちゅうせい): Middle Ages, medieval times 中世の建物が今も残っている。Medieval buildings still remain. 中途 (ちゅうと): halfway, midway 中途で諦めるな。Don’t give up halfway. 映す (うつす): to reflect, to project 彼女の笑顔が鏡に映っていた。Her smile was reflected in the mirror. 宇宙 (うちゅう): universe, space 宇宙にはまだ多くの謎がある。There are still many mysteries in the universe. 映る (うつる): to be reflected, to appear テレビに彼が映った。He appeared on TV. 奪う (うばう): to take away, to rob 泥棒が財布を奪って逃げた。The thief took the wallet and ran away. 鰻 (うなぎ): eel 今日は鰻を食べに行こう。Let’s go eat eel today. 恨み (うらみ): grudge, resentment 彼には昔の恨みがある。I hold an old grudge against him. 203 SHOW CONTENTS 中途半端 (ちゅうとはんぱ): half-done, incomplete 中途半端な仕事は許されない。Half-done work is not acceptable. 帳 (ちょう): notebook, register, account book 出席帳に名前を書いてください。Please write your name in the attendance book. 長短 (ちょうたん): length; merits and demerits それぞれの方法に長短がある。Each method has its pros and cons. 朝刊 (ちょうかん): morning newspaper 毎朝、朝刊を読むのが習慣だ。I read the morning newspaper every day. 直後 (ちょくご): immediately after 地震の直後に停電が起きた。A blackout occurred immediately after the earthquake. 散らばる (ちらばる): to be scattered おもちゃが部屋中に散らばっている。Toys are scattered all over the room. 直流 (ちょくりゅう): direct current (DC) この機械は直流で動く。This machine runs on direct current. 散らす (ちらす): to scatter, to disperse 花びらを風で散らした。The petals were scattered by the wind. 直線 (ちょくせん): straight line ２点を結ぶ直線を引く。Draw a straight line connecting the two points. 直径 (ちょっけい): diameter この円の直径は１０センチです。The diameter of this circle is 10 cm. 直通 (ちょくつう): direct (traffic, line) 東京駅から京都まで直通電車がある。There is a direct train from Tokyo to Kyoto. 直角 (ちょっかく): right angle 直角三角形の性質を学ぶ。We study the properties of a right triangle. 貯蔵 (ちょぞう): storage, preservation 野菜を冷蔵庫に貯蔵する。Store vegetables in the fridge. 賃 (ちん): rent, fare, wages (short for 賃金 or 家賃) 家の賃が高い。The rent for the house is high. ちり紙 (ちりがみ): tissue paper 鼻をかむためにちり紙を使う。Use tissue paper to blow your nose. 散らかる (ちらかる): to be messy, to be in disorder 部屋が散らかっている。The room is messy. 追加 (ついか): addition, supplement 注文にドリンクを追加する。Add a drink to the order. 追求 (ついきゅう): pursuit, search 幸福を追求する。Pursue happiness. 通行 (つうこう): passage, traffic この道は通行禁止です。This road is closed to traffic. 突き当たる (つきあたる): to run into, to come to the end of a road 道をまっすぐ行くと壁に突き当たる。Go straight and you\u0026rsquo;ll run into a wall. 204 SHOW CONTENTS 庁 (ちょう): government office, agency 消防庁に通報した。I reported it to the Fire Department. 通用 (つうよう): to be accepted, to be valid 海外ではその常識が通用しない。That common sense doesn’t apply overseas. 使い分け (つかいわけ): proper use according to the situation 敬語と普通語を上手に使い分ける。Use polite and casual language properly depending on the situation. 通路 (つうろ): passageway, aisle 通路に荷物を置かないでください。Please don’t leave luggage in the aisle. 通過 (つうか): passage through, passing 電車は駅を通過した。The train passed through the station. 通貨 (つうか): currency 外国通貨を両替する。Exchange foreign currency. 通じる (つうじる): to communicate, to be understood, to lead to 英語が通じる国で安心した。I was relieved to be in a country where English is understood. 使い果たす (つかいはたす): to use up, to exhaust お金を全部使い果たした。I used up all my money. 尽きる (つきる): to run out, to be exhausted 話題が尽きない。We never run out of things to talk about. 次ぐ (つぐ): to come after, to follow 社長に次ぐ役職に就いた。He took a position second only to the president. 着ける (つける): to wear, to put on (e.g., accessories, seatbelt) シートベルトを着けてください。Please fasten your seatbelt. 点ける (つける): to turn on (a light, fire, etc.) 電気を点ける。Turn on the light. 浸ける (つける): to soak, to immerse 野菜を水に浸けておく。Soak the vegetables in water. 尽くす (つくす): to devote, to serve 彼女は家族のために尽くした。She devoted herself to her family. 付け加える (つけくわえる): to add (information, comments) 説明に一言付け加える。Add a word to the explanation. 努める (つとめる): to strive, to make an effort 問題の解決に努める。Strive to solve the problem. 包み (つつみ): package, bundle, parcel 小さな包みが届いた。A small parcel arrived. 勤め (つとめ): work, duty 彼は銀行勤めをしている。He works at a bank. 続き (つづき): continuation 続きは来週放送される。The continuation will be broadcast next week. 突っ込む (つっこむ): to thrust into, to dive into, to interfere ポケットに手を突っ込む。Stick one’s hand into the pocket. 205 SHOW CONTENTS 務める (つとめる): to serve (a role), to act as 司会を務める。Serve as the host. 勤める (つとめる): to work for (a company, organization) 彼は市役所に勤めている。He works at the city office. 務め (つとめ): duty, task, role 一日も早く務めに戻りたい。I want to return to work as soon as possible. 綱 (つな): rope, cable 綱を引く。Pull the rope. 詰める (つめる): to stuff, to pack, to shorten スーツケースに服を詰める。Pack clothes into a suitcase. 積もる (つもる): to accumulate (e.g., snow, dust, emotions) 雪が積もる。Snow accumulates. 強み (つよみ): strength, forte チームの強みを生かす。Leverage the team’s strengths. 常に (つねに): always, constantly 常に笑顔を忘れない。Always keep a smile. 強まる (つよまる): to become stronger, to intensify 風が強まってきた。The wind has strengthened. 艶 (つや): gloss, luster, shine 髪に艶がある。The hair is glossy. 繋がり (つながり): connection, link, relationship 人との繋がりを大切にする。Value human connections. 摘む (つむ): to pick, to pluck 花を摘む。Pick flowers. 蔓 (つる): vine, creeper 蔓が壁を伝って伸びている。Vines are climbing the wall. 常々 (つねづね): always, habitually 常々思っていたことがある。There’s something I’ve always thought. 釣り (つり): fishing, change (money) 川で釣りをする。Go fishing in the river. 詰まる (つまる): to be blocked, to be packed 鼻が詰まっている。My nose is stuffed. 積み重ねる (つみかさねる): to pile up, to accumulate 経験を積み重ねる。Accumulate experience. 繋げる (つなげる): to connect, to link 希望を未来へと繋げる。Connect hope to the future. 吊る (つる): to hang, to suspend ランプを天井から吊る。Hang a lamp from the ceiling. 連れ (つれ): companion, company 友達連れで来る。Come with friends. 206 SHOW CONTENTS 程度 (ていど): degree, extent, level 英語は日常会話程度なら話せます。I can speak English to the extent of daily conversation. 定年 (ていねん): retirement age 彼は来年定年を迎える。He will reach retirement age next year. 出入り (でいり): going in and out, access 会社の出入りが自由だ。Entry and exit at the company are unrestricted. 手入れ (ていれ): maintenance, care 庭の手入れをする。Take care of the garden. 敵 (てき): enemy, opponent 彼は強力な敵だ。He is a formidable opponent. 出来上がる (できあがる): to be completed, to be finished 料理が出来上がった。The food is ready. 適度 (てきど): moderate, appropriate 適度な運動は健康に良い。Moderate exercise is good for health. 凸凹 (でこぼこ): unevenness, roughness 道が凸凹している。The road is bumpy. 出来事 (できごと): incident, event 昨日は驚くべき出来事があった。There was a surprising event yesterday. 鉄道 (てつどう): railway, railroad 日本の鉄道は時間に正確だ。Japanese railways are punctual. デジタル: digital デジタル機器を使いこなす。Master digital devices. 手配 (てはい): arrangement, preparation 飛行機のチケットを手配した。I arranged the plane tickets. 鉄 (てつ): iron (metal) 鉄は磁石に引き寄せられる。Iron is attracted to magnets. 手数料 (てすうりょう): handling fee, commission 銀行で手数料がかかる。There is a handling fee at the bank. 手作り (てづくり): handmade 手作りのクッキーをプレゼントした。I gave handmade cookies as a gift. 出迎え (でむかえ): meeting someone (at the airport, station, etc.) 空港まで出迎えに行った。I went to meet them at the airport. 手続き (てつづき): procedure, process 入学の手続きを行う。Go through the admission procedures. 手帳 (てちょう): notebook, planner 予定を手帳に書いておく。Write the schedule in the planner. 恨む (うらむ): to resent, to hold a grudge 彼を恨んでいるわけではない。It’s not that I hold a grudge against him. 梅 (うめ): plum 梅の花が咲き始めた。Plum blossoms have started to bloom. 207 SHOW CONTENTS 手前 (てまえ): this side, one\u0026rsquo;s standpoint 手前の席に座ってください。Please sit at the seat on this side. 手元 (てもと): at hand, one\u0026rsquo;s possession 財布が手元にない。I don’t have my wallet with me. 天井 (てんじょう): ceiling 天井にシミができている。There’s a stain on the ceiling. 電圧 (でんあつ): voltage この装置は高い電圧を必要とする。This device requires high voltage. 点数 (てんすう): score, grade テストの点数が良かった。I got a good score on the test. 電子レンジ (でんしレンジ): microwave oven 夕食を電子レンジで温めた。I heated up dinner in the microwave. 天候 (てんこう): weather (condition) 天候に恵まれた旅行だった。It was a trip blessed with good weather. 電源 (でんげん): power source パソコンの電源を切った。I turned off the computer’s power. 電球 (でんきゅう): light bulb 電球が切れたので交換した。The light bulb burned out, so I replaced it. 転職 (てんしょく): job change 彼は最近転職した。He recently changed jobs. 伝染 (でんせん): infection, contagion 風邪が伝染した。The cold spread. 転校 (てんこう): school transfer 彼は父親の転勤で転校した。He transferred schools because of his father’s job. 電線 (でんせん): electric wire 電線に鳥が止まっている。A bird is perched on the electric wire. テンポ: tempo 音楽のテンポが速い。The music has a fast tempo. 伝達 (でんたつ): transmission, communication 指示を正確に伝達する。Communicate the instructions accurately. 添付 (てんぷ): attachment (e.g., email) ファイルをメールに添付した。I attached the file to the email. 問い合わせる (といあわせる): to inquire 詳細は事務所に問い合わせてください。Please inquire at the office for details. 電池 (でんち): battery リモコンの電池を交換した。I changed the remote control’s batteries. 電卓 (でんたく): calculator 電卓で計算する。Do the calculation on a calculator. 売り手 (うりて): seller 売り手と買い手の交渉が続いている。Negotiations between the seller and buyer are ongoing. 208 SHOW CONTENTS 低下 (ていか): decline, deterioration 成績が低下してしまった。My grades have declined. 定価 (ていか): fixed price この商品は定価で販売されています。This item is sold at the fixed price. 提供 (ていきょう): offer, supply 食料を被災地に提供した。They supplied food to the disaster area. 的確 (てきかく): precise, accurate 的確なアドバイスをもらった。I received accurate advice. 抵抗 (ていこう): resistance 彼は最後まで抵抗した。He resisted until the end. 適する (てきする): to be suitable この仕事に適する人材を探している。We\u0026rsquo;re looking for someone suitable for this job. 手入れ (ていれ): maintenance, care 庭の手入れをする。Take care of the garden. 定休日 (ていきゅうび): regular holiday (e.g. store closure day) この店は水曜日が定休日です。This shop is regularly closed on Wednesdays. 停止 (ていし): stop, suspension 電車が急に停止した。The train suddenly stopped. 手軽 (てがる): easy, convenient 手軽に作れる料理です。This is an easy-to-make dish. 適用 (てきよう): application (of a rule or law) この規則は学生にも適用される。This rule also applies to students. 適切 (てきせつ): appropriate, proper 適切な判断を下した。He made an appropriate decision. 手首 (てくび): wrist 手首を捻ってしまった。I twisted my wrist. 手品 (てじな): magic trick 彼は手品が得意だ。He\u0026rsquo;s good at magic tricks. 徹底的 (てっていてき): thorough, complete 徹底的に掃除した。I cleaned thoroughly. 手触り (てざわり): texture, feel by hand この布の手触りが良い。This fabric feels good to the touch. 鉄橋 (てっきょう): railway bridge 電車が鉄橋を渡っている。The train is crossing the railway bridge. 埋める (うめる): to bury, to fill in 穴を土で埋める。Fill the hole with soil. 売り切れる (うりきれる): to be sold out チケットがすぐに売り切れた。The tickets sold out quickly. 裏口 (うらぐち): back door 裏口から入ってください。Please enter through the back door. 209 SHOW CONTENTS 哲学 (てつがく): philosophy 哲学を専攻しています。I\u0026rsquo;m majoring in philosophy. 手抜き (てぬき): cutting corners, negligence 手抜き工事が問題になった。Cutting corners in construction became an issue. 手拭い (てぬぐい): traditional Japanese hand towel 祭りで手拭いをもらった。I received a tenugui at the festival. 手間 (てま): effort, time, labor 手間がかかる料理です。This dish takes a lot of effort. 転回 (てんかい): rotation, turning 車が交差点で転回した。The car made a U-turn at the intersection. 照らす (てらす): to illuminate, to shine on 月が道を照らしていた。The moon was illuminating the path. 鉄砲 (てっぽう): gun 昔の鉄砲を展示している。They are displaying old firearms. 照り返す (てりかえす): to reflect (sunlight or heat) アスファルトが日差しを照り返す。The asphalt reflects the sunlight. 照る (てる): to shine 明日は太陽が照るでしょう。The sun will shine tomorrow. 転換 (てんかん): conversion, shift キャリアの転換を考えている。I\u0026rsquo;m thinking about a career change. 手本 (てほん): model, example 先生がお手本を見せてくれた。The teacher showed us an example. 展開 (てんかい): development, unfolding 物語の展開が速い。The story develops quickly. 伝記 (でんき): biography 有名な科学者の伝記を読んだ。I read the biography of a famous scientist. 点々 (てんてん): here and there, scattered points 血が点々と床に落ちていた。Blood was scattered on the floor. 典型的 (てんけいてき): typical, representative これは典型的な例です。This is a typical example. 電柱 (でんちゅう): utility pole 電柱にカラスが止まっている。A crow is sitting on the utility pole. 電力 (でんりょく): electric power 電力の消費が増えている。Electricity consumption is increasing. 伝言 (でんごん): message (verbal or written) 彼に伝言をお願いします。Please leave him a message. 天皇 (てんのう): Emperor of Japan 天皇の即位式が行われた。The Emperor’s enthronement ceremony was held. 問う (とう): to ask, to inquire 意見を問われた。I was asked for my opinion. 210 SHOW CONTENTS 餌 (えさ): bait, feed 鳥に餌をやる。Feed the birds. 転勤 (てんきん): job transfer (to another location) 来月、大阪に転勤する。I\u0026rsquo;m being transferred to Osaka next month. 電波 (でんぱ): radio wave, signal この部屋は電波が届きにくい。The signal is weak in this room. 転々 (てんてん): moving from place to place 彼は転々と職を変えてきた。He has changed jobs frequently. 同居 (どうきょ): living together 両親と同居している。I live with my parents. 統一 (とういつ): unification, uniformity ヨーロッパの統一通貨はユーロだ。The unified currency of Europe is the Euro. 当時 (とうじ): at that time 当時はまだスマートフォンがなかった。Smartphones didn’t exist back then. 峠 (とうげ): mountain pass, climax 峠を越えると村が見える。You\u0026rsquo;ll see the village after crossing the pass. 同期 (どうき): same period (e.g., of joining a company or school) 彼は入社の同期です。He joined the company the same year as I did. 同格 (どうかく): same rank or status 二人は同格の実力者だ。The two are evenly matched in ability. 動機 (どうき): motive, reason 犯行の動機が不明だ。The motive for the crime is unknown. 同一 (どういつ): identical, same これは同一人物の犯行だ。This is the act of the same person. どうしても: by all means, no matter what どうしても行きたい。I absolutely want to go. どうにか: somehow, one way or another どうにか間に合った。I made it in time somehow. 道徳 (どうとく): morals, ethics 子供に道徳を教える。Teach children moral values. 灯台 (とうだい): lighthouse 灯台が海を照らしている。The lighthouse is shining over the sea. 得る (える／うる): to obtain, to gain 資格を得る。Obtain a qualification. 潤い (うるおい): moisture, richness (of life) 肌に潤いを与える。Provide moisture to the skin. 売れ行き (うれゆき): sales, how well something sells この商品の売れ行きは好調だ。This product is selling well. 栄養 (えいよう): nutrition 栄養バランスの良い食事が大切だ。A nutritionally balanced diet is important. 211 SHOW CONTENTS 応対 (おうたい): dealing with (people), receiving (a caller) 来客の応対をする。Handle the visitor. 援助 (えんじょ): assistance, support 被災地に援助を送る。Send aid to the disaster area. 円形 (えんけい): circular shape 円形のテーブルを買った。I bought a round table. 宴会 (えんかい): banquet, party 忘年会として宴会が開かれた。A party was held as a year-end gathering. 往復 (おうふく): round trip 東京への往復切符を買った。I bought a round-trip ticket to Tokyo. 追う (おう): to chase, to follow 犬が猫を追っている。The dog is chasing the cat. 沿岸 (えんがん): coast, along the shore 沿岸地域に津波警報が出た。A tsunami warning was issued for coastal areas. 欧米 (おうべい): Europe and America 欧米の文化に興味がある。I\u0026rsquo;m interested in Western culture. 王子 (おうじ): prince 王子は馬に乗って現れた。The prince appeared on horseback. 横断 (おうだん): crossing 横断歩道を渡る。Cross at the crosswalk. 応募 (おうぼ): application, subscription アルバイトに応募した。I applied for a part-time job. 覆う (おおう): to cover 雲が空を覆っている。Clouds are covering the sky. 大家 (おおや): landlord, landlady 大家に家賃を払う。Pay rent to the landlord. 大型 (おおがた): large size 大型台風が接近している。A large typhoon is approaching. 大売り出し (おおうりだし): big sale スーパーで大売り出しがある。There\u0026rsquo;s a big sale at the supermarket. 大いに (おおいに): very, greatly 大いに楽しんだ。I enjoyed it very much. 応用 (おうよう): application, practical use 応用力を試される問題だ。It’s a question that tests your ability to apply knowledge. 犯す (おかす): to commit (a crime or mistake) 法を犯す。Break the law. お代わり (おかわり): second helping, refill ご飯をお代わりする。Have another helping of rice. お辞儀 (おじぎ): bow 丁寧にお辞儀をする。Bow politely. 212 SHOW CONTENTS 投書 (とうしょ): letter to the editor, contribution 新聞に投書を送った。I sent a letter to the newspaper. 等分 (とうぶん): equal parts ケーキを五人で等分する。Divide the cake equally among five people. 透明 (とうめい): transparent, clear 透明なガラス。Clear glass. 当然 (とうぜん): natural, of course 当然の結果だ。It’s a natural outcome. 逃避 (とうひ): escape, evasion 現実から逃避する。Escape from reality. 当番 (とうばん): being on duty 今日の掃除当番は私です。I\u0026rsquo;m on cleaning duty today. 投票 (とうひょう): voting 選挙で投票する。Vote in an election. 導入 (どうにゅう): introduction, implementation 新しいシステムを導入する。Introduce a new system. 灯油 (とうゆ): kerosene ストーブに灯油を入れる。Fill the heater with kerosene. 退かす (どかす): to move (something) out of the way 邪魔な荷物を退かす。Move the obstructive baggage. 梳く (すく): to comb (hair) 髪を梳く。Comb your hair. 童謡 (どうよう): children\u0026rsquo;s song 昔の童謡を歌う。Sing an old nursery rhyme. 特定 (とくてい): specific, particular 特定の条件が必要だ。Specific conditions are required. 読書 (どくしょ): reading (books) 休日は読書をして過ごす。I spend my day off reading. 同様 (どうよう): similar, same 彼も私と同様に驚いた。He was as surprised as I was. 童話 (どうわ): fairy tale 有名な童話を読む。Read a famous fairy tale. 特産 (とくさん): specialty product (of a region) 北海道の特産品。Specialty products of Hokkaido. 特殊 (とくしゅ): special, unique, exceptional 特殊な技術が必要だ。Special skills are required. 東洋 (とうよう): the East, Asia 東洋の文化を学ぶ。Study Eastern culture 独自 (どくじ): original, unique 独自のアイデア。A unique idea. 213 SHOW CONTENTS 独立 (どくりつ): independence; becoming independent 大学卒業後、彼は独立して会社を設立した。After graduating from university, he became independent and founded his own company. 特売 (とくばい): special sale; bargain offer スーパーで今週末、野菜の特売をしている。The supermarket is holding a special sale on vegetables this weekend. 退ける (しりぞける): to repel; to push aside; to reject 彼は恐怖を退けて山に登った。He pushed aside his fear and climbed the mountain. 溶け込む (とけこむ): to melt into; to blend in; to fit in 新入社員はすぐにチームに溶け込んだ。The new employee quickly fit into the team. 整う (ととのう): to be arranged; to be in order; to be ready 会場の準備がすべて整った。All the preparations for the venue are complete. 所々 (ところどころ): here and there; in various places 古い地図は所々破れている。The old map is torn in places. 届け (とどけ): report; notification; delivery (noun) 事故の届けを警察に提出した。I submitted the accident report to the police. 遂げる (とげる): to accomplish; to achieve 彼は多くの困難を乗り越えて目標を遂げた。He overcame many difficulties and achieved his goal. 特有 (とくゆう): characteristic of; peculiar to この花は日本特有の品種だ。This flower is a variety peculiar to Japan. 年月 (ねんげつ): years; passage of time 年月の経過を感じるのは不思議だ。It’s strange to feel the passage of years. 図書 (としょ): books; library materials 図書館で必要な図書を借りた。I borrowed the books I needed from the library. 床間 (とこま): alcove (in a traditional Japanese room) 床間には季節の飾りが置かれている。Seasonal decorations are placed in the alcove. 戸棚 (とだな): cupboard; cabinet 食器は戸棚の中にきれいに並んでいる。The dishes are neatly arranged in the cupboard. 止まる (とまる): to stop; to come to a halt; to stay overnight バスは次の停留所で止まる。The bus will stop at the next stop. 共に (ともに): together; jointly; both 彼女と共にプロジェクトを進めた。I advanced the project together with her. トラブル: trouble; problem; glitch サーバーにトラブルが発生した。A problem occurred on the server. 取り上げる (とりあげる): to take up; to pick up; to address (an issue) そのテーマを次回の会議で取り上げよう。Let’s address that theme at the next meeting. 取り入れる (とりいれる): to incorporate; to adopt; to introduce 会社は新しい技術を積極的に取り入れている。The company is actively adopting new technologies. 跳ぶ (とぶ): to jump; to leap 子供たちが元気に縄跳びを跳んでいる。The children are energetically jumping rope. 飛ばす (とばす): to let fly; to skip over; to make something fly 彼は石を川の向こう岸まで飛ばした。He skipped a stone all the way across the river. 214 SHOW CONTENTS 捕える (とらえる): to capture; to seize; to grasp 警察は犯人を現場で捕えた。The police captured the criminal at the scene. 取り替え (とりかえ): exchange; replacement 古い電球を新しいものに取り替えた。I replaced the old light bulb with a new one. 徒歩 (とほ): on foot; walking 駅から会社までは徒歩10分です。It\u0026rsquo;s a 10-minute walk from the station to the office. 飛び越える (とびこえる): to jump over; to leap across 子供がフェンスを飛び越えた。The child jumped over the fence. 取り掛かる (とりかかる): to begin; to set about そろそろ宿題に取り掛かろう。It’s about time to get started on the homework. 取り付ける (とりつける): to install; to attach 壁に棚を取り付けた。I installed a shelf on the wall. 取り戻す (とりもどす): to take back; to recover 失った自信を取り戻したい。I want to regain the confidence I lost. 取り締まり (とりしまり): crackdown; regulation; control 警察は交通違反の取り締まりを強化した。The police strengthened the crackdown on traffic violations. 採る (とる): to pick (flowers, fruits); to adopt (a method); to recruit 山でキノコを採った。I picked mushrooms in the mountains. 取り込む (とりこむ): to take in; to absorb; to get busy with 洗濯物を取り込むのを忘れた。I forgot to bring in the laundry. 長続き (ながつづき): lasting long; endurance この趣味はなかなか長続きしている。This hobby has lasted quite a while. 内定 (ないてい): unofficial job offer; tentative decision 第一志望の会社から内定をもらった。I received a job offer from my first-choice company. 内線 (ないせん): extension (phone); internal line 担当者に内線でつないでもらえますか？Can you connect me to the person in charge via extension? 長引く (ながびく): to be prolonged; to drag on 会議が予想以上に長引いた。The meeting dragged on longer than expected. 内部 (ないぶ): inside; interior; internal 機械の内部をチェックする必要がある。We need to check the inside of the machine. 奥 (おく): interior; inner part; deep place 棚の奥に古い本があった。There was an old book deep inside the shelf. 押さえる (おさえる): to hold down; to suppress; to control 傷口をハンカチで押さえた。I pressed a handkerchief against the wound. 惜しい (おしい): regrettable; almost (but not quite); precious あと一歩で優勝だったのに惜しい！So close to winning — what a shame! お札 (おさつ): paper money; bill 財布には千円のお札しかなかった。There were only 1000-yen bills in the wallet. 置き忘れる (おきわすれる): to leave behind; to forget (something) 電車に傘を置き忘れた。I left my umbrella on the train. 215 SHOW CONTENTS 半ば (なかば): halfway; middle; partly 工事はまだ半ばしか終わっていない。The construction is only halfway done. 眺め (ながめ): view; scene このホテルの部屋からの眺めは最高だ。The view from this hotel room is amazing. 亡くす (なくす): to lose someone (through death) 彼は事故で両親を亡くした。He lost his parents in an accident. 何分 (なにぶん): please; some; anyhow (often used to ask for a favor or express a reason) 何分よろしくお願いします。Please take care of it (I kindly ask your favor). 謎々 (なぞなぞ): riddle; puzzle 子供たちは謎々を出し合って遊んでいた。The children were having fun giving each other riddles. 慰める (なぐさめる): to console; to comfort 彼は友人を慰めるためにそばにいた。He stayed close to comfort his friend. 悩ます (なやます): to trouble; to torment; to harass 頭痛に悩まされている。I’ve been troubled by headaches. 成し遂げる (なしとげる): to accomplish; to achieve 彼は長年の夢を成し遂げた。He accomplished his lifelong dream. 並み (なみ): average; ordinary; like; equal to 彼の記憶力はプロ並みだ。His memory is on par with a professional. 為す / 成す (なす): to do; to accomplish; to establish (formal/literary) 彼は社会に貢献する仕事を成している。He is doing work that contributes to society. 倣う (ならう): to imitate; to follow; to emulate 先輩のやり方に倣って進めた。I proceeded by following my senior\u0026rsquo;s method. 斜め (ななめ): diagonal; slanted; tilted その絵は少し斜めに掛かっている。That picture is hanging a bit crooked. 鳴らす (ならす): to ring; to sound; to make something ring 彼はベルを鳴らして注意を引いた。He rang the bell to get attention. 南極 (なんきょく): Antarctica; South Pole 彼は南極への探検に参加した。He took part in an expedition to Antarctica. 並木 (なみき): tree-lined street; row of trees 並木道を歩くのは気持ちがいい。Walking along the tree-lined street feels great. 成り立つ (なりたつ): to consist of; to be made up of; to be viable この組織はボランティアによって成り立っている。This organization is made up of volunteers. 成る (なる): to become; to turn into 春になると桜が咲く。When it becomes spring, the cherry blossoms bloom. 何にも (なにも): (with negative) nothing at all; (casual) everything (when positive, rare) 何にも心配はいらないよ。You don’t need to worry about anything at all. 生る (なる): to bear fruit; to grow (used for plants) 庭の木にりんごが生った。The tree in the yard bore apples. 216 SHOW CONTENTS なんとも: (not) at all; really; quite (used with negative or emphatic expressions) その映画にはなんとも言えない魅力がある。That movie has an indescribable charm. 縄 (なわ): rope 荷物を縄でしっかりと縛った。I tied the luggage securely with a rope. 軟弱 (なんじゃく): weak; soft; feeble 彼は軟弱な性格だとよく言われる。He is often said to have a weak personality. 馴れる (なれる): to get used to; to become familiar with 新しい環境にもだいぶ馴れた。I’ve gotten pretty used to the new environment. 南北 (なんぼく): north and south この道は南北に延びている。This road runs north to south. 難問 (なんもん): difficult question; tough problem テストに難問が出て困った。There was a tough question on the test, and it troubled me. 濁る (にごる): to become muddy or cloudy; to become impure 川の水が雨で濁っている。The river water is muddy from the rain. 鈍い (にぶい): dull; slow; blunt このナイフは鈍くて切れない。This knife is too dull to cut. 憎らしい (にくらしい): hateful; detestable; annoying (sometimes used affectionately) あの子は時々憎らしいほど正直だ。That child is annoyingly honest sometimes. 認識 (にんしき): recognition; understanding; awareness 彼はその危険性を十分に認識している。He is fully aware of the danger. 虹 (にじ): rainbow 雨上がりの空に虹がかかっていた。A rainbow appeared in the sky after the rain. 煮える (にえる): to boil; to be cooked 肉が柔らかく煮えてきた。The meat is boiling and becoming tender. 逃げ出す (にげだす): to run away; to escape 動物が檻から逃げ出した。The animal escaped from the cage. 日光 (にっこう): sunlight 日光を浴びると気分が明るくなる。Sunlight brightens the mood. 入社 (にゅうしゃ): joining a company ４月に新入社員が入社する。New employees join the company in April. 日中 (にっちゅう): during the day 日中は暑いので外出を避けた。I avoided going out during the hot day. 抜き出す (ぬきだす): to extract; to select; to pull out 重要な部分だけを抜き出して読む。I read only the important parts that were extracted. 逃がす (にがす): to let escape; to set free 魚を逃がしてやった。I released the fish. 抜かす (ぬかす): to leave out; to skip; (slang) to say 彼は大事な話を抜かしてしまった。He left out an important point in the story. 遅れる (おくれる): to be late; to be delayed 電車が事故で遅れた。The train was delayed due to an accident. 217 SHOW CONTENTS 憎む (にくむ): to hate; to detest 彼は裏切った友人を憎んでいる。He hates the friend who betrayed him. ねじ: screw この棚のねじが緩んでいる。The screw on this shelf is loose. 値引き (ねびき): discount; price reduction セール中なので全商品が値引きされている。All items are discounted during the sale. 値下げ (ねさげ): price cut; markdown 家電製品が大幅に値下げされた。Electronics were significantly marked down. 熱中 (ねっちゅう): enthusiasm; being absorbed in 彼はゲームに熱中している。He is absorbed in video games. 値下がり (ねさがり): price drop ガソリンの値下がりが続いている。Gasoline prices keep dropping. 拭う (ぬぐう): to wipe; to brush off (e.g., sweat or tears) 彼女は涙を拭った。She wiped away her tears. 熱する (ねっする): to heat; to get excited フライパンをよく熱してから使ってください。Please heat the frying pan well before using it. 狙い (ねらい): aim; target; purpose 彼の狙いは最初から優勝だった。His goal from the beginning was to win. 捩る (ねじる): to twist; to wring 足首を捩ってしまった。I twisted my ankle. 盗み (ぬすみ): theft; stealing 店で盗みが発生した。There was a theft at the store. 年配 (ねんぱい): elderly; older age 年配の方には席を譲りましょう。Let’s give our seats to the elderly. 寝かす (ねかす): to put to bed; to lay down 赤ちゃんを寝かせるのに苦労した。It was hard to put the baby to sleep. 値上げ (ねあげ): price increase 電気料金が値上げされる。Electricity rates will be increased. 濡らす (ぬらす): to wet; to moisten 雨で服を濡らしてしまった。I got my clothes wet in the rain. 念のために (ねんのために): just in case; for assurance 念のためにもう一度確認してください。Please double-check just in case. 幼い (おさない): very young; childish 幼い子どもが母親の手を握って歩いていた。A very young child was walking while holding their mother\u0026rsquo;s hand. お喋り (おしゃべり): chattering; talkative (also used as a noun for \u0026ldquo;chat\u0026rdquo;) 彼女はとてもお喋りで、いつも話が止まらない。She is very talkative and never stops chatting. 奢る (おごる): to treat someone (to a meal, etc.); to be extravagant 昨日は先輩が昼ご飯を奢ってくれた。Yesterday, my senior treated me to lunch. 大人しい (おとなしい): quiet; gentle; obedient 彼は大人しい性格で、あまり自己主張しない。He has a quiet personality and doesn\u0026rsquo;t assert himself much. 218 SHOW CONTENTS 音色 (ねいろ): tone color; timbre バイオリンの音色が美しかった。The tone of the violin was beautiful. 狙う (ねらう): to aim at; to target 彼は次の大会で優勝を狙っている。He is aiming to win the next tournament. 値上がり (ねあがり): price increase 野菜の値上がりが家計に影響している。The rise in vegetable prices is affecting household finances. 年度 (ねんど): fiscal year; academic year 新年度の予算が決定された。The budget for the new fiscal year has been decided. 燃料 (ねんりょう): fuel この機械はガソリンを燃料として使う。This machine uses gasoline as fuel. 農薬 (のうやく): agricultural chemicals; pesticide 無農薬の野菜を買う人が増えている。More people are buying pesticide-free vegetables. 覗く (のぞく): to peek; to look into 彼は部屋の中をそっと覗いた。He quietly peeked into the room. 望み (のぞみ): hope; wish 彼は医者になるという望みを捨てなかった。He never gave up his hope of becoming a doctor. 濃度 (のうど): concentration; density 水の中の塩の濃度を測った。We measured the salt concentration in the water. 軒 (のき): eaves (of a house); counter for houses 雨が軒から落ちてくる。Rain is falling from the eaves. 除く (のぞく): to remove; to exclude 日曜を除いて毎日働いている。I work every day except Sundays. 糊 (のり): glue; starch この紙には強い糊が使われている。Strong glue is used on this paper. 鬼 (おに): demon; ogre 昔話にはよく鬼が登場する。Demons often appear in Japanese folktales. お年玉 (おとしだま): New Year\u0026rsquo;s monetary gift 子どもたちはお正月にお年玉をもらう。Children receive money as a New Year’s gift. お互いに (おたがいに): mutually; each other お互いに助け合うことが大切だ。It’s important to help each other. 汚染 (おせん): pollution; contamination 工場の排水が川を汚染している。Factory wastewater is polluting the river. 落ち着く (おちつく): to calm down; to settle 試験の前に落ち着いて深呼吸した。I took a deep breath to calm down before the exam. 穏やか (おだやか): calm; gentle; mild 今日は風もなく穏やかな天気だ。Today is calm and windless. 恐る (おそれる): to fear; to be afraid of 彼は失敗を恐れて何もしなかった。He was afraid of failure and did nothing. 驚かす (おどろかす): to surprise; to frighten 突然の音に驚かされた。I was startled by the sudden sound. 219 SHOW CONTENTS 梅雨 (つゆ): rainy season 梅雨の時期は湿気が多くて蒸し暑い。The rainy season is humid and hot. 延べ (のべ): total; cumulative (usually used with a number) 延べ1000人以上のボランティアが参加した。More than 1,000 volunteers participated in total. 乗り切る (のりきる): to get through; to overcome この困難を乗り切るためにはみんなの協力が必要だ。We need everyone\u0026rsquo;s cooperation to get through this difficulty. 拝借 (はいしゃく): to borrow (humble) 先生に資料を拝借しました。I borrowed the materials from the teacher. 廃止 (はいし): abolition; discontinuation 古い法律が廃止され、新しい法律が施行された。The old law was abolished, and the new law was enacted. 俳句 (はいく): haiku (a form of Japanese poetry) 俳句は5-7-5の音節で構成される。A haiku consists of 5-7-5 syllables. 乗り越える (のりこえる): to overcome; to get over (e.g., obstacles) 彼は多くの困難を乗り越えて成功した。He overcame many difficulties and succeeded. 乗り越し (のりこし): overshooting; passing beyond a station (in train travel) 乗り越し料金を払わなければならない。I need to pay an overshoot fee. 排除 (はいじょ): exclusion; removal 不正行為はすぐに排除する必要がある。Misconduct needs to be removed immediately. 乗り込む (のりこむ): to board; to get on (e.g., a vehicle, ship) 彼は電車に乗り込む前に急いで切符を買った。He hurriedly bought a ticket before boarding the train. 売買 (ばいばい): buying and selling; trade その市場では売買が活発に行われている。Trading is lively in that market. 生える (はえる): to grow (e.g., plants, hair) 草が庭に生えてきた。Grass has started to grow in the garden. 配慮 (はいりょ): consideration; care 彼女はいつも他人の気持ちに配慮して行動する。She always acts with consideration for others\u0026rsquo; feelings. 墓参り (はかまいり): visiting a grave 毎年お盆に墓参りをする。I visit the grave every year during Obon. 賠償 (ばいしょう): compensation (for damages, injury, etc.) 事故の賠償を請求した。I claimed compensation for the accident. 配達 (はいたつ): delivery 明日、荷物の配達がある予定だ。There is a delivery scheduled for tomorrow. 排水 (はいすい): drainage この地域では排水設備が整っている。The drainage system is well-established in this area. 剥がす (はがす): to peel off; to strip 壁紙が剥がれそうだ。The wallpaper looks like it’s going to peel off. お盆 (おぼん): Obon (a Buddhist holiday to honor the spirits of ancestors) お盆の期間中に家族が集まる。The family gathers during Obon. 表通り (おもてどおり): main street; front street 表通りは人が多くて賑やかだ。The main street is crowded and lively. 220 SHOW CONTENTS 破壊 (はかい): destruction; damage 地震によって多くの建物が破壊された。Many buildings were destroyed by the earthquake. 墓 (はか): grave; tomb 祖父の墓を毎年訪れている。I visit my grandfather\u0026rsquo;s grave every year. 剥がれる (はがれる): to peel off; to come off 壁紙が古くなって、剥がれ始めた。The wallpaper has become old and started to peel off. 図る (はかる): to plan; to attempt; to measure 成功するために慎重に図った戦略があった。There was a carefully planned strategy for success. 歯車 (はぐるま): gear; cog 歯車がうまく噛み合うと、機械はスムーズに動く。When the gears mesh properly, the machine runs smoothly. 爆発 (ばくはつ): explosion 大きな爆発音が聞こえた。A loud explosion was heard. 莫大 (ばくだい): enormous; vast そのプロジェクトには莫大な資金が必要だ。The project requires enormous funds. 励ます (はげます): to encourage; to cheer up 彼は困難な時期に私を励ましてくれた。He encouraged me during a difficult time. 爆弾 (ばくだん): bomb 警察は爆弾の処理を行った。The police handled the bomb disposal. 爆発的 (ばくはつてき): explosive; explosive-like 彼の人気は爆発的に広がった。His popularity spread explosively. 励み (はげみ): encouragement; motivation あなたの言葉が大きな励みになった。Your words were a great source of motivation. 派遣 (はけん): dispatch; sending (usually of personnel) 会社は専門家を派遣して問題を解決した。The company sent experts to resolve the issue. 運び (はこび): carrying; transport 重い荷物を運び続けるのは大変だ。It’s tough to keep carrying heavy luggage. 挟む (はさむ): to insert; to sandwich; to pinch 本を机に挟んで開いた。I placed the book on the desk and opened it. 迫力 (はくりょく): force; power; impact その映画にはすごい迫力があった。The movie had tremendous impact. 破産 (はさん): bankruptcy 会社は数年前に破産した。The company went bankrupt a few years ago. 梯子 (はしご): ladder 屋根に登るために梯子を使った。I used a ladder to climb onto the roof. 果たして (はたして): really; as expected 果たして彼の予想通りだった。As expected, it was just as he predicted. 思わず (おもわず): involuntarily; unintentionally 思わず笑ってしまった。I couldn’t help but laugh. 思い切る (おもいきる): to make up one\u0026rsquo;s mind; to give up; to resolve 大きな決断を思い切ってした。I made the big decision resolutely. 221 SHOW CONTENTS パジャマ: pajamas 夜はお気に入りのパジャマを着て寝る。I wear my favorite pajamas to sleep at night. 肌着 (はだぎ): underwear; undershirt 冬は肌着を着ると暖かい。Wearing an undershirt keeps you warm in winter. 果たす (はたす): to accomplish; to fulfill 約束を必ず果たします。I will definitely fulfill my promise. 働き者 (はたらきもの): hard worker 彼は本当に働き者だ。He is truly a hard worker. 鉢 (はち): bowl; flowerpot この花は小さな鉢に植えられている。This flower is planted in a small pot. 発言 (はつげん): remark; statement 会議での発言は控えめに。Please keep your remarks in the meeting modest. 発揮 (はっき): demonstration; display (e.g., of ability) 実力を発揮するチャンスだ。This is a chance to show your true ability. 発射 (はっしゃ): launch; firing (e.g., of a missile) ロケットが発射された。The rocket was launched. 発電 (はつでん): power generation このダムは水力で発電している。This dam generates electricity through hydropower. 発行 (はっこう): publication; issue (of documents) 新しいパスポートが発行された。A new passport has been issued. 跳ねる (はねる): to jump; to bounce 子供たちは元気に跳ねて遊んでいる。The children are happily jumping around. ばったり: unexpectedly; with a thud 友達にばったり会った。I ran into a friend unexpectedly. 発生 (はっせい): occurrence; outbreak 台風による被害が発生した。Damage occurred due to the typhoon. 破片 (はへん): fragment; splinter ガラスの破片に気をつけて。Watch out for glass fragments. 離れ (はなれ): detached; separated (room or place) 母屋から離れた小屋で寝泊まりしている。I stay in a small detached hut away from the main house. 放れる (はなれる): to get free from; to leave 犬がリードから放れた。The dog got free from its leash. 羽 (はね/は): feather; wing 鳥の羽が風に舞っている。The bird’s feathers are fluttering in the wind. 払い戻す (はらいもどす): to refund; to reimburse チケット代を払い戻してもらった。I was refunded the ticket cost. 思える (おもえる): to seem; to appear 彼の言葉は本気のように思える。His words seem sincere. 下ろす (おろす): to lower; to unload; to withdraw (money) 銀行からお金を下ろした。I withdrew money from the bank. 222 SHOW CONTENTS 浜辺 (はまべ): beach, seashore 休日には浜辺を散歩するのが好きだ。I like to take walks on the beach during holidays. 払い込む (はらいこむ): to pay in, to deposit 授業料を銀行に払い込んだ。I deposited the tuition fee into the bank. 流行る (はやる): to be popular, to be in fashion この歌は若者の間で流行っている。This song is popular among young people. 針金 (はりがね): wire 針金で柵を作った。I made a fence using wire. 早くとも (はやくとも): at the earliest 彼が戻るのは早くとも明日の朝だ。He won\u0026rsquo;t be back until tomorrow morning at the earliest. 張り切る (はりきる): to be full of enthusiasm 新しい仕事に張り切っている。He is full of enthusiasm for his new job. 判決 (はんけつ): judicial decision, verdict 裁判所が無罪の判決を下した。The court handed down a not-guilty verdict. 犯行 (はんこう): crime, offense 犯行の動機はまだ不明だ。The motive for the crime is still unknown. 反省 (はんせい): reflection, reconsideration 自分の行動を反省する。I reflect on my actions. 繁栄 (はんえい): prosperity 国の繁栄は国民の努力による。The country\u0026rsquo;s prosperity is due to the efforts of its people. 反映 (はんえい): reflection (of light, status), influence 結果は努力の反映である。The result reflects the effort made. 反する (はんする): to be contrary to, to violate 彼の行動は規則に反している。His actions violate the rules. 繁殖 (はんしょく): breeding, reproduction この湖では多くの魚が繁殖している。Many fish breed in this lake. 判子 (はんこ): seal (used for stamping documents) 契約書には判子が必要だ。A seal is required on the contract. 判事 (はんじ): judge 判事が冷静に判決を下した。The judge gave a calm verdict. 判定 (はんてい): judgment, decision 試合の結果は審判の判定で決まった。The outcome of the match was decided by the referee’s judgment. 思い出 (おもいで): memory, recollection 学生時代の思い出は今でも鮮明だ。Memories of my student days are still vivid. 親指 (おやゆび): thumb 親指を怪我してしまった。I injured my thumb. 降りる (おりる): to get off (a vehicle), to go down 次の駅で電車を降りる。I get off the train at the next station. お詫び (おわび): apology ご迷惑をおかけして、お詫び申し上げます。I sincerely apologize for the trouble caused. 223 SHOW CONTENTS 半島 (はんとう): peninsula イタリアは地中海に突き出た半島だ。Italy is a peninsula that juts out into the Mediterranean Sea. 万能 (ばんのう): all-purpose, versatile 彼は万能選手として知られている。He is known as a versatile player. 販売 (はんばい): sale, selling 新商品は来週から販売される。The new product will go on sale next week. 引き止める (ひきとめる): to detain, to hold back 友人が帰ろうとするのを引き止めた。I held my friend back when they were about to leave. 卑怯 (ひきょう): cowardice, unfairness 卑怯な手を使うのは許せない。I can\u0026rsquo;t forgive the use of cowardly tactics. 被害 (ひがい): damage, harm 台風による被害が大きかった。The damage from the typhoon was severe. 引き上げる (ひきあげる): to pull up, to raise 政府は消費税を引き上げる予定だ。The government plans to raise the consumption tax. 引き返す (ひきかえす): to turn back, to go back 雨が降ってきたので途中で引き返した。It started raining, so I turned back halfway. 引き下げる (ひきさげる): to reduce, to lower 価格を引き下げることで売上が伸びた。Sales increased after lowering the price. 引き出す (ひきだす): to withdraw (money), to draw out 銀行からお金を引き出した。I withdrew money from the bank. 引き続き (ひきつづき): continuously, subsequently 引き続きご支援をお願いします。Please continue to support us. 引き分け (ひきわけ): tie, draw (in a game) 試合は引き分けに終わった。The match ended in a draw. 非行 (ひこう): delinquency, misconduct 非行に走る若者が増えている。The number of delinquent youths is increasing. 悲劇 (ひげき): tragedy 彼の死は悲劇だった。His death was a tragedy. 飛行 (ひこう): flight, flying 飛行機が定刻通りに飛行した。The plane flew on schedule. 蚊 (か): mosquito 夏の夜は蚊に刺されやすい。You’re likely to get bitten by mosquitoes on summer nights. 回数券 (かいすうけん): coupon ticket, multiple-use ticket 電車用の回数券を買った。I bought a coupon ticket for the train. 却って (かえって): on the contrary, rather 手伝ったつもりが却って迷惑だった。I meant to help, but it turned out to be a nuisance instead. 家屋 (かおく): house, building 地震で多くの家屋が倒壊した。Many houses collapsed due to the earthquake. 関わる (かかわる): to be involved in, to affect そのプロジェクトには関わっていない。I’m not involved in that project. 224 SHOW CONTENTS 日頃 (ひごろ): usually, habitually 日頃からの努力が大切だ。Daily effort is important. 引っ込む (ひっこむ): to draw back, to retreat 恥ずかしくて部屋に引っ込んだ。I was embarrassed and retreated to my room. 筆記 (ひっき): writing, taking notes 筆記試験の準備をしている。I\u0026rsquo;m preparing for a written exam. 引っ繰り返す (ひっくりかえす): to overturn, to flip over コップを引っ繰り返して水をこぼした。I knocked over the cup and spilled the water. 引っ掛かる (ひっかかる): to get caught, to be snagged 服が釘に引っ掛かった。My clothes got caught on a nail. 悲惨 (ひさん): tragic, miserable 戦争の悲惨な現実を知る。We learn about the tragic reality of war. 非常識 (ひじょうしき): lack of common sense, unreasonable そんな時間に電話するのは非常識だ。It’s unreasonable to call at such a time. 引っ繰り返る (ひっくりかえる): to be overturned, to fall over 強風で自転車が引っ繰り返った。The strong wind flipped over the bicycle. 引っ掛ける (ひっかける): to hook, to catch ハンガーに服を引っ掛けた。I hung the clothes on a hanger. 必需品 (ひつじゅひん): necessities, essentials 留学に必要な必需品を準備した。I prepared the necessities for studying abroad. 筆跡 (ひっせき): handwriting この手紙の筆跡は彼のものだ。This handwriting is his. 瞳 (ひとみ): pupil (of the eye), eye 彼女の澄んだ瞳が印象的だった。Her clear eyes were striking. 響 (ひびき): echo, sound, resonance 太鼓の響が遠くまで届いた。The drum’s echo reached far. 人込み (ひとごみ): crowd, throng of people 人込みを避けて裏道を通った。I took a back road to avoid the crowd. 一通り (ひととおり): roughly, briefly; ordinary 一通りの作業を終えた。I completed the basic tasks. 引っ張る (ひっぱる): to pull ロープを力強く引っ張った。I pulled the rope strongly. 日増しに (ひましに): day by day, increasingly 日増しに寒くなってきた。It’s getting colder day by day. 日の出 (ひので): sunrise 山の上で日の出を見た。I watched the sunrise from the mountain. 等しい (ひとしい): equal, equivalent 二つの量は等しい。The two amounts are equal. 架かる (かかる): to span, to be suspended (like a bridge) 川に橋が架かっている。A bridge spans the river. 225 SHOW CONTENTS 人通り (ひとどおり): pedestrian traffic, foot traffic この通りは人通りが多い。This street has heavy foot traffic. 否定 (ひてい): denial, negation 彼は自分の関与を否定した。He denied his involvement. 人目 (ひとめ): public gaze, other people’s eyes 人目を気にして行動する。Act while worrying about how others see you. 微妙 (びみょう): delicate, subtle, questionable その意見には微妙な違いがある。There’s a subtle difference in that opinion. 方言 (ほうげん): dialect 地元の方言で話している。They’re speaking in the local dialect. 方針 (ほうしん): policy, course of action 新しい経営方針が発表された。The new management policy was announced. 評価 (ひょうか): evaluation, assessment 彼の努力は高く評価された。His efforts were highly evaluated. 表紙 (ひょうし): cover (of a book or magazine) 雑誌の表紙に有名人が載っている。A celebrity is on the magazine cover. 方式 (ほうしき): method, system, formula 新しい教育方式が導入された。A new teaching method was introduced. 宝石 (ほうせき): gemstone, jewel 彼女は宝石をたくさん持っている。She owns many jewels. 百科事典 (ひゃっかじてん): encyclopedia 子供の頃、百科事典でよく調べた。I often used the encyclopedia as a child. 坊さん (ぼうさん): Buddhist monk 坊さんがお経を読んでいる。A monk is chanting sutras. 豊作 (ほうさく): good harvest 今年は米が豊作だ。We have a good rice harvest this year. 標準 (ひょうじゅん): standard, norm この製品は国際標準に合っている。This product meets international standards. 法則 (ほうそく): law, rule (scientific or natural) 万有引力の法則は有名だ。The law of universal gravitation is well-known. 放り出す (ほうりだす): to throw out, to abandon 宿題を放り出して遊んでいる。He abandoned his homework to play. 坊や (ぼうや): little boy 坊や、名前は何ていうの？Hey little boy, what’s your name? 放っておく (ほうっておく): to leave alone, to neglect 彼は仕事を放っておいた。He neglected his work. 包帯 (ほうたい): bandage けがをして包帯を巻いた。I got injured and wrapped it with a bandage. 膨大 (ぼうだい): enormous, vast 膨大なデータを処理する。Process an enormous amount of data. 226 SHOW CONTENTS 吠える (ほえる): to bark, to howl 犬が不審者に向かって吠えている。The dog is barking at the suspicious person. 暴力 (ぼうりょく): violence 暴力は決して許されない。Violence is never acceptable. 保管 (ほかん): storage, safekeeping 大事な書類を金庫に保管する。Store important documents in the safe. 方程式 (ほうていしき): equation この数学の問題は方程式で解ける。This math problem can be solved with an equation. 豊富 (ほうふ): abundant, plentiful 経験が豊富な先生に教わった。I was taught by an experienced teacher. 方々 (ほうぼう): various places, here and there 方々を旅行して回った。I traveled around to various places. 牧場 (ぼくじょう): ranch, farm 夏休みに牧場で乗馬を体験した。I tried horseback riding at a ranch during summer vacation. 保険 (ほけん): insurance 海外旅行には保険が必要だ。Insurance is necessary for overseas travel. 保健 (ほけん): health care, hygiene 学校で保健指導を受けた。We received health guidance at school. 牧畜 (ぼくちく): livestock farming この地域は牧畜が盛んだ。Livestock farming is active in this region. 保護 (ほご): protection, preservation 野生動物を保護する活動に参加した。I joined an activity to protect wild animals. 誇る (ほこる): to be proud of 彼は自分の実績を誇っている。He is proud of his achievements. 本質 (ほんしつ): essence, true nature 問題の本質を見極める必要がある。We need to identify the essence of the problem. 誇り (ほこり): pride 彼は自分の仕事に誇りを持っている。He takes pride in his work. 保障 (ほしょう): guarantee, security 生活を保障する制度が整っている。There is a system in place to guarantee livelihood. 保守的 (ほしゅてき): conservative 彼はかなり保守的な考えを持っている。He has rather conservative views. 本国 (ほんごく): one\u0026rsquo;s own country, home country 彼は本国に帰国した。He returned to his home country. 炎 (ほのお): flame, blaze 炎が天井まで上がった。The flames rose up to the ceiling. 母校 (ぼこう): alma mater 母校の同窓会に参加した。I attended a reunion at my alma mater. ほど (程): extent, degree, amount 彼ほど努力する人はいない。No one puts in as much effort as he does. 227 SHOW CONTENTS 濠 (ほり): moat 城の周りには深い濠がある。There is a deep moat around the castle. 盆地 (ぼんち): basin, valley この町は山に囲まれた盆地にある。This town is located in a basin surrounded by mountains. 本来 (ほんらい): originally, by nature 人間は本来協力し合う生き物だ。Humans are originally cooperative beings. 本格的 (ほんかくてき): full-scale, authentic 来月から本格的にプロジェクトが始まる。The project will begin in full scale next month. 本来ならば (ほんらいならば): under normal circumstances 本来ならば今日までに終わっているはずだった。It should have been completed by today under normal circumstances. 参る (まいる): to go/come (humble), to be defeated ご挨拶に参りました。I came to greet you. この暑さには参ったよ。I\u0026rsquo;m overwhelmed by this heat. 枚数 (まいすう): number of sheets コピーの枚数を確認してください。Please check the number of copies. 幕 (まく): curtain, act (of a play) 幕が上がって、芝居が始まった。The curtain rose and the play began. 負かす (まかす): to defeat 彼は相手チームを完全に負かした。He completely defeated the opposing team. 枕 (まくら): pillow この枕はとても寝心地がいい。This pillow is very comfortable. 誠に (まことに): truly, indeed (formal) ご来場いただき、誠にありがとうございます。Thank you very much for coming. 負け (まけ): loss, defeat 勝ちもあれば負けもある。There are wins and losses. 摩擦 (まさつ): friction 摩擦で熱が生じる。Friction generates heat. 混ざる (まざる): to mix, to be blended 色が混ざって新しい色ができた。The colors mixed and created a new one. 間近 (まぢか): close at hand, soon 試験日が間近に迫っている。The exam day is fast approaching. 香り (かおり): scent, fragrance 花の香りが部屋中に広がる。The fragrance of the flowers fills the room. 欠かす (かかす): to miss (doing something), to fail to do 毎朝の運動を欠かさない。I never miss my morning exercise. 替える (かえる): to replace, to exchange 古い電池を新しいのに替えた。I replaced the old battery with a new one. 価格 (かかく): price この商品の価格は手ごろだ。The price of this product is reasonable. 柿 (かき): persimmon 秋になると柿がたくさん実る。Persimmons bear fruit in the autumn. 228 SHOW CONTENTS 跨ぐ (またぐ): to straddle, to step over 子供が水たまりを跨いで歩いた。The child stepped over the puddle. 待ち合わせ (まちあわせ): meeting, appointment 駅の前で待ち合わせをした。We arranged to meet in front of the station. 増す (ます): to increase, to grow 台風が近づくにつれて風が増してきた。As the typhoon approached, the wind increased. 街角 (まちかど): street corner 街角で友達にばったり会った。I ran into a friend at the street corner. 待ち望む (まちのぞむ): to eagerly await 新作映画の公開を待ち望んでいる。I\u0026rsquo;m eagerly waiting for the new movie\u0026rsquo;s release. 招く (まねく): to invite, to cause パーティーに友達を招いた。I invited my friends to the party. 不注意が事故を招いた。Carelessness caused the accident. 真ん前 (まんまえ): right in front バス停は家の真ん前にある。The bus stop is right in front of the house. 稀 (まれ): rare, uncommon 彼のような才能は稀だ。A talent like his is rare. 見捨てる (みすてる): to abandon, to desert 困っている友人を見捨てることはできない。I can\u0026rsquo;t abandon a friend in trouble. 水っぽい (みずっぽい): watery, dilute このスープは少し水っぽい。This soup is a bit watery. 店屋 (みせや): shop 商店街には古い店屋が並んでいる。Old shops line the shopping street. 岬 (みさき): cape, promontory 岬からの眺めは素晴らしい。The view from the cape is fantastic. 自ら (みずから): oneself, personally 彼は自ら進んでその仕事を引き受けた。He personally volunteered for the job. 見合い (みあい): arranged meeting (esp. for marriage) 両親に勧められて見合いをした。I had an arranged marriage meeting at my parents\u0026rsquo; suggestion. 見覚え (みおぼえ): recognition (by sight) その顔には見覚えがある。That face looks familiar. 味方 (みかた): ally, supporter 私にはあなたという強い味方がいる。I have you as a strong ally. 限り (かぎり): limit, as long as できる限りのことをやった。I did everything I could. きり: only, just (with a sense of limitation) 一人きりで旅行した。I traveled all alone. 各駅停車 (かくえきていしゃ): local train (stopping at every station) 各駅停車は時間がかかる。Local trains take more time. 書き直す (かきなおす): to rewrite, to revise レポートを全部書き直した。I rewrote the entire report. 229 SHOW CONTENTS 見事 (みごと): splendid, admirable 彼の演技は見事だった。His performance was splendid. 三日月 (みかづき): crescent moon 夜空に三日月が浮かんでいた。A crescent moon floated in the night sky. 見出し (みだし): headline, heading 新聞の見出しが目を引いた。The newspaper headline caught my attention. 見違える (みちがえる): to not recognize due to change, to be amazed by the change 久しぶりに会った彼は見違えるほど成長していた。He had grown so much I could hardly recognize him. 道順 (みちじゅん): directions, route 会場までの道順を教えてください。Please tell me the directions to the venue. 満たす (みたす): to fill, to satisfy 水をコップに満たす。Fill the glass with water. 要求を満たす。To meet the requirements. 乱れる (みだれる): to be disordered, to get disturbed 台風で電車のダイヤが乱れた。The train schedule was disrupted by the typhoon. 満ちる (みちる): to be full, to rise (like tide), to mature 満月の夜、海は満ちていた。On the night of the full moon, the sea was high. 見抜く (みぬく): to see through, to detect 彼の嘘を見抜いた。I saw through his lie. 見積もり (みつもり): estimate 修理の見積もりをお願いした。I requested a repair estimate. 見慣れる (みなれる): to be familiar with seeing 見慣れた風景に安心する。I feel at ease with the familiar scenery. 峰 (みね): peak, ridge 富士山の峰が美しい。The peak of Mt. Fuji is beautiful. 実る (みのる): to bear fruit, to be successful 努力が実る。Efforts bear fruit. 蜜 (みつ): honey, nectar 花には蜜を求める虫が集まる。Insects gather around flowers seeking nectar. 道端 (みちばた): roadside 道端に小さな花が咲いていた。Small flowers were blooming by the roadside. 見本 (みほん): sample, example 商品の見本を見せてください。Please show me a sample of the product. 見回す (みまわす): to look around 周囲を見回して確認した。I looked around to confirm. 見守る (みまもる): to watch over, to keep an eye on 親は子供の成長を見守っている。Parents watch over their children’s growth. 見回る (みまわる): to patrol, to make rounds 警備員がビル内を見回っていた。The guard was patrolling inside the building. 嗅ぐ (かぐ): to sniff, to smell 花の香りを嗅いだ。I smelled the fragrance of the flowers. 230 SHOW CONTENTS 都 (みやこ): capital city 昔、この地は日本の都だった。This place used to be Japan’s capital. 未満 (みまん): less than, below 18歳未満は入場できません。People under 18 are not allowed to enter. 妙 (みょう): strange, mysterious, curious 彼の話には妙なところがある。There’s something strange about his story. 名字 (みょうじ): surname, family name 彼女の名字は「田中」です。Her surname is Tanaka. 民謡 (みんよう): folk song 民謡を通して地域の文化を学べる。You can learn local culture through folk songs. 無意義 (むいぎ): meaningless, pointless 無意義な争いは避けたい。I want to avoid pointless conflict. 民主 (みんしゅ): democracy 民主主義は国民の意見を重視する。Democracy values the opinions of the people. 見渡す (みわたす): to look out over, to gaze across 山の上から町全体を見渡せる。You can see the whole town from the top of the mountain. 無限 (むげん): infinite, limitless 宇宙の広がりは無限だ。The universe is infinite. 無意識 (むいしき): unconscious, involuntary 彼は無意識に笑っていた。He was smiling unconsciously. 無意味 (むいみ): meaningless その発言は無意味だ。That remark is meaningless. 無計画 (むけいかく): unplanned 無計画な旅行はトラブルが起きやすい。Unplanned trips are prone to trouble. 向ける (むける): to turn toward, to direct 子供に笑顔を向ける。I give a smile to the child. 無地 (むじ): plain (no pattern) 無地のシャツを着る。I wear a plain shirt. 無邪気 (むじゃき): innocent, naive 子供の無邪気な笑顔に癒される。I’m comforted by the innocent smile of a child. 無用 (むよう): useless, unnecessary 無用な心配はやめよう。Let’s stop unnecessary worrying. 虫歯 (むしば): cavity, decayed tooth 虫歯の治療を受けた。I had my cavity treated. 結び付ける (むすびつける): to link, to associate 過去の経験を成功に結び付ける。Connect past experiences to success. 掻く (かく): to scratch, to perspire (汗を掻く) 虫に刺されて腕を掻いた。I scratched my arm after being bitten by a bug. 覚悟 (かくご): readiness, resolution 全てを失う覚悟で挑んだ。I faced it prepared to lose everything. 231 SHOW CONTENTS 無神経 (むしんけい): insensitive, tactless 彼は人の気持ちに無神経だ。He is insensitive to others\u0026rsquo; feelings. 結び付く (むすびつく): to be connected, to be related 努力が成功に結び付いた。Effort led to success. 矛盾 (むじゅん): contradiction, inconsistency 彼の発言には矛盾がある。There is a contradiction in his statements. 無数 (むすう): countless, innumerable 夜空には無数の星が輝いている。Countless stars shine in the night sky. 無断 (むだん): without permission, unauthorized 無断で欠席してはいけない。You must not be absent without permission. 無理やり (むりやり): forcibly, against one\u0026rsquo;s will 彼は無理やり連れて行かれた。He was taken away by force. 芽 (め): bud, sprout 春になると木に芽が出る。Buds sprout on trees in spring. 目方 (めかた): weight この魚は目方で売られている。This fish is sold by weight. 名作 (めいさく): masterpiece この映画は時代を超えた名作だ。This movie is a timeless masterpiece. 群れ (むれ): group, herd, flock 鳥の群れが空を飛んでいる。A flock of birds is flying in the sky. 銘々 (めいめい): each person, individually 銘々が好きな料理を注文した。Each person ordered their favorite dish. 名産 (めいさん): local specialty 京都の名産は八つ橋だ。Yatsuhashi is a specialty of Kyoto. 明確 (めいかく): clear, definite 明確な目標を持つことが大切だ。It’s important to have a clear goal. 迷信 (めいしん): superstition それはただの迷信にすぎない。That’s nothing more than a superstition. 恵まれる (めぐまれる): to be blessed with, to be fortunate 彼は才能に恵まれている。He is blessed with talent. 巡り合う (めぐりあう): to meet by chance 彼女とは運命的に巡り合った。I met her by fate. 目指す (めざす): to aim for, to strive for 彼は医者を目指して勉強している。He is studying to become a doctor. 拡大 (かくだい): expansion, enlargement 事業を拡大する予定だ。We plan to expand the business. 角度 (かくど): angle, perspective この問題は違う角度から考える必要がある。This problem needs to be viewed from a different angle. 学長 (がくちょう): university president, chancellor 学長が卒業式でスピーチをした。The university president gave a speech at the graduation ceremony. ##　232\nSHOW CONTENTS 232 SHOW CONTENTS 巡る (めぐる): to go around, to concern (a topic) 世界遺産を巡る旅に出た。I went on a trip around world heritage sites. 目印 (めじるし): mark, sign, landmark 大きな木を目印にしてください。Use the big tree as a landmark. 目安 (めやす): standard, rough estimate 一日30分を目安に運動しましょう。Exercise about 30 minutes a day as a guideline. 目付き (めつき): look, expression in the eyes 彼の目付きが鋭かった。He had a sharp look in his eyes. 目覚める (めざめる): to wake up, to become aware 環境問題に目覚めた。I became aware of environmental issues. 目覚まし (めざまし): alarm clock 目覚ましを6時にセットした。I set the alarm clock for 6 o’clock. 滅多に (めったに): rarely, seldom 彼は滅多に外出しない。He rarely goes out. 目撃 (もくげき): witnessing, sighting 犯人を目撃した人がいる。Someone witnessed the suspect. 面積 (めんせき): area (of a surface) この公園の面積は広い。This park has a large area. 面子 (めんつ): face, honor, dignity 彼は面子を保とうとして必死だった。He was desperate to save face. 詣でる (もうでる): to visit (a shrine or temple) 毎年初詣に神社へ詣でる。I visit a shrine for the first prayer of the year. 申し訳 (もうしわけ): apology, excuse 遅れて申し訳ありません。I’m sorry for being late. 免税 (めんぜい): tax exemption, duty-free 空港で免税品を買った。I bought duty-free items at the airport. 綿密 (めんみつ): detailed, thorough 綿密な計画を立てた。We made a detailed plan. 毛布 (もうふ): blanket 夜は冷えるので毛布が必要だ。It gets cold at night, so a blanket is necessary. 黙認 (もくにん): tacit approval, overlooking 上司はその行動を黙認した。The boss tacitly approved that action. 目次 (もくじ): table of contents まず本の目次を確認しよう。Let’s check the table of contents first. 隠す (かくす): to hide, to conceal 彼は真実を隠そうとした。He tried to hide the truth. 学問 (がくもん): learning, scholarship 学問に励むことは大切だ。It\u0026rsquo;s important to devote oneself to learning. 拡張 (かくちょう): expansion, extension 新しい道路の拡張工事が始まった。The road expansion project has started. 233 SHOW CONTENTS 凭れる (もたれる): to lean against, to rely on; to have indigestion 壁にもたれて休んだ。I rested leaning against the wall. モダン: modern, stylish この部屋はモダンなデザインだ。This room has a modern design. 持ち込む (もちこむ): to bring in, to take into 飲食物の持ち込みは禁止されています。Bringing in food and drinks is prohibited. 持ち出す (もちだす): to take out, to carry out 書類を無断で持ち出してはいけない。You must not take out documents without permission. 持ち上げる (もちあげる): to lift, to raise 重い荷物を持ち上げるのは大変だ。Lifting heavy luggage is tough. 基づく (もとづく): to be based on 法律に基づいて判断する。Make decisions based on the law. 用いる (もちいる): to use, to employ 新しい技術を用いて製品を開発する。Develop products using new technology. 物語る (ものがたる): to tell, to indicate, to speak of 彼の表情が全てを物語っていた。His expression told the whole story. 物置 (ものおき): storage room, shed 古い家具を物置にしまった。I stored old furniture in the shed. 物差し (ものさし): ruler; measure, standard 物差しで長さを測る。Measure the length with a ruler. モノレール: monorail 空港までモノレールで行ける。You can go to the airport by monorail. 約 (やく): approximately, about 約100人が集まった。About 100 people gathered. 問答 (もんどう): dialogue, exchange of questions and answers 二人の激しい問答が続いた。A heated exchange between the two continued. 催し (もよおし): event, gathering 市民ホールで催しが開かれた。An event was held at the civic hall. 役者 (やくしゃ): actor, performer あの役者は演技が上手だ。That actor is a great performer. 訳 (わけ): reason, meaning, translation 遅れた訳を説明してください。Please explain the reason for your delay. 学力 (がくりょく): academic ability 彼は高い学力を持っている。He has strong academic ability. 架ける (かける): to build (a bridge), to suspend, to lay across 川に橋を架けた。A bridge was built over the river. 影 (かげ): shadow, silhouette 木の影で休んだ。I rested in the shade of a tree. 陰 (かげ): shade, shadow, hidden side, gloom 陰で支えてくれた人に感謝している。I’m grateful to the person who supported me behind the scenes. 234 SHOW CONTENTS 物忘れ (ものわすれ): forgetfulness 最近、物忘れがひどくなった。Lately, I\u0026rsquo;ve become very forgetful. 喧しい (やかましい): noisy, fussy, strict 工事の音が喧しくて眠れなかった。The construction noise was so loud I couldn’t sleep. 盛り上がる (もりあがる): to get excited, to swell, to rise パーティーが盛り上がってきた。The party is getting lively. 役職 (やくしょく): managerial position, post 彼は会社で高い役職についている。He holds a high position in the company. 夜行 (やこう): night travel, night train or bus 夜行バスで東京へ行った。I went to Tokyo by night bus. 宿 (やど): lodging, inn この宿は静かで快適だ。This inn is quiet and comfortable. 宿る (やどる): to stay at, to dwell, to be filled with (spirit/emotion) 木には神が宿ると信じられている。It is believed that gods dwell in trees. 薬品 (やくひん): chemicals, medicine 危険な薬品は厳重に保管する。Hazardous chemicals are stored securely. 敗れる (やぶれる): to be defeated, to lose 決勝戦で敗れた。We were defeated in the final match. 家主 (やぬし): landlord, house owner 家主に家賃を払う。Pay rent to the landlord. 矢印 (やじるし): arrow (symbol or sign) 矢印の方向に進んでください。Please go in the direction of the arrow. やむを得ず: unavoidably, reluctantly 雨でやむを得ず中止した。We had to cancel due to unavoidable rain. 安らか (やすらか): peaceful, calm 祖母は安らかに眠った。My grandmother passed away peacefully. やむを得ない: unavoidable, inevitable やむを得ない事情で参加できなかった。I couldn’t participate due to unavoidable circumstances. 有利 (ゆうり): advantageous, favorable 彼は経験がある分、有利だ。He’s at an advantage because he has experience. やり通す (やりとおす): to carry through, to complete 最後までやり通す覚悟がある。I’m determined to see it through to the end. 有意義 (ゆういぎ): meaningful, worthwhile 有意義な時間を過ごせた。I had a meaningful time. 友好 (ゆうこう): friendship, goodwill 両国の友好関係が深まった。The friendship between the two countries deepened. 隠れる (かくれる): to hide, to be concealed 雲に月が隠れた。The moon hid behind the clouds. 囲む (かこむ): to surround, to enclose 家族で食卓を囲んだ。We gathered around the dinner table as a family. 235 SHOW CONTENTS 悠々 (ゆうゆう): calm, unhurried, leisurely 試験に悠々と合格した。He passed the exam with ease. 唯一 (ゆいいつ): only, sole 彼は私の唯一の親友だ。He is my only close friend. やり遂げる (やりとげる): to accomplish, to carry through 難しい仕事をやり遂げた。I accomplished a difficult task. 有能 (ゆうのう): competent, capable 彼は有能なエンジニアだ。He is a capable engineer. 友情 (ゆうじょう): friendship 友情は時間と共に深まる。Friendship deepens over time. 郵送 (ゆうそう): mailing, sending by post 書類を郵送で送った。I sent the documents by mail. 行き先 (いきさき / ゆきさき): destination 行き先はまだ決まっていない。The destination is not decided yet. 優良 (ゆうりょう): excellent, superior 優良企業に就職した。He got a job at an excellent company. 湯気 (ゆげ): steam, vapor ラーメンの湯気が立っている。Steam is rising from the ramen. 輸血 (ゆけつ): blood transfusion 急いで輸血が必要だ。A blood transfusion is urgently needed. 行く先 (いくさき / ゆくさき): one\u0026rsquo;s way or future, destination 彼の行く先が心配だ。I\u0026rsquo;m worried about his future. 陽気 (ようき): cheerful, lively; pleasant weather 彼は陽気な性格だ。He has a cheerful personality. 油断 (ゆだん): negligence, carelessness 少しの油断が事故につながる。A little carelessness can lead to an accident. 輸送 (ゆそう): transportation 商品はトラックで輸送された。The goods were transported by truck. 譲る (ゆずる): to hand over, to yield 席を年配の人に譲った。I gave up my seat to an elderly person. 容易 (ようい): easy, simple 解決は容易ではない。The solution is not easy. 湯飲み (ゆのみ): teacup (for Japanese tea) 湯飲みでお茶を飲んだ。I drank tea from a teacup. 重なる (かさなる): to overlap, to pile up 約束が重なってしまった。Appointments overlapped. 重ねる (かさねる): to pile up, to repeat 努力を重ねて成功した。I succeeded through repeated efforts. 火山 (かざん): volcano 火山の近くに住むのは危険だ。It’s dangerous to live near a volcano. 236 SHOW CONTENTS 容器 (ようき): container, vessel 液体はこの容器に入れてください。Please put the liquid in this container. 茹でる (ゆでる): to boil (something in hot water) パスタを茹でる。Boil the pasta. 溶岩 (ようがん): lava 火山が噴火して溶岩が流れ出した。The volcano erupted and lava flowed out. 用件 (ようけん): business, matter, thing to be done 用件を簡潔に伝える。Convey the matter briefly. 用語 (ようご): terminology, term 専門用語は難しい。Technical terms are difficult. 様式 (ようしき): style, pattern, mode 西洋様式の建物だ。It’s a Western-style building. 要旨 (ようし): gist, summary 会議の要旨を報告する。Report the gist of the meeting. 容積 (ようせき): capacity, volume この箱の容積はどのくらいですか。What is the volume of this box? 用心 (ようじん): caution, care 火の用心を忘れずに。Don’t forget fire safety. 幼稚 (ようち): childish, immature そんな幼稚なことは言うな。Don’t say such childish things. 要素 (ようそ): element, component 成功の要素は努力と継続だ。The elements of success are effort and persistence. 要点 (ようてん): main point, gist 要点をまとめて説明する。Summarize and explain the main points. 用途 (ようと): use, purpose この道具の用途は何ですか。What is this tool used for? 用心深い (ようじんぶかい): cautious, careful 彼はとても用心深い人だ。He is a very cautious person. 要するに (ようするに): in short, to sum up 要するに、君の言いたいことは分かった。In short, I understand what you’re saying. 要は (ようは): the point is, in essence 要は時間が足りないということだ。The point is we’re short on time. 用品 (ようひん): supplies, equipment スポーツ用品を買いに行く。Go buy some sports equipment. 養分 (ようぶん): nutrients, nourishment 野菜には多くの養分が含まれている。Vegetables contain lots of nutrients. 余暇 (よか): leisure, free time 余暇を読書に使っている。I use my free time for reading. 要領 (ようりょう): knack, essentials, outline 要領よく仕事をこなす。Handle work efficiently. 237 SHOW CONTENTS 羊毛 (ようもう): wool 羊毛のセーターは暖かい。Wool sweaters are warm. 避ける (さける): to avoid (a situation or something undesirable) 危険な場所は避けた方がいい。You should avoid dangerous places. 寄越す (よこす): to send, to hand over (used in casual contexts) 手紙を寄越してくれた。He sent me a letter. 酔っ払う (よっぱらう): to get drunk 彼はすぐ酔っ払う。He gets drunk easily. 余所 (よそ): another place, somewhere else 余所で食事をした。I ate somewhere else. 予告 (よこく): advance notice, preview 映画の予告を見た。I watched the movie preview. 止す (よす): to stop, to cease 冗談は止せ。Cut the jokes. 予備 (よび): reserve, spare, backup 予備の電池を持っている。I have a spare battery. 予期 (よき): expectation, anticipation 予期しない出来事が起きた。Something unexpected happened. 予選 (よせん): preliminary round, qualifier チームは予選を通過した。The team passed the preliminaries. 預金 (よきん): deposit, savings 預金を引き出した。I withdrew my savings. 夜更かし (よふかし): staying up late 昨日は夜更かしした。I stayed up late last night. 呼び捨て (よびすて): calling someone without an honorific 彼を呼び捨てにするのは失礼だ。It’s rude to call him without honorifics. 呼び掛ける (よびかける): to call out to, to appeal 彼は助けを呼び掛けた。He called out for help. 余計 (よけい): unnecessary, excessive 余計な心配はするな。Don’t worry unnecessarily. 呼び止める (よびとめる): to call someone to stop 警官に呼び止められた。I was stopped by a police officer. 翌日 (よくじつ): the next day 翌日、旅行に出発した。We left for the trip the next day. 画質 (がしつ): image quality このカメラは画質がいい。This camera has good image quality. 箇所 (かしょ): place, point, part (used for specific locations or parts) 修理が必要な箇所がある。There are places that need repairs. 賢い (かしこい): wise, clever 彼女はとても賢い子だ。She is a very smart girl. 238 SHOW CONTENTS 呼び出す (よびだす): to summon, to call out 先生に職員室へ呼び出された。I was called to the staff room by the teacher. 避け (さけ): avoidance 衝突の避けが難しかった。Avoiding the collision was difficult. 余分 (よぶん): extra, surplus 余分な食料を持って行こう。Let’s bring some extra food. 弱々しい (よわよわしい): weak, frail 彼の声は弱々しかった。His voice was weak. 読み取る (よみとる): to read (between the lines), to interpret 表情から感情を読み取る。Read the emotions from the expression. 予防 (よぼう): prevention 風邪の予防には手洗いが大切だ。Handwashing is important for preventing colds. ラベル: label ボトルにラベルを貼る。Put a label on the bottle. 利害 (りがい): interests, advantages and disadvantages 両者の利害が一致した。Both parties\u0026rsquo; interests aligned. 来日 (らいにち): coming to Japan 来日中の大統領が会見した。The visiting president held a press conference. 理想 (りそう): ideal 彼は理想の上司だ。He is an ideal boss. 陸 (りく): land 船は陸に近づいた。The ship approached land. ラッシュ: rush (e.g., rush hour) 朝のラッシュは混雑している。The morning rush is crowded. ライバル: rival, competitor 彼とは良きライバルだ。He is a good rival of mine. 落第 (らくだい): failing (a course/test), repeating a year 試験に落第した。I failed the exam. 乱暴 (らんぼう): violence, roughness 乱暴な運転は危険だ。Reckless driving is dangerous. 陸地 (りくち): landmass, dry land 陸地が見えてきた。We could see land. リサイクル: recycling リサイクルは環境に良い。Recycling is good for the environment. 学科 (がっか): academic department, subject 法学は人気のある学科だ。Law is a popular subject. 片手 (かたて): one hand 片手でスマホを操作する。Operate the smartphone with one hand. 語る (かたる): to talk about, to tell 彼は夢を熱く語った。He passionately spoke about his dreams. 239 SHOW CONTENTS 利息 (りそく): interest (on money) 銀行に預けると利息がつく。You earn interest when you deposit money in the bank. リズム: rhythm この曲はリズムがいい。This song has a good rhythm. 略す (りゃくす): to abbreviate, to omit 「株式会社」を「(株)」と略す。\u0026ldquo;Kabushikigaisha\u0026rdquo; is abbreviated as \u0026ldquo;(株)\u0026rdquo;. 類似 (るいじ): resemblance, similarity 両者には多くの類似点がある。There are many similarities between the two. 了解 (りょうかい): understanding, consent 了解しました。Understood. 両替 (りょうがえ): money exchange 空港でドルを円に両替した。I exchanged dollars for yen at the airport. 流域 (りゅういき): river basin この流域は洪水の危険が高い。This river basin has a high risk of flooding. 冷静 (れいせい): calm, composed 彼は緊急時でも冷静だ。He stays calm even in emergencies. 漁師 (りょうし): fisherman 漁師たちは早朝から海に出た。The fishermen went out to sea early in the morning. 累計 (るいけい): total, cumulative 累計の売上が発表された。The cumulative sales figures were announced. レクリエーション: recreation レクリエーション活動に参加した。I participated in recreational activities. 領事館 (りょうじかん): consulate パスポートの更新は領事館で行う。You renew your passport at the consulate. レインコート: raincoat 雨の日にはレインコートが必要だ。You need a raincoat on rainy days. 片手 (かたて): one hand 赤ちゃんを片手で抱える。Hold the baby with one hand. 語る (かたる): to talk about, to speak of 彼女は自分の経験を語った。She talked about her experience. 稼ぐ (かせぐ): to earn (money) 彼は一ヶ月で100万円を稼いだ。He earned one million yen in a month. 方々 (かたがた): various places, everyone 日本の方々を旅行した。I traveled to various places in Japan. 学級 (がっきゅう): class, grade (in school) 学級委員に選ばれた。I was elected class representative. 固まる (かたまる): to harden, to solidify セメントが固まるのに時間がかかる。It takes time for the cement to harden. 各国 (かっこく): each country 各国の代表が集まった。Representatives from each country gathered. 240 SHOW CONTENTS 臨時 (りんじ): temporary, special 電車が臨時に運休した。The train was temporarily suspended. 良質 (りょうしつ): good quality 良質な素材を使っている。It uses good quality materials. 領収 (りょうしゅう): receipt (often part of 領収書: receipt document) 領収書をください。Please give me a receipt. 旅費 (りょひ): travel expenses 会社が旅費を負担する。The company will cover travel expenses. レジャー: leisure レジャー施設が充実している。Leisure facilities are well-equipped. 煉瓦 (れんが): brick 煉瓦造りの家に住んでいる。I live in a brick house. 連休 (れんきゅう): consecutive holidays ゴールデンウィークは連休だ。Golden Week is a series of consecutive holidays. 連合 (れんごう): union, alliance 労働者の連合が結成された。A workers\u0026rsquo; union was formed. 朗読 (ろうどく): reading aloud 詩を朗読するのが好きだ。I like reading poetry aloud. 蝋燭 (ろうそく): candle 停電で蝋燭を灯した。We lit candles during the blackout. 労働 (ろうどう): labor, work 労働条件が改善された。Working conditions have improved. レンズ: lens 望遠レンズを使って撮影した。I used a telephoto lens to take the picture. 浪費 (ろうひ): waste (esp. of money or time) 時間の浪費は避けたい。I want to avoid wasting time. レンタル: rental 車はレンタルしたものだ。The car is a rental. 老後 (ろうご): old age 老後の生活を考える。Think about life in old age. 連想 (れんそう): association (of ideas) この絵は夏を連想させる。This picture reminds me of summer. 連続 (れんぞく): succession, series 彼は連続三回優勝した。He won three times in a row. 録音 (ろくおん): audio recording 会議を録音しておいた。I recorded the meeting. 論争 (ろんそう): controversy, debate その問題は激しい論争を引き起こした。The issue sparked a fierce debate. かっこ悪い (かっこわるい): uncool, awkward 転んでかっこ悪かった。It was uncool when I fell. 241 SHOW CONTENTS 湧く (わく): to gush out, to spring up (e.g., water, emotions) 温泉から湧くお湯が熱い。Hot water springs up from the hot spring. 沸く (わく): to boil (water), to get excited お湯が沸いたら教えてください。Please tell me when the water boils. 脇 (わき): side, armpit 道の脇に花が咲いている。Flowers are blooming by the side of the road. 災い (わざわい): calamity, disaster 大雨は大きな災いをもたらした。The heavy rain caused a big disaster. ロケット: rocket 宇宙に向けてロケットが打ち上げられた。A rocket was launched into space. 若々しい (わかわかしい): youthful, fresh 彼は若々しいエネルギーを持っている。He has youthful energy. 沸かす (わかす): to boil (water), to heat お茶のためにお湯を沸かす。Boil water for tea. 侘び (わび): apology, loneliness, austerity (in art/culture) 彼は侘びの気持ちを込めて手紙を書いた。He wrote a letter expressing his apology. 綿 (わた): cotton 綿のシャツを買った。I bought a cotton shirt. 割り引く (わりびく): to discount, to reduce price 商品が10%割り引かれている。The product is discounted by 10%. 詫びる (わびる): to apologize 遅刻したことを詫びる。Apologize for being late. 割合 (わりあい): ratio, percentage, comparatively 若者の割合が増えている。The percentage of young people is increasing. 勝手 (かって): selfish, one\u0026rsquo;s own convenience 彼は勝手なことを言う。He says selfish things. 必ずしも (かならずしも): not necessarily (used with negative) 必ずしも成功するとは限らない。It doesn’t necessarily mean success. 加熱 (かねつ): heating, heating up 食品を加熱してから食べる。Heat the food before eating. 青白い (あおじろい): pale, pale-faced 彼女は青白い顔をしていた。She had a pale face. 扇ぐ (あおぐ): to fan (oneself or something) 扇子で顔を扇いだ。I fanned my face with a folding fan. 暁 (あかつき): dawn, daybreak 暁の空が美しい。The dawn sky is beautiful. 飽きっぽい (あきっぽい): easily bored, fickle 彼は飽きっぽい性格だ。He has an easily bored personality. 明け方 (あけがた): dawn, daybreak 明け方に散歩に出かけた。I went for a walk at dawn. 242 SHOW CONTENTS 店内 (てんない): inside a store 店内はとても賑やかだった。The inside of the store was very lively. 電流 (でんりゅう): electric current 電流が流れている。Electric current is flowing. 伝統 (でんとう): tradition この祭りは古い伝統に基づいている。This festival is based on an old tradition. 天然 (てんねん): natural, unprocessed これは天然のはちみつです。This is natural honey. 答案 (とうあん): exam paper, answer sheet 答案を提出した。I submitted my exam paper. 同行 (どうこう): accompaniment, going together 友達と同行した。I went along with a friend. 動作 (どうさ): movement, action 動作が遅い。The movement is slow. 同時に (どうじに): at the same time 二人は同時に話し始めた。They started talking at the same time. 同格 (どうかく): apposition, same rank or status 彼は教師であり、同格に作家でもある。He is a teacher and, likewise, a writer. 同時 (どうじ): simultaneous, concurrent 同時に発表が行われた。The presentations were held simultaneously. 登校 (とうこう): going to school 毎朝7時に登校する。I go to school every morning at 7. どうしても: by all means, no matter what どうしても行きたい。I want to go no matter what. 統計 (とうけい): statistics 統計によると、人口は増えている。According to statistics, the population is increasing. 当日 (とうじつ): the day in question, the day of the event 当日は雨が降った。It rained on the day. 同士 (どうし): comrades, mutual relationship 仲間同士で助け合う。Comrades help each other. 登場 (とうじょう): appearance (on stage/screen), entry 主人公が登場した。The main character appeared. 到着 (とうちゃく): arrival 電車が到着した。The train has arrived. 梳かす (とかす): to comb (hair) 髪を丁寧に梳かす。Comb the hair carefully. 道路 (どうろ): road, street 道路が混んでいる。The road is congested. 明くる (あくる): following (next) 明くる日、彼は帰国した。The following day, he returned to his country. 243 SHOW CONTENTS 盗難 (とうなん): theft, robbery 盗難に遭って財布をなくした。I was robbed and lost my wallet. 溶かす (とかす): to melt, to dissolve チョコレートを溶かしてケーキに使う。Melt the chocolate and use it in the cake. 透明 (とうめい): transparent, clear このガラスは透明だ。This glass is transparent. 通りかかる (とおりかかる): to happen to pass by 友達が通りかかった。A friend happened to pass by. 尖る (とがる): to be pointed, to be sharp 鉛筆の先が尖っている。The tip of the pencil is sharp. 通り抜ける (とおりぬける): to pass through 公園を通り抜ける。Pass through the park. 通り過ぎる (とおりすぎる): to pass by, to go past バス停を通り過ぎた。I passed by the bus stop. 独特 (どくとく): unique, distinctive 彼女には独特の話し方がある。She has a unique way of speaking. 解く (とく): to solve, to untie 問題を解くのに時間がかかった。It took time to solve the problem. 毒 (どく): poison, toxin このキノコには毒がある。This mushroom has poison. 得意 (とくい): good at, specialty 彼は数学が得意だ。He is good at math. 独身 (どくしん): single, unmarried 彼は独身だ。He is single. 特色 (とくしょく): characteristic, feature この町の特色は温泉だ。The town’s characteristic is its hot springs. 解ける (とける): to be solved, to come untied 謎が解けた。The mystery was solved. 得意先 (とくいさき): client, customer 得意先に商品を届けた。Delivered products to a client. 得点 (とくてん): score, points 試合で3得点した。Scored three points in the match. 特長 (とくちょう): feature, characteristic この車の特長は燃費の良さだ。This car’s feature is good fuel efficiency. 預かる (あずかる): to keep, to look after 荷物を預かってもらった。I had someone look after my luggage. 厚かましい (あつかましい): shameless, impudent 彼は厚かましい態度を取った。He behaved shamelessly. 悲しむ (かなしむ): to be sad, to grieve みんなが彼の死を悲しんだ。Everyone grieved his death. 244 SHOW CONTENTS 特徴 (とくちょう): characteristic, feature この商品の特徴は軽さだ。The feature of this product is its lightness. 溶く (とく): to dilute, to dissolve (e.g., paint, powder) 絵の具を水で溶く。Dilute the paint with water. 溶ける (とける): to melt, to dissolve アイスクリームが溶けている。The ice cream is melting. 届く (とどく): to reach, to be delivered 手紙が無事に届いた。The letter arrived safely. 登山 (とざん): mountain climbing 週末に登山に行く。I will go mountain climbing on the weekend. 年寄り (としより): old person, elderly 年寄りには優しく接するべきだ。You should be kind to elderly people. 突然 (とつぜん): suddenly, abruptly 突然雨が降り始めた。It suddenly started to rain. 年上 (としうえ): older (person) 彼は私より年上だ。He is older than me. 閉じる (とじる): to close (eyes, book, etc.) 本を閉じてください。Please close the book. 土地 (とち): land, plot of land この土地は農業に適している。This land is suitable for farming. 読解 (どっかい): reading comprehension 読解のテストが難しかった。The reading comprehension test was difficult. 整える (ととのえる): to arrange, to put in order 書類を整える。Arrange the documents. 年下 (としした): younger (person) 弟は私より年下だ。My younger brother is younger than me. 都内 (とない): within the Tokyo metropolitan area 都内に住んでいる。I live in Tokyo. 泊まり (とまり): stay overnight 友達の家に泊まりました。I stayed overnight at a friend’s house. 扉 (とびら): door, gate 扉を開けてください。Please open the door. 飛び出す (とびだす): to jump out, to rush out 子供が急に飛び出した。The child suddenly ran out. 預かる (あずかる): to keep, to look after 荷物を預かります。I will look after your luggage. 厚かましい (あつかましい): shameless, impudent 彼の厚かましい要求に驚いた。I was surprised by his shameless request. 悲しむ (かなしむ): to be sad, to grieve 家族は彼の死を悲しんだ。The family grieved his death. 245 SHOW CONTENTS 怒鳴る (どなる): to shout, to yell 先生は怒って怒鳴った。The teacher shouted angrily. ドライブ: drive (car trip) 週末にドライブに行く。I’m going on a drive this weekend. 飛び上がる (とびあがる): to jump up, to leap up 驚いて飛び上がった。I jumped up in surprise. トランク: trunk (car trunk or suitcase) 車のトランクに荷物を入れた。I put the luggage in the car trunk. 取り替える (とりかえる): to replace, to exchange 古い電池を新しいのに取り替えた。I replaced the old battery with a new one. 取り出す (とりだす): to take out, to withdraw 財布からお金を取り出した。I took money out of my wallet. 内科 (ないか): internal medicine (department) 風邪で内科に行った。I went to internal medicine for a cold. 取り消す (とりけす): to cancel, to revoke 予約を取り消した。I canceled the reservation. ドレッシング: dressing (salad dressing) サラダにドレッシングをかける。Put dressing on the salad. 内緒 (ないしょ): secret, confidential これは内緒にしておいて。Please keep this a secret. 尚 (なお): furthermore, in addition 尚、詳しい説明は後でします。Furthermore, I will explain in detail later. 黴 (かび): mold, mildew 湿気で壁に黴が生えた。Mold grew on the wall due to humidity. 被せる (かぶせる): to cover, to put something over 鍋に蓋を被せる。Cover the pot with a lid. 我慢強い (がまんづよい): patient, enduring 彼は我慢強い性格だ。He has a patient personality. 花粉症 (かふんしょう): hay fever, pollen allergy 春になると花粉症がひどくなる。My hay fever gets worse in spring. 髪型 (かみがた): hairstyle 新しい髪型に変えた。I changed to a new hairstyle. 噛む (かむ): to bite, to chew 食べ物をよく噛んで食べる。Chew your food well. 剃刀 (かみそり): razor 剃刀でひげを剃る。Shave the beard with a razor. 246 SHOW CONTENTS 仲間 (なかま): companion, comrade, colleague 彼はいい仲間に恵まれた。He was blessed with good companions. 治す (なおす): to heal, to cure, to fix 風邪を治すために薬を飲んだ。I took medicine to cure my cold. 仲良し (なかよし): good friends, close relationship 彼女たちは仲良しだ。They are good friends. 長年 (ながねん): many years, long time 長年の経験が役に立つ。Many years of experience are useful. 仲直り (なかなおり): reconciliation, making up ケンカしてもすぐに仲直りした。We quarreled but made up quickly. 流す (ながす): to let flow, to shed (tears, blood), to pour 涙を流す。To shed tears. 眺める (ながめる): to look at, to gaze at 海を眺めるのが好きだ。I like to gaze at the sea. 流れ (ながれ): flow, current, trend 川の流れが速い。The river’s flow is fast. 仲 (なか): relationship, relation, intimacy 二人の仲は良い。They have a good relationship. 中身 (なかみ): contents, interior バッグの中身を確認する。Check the contents of the bag. 流れる (ながれる): to flow, to stream 水が川を流れる。Water flows in the river. 無し (なし): without, none パン無しで食べる。Eat without bread. 泣き声 (なきごえ): cry, sob, wail 赤ちゃんの泣き声が聞こえる。I hear the baby’s cry. 撫でる (なでる): to stroke, to pat 犬の頭を撫でる。Stroke the dog’s head. 鳴き声 (なきごえ): animal cry, call, sound 鳥の鳴き声が聞こえる。I hear bird calls. 梨 (なし): pear 梨をおやつに食べた。I ate a pear as a snack. 泣き出す (なきだす): to burst into tears 子供が突然泣き出した。The child suddenly burst into tears. 茄子 (なす): eggplant 茄子の炒め物が美味しい。Stir-fried eggplant is delicious. 何事 (なにごと): what, something, anything 何事もなかった。Nothing happened. 株式会社 (かぶしきがいしゃ): joint-stock company, corporation, Ltd. 彼は株式会社で働いている。He works for a corporation. 247 SHOW CONTENTS 謎 (なぞ): mystery, puzzle この事件はまだ謎のままだ。This case is still a mystery. 懐かしい (なつかしい): nostalgic, dear, missed 子供の頃の友達が懐かしい。I miss my childhood friends. 納得 (なっとく): consent, agreement, understanding 彼の説明に納得した。I was convinced by his explanation. 生意気 (なまいき): impertinent, cheeky, arrogant 彼は生意気な態度をとった。He acted arrogantly. 怠ける (なまける): to be lazy, to neglect 仕事を怠けてはいけない。You must not be lazy at work. 何となく (なんとなく): somehow, for some reason 何となく気分が悪い。I feel unwell somehow. 苦手 (にがて): poor at, weak in, dislike 私は数学が苦手だ。I’m bad at math. 何とか (なんとか): somehow, anyhow 何とか問題を解決した。I managed to solve the problem somehow. 憎い (にくい): hateful, detestable 彼の嘘が憎い。I hate his lies. 波 (なみ): wave, ripple 海の波が高い。The sea waves are high. 悩み (なやみ): worry, trouble, distress 友達に悩みを相談した。I talked about my worries with a friend. 何と言っても (なんといっても): after all, no matter what is said 何と言っても健康が一番だ。After all, health is the most important. 偽物 (にせもの): fake, counterfeit 偽物の時計を買ってしまった。I bought a fake watch. 怠け者 (なまけもの): lazy person, idler 彼は怠け者だと言われた。He was called a lazy person. 悩む (なやむ): to be worried, to be troubled 将来のことで悩んでいる。I’m worried about the future 握る (にぎる): to grip, to grasp, to hold 手をしっかり握る。Hold the hand firmly. 日時 (にちじ): date and time 会議の日時を決める。Decide the date and time of the meeting. 似合う (にあう): to suit, to match その服は君に似合う。That outfit suits you. 何でも (なんでも): anything, whatever 何でも好きなものを食べていいよ。You can eat whatever you like. 日常 (にちじょう): everyday, daily life 日常の出来事を話す。Talk about daily life events. 248 SHOW CONTENTS 日課 (にっか): daily routine, daily task 毎朝のジョギングが日課だ。Jogging every morning is my daily routine. 日程 (にってい): schedule, itinerary 旅行の日程を確認する。Check the travel itinerary. 睨む (にらむ): to glare at, to stare at 彼は怒って私を睨んだ。He glared at me angrily. 入場 (にゅうじょう): admission, entrance 入場は午後3時からです。Admission starts at 3 PM. 縫う (ぬう): to sew, to stitch 服のほころびを縫う。Sew the tear in the clothes. 人参 (にんじん): carrot 人参をサラダに入れる。Put carrots in the salad. 入国 (にゅうこく): entry into a country 空港で入国手続きをする。Go through immigration at the airport. 煮る (にる): to boil, to simmer 野菜を煮てスープを作る。Boil vegetables to make soup. 日用品 (にちようひん): daily necessities スーパーで日用品を買う。Buy daily necessities at the supermarket. 二度と (にどと): never again 彼には二度と会いたくない。I never want to see him again. 人数 (にんずう): number of people パーティーの人数を教えてください。Please tell me the number of people for the party. 抜く (ぬく): to pull out, to extract 歯を抜く手術を受けた。I had a tooth extraction surgery. 鼠 (ねずみ): mouse, rat 家に鼠が出た。A mouse appeared in the house. 年間 (ねんかん): annual, yearly これは年間の収入だ。This is the annual income. 眠気 (ねむけ): sleepiness, drowsiness 授業中に眠気が来た。I felt sleepy during the class. カメラマン: cameraman, photographer カメラマンが写真を撮っている。The cameraman is taking pictures. 画面 (がめん): screen (computer, TV) 画面が暗くなった。The screen went dark. 痒い (かゆい): itchy 蚊に刺されて痒い。I was bitten by a mosquito and it itches. 柄 (がら): pattern, design, handle このシャツは花柄だ。This shirt has a floral pattern. 枯れる (かれる): to wither, to dry up 花が枯れてしまった。The flowers have withered. 249 SHOW CONTENTS 抜ける (ぬける): to come out, to fall out, to be missing 歯が抜けた。My tooth fell out. 布 (ぬの): cloth, fabric この布でカーテンを作る。Make curtains with this fabric. 眠たい (ねむたい): sleepy 昨夜は眠れなかったので眠たい。I\u0026rsquo;m sleepy because I couldn\u0026rsquo;t sleep last night. 眠れる (ねむれる): to be able to sleep 緊張していて眠れなかった。I was too nervous to sleep. 年中 (ねんじゅう): all year round, always 彼は年中忙しい。He’s busy all year round. 年代 (ねんだい): age, era, decade 昭和年代の音楽が好きだ。I like music from the Showa era. 農家 (のうか): farming family, farmer 彼の家は農家です。His family are farmers. 年々 (ねんねん): year by year 年々気温が上がっている。Temperatures are rising year by year. 年齢 (ねんれい): age 年齢を聞いてもいいですか？May I ask your age? 農業 (のうぎょう): agriculture 祖父は農業をしている。My grandfather is engaged in agriculture. 農村 (のうそん): farming village その映画は農村が舞台だ。The movie is set in a farming village. 農産物 (のうさんぶつ): agricultural products この市場では地元の農産物が売られている。Local agricultural products are sold at this market. 年末 (ねんまつ): year-end 年末のセールで買い物をした。I shopped during the year-end sale. 年頭 (ねんとう): beginning of the year 年頭の目標を立てる。Set goals at the beginning of the year. 農場 (のうじょう): farm 牛を育てている農場を見学した。I visited a farm where cows are raised. 農民 (のうみん): farmer, peasant 昔は多くの人が農民だった。Many people were farmers in the past. 能率 (のうりつ): efficiency 能率よく作業する。Work efficiently. 乗せる (のせる): to place on, to give a ride 荷物を車に乗せる。Load the luggage into the car. 刈る (かる): to cut, to mow 芝生を刈る。Mow the lawn. 空っぽ (からっぽ): empty 財布が空っぽだ。My wallet is empty. 250 SHOW CONTENTS 残す（のこす）: to leave behind, to save 食べ物を残さず食べましょう。Let’s eat without leaving food behind. 残らず（のこらず）: without exception, all 宿題を残らず終えた。I finished all of my homework. 望む（のぞむ）: to hope, to wish for 幸せな人生を望んでいる。I wish for a happy life. 乗り遅れる（のりおくれる）: to miss (a train, bus, etc.) 電車に乗り遅れた。I missed the train. 載る（のる）: to be placed on, to appear (in print, etc.) 新聞に記事が載った。The article appeared in the newspaper. 載せる（のせる）: to place on (top), to publish 荷物をトラックに載せる。Load the luggage onto the truck. 乗り過ごす（のりすごす）: to miss one’s stop 寝ていて駅を乗り過ごした。I missed my station because I fell asleep. 乗り越す（のりこす）: to ride past (one\u0026rsquo;s stop) 降りる駅を乗り越してしまった。I went past my stop. 伸ばす（のばす）: to extend, to stretch 手を伸ばして本を取る。Stretch out your hand to get the book. 伸びる（のびる）: to grow, to stretch 髪が伸びてきた。My hair has grown. 延ばす（のばす）: to postpone, to extend (time, deadline) 締め切りを延ばしてもらった。I had the deadline extended. 配送（はいそう）: delivery, distribution 商品は明日配送されます。The goods will be delivered tomorrow. 灰色（はいいろ）: gray 灰色のスーツを着ている。He’s wearing a gray suit. 述べる（のべる）: to state, to express 自分の意見を述べてください。Please state your opinion. 拝啓（はいけい）: Dear Sir/Madam (letter opening) 拝啓、秋の候、皆様お元気でしょうか。Dear Sir/Madam, I hope you are well this autumn season. 延びる（のびる）: to be extended (time, deadline) 会議が延びてしまった。The meeting was extended. 乾かす（かわかす）: to dry (something) 髪をドライヤーで乾かす。Dry your hair with a hairdryer. 考え直す（かんがえなおす）: to reconsider その提案を考え直す必要がある。We need to reconsider that proposal. 換気（かんき）: ventilation 換気のために窓を開ける。Open the window for ventilation. 間隔（かんかく）: interval, spacing 電車は5分間隔で来ます。The trains come at 5-minute intervals. 251 SHOW CONTENTS Here’s the explanation of your new list in the specified format:\n昇る (のぼる): to rise, to ascend (used for sun, smoke, etc.)\n太陽が東の空に昇った。The sun rose in the eastern sky. 蝿 (はえ): fly (the insect)\n台所に蝿がたくさんいて困っている。There are many flies in the kitchen and it\u0026rsquo;s a problem. 俳優 (はいゆう): actor, performer\n彼は有名な映画俳優だ。He is a famous movie actor. 入り込む (はいりこむ): to get into, to penetrate deeply\n猫が部屋に入り込んできた。A cat came into the room. 吐き気 (はきけ): nausea\n船に酔って吐き気がしてきた。I feel nauseous from seasickness. 図る (はかる): to plan, to attempt, to devise\n利益の最大化を図る必要がある。We need to aim for maximum profit. 馬鹿らしい (ばからしい): ridiculous, absurd\nそんな馬鹿らしい話を信じるの？Do you believe such a ridiculous story? 吐く (はく): to vomit, to breathe out, to say\n彼は気分が悪くて吐いてしまった。He felt sick and vomited. 秤 (はかり): scale (for measuring weight)\nこの秤で野菜の重さを量ります。I’ll measure the vegetables\u0026rsquo; weight with this scale. 白菜 (はくさい): Chinese cabbage\n冬は鍋に白菜が欠かせない。Chinese cabbage is essential for hot pot in winter. 挟む (はさむ): to pinch, to sandwich, to insert\nドアに指を挟んでしまった。I caught my finger in the door. 激しい (はげしい): intense, fierce, violent\n昨日は激しい雨が降った。There was heavy rain yesterday. 履き物 (はきもの): footwear\n玄関で履き物を脱いでください。Please take off your shoes at the entrance. 掃く (はく): to sweep, to brush\n毎朝、庭を掃いている。I sweep the garden every morning. パス: pass (e.g., in sports or permission)\nテストにパスできて安心した。I was relieved to pass the test. 初めは (はじめは): at first, in the beginning\n初めは不安だったが、慣れてきた。At first I was nervous, but I got used to it. 畑 (はたけ): field (for crops), farm\n畑で野菜を育てている。We grow vegetables in the field. 走り回る (はしりまわる): to run around\n子どもたちが庭で走り回っている。The children are running around in the yard. 額 (ひたい): forehead\n額に汗をかいている。There’s sweat on his forehead. 空ける (うつける): to empty, to vacate, to free up\n午後の予定を空けておいてください。Please keep your afternoon schedule open. 252 SHOW CONTENTS 外れる (はずれる): to come off, to be disconnected, to miss ボタンが外れてしまった。The button came off. 恥 (はじ): shame, embarrassment 人前で転んで恥をかいた。I felt embarrassed after falling in front of people. 初めに (はじめに): first of all, to begin with 初めに自己紹介をします。First, I’ll introduce myself. 端 (はし): edge, end, tip テーブルの端に座った。I sat at the edge of the table. 外す (はずす): to remove, to take off, to miss メガネを外して寝た。I took off my glasses before sleeping. 発表 (はっぴょう): announcement, presentation 明日、研究の発表があります。I have a research presentation tomorrow. バドミントン: badminton 週末に友達とバドミントンをした。I played badminton with my friends on the weekend. 肌 (はだ): skin 彼女の肌はとてもきれいだ。Her skin is very beautiful. パック: pack (face mask, package, etc.) 夜にパックをして肌の手入れをする。I use a face mask at night to take care of my skin. 旗 (はた): flag 運動会で赤い旗を持った。I held a red flag at the sports festival. 初詣 (はつもうで): first shrine visit of the New Year 家族と一緒に初詣に行った。I went to the first shrine visit of the year with my family. 罰金 (ばっきん): fine, penalty 駐車違反で罰金を払った。I paid a fine for illegal parking. 派手 (はで): flashy, showy 派手な服はあまり好きじゃない。I don’t really like flashy clothes. 発売 (はつばい): release, sale (of a product) 新しいスマホが今日発売された。The new smartphone was released today. 発明 (はつめい): invention 電球は偉大な発明の一つだ。The light bulb is one of the greatest inventions. 柱 (はしら): pillar, column この家は太い柱で支えられている。This house is supported by thick pillars. 裸 (はだか): naked, bare 赤ちゃんが裸で水遊びしている。The baby is playing in the water naked. パターン: pattern, type, model この問題にはいくつかのパターンがある。This problem has several patterns. 麻 (あさ): hemp, linen 夏は麻のシャツが涼しくていい。Linen shirts are nice and cool in summer. 憧れる (あこがれる): to long for, to admire 海外生活に憧れている。I long for life overseas. 253 SHOW CONTENTS 発車 (はっしゃ): departure (of a vehicle) 電車は5分後に発車します。The train will depart in five minutes. 放す (はなす): to release, to let go 犬のリードを放さないでください。Please don\u0026rsquo;t let go of the dog\u0026rsquo;s leash. 話し手 (はなして): speaker 話し手の意図を理解することが大切だ。It\u0026rsquo;s important to understand the speaker\u0026rsquo;s intention. 話し合う (はなしあう): to discuss, to talk over 問題についてよく話し合うべきだ。We should thoroughly discuss the issue. 話中 (はなしちゅう): busy (on the phone) 電話をかけたが、話中だった。I called, but the line was busy. 話しかける (はなしかける): to start a conversation, to speak to 知らない人に話しかけられた。A stranger spoke to me. 発見 (はっけん): discovery 新しい星が発見された。A new star was discovered. バック: back, backpack, backing 彼はバックを肩にかけていた。He had a backpack over his shoulder. 発想 (はっそう): idea, way of thinking 面白い発想ですね。That\u0026rsquo;s an interesting idea. 罰する (ばっする): to punish 法律に違反した者は罰せられる。Those who break the law will be punished. 発達 (はったつ): development, growth 科学技術は急速に発達している。Science and technology are developing rapidly. 早め (はやめ): early, ahead of time 早めに出発したほうがいい。It\u0026rsquo;s better to leave early. 幅 (はば): width, range この道路は幅が狭い。This road is narrow in width. 幅広い (はばひろい): wide, broad (used for things like knowledge, range, support, etc.) 彼は幅広い知識を持っている。He has a wide range of knowledge. 花火 (はなび): fireworks 夏祭りで花火を見た。I watched fireworks at the summer festival. 場面 (ばめん): scene, situation 感動的な場面で涙が出た。I cried at the touching scene. 離す (はなす): to separate, to let go 子どもの手を離さないでください。Don’t let go of the child’s hand. 鼻水 (はなみず): runny nose 風邪で鼻水が止まらない。I can’t stop my runny nose due to a cold. 歯ブラシ (はブラシ): toothbrush 新しい歯ブラシを買った。I bought a new toothbrush. 嵌める (はめる): to put on (a ring, gloves, etc.), to fit, to deceive 指に指輪を嵌めた。I put a ring on my finger. 254 SHOW CONTENTS 歯磨き (はみがき): tooth brushing, toothpaste 毎日寝る前に歯磨きをします。I brush my teeth every night before bed. 早める (はやめる): to hasten, to move forward (a schedule) 出発時間を早めた。We moved the departure time earlier. 半数 (はんすう): half the number 出席者の半数が学生だった。Half of the attendees were students. 速める (はやめる): to speed up, to accelerate 歩くスピードを速めた。I quickened my walking pace. バレーボール: volleyball バレーボール部に入っています。I\u0026rsquo;m in the volleyball club. 判断 (はんだん): judgment, decision 状況を見て判断してください。Please judge based on the situation. 針 (はり): needle, pin, clock hand 時計の針が12時を指している。The clock hand is pointing at 12. 腹 (はら): belly, stomach お腹が空いて腹が鳴った。My stomach growled from hunger. パワー: power, strength, energy チームにもっとパワーが必要だ。The team needs more power. 半額 (はんがく): half price この商品は今日だけ半額です。This item is half price today only. 範囲 (はんい): range, scope 問題は広い範囲にわたっている。The issue spans a wide range. 流行 (はやり/りゅうこう): fashion, trend, epidemic この服は今の流行だ。This clothing is trendy now. 万歳 (ばんざい): banzai (a cheer of celebration), hooray 試合に勝ってみんなで万歳した。We all shouted \u0026ldquo;banzai\u0026rdquo; after winning the game. 半月 (はんげつ/はんつき): half a month / half moon 半月ほど入院しました。I was hospitalized for about half a month. 払い戻す (はらいもどす): to refund, to pay back チケット代を払い戻してもらった。I got a refund for the ticket. 反抗 (はんこう): resistance, rebellion 思春期の子どもは親に反抗しがちだ。Teenagers tend to rebel against their parents. 半袖 (はんそで): short sleeves 夏は半袖のシャツを着ます。I wear short-sleeved shirts in summer. 犯罪 (はんざい): crime 犯罪を防ぐために警察が巡回している。The police are patrolling to prevent crime. 255 SHOW CONTENTS 半日 (はんにち): half a day 今日は半日だけ働いた。I only worked for half a day today. 被害者 (ひがいしゃ): victim 事故の被害者は3人だった。There were three victims in the accident. 半年 (はんとし): half a year 日本に来て半年が経った。It\u0026rsquo;s been half a year since I came to Japan. 日当たり (ひあたり): sunlight, exposure to the sun この部屋は日当たりが良い。This room gets good sunlight. バンドブック: band book (typically refers to a guide or handbook used by band members) 新入生はバンドブックをよく読んでください。New members should read the band book carefully. 比較 (ひかく): comparison 2つの製品を比較して選んだ。I chose after comparing the two products. ピーマン: green pepper 子どもはピーマンが苦手だ。Children often dislike green peppers. 日帰り (ひがえり): day trip 日帰りで温泉に行った。I went on a day trip to a hot spring. 比較的 (ひかくてき): comparatively, relatively この地域は比較的安全だ。This area is relatively safe. 引かれる (ひかれる): to be attracted to, to be drawn to 彼の優しさに引かれた。I was drawn to his kindness. 膝 (ひざ): knee 膝をケガして歩けない。I injured my knee and can\u0026rsquo;t walk. 東側 (ひがしがわ): east side 学校は公園の東側にある。The school is on the east side of the park. 引き受ける (ひきうける): to undertake, to take on (a task or responsibility) 新しいプロジェクトを引き受けた。I took on a new project. 引き起こす (ひきおこす): to cause, to bring about ストレスが病気を引き起こすことがある。Stress can cause illness. 日差し (ひざし): sunlight, rays of the sun 暖かい日差しが心地よい。The warm sunlight feels pleasant. 秘書 (ひしょ): secretary 社長の秘書が予定を調整した。The president’s secretary adjusted the schedule. 朝夕 (あさゆう): morning and evening 朝夕は冷えるので上着が必要です。It\u0026rsquo;s chilly in the morning and evening, so you need a jacket. 足跡 (あしあと): footprints, trace 雪の上に足跡が残っていた。There were footprints left in the snow. 味わう (あじわう): to taste, to savor, to appreciate ゆっくりと料理を味わった。I savored the meal slowly. 感じ (かんじ): feeling, impression この店は落ち着いた感じがする。This shop gives a calm impression. 256 SHOW CONTENTS 非常 (ひじょう): emergency; extraordinary, unusual 非常口はあちらです。The emergency exit is that way. 額 (ひたい): forehead 彼は額に汗をかいていた。He was sweating on his forehead. 左足 (ひだりあし): left leg 左足をケガしてしまった。I injured my left leg. 美術 (びじゅつ): art, fine arts 美術館で絵を見た。I saw paintings at the art museum. 左側 (ひだりがわ): left side 車は左側を通行してください。Please keep to the left side. 人出 (ひとで): crowd, turnout of people お祭りには多くの人出があった。There was a large crowd at the festival. 筆者 (ひっしゃ): author, writer (of an article or book) 筆者の意見に賛成です。I agree with the author\u0026rsquo;s opinion. 人手 (ひとで): manpower, hands 人手が足りなくて忙しい。We’re busy because we’re short on hands. 必死 (ひっし): desperate, frantic 必死に走ったが間に合わなかった。I ran desperately, but I didn’t make it. 日付 (ひづけ): date (on a calendar or document) 書類に日付を記入してください。Please fill in the date on the form. 一人一人 (ひとりひとり): each person, one by one 一人一人に手紙を配った。I handed out the letters one by one. 必要性 (ひつようせい): necessity, need 早急な対応の必要性がある。There is a need for prompt action. 一休み (ひとやすみ): a short rest ここで一休みしましょう。Let’s take a short break here. 一晩 (ひとばん): one night 一晩中雨が降っていた。It rained all night. 批判 (ひはん): criticism, judgment 彼の提案は多くの批判を受けた。His proposal received much criticism. 日にち (ひにち): date, number of days イベントの日にちが決まった。The event date has been set. 百貨店 (ひゃっかてん): department store 百貨店で洋服を買った。I bought clothes at the department store. 批評 (ひひょう): review, critique 映画の批評を読みました。I read a review of the movie. 元日 (がんじつ): New Year’s Day (January 1st) 元日は家族で過ごした。I spent New Year’s Day with my family. 関心 (かんしん): interest, concer 環境問題に関心がある。I’m interested in environmental issues. 257 SHOW CONTENTS 皮膚 (ひふ): skin この薬は皮膚に塗ってください。Apply this medicine to the skin. 冷やす (ひやす): to cool, to chill アイスで足を冷やした。I cooled my foot with ice. 日々 (ひび): every day, daily 日々の努力が大切だ。Daily effort is important. 秘密 (ひみつ): secret これは誰にも言わないで、秘密だよ。Don’t tell anyone—this is a secret. 紐 (ひも): string, cord 靴の紐がほどけている。Your shoelace is untied. 表情 (ひょうじょう): facial expression 彼の表情はとても嬉しそうだった。His expression looked very happy. 美容 (びよう): beauty (care), grooming 彼女は美容にとても気を使っている。She pays great attention to beauty care. 費用 (ひよう): cost, expense 旅行の費用はいくらかかりますか？How much does the trip cost? 表示 (ひょうじ): display, indication 電光掲示板に時刻が表示されている。The time is displayed on the electronic board. 昼寝 (ひるね): nap 昼寝をすると元気になる。A nap makes me feel refreshed. 美容院 (びよういん): beauty salon 美容院で髪を切ってもらった。I got a haircut at the beauty salon. 病室 (びょうしつ): hospital room 見舞いのために病室を訪れた。I visited the hospital room to see a patient. 表面 (ひょうめん): surface, exterior テーブルの表面を拭いてください。Please wipe the surface of the table. 表現 (ひょうげん): expression (verbal or written) 気持ちを言葉で表現するのは難しい。It’s hard to express feelings in words. 平等 (びょうどう): equality, impartiality 全ての人に平等な機会が必要だ。Everyone needs equal opportunities. 拾う (ひろう): to pick up 道で財布を拾った。I picked up a wallet on the street. 間接 (かんせつ): indirect 間接的な表現が使われている。An indirect expression was used. 缶詰 (かんづめ): canned food; being confined 昨日の昼ごはんは缶詰だった。Yesterday\u0026rsquo;s lunch was canned food. 看板 (かんばん): signboard, billboard 店の看板が新しくなった。The store’s signboard was updated. 関東 (かんとう): Kanto region (eastern Japan, including Tokyo) 関東地方では雪が珍しい。Snow is rare in the Kanto region. 258 SHOW CONTENTS 品質 (ひんしつ): quality (of a product or service) このメーカーは品質が高い。This manufacturer has high quality. 広がる (ひろがる): to spread, to expand (intransitive) 火事はすぐに広がった。The fire spread quickly. 広める (ひろめる): to spread, to popularize (transitive) 新しい考えを広めたい。I want to spread the new idea. 広まる (ひろまる): to become widespread (intransitive) その噂はすぐに広まった。The rumor spread quickly. 敏感 (びんかん): sensitive 彼は音に敏感だ。He is sensitive to sound. ファン: fan (enthusiast, admirer) 彼女はK-POPのファンです。She is a fan of K-POP. 部下 (ぶか): subordinate, junior employee 部下の意見も大切にしている。I value the opinions of my subordinates. 不安定 (ふあんてい): unstable, insecure 経済が不安定になっている。The economy is becoming unstable. 深まる (ふかまる): to deepen, to intensify (intransitive) 理解が深まった。My understanding deepened. フェリー: ferry フェリーで島へ渡った。I took a ferry to the island. 増える (ふえる): to increase, to grow (intransitive) 参加者が増えている。Participants are increasing. 夫婦 (ふうふ): married couple あの夫婦はとても仲がいい。That couple gets along very well. 不安 (ふあん): anxiety, uneasiness 将来が不安だ。I\u0026rsquo;m anxious about the future. 吹き込む (ふきこむ): to blow into; to inspire マイクに声を吹き込んだ。I spoke into the microphone. 深める (ふかめる): to deepen (transitive) 理解を深めるために本を読んだ。I read books to deepen my understanding. 不可能 (ふかのう): impossible それは不可能な計画だ。That’s an impossible plan. 聞き直す (ききなおす): to ask again; to listen again 聞き取れなかったので、もう一度聞き直した。I couldn’t catch it, so I asked again. 聞き手 (ききて): listener 聞き手の反応を見ながら話す。Speak while watching the listener’s reaction. 記憶 (きおく): memory その出来事は今でも記憶に残っている。That event still remains in my memory. 気がかり (きがかり): worry, concern 明日の面接が気がかりだ。I’m worried about tomorrow’s interview. 259 SHOW CONTENTS 部活 (ぶかつ): club activity (school club) 彼は毎日部活でサッカーをしている。He plays soccer every day in his club activities. 吹き出す (ふきだす): to burst out (laughing, etc.); to spurt out 彼の冗談で吹き出してしまった。I burst out laughing at his joke. 普及 (ふきゅう): spread, popularization インターネットの普及が進んでいる。The internet is becoming more widespread. 服装 (ふくそう): attire, clothing 彼の服装はいつもおしゃれだ。His outfit is always stylish. 含む (ふくむ): to include, to contain このジュースはビタミンCを含んでいる。This juice contains vitamin C. 不幸 (ふこう): unhappiness, misfortune 彼女は不幸な出来事を経験した。She experienced a misfortune. 副作用 (ふくさよう): side effect この薬には副作用があります。This medicine has side effects. 複雑 (ふくざつ): complicated, complex この問題はとても複雑だ。This problem is very complex. 不合格 (ふごうかく): failure (in an exam) 試験に不合格だった。I failed the exam. 拭く (ふく): to wipe テーブルをきれいに拭いた。I wiped the table clean. 含める (ふくめる): to include 私を含めて5人が参加する。Five people, including me, will participate. 付近 (ふきん): vicinity, nearby area 学校の付近に公園がある。There is a park near the school. 不公平 (ふこうへい): unfairness 不公平な扱いを受けた。I was treated unfairly. 物価 (ぶっか): prices (of commodities), cost of living 最近物価が上がってきた。Prices have been rising recently. 婦人 (ふじん): woman, lady (often used formally or for married women) 婦人服売り場は3階です。The women\u0026rsquo;s clothing section is on the third floor. 蓋 (ふた): lid, cover 鍋に蓋をして煮る。Put a lid on the pot and simmer. 無事 (ぶじ): safety, peace, without incident 旅行は無事に終わった。The trip ended safely. 不注意 (ふちゅうい): carelessness 不注意でミスをした。I made a mistake due to carelessness. 不十分 (ふじゅうぶん): insufficient, inadequate 準備が不十分だった。The preparation was inadequate. 着替える (きがえる): to change clothes 帰宅したらすぐに着替えた。I changed clothes as soon as I got home. 260 SHOW CONTENTS 舞台 (ぶたい): stage (theater); scene or setting 彼は舞台で演技をするのが好きだ。He enjoys performing on stage. 不思議 (ふしぎ): mysterious, strange, wonder 彼の話は本当に不思議だった。His story was truly mysterious. 防ぐ (ふせぐ): to prevent, to defend against マスクで風邪を防ぐ。Wearing a mask prevents colds. 不足 (ふそく): shortage, lack 睡眠不足は健康に悪い。Lack of sleep is bad for your health. ぶつかる: to collide, to bump into; to clash 自転車が壁にぶつかった。The bicycle crashed into the wall. 不満 (ふまん): dissatisfaction, discontent 彼は会社に不満を感じている。He feels dissatisfied with his company. 部分 (ぶぶん): part, section この部分をもう一度説明してください。Please explain this part again. 物理 (ぶつり): physics 彼は物理を専攻している。He is majoring in physics. 部品 (ぶひん): parts, components 自動車の部品を交換した。I replaced a car part. 船便 (ふなびん): surface mail (by ship) 荷物を船便で送った。I sent the package by surface mail. フライパン: frying pan フライパンで卵を焼いた。I fried an egg in the frying pan. 不愉快 (ふゆかい): unpleasant, uncomfortable その発言はとても不愉快だった。That remark was very unpleasant. 増やす (ふやす): to increase (something), to add 運動して筋肉を増やす。Exercise to increase muscle mass. 振り (ふり): pretense; swing, shake; behavior 彼は気づかないふりをした。He pretended not to notice. 踏み切り (ふみきり): railway crossing 踏み切りで電車を待った。I waited for the train at the crossing. 踏み切る (ふみきる): to take off (jump); to make a bold decision 彼は転職に踏み切った。He decided to change jobs. 機器 (きき): equipment, devices 医療機器は高価だ。Medical equipment is expensive. 期間 (きかん): period, duration 夏休みの期間は3週間だ。The summer break lasts for three weeks. 聞き取る (ききとる): to catch (what someone says), to understand by listening 英語のニュースを聞き取るのは難しい。It’s hard to catch the English news. 聞き返す (ききかえす): to ask again, to listen again よく聞こえなかったので聞き返した。I couldn\u0026rsquo;t hear well, so I asked again. 261 SHOW CONTENTS 振り込む (ふりこむ): to transfer money, to make a bank payment 給料が口座に振り込まれた。The salary was transferred into the account. 降り出す (ふりだす): to begin to rain/snow 急に雨が降り出した。It suddenly started raining. 震える (ふるえる): to tremble, to shake 寒さで手が震えた。My hands trembled from the cold. 古く (ふるく): old (adverb form of 古い – old) この建物は古くなっている。This building has become old. ブルー: blue (color); feeling blue (depressed) 今日はちょっとブルーな気分だ。I feel a little down today. 振る (ふる): to wave, to shake, to sprinkle 手を振って友達に挨拶した。I waved to greet my friend. プログラム: program (computer or event) 新しいプログラムをインストールした。I installed a new program. ブレーキ: brake 急にブレーキをかけた。I suddenly hit the brakes. 雰囲気 (ふんいき): atmosphere, mood このカフェは雰囲気がいい。This café has a nice atmosphere. 古本屋 (ふるほんや): secondhand bookstore 古本屋で面白い本を見つけた。I found an interesting book at a used bookstore. 触れる (ふれる): to touch, to mention 作品には手を触れないでください。Please don’t touch the artwork. 振る舞う (ふるまう): to behave, to treat (someone to food/drink) 彼はパーティーで料理を振る舞った。He served food at the party. 分別 (ぶんべつ): separation (e.g., garbage); discernment ごみを分別して捨てましょう。Let’s separate the garbage when throwing it away. 減らす (へらす): to reduce, to decrease (something) 体重を減らすために運動する。I exercise to lose weight. 平均 (へいきん): average 平均点は70点だった。The average score was 70. 平気 (へいき): calm, okay, indifferent 彼は失敗しても平気な顔をしていた。He looked unfazed even after failing. 弊社 (へいしゃ): our company (humble form) 弊社の商品をご利用いただき、ありがとうございます。Thank you for using our company’s product. 効く (きく): to be effective, to work well この薬は頭痛によく効く。This medicine works well for headaches. 刻む (きざむ): to chop, to engrave, to etch 玉ねぎを細かく刻む。Chop the onions finely. 生地 (きじ): fabric, dough このシャツは柔らかい生地でできている。This shirt is made of soft fabric. 262 SHOW CONTENTS 平日 (へいじつ): weekday 平日は仕事で忙しい。I\u0026rsquo;m busy with work on weekdays. 減る (へる): to decrease, to reduce (intransitive) 体重が少し減った。I lost a little weight. 別荘 (べっそう): villa, vacation home 夏は軽井沢の別荘で過ごす。We spend summers at our villa in Karuizawa. ベランダ: balcony ベランダで洗濯物を干す。I hang the laundry on the balcony. 別々 (べつべつ): separately, individually 会計は別々でお願いします。We\u0026rsquo;d like to pay separately, please. 包装 (ほうそう): wrapping, packaging プレゼント用にきれいに包装してください。Please wrap it nicely as a gift. 訪問 (ほうもん): visit (formal) 来週、お宅を訪問します。I will visit your house next week. 返信 (へんしん): reply (e.g., to a message or email) メールの返信が遅れてすみません。Sorry for the late reply to your email. 変更 (へんこう): change, modification 予定に変更があります。There has been a change in the schedule. 変換 (へんかん): conversion, transformation 入力ミスで文字の変換ができなかった。I couldn\u0026rsquo;t convert the characters due to a typing error. 頬 (ほお/ほほ): cheek 母の頬にキスをした。I kissed my mother on the cheek. 放る (ほうる): to throw, to abandon 宿題を放って遊びに行った。I left my homework and went out to play. 朗らか (ほがらか): cheerful, bright (personality) 彼女は朗らかで話しやすい人だ。She’s cheerful and easy to talk to. 気分転換 (きぶんてんかん): change of pace, refreshment 散歩して気分転換しよう。Let’s take a walk to refresh our minds. 喫煙席 (きつえんせき): smoking seat/area 喫煙席はあちらです。The smoking area is over there. 期待 (きたい): expectation, anticipation 試合に勝つことを期待している。I’m expecting them to win the match. 気の毒 (きのどく): pitiful, unfortunate 彼の話を聞いて気の毒に思った。I felt sorry for him after hearing his story. 寄付 (きふ): donation, contribution チャリティーイベントに寄付した。I donated to the charity event. 疑問 (ぎもん): doubt, question 彼の話には疑問が残る。There are still doubts about his story. 263 SHOW CONTENTS 保証 (ほしょう): guarantee, warranty この商品には1年間の保証が付いています。This product comes with a one-year warranty. 細長い (ほそながい): long and narrow この部屋は細長い形をしている。This room is long and narrow in shape. 募集 (ぼしゅう): recruitment, invitation (for applications, participants, etc.) アルバイトを募集しています。We are recruiting part-time workers. 歩行者 (ほこうしゃ): pedestrian 歩行者専用道路を通ってください。Please use the pedestrian-only road. 埃 (ほこり): dust 本棚の上に埃がたまっている。There is dust piling up on the bookshelf. 干す (ほす): to dry (clothes, etc.), to air 洗濯物をベランダで干す。I dry the laundry on the balcony. 坊ちゃん (ぼっちゃん): (respectful) son, young master 坊ちゃんは今日も元気ですね。Your son is energetic again today. 掘る (ほる): to dig 庭に穴を掘って木を植えた。I dug a hole in the garden and planted a tree. 骨 (ほね): bone 魚の骨に気をつけてください。Be careful of the fish bones. 本店 (ほんてん): main store 銀行の本店は東京にあります。The main branch of the bank is in Tokyo. 微笑み (ほほえみ): smile 彼女の微笑みに癒される。Her smile is soothing. 歩道 (ほどう): sidewalk 自転車は歩道を走ってはいけません。Bicycles are not allowed on the sidewalk. 本社 (ほんしゃ): headquarters 会議は本社で行われます。The meeting will be held at headquarters. 本日 (ほんじつ): today (formal) 本日はご来店ありがとうございます。Thank you for visiting us today. 菊 (きく): chrysanthemum 菊の花がきれいに咲いている。The chrysanthemums are blooming beautifully. 機嫌 (きげん): mood, temper 母は朝から機嫌がいい。My mother has been in a good mood since morning. 傷 (きず): wound, scratch テーブルに傷がついてしまった。The table got scratched. 記事 (きじ): article, news report その事件についての記事を読んだ。I read an article about the incident. 基礎 (きそ): foundation, basis 文法の基礎をしっかり学ぶ。Learn the basics of grammar thoroughly. 帰宅 (きたく): returning hom 毎日7時ごろに帰宅します。I return home around 7 o\u0026rsquo;clock every day. 264 SHOW CONTENTS 微笑む (ほほえむ): to smile 赤ちゃんが母親に微笑んだ。The baby smiled at its mother. 巻き込む (まきこむ): to involve, to drag into 彼は交通事故に巻き込まれた。He got involved in a traffic accident. 本文 (ほんぶん): main text, body (of a document) 本文を読んで質問に答えてください。Read the main text and answer the questions. 本部 (ほんぶ): headquarters 本部からの指示を待っています。We are waiting for instructions from headquarters. マイナス: minus, negative 今朝の気温はマイナス3度だった。The temperature this morning was minus 3 degrees. 巻く (まく): to roll, to wind マフラーを首に巻いた。I wrapped a scarf around my neck. 毎度 (まいど): every time, always (often used in business) 毎度ありがとうございます。Thank you for your continued patronage. 迷子 (まいご): lost child 公園で迷子の子どもが見つかった。A lost child was found in the park. 本物 (ほんもの): genuine article, real thing この宝石は本物です。This jewel is genuine. 枕 (まくら): pillow 新しい枕を買ったら、よく眠れた。I slept well after buying a new pillow. 松 (まつ): pine tree 庭に大きな松の木がある。There is a large pine tree in the yard. 混ぜる (まぜる): to mix 砂糖と卵をよく混ぜてください。Please mix the sugar and eggs well. 増し (まし): better, preferable バスより電車のほうがまだ増しだ。The train is still better than the bus. 曲げる (まげる): to bend 針金を曲げてハートを作った。I bent the wire into a heart shape. 益々 (ますます): increasingly, more and more 彼の人気は益々高まっている。His popularity is increasing more and more. 気づく (きづく): to notice, to realize 財布を忘れたことに気づいた。I realized I forgot my wallet. 逆 (ぎゃく): reverse, opposite これは順番が逆ですよ。This order is reversed. 期末 (きまつ): end of term/semester 期末試験に向けて勉強する。I study for the end-of-term exams. 決まり (きまり): rule, regulation 学校の決まりを守りましょう。Let’s follow the school rules. 客間 (きゃくま): parlor, guest room 客間にお茶を用意しました。I prepared tea in the guest room. 265 SHOW CONTENTS まさか: no way, impossible (often expresses disbelief) まさか彼が犯人だなんて信じられない。No way—I can’t believe he’s the culprit. 貧しい (まずしい): poor, needy 彼は貧しい家庭で育った。He grew up in a poor family. 待合室 (まちあいしつ): waiting room 病院の待合室で名前が呼ばれるのを待った。I waited in the hospital waiting room to be called. 孫 (まご): grandchild 祖父母は孫の写真を見て喜んだ。The grandparents were happy to see their grandchild’s photo. 待ち合わせる (まちあわせる): to meet up, to rendezvous 駅前で友達と待ち合わせた。I met up with my friend in front of the station. 真っ赤 (まっか): deep red, bright red 恥ずかしくて顔が真っ赤になった。My face turned bright red from embarrassment. 締める (しめる): to tighten, to fasten シートベルトをしっかり締めてください。Please fasten your seatbelt securely. 真っ白 (まっしろ): pure white 雪で庭が真っ白になった。The garden turned completely white from snow. 真っ暗 (まっくら): pitch dark 電気が消えて部屋は真っ暗になった。The lights went out and the room became pitch dark. 窓口 (まどぐち): service window, contact point チケットは窓口で買えます。You can buy tickets at the service window. 真似 (まね): imitation, mimicry 彼の話し方を真似して笑われた。I was laughed at for imitating the way he talks. 真っ黒 (まっくろ): pitch black 煙で空が真っ黒になった。The sky turned pitch black from smoke. 真っ先に (まっさきに): first of all, ahead of others 彼は真っ先に会場に到着した。He arrived at the venue ahead of everyone else. 真っ青 (まっさお): pale, deep blue 驚いて顔が真っ青になった。He turned pale from shock. マナー: manners, etiquette 電車ではマナーを守りましょう。Let’s follow proper manners on the train. 纏まる (まとまる): to be settled, to be organized 話し合いで意見がまとまった。The discussion led to a consensus. 学ぶ (まなぶ): to learn, to study 日本文化について学ぶのは楽しい。Learning about Japanese culture is enjoyable. 眩しい (まぶしい): dazzling, bright 太陽の光が眩しくて目を開けられない。The sunlight is so bright I can’t open my eyes. 満開 (まんかい): full bloom 桜が満開になった。The cherry blossoms are in full bloom. 眉 (まゆ): eyebrow 彼女は細い眉をしている。She has thin eyebrows. 266 SHOW CONTENTS 回り道 (まわりみち): detour, roundabout way 急いでいたが、渋滞を避けて回り道をした。I was in a hurry but took a detour to avoid traffic. 回す (まわす): to turn, to rotate, to send around 時計の針を回してください。Please turn the clock’s hand. 豆 (まめ): bean, pea 毎朝豆を食べるのが健康にいい。Eating beans every morning is good for health. 満足 (まんぞく): satisfaction, contentment 彼は結果に満足している。He is satisfied with the results. 満席 (まんせき): full house, no vacant seats コンサートは満席だった。The concert was sold out. 回り (まわり): surroundings, vicinity その公園の回りには店がたくさんある。There are many shops around the park. 迷う (まよう): to hesitate, to get lost 道に迷ってしまった。I got lost. 満点 (まんてん): perfect score 彼はテストで満点を取った。He got a perfect score on the test. 実 (み): fruit, nut, seed, truth この木はたくさんの実をつけた。This tree bore a lot of fruit. 見合い (みあい): arranged meeting (usually for marriage) 兄は来週見合いをする予定だ。My older brother plans to have a matchmaking meeting next week. 右側 (みぎがわ): right side 電車の右側に座った。I sat on the right side of the train. 見掛ける (みかける): to catch sight of, to notice 駅で彼を見掛けた。I saw him at the station. 見送る (みおくる): to see off, to send off 友達を空港で見送った。I saw off my friend at the airport. 見下ろす (みおろす): to look down on 高いビルの上から街を見下ろした。I looked down at the city from the tall building. 惨め (みじめ): miserable, wretched 失敗して惨めな気持ちになった。I felt miserable after failing. 右手 (みぎて): right hand 右手で字を書く。I write with my right hand. 見かけ (みかけ): appearance 彼は見かけによらず優しい人だ。He is kind despite his appearance. 決まる (きまる): to be decided, to be settled 会議で日程が決まった。The schedule was decided at the meeting. キャベジ: (likely typo or shorthand for キャベツ) cabbage キャベツはサラダに使われる。Cabbage is used in salads. 清い (きよい): pure, clean 清い心を持つことが大切だ。It is important to have a pure heart. 267 SHOW CONTENTS 見上げる (みあげる): to look up 夜空を見上げると、星が輝いていた。I looked up at the night sky and saw the stars shining. 右足 (みぎあし): right leg, right foot 彼は右足を骨折した。He broke his right leg. 見直す (みなおす): to look over again, to re-evaluate レポートを提出する前に見直した。I reviewed the report before submitting it. 未成年 (みせいねん): minor, underage person この映画は未成年には見せられない。This movie is not for minors. 水着 (みずぎ): swimsuit 夏に新しい水着を買った。I bought a new swimsuit for the summer. 見つめる (みつめる): to gaze at, to stare 子どもが母親をじっと見つめていた。The child was staring at their mother. 南側 (みなみがわ): south side 部屋は南側に面している。The room faces the south. 醜い (みにくい): ugly, unpleasant 醜い争いは見たくない。I don\u0026rsquo;t want to see ugly conflicts. 見舞い (みまい): visiting someone (usually in hospital), expression of concern 友人のお見舞いに行った。I visited my friend in the hospital. 見る見る (みるみる): very fast, before one’s eyes 雲が見る見るうちに消えていった。The clouds quickly disappeared before our eyes. 実る (みのる): to bear fruit, to be fruitful 努力が実って合格した。My efforts paid off and I passed. 民族 (みんぞく): ethnic group, people 日本には多くの民族の文化がある。There are many ethnic cultures in Japan. 未来 (みらい): future 明るい未来を信じている。I believe in a bright future. 民間 (みんかん): private, civilian これは民間企業のプロジェクトだ。This is a project of a private company. 見舞う (みまう): to visit someone who is ill 祖母を見舞いに病院へ行った。I went to the hospital to visit my grandmother. 魅力 (みりょく): charm, attraction 京都の魅力は歴史と文化だ。Kyoto\u0026rsquo;s charm lies in its history and culture. 身分 (みぶん): social status, identity 彼は高い身分の出身だ。He comes from a high social status. 競技 (きょうぎ): competition, sporting event オリンピックの競技を観戦した。I watched the Olympic competitions. 器用 (きよう): skillful, dexterous 彼は手先が器用だ。He is skillful with his hands. 行事 (ぎょうじ): event, function 正月は日本の伝統的な行事だ。New Year’s is a traditional event in Japan. 268 SHOW CONTENTS 向かい (むかい): opposite side, across 銀行は私の家の向かいにあります。The bank is across from my house. 向く (むく): to face, to be suited for この服は彼女によく向いている。This outfit suits her well. 向かい合う (むかいあう): to face each other 2人はテーブルで向かい合って座った。The two sat facing each other at the table. 蒸し暑い (むしあつい): humid and hot 日本の夏はとても蒸し暑い。Japanese summers are very humid. 無視 (むし): ignoring, disregard 彼は私の話を無視した。He ignored what I said. 無関心 (むかんしん): indifference, apathy 政治に無関心な若者が増えている。More young people are indifferent to politics. 剥く (むく): to peel りんごの皮を剥いてください。Please peel the apple. 麦 (むぎ): wheat, barley このビールは麦から作られている。This beer is made from barley. 向け (むけ): intended for, aimed at 子供向けの番組を見た。I watched a show for children. 婿 (むこ): son-in-law 彼は理想的な婿だ。He is an ideal son-in-law. 無地 (むじ): plain, solid-colored (no pattern) 無地のシャツを買った。I bought a plain shirt. 結ぶ (むすぶ): to tie, to connect, to conclude (a contract) 靴ひもを結ぶのを忘れた。I forgot to tie my shoelaces. 蒸す (むす): to steam 野菜を蒸して健康的に食べる。I steam vegetables for a healthy diet. 命じる (めいじる): to order, to command 上司は彼に出張を命じた。The boss ordered him to go on a business trip. 名人 (めいじん): expert, master 彼は将棋の名人です。He is a shogi master. 名刺 (めいし): business card 名刺を交換しましょう。Let’s exchange business cards. 名物 (めいぶつ): local specialty 京都の名物は八つ橋です。Kyoto’s specialty is yatsuhashi. 無料 (むりょう): free (of charge) このイベントは無料で参加できます。You can attend this event for free. 恐縮 (きょうしゅく): feeling obliged, being sorry (humble) お手数をおかけして恐縮ですが…。I\u0026rsquo;m sorry to trouble you, but\u0026hellip; 行列 (ぎょうれつ): line, queue 人気の店の前には長い行列ができていた。There was a long line in front of the popular shop. 269 SHOW CONTENTS 無駄遣い (むだづかい): waste (of money, time, etc.) お金の無駄遣いはやめなさい。Stop wasting money. 無責任 (むせきにん): irresponsibility 無責任な発言は控えてください。Please refrain from irresponsible remarks. 名所 (めいしょ): famous place, landmark 京都には多くの歴史的な名所がある。Kyoto has many historical landmarks. 夢中 (むちゅう): absorbed in, crazy about 彼はゲームに夢中になっている。He is absorbed in the game. 命令 (めいれい): order, command 上司の命令には従わなければならない。You must obey your boss’s orders. 目上 (めうえ): superior, elder 目上の人には敬語を使いましょう。Use honorifics with your superiors. メディア: media メディアの影響はとても大きい。The influence of the media is very strong. 眩暈 (めまい): dizziness 突然眩暈がして倒れそうになった。I suddenly felt dizzy and almost collapsed. メーター: meter (measuring device) ガスメーターを確認してください。Please check the gas meter. 目立つ (めだつ): to stand out 彼女の赤い服はとても目立つ。Her red dress really stands out. 面倒 (めんどう): trouble, bother 書類を準備するのは面倒だ。Preparing the documents is a hassle. 目下 (めした): subordinate, junior 彼は私の目下の部下です。He is my subordinate. 免許 (めんきょ): license 運転免許を取ったばかりです。I just got my driver’s license. 面接 (めんせつ): interview 来週就職の面接がある。I have a job interview next week. 面倒くさい (めんどうくさい): bothersome, annoying そんな面倒くさいことはしたくない。I don’t want to do something that annoying. 麺類 (めんるい): noodle dishes 彼は麺類が大好きだ。He loves noodle dishes. 儲かる (もうかる): to be profitable このビジネスはかなり儲かる。This business is quite profitable. 共通 (きょうつう): common, shared 私たちには共通の友人がいる。We have a mutual friend. 休暇 (きゅうか): vacation, holiday 来週から夏休みの休暇を取る予定です。I plan to take my summer vacation next week. 休講 (きゅうこう): canceled class 今日は教授の都合で休講になった。Today\u0026rsquo;s class was canceled due to the professor\u0026rsquo;s circumstances. 270 SHOW CONTENTS 申し込み (もうしこみ): application, subscription コンサートのチケット申し込みが始まった。The concert ticket applications have started. 儲ける (もうける): to earn, to make a profit 彼は株でかなり儲けた。He made a lot of money from stocks. 申し込む (もうしこむ): to apply, to propose 日本語クラスに申し込んだ。I applied for a Japanese class. 申込書 (もうしこみしょ): application form 入学には申込書の提出が必要です。You need to submit an application form to enroll. 持ち歩く (もちあるく): to carry around パスポートを常に持ち歩いている。I always carry my passport with me. 目標 (もくひょう): goal, objective 今年の目標はJLPT N2に合格することだ。My goal this year is to pass the JLPT N2. 餅 (もち): rice cake お正月には餅を食べる習慣がある。There is a tradition of eating rice cakes during New Year’s. 猛暑 (もうしょ): intense heat 今年の夏は例年になく猛暑だった。This summer was unusually hot. 申し訳ない (もうしわけない): inexcusable, very sorry ご迷惑をおかけして申し訳ないです。I’m terribly sorry for the inconvenience. もしも: if, in case もしも地震が起きたら、すぐに避難してください。If an earthquake occurs, evacuate immediately. 木材 (もくざい): timber, wood この家は高品質の木材で建てられている。This house is built with high-quality timber. 目的 (もくてき): purpose, aim 旅行の目的はリラックスすることだ。The purpose of the trip is to relax. 持ち帰り (もちかえり): takeout, takeaway このレストランでは持ち帰りもできます。Takeout is also available at this restaurant. 持ち物 (もちもの): belongings, things to bring 遠足の持ち物リストを確認してください。Please check the list of items to bring for the excursion. 物音 (ものおと): sound (of something) 夜中に変な物音が聞こえた。I heard a strange sound in the middle of the night. 求める (もとめる): to seek, to request 彼は助けを求めて叫んだ。He shouted for help. 揉む (もむ): to rub, to massage 肩を揉んでもらって、楽になった。After getting my shoulders massaged, I felt better. 戻す (もどす): to return, to put back 本は読み終わったら元の場所に戻してください。Please return the book to its original place after reading. 持てる (もてる): to be popular, to be able to hold 彼は女性にとても持てる。He is very popular with women. 物凄い (ものすごい): tremendous, incredible 物凄いスピードで車が走り去った。The car sped away at an incredible speed. 271 SHOW CONTENTS もったいない: wasteful, a shame 食べ物を残すなんてもったいない。It’s a shame to waste food. 紅葉 (こうよう／もみじ): autumn leaves, colored foliage 秋になると山が紅葉で赤く染まる。In autumn, the mountains turn red with colored leaves. 物語 (ものがたり): story, tale この物語は子どもにも大人にも人気がある。This story is popular with both children and adults. 物事 (ものごと): things, matters 物事を前向きに考えるようにしている。I try to think about things positively. 燃やす (もやす): to burn (something) 古い書類を燃やした。I burned the old documents. 模様 (もよう): pattern, design; state of affairs この布は花の模様がきれいだ。The floral pattern on this fabric is beautiful. 躍動 (やくどう): dynamism, lively motion 躍動感あふれる演技に感動した。I was moved by the dynamic performance. 文句 (もんく): complaint, phrase 彼はいつも文句ばかり言っている。He’s always complaining. 役立つ (やくだつ): to be useful この辞書は英語の勉強にとても役立つ。This dictionary is very useful for studying English. 盛る (もる): to serve (food), to pile up 皿にご飯を山のように盛った。I piled rice on the plate like a mountain. 薬缶 (やかん): kettle 薬缶でお湯を沸かす。Boil water in a kettle. 役員 (やくいん): officer, executive 父は会社の役員として働いている。My father works as an executive at the company. 役目 (やくめ): duty, role 子どもを守るのが親の役目だ。It’s a parent’s duty to protect their child. 役所 (やくしょ): government office 住所変更は役所で手続きが必要だ。You need to go to the government office to change your address. 役割 (やくわり): role, part チームの中で自分の役割を理解することが大切だ。It’s important to understand your role in the team. 焼ける (やける): to burn, to be baked/grilled パンがこんがりと焼けた。The bread is nicely toasted. 訳す (やくす): to translate この文章を英語に訳してください。Please translate this sentence into English. 雇う (やとう): to hire, to employ 新しい社員を雇うことになった。We decided to hire a new employee. 共同 (きょうどう): cooperation, joint 彼とは共同でプロジェクトを進めている。I’m working on the project jointly with him. 強調 (きょうちょう): emphasis, stress 彼は重要な点を強調した。He emphasized the important points. 272 SHOW CONTENTS 破く (やぶく): to tear (something) 彼は怒って手紙を破いた。He tore the letter in anger. 屋根 (やね): roof 雨が強くて屋根が壊れた。The roof was damaged due to heavy rain. 破る (やぶる): to break, to tear, to violate 約束を破るのはよくない。It’s not good to break a promise. 誘拐 (ゆうかい): kidnapping, abduction 誘拐事件がニュースで報道された。A kidnapping case was reported in the news. やる気 (やるき): motivation, willingness to do something 彼は最近やる気をなくしている。He has lost his motivation lately. 柳 (やなぎ): willow (tree) 川のそばに柳が揺れていた。Willow trees were swaying by the river. 辞める (やめる): to quit, to resign 彼は会社を辞めて独立した。He quit the company and became independent. 柔らか (やわらか): soft, tender この布団はとても柔らかい。This futon is very soft. 勇気 (ゆうき): courage 彼は勇気を出して告白した。He gathered his courage and confessed. やり直す (やりなおす): to do over, to redo 宿題を間違えたのでやり直した。I made a mistake on my homework, so I redid it. 夕暮れ (ゆうぐれ): dusk, twilight 夕暮れの空がとても美しかった。The dusk sky was very beautiful. 郵便 (ゆうびん): mail, postal service 郵便でプレゼントが届いた。The gift arrived by mail. 友人 (ゆうじん): friend 彼は大学時代の友人です。He is a friend from my university days. 有効 (ゆうこう): valid, effective このチケットは一週間有効です。This ticket is valid for one week. 優勝 (ゆうしょう): championship, victory チームが全国大会で優勝した。The team won the national tournament. 有料 (ゆうりょう): paid (not free) この駐車場は有料です。This parking lot is not free. 優秀 (ゆうしゅう): excellent, outstanding 彼は優秀な学生です。He is an excellent student. 郵便物 (ゆうびんぶつ): mail item(s) 今日の郵便物は3通だった。There were three pieces of mail today. 有名人 (ゆうめいじん): celebrity, famous person 昨日、有名人を駅で見かけた。I saw a celebrity at the station yesterday. 巨大 (きょだい): huge, gigantic 巨大な建物が目の前に現れた。A gigantic building appeared before us. 273 SHOW CONTENTS 夕食 (ゆうしょく): dinner, evening meal 毎日、家族そろって夕食を食べる。We eat dinner together as a family every day. 豊か (ゆたか): rich, abundant この国は自然が豊かだ。This country is rich in nature. 翌年 (よくねん): the following year 大学を卒業した翌年に就職した。I got a job the year after graduating from college. 酔う (よう): to get drunk, to feel sick (motion sickness) ワインを飲みすぎて酔ってしまった。I drank too much wine and got drunk. 洋室 (ようしつ): Western-style room このホテルには洋室と和室がある。This hotel has both Western-style and Japanese-style rooms. 欲張り (よくばり): greedy person, greediness 欲張りすぎると失敗するよ。If you\u0026rsquo;re too greedy, you\u0026rsquo;ll fail. 欲望 (よくぼう): desire, craving 欲望に負けてダイエットをやめた。I gave in to desire and quit my diet. 愉快 (ゆかい): pleasant, cheerful 愉快な仲間たちと旅行した。I went on a trip with cheerful friends. 洋食 (ようしょく): Western food 今日の夕飯は洋食にしよう。Let’s have Western food for dinner today. 指先 (ゆびさき): fingertip 指先が冷たくなってきた。My fingertips are getting cold. 幼児 (ようじ): infant, young child 幼児は言葉を覚えるのが早い。Young children learn language quickly. 夢見る (ゆめみる): to dream (literally or figuratively) 彼はいつも成功を夢見ている。He always dreams of success. 汚す (よごす): to make dirty 新しい服を汚さないように気をつけて。Be careful not to get your new clothes dirty. 横切る (よこぎる): to cross (in front of), to pass across 黒猫が目の前を横切った。A black cat crossed in front of me. 夜空 (よぞら): night sky 夜空に星が輝いている。Stars are shining in the night sky. 由来 (ゆらい): origin, derivation この地名の由来を調べてみよう。Let’s look into the origin of this place name. 寄せる (よせる): to bring close, to gather 椅子をテーブルに寄せてください。Please bring the chair closer to the table. 予算 (よさん): budget 旅行の予算は10万円です。The budget for the trip is 100,000 yen. 金額 (きんがく): amount of money 合計金額を教えてください。Please tell me the total amount. 議論 (ぎろん): discussion, debate 新しい制度について議論が続いている。The discussion about the new system is ongoing. 274 SHOW CONTENTS 予測 (よそく): prediction, forecast 地震の予測は難しい。Predicting earthquakes is difficult. 緩い (ゆるい): loose, lenient, gentle このズボンはちょっと緩い。These pants are a bit loose. 夜明け (よあけ): dawn, daybreak 夜明け前に出発した。We left before dawn. 予想 (よそう): expectation, anticipation 試合は予想通りの結果だった。The match ended as expected. 予想外 (よそうがい): unexpected 彼の退職は予想外だった。His resignation was unexpected. 酔っ払い (よっぱらい): drunk person 酔っ払いが道で寝ていた。A drunk person was sleeping on the street. 読み物 (よみもの): reading material この雑誌は面白い読み物が多い。This magazine has a lot of interesting reading material. 呼び方 (よびかた): way of calling, name usage 上司の呼び方に注意しましょう。Be careful about how you address your boss. 予定 (よてい): schedule, plan 明日の予定はキャンセルされた。Tomorrow’s plan was canceled. 予備校 (よびこう): prep school (for university entrance exams) 彼は大学のために予備校に通っている。He attends a prep school for university entrance exams. 嫁 (よめ): bride, wife, daughter-in-law 息子の嫁はとても優しい人だ。My son\u0026rsquo;s wife is a very kind person. 余裕 (よゆう): surplus, room, flexibility 今日は時間に余裕がある。I have plenty of time today. 理科 (りか): science (subject) 理科の授業で実験をした。We did an experiment in science class. 弱める (よわめる): to weaken, to reduce 火を弱めて煮てください。Reduce the heat and simmer. 来店 (らいてん): coming to a store ご来店ありがとうございます。Thank you for visiting our store. 喜ばしい (よろこばしい): delightful, gratifying 喜ばしい知らせが届いた。I received delightful news. 弱み (よわみ): weakness 彼は人に弱みを見せない。He doesn’t show his weakness to others. 利益 (りえき): profit, benefit 会社は大きな利益を上げた。The company made a large profit. 喜んで (よろこんで): gladly, willingly 喜んでお手伝いします。I’d be happy to help. 距離 (きょり): distance 学校までの距離は5キロです。The distance to school is 5 kilometers. 275 SHOW CONTENTS ラッシュアワー: rush hour ラッシュアワーは電車がとても混む。Trains are very crowded during rush hour. 楽 (らく): easy, comfortable, effortless この仕事は思ったより楽だった。This job was easier than I expected. ラップ: rap (music), cling film 彼はラップが得意だ。He is good at rapping. 理解 (りかい): understanding, comprehension 説明を聞いてやっと理解できた。I finally understood after hearing the explanation. リボン: ribbon プレゼントに赤いリボンをかけた。I put a red ribbon on the present. リットル: liter (litre) 牛乳を1リットル買ってきて。Please buy one liter of milk. 利口 (りこう): clever, smart あの子はとても利口だ。That child is very smart. 両足 (りょうあし): both legs 両足でしっかり立ってください。Please stand firmly on both legs. 両者 (りょうしゃ): both parties, both sides 両者の意見には違いがある。There is a difference in opinion between the two parties. 領収書 (りょうしゅうしょ): receipt (official) 領収書をお願いします。Please give me a receipt. 緑茶 (りょくちゃ): green tea 食後に緑茶を飲みます。I drink green tea after meals. 履歴書 (りれきしょ): résumé, CV 履歴書をメールで送ってください。Please send your résumé by email. 両手 (りょうて): both hands 両手で荷物を持った。I carried the luggage with both hands. 旅館 (りょかん): Japanese-style inn 京都で伝統的な旅館に泊まった。I stayed at a traditional inn in Kyoto. 例外 (れいがい): exception このルールには例外はない。There are no exceptions to this rule. 霧 (きり): fog, mist 今朝は霧が濃かった。The fog was thick this morning. 切れる (きれる): to be cut, to run out, to break 電池が切れてしまった。The battery ran out. 気楽 (きらく): carefree, comfortable, easygoing 気楽に考えましょう。Let’s think about it in a relaxed way. 勤勉 (きんべん): diligent, hardworking 彼はとても勤勉な学生だ。He is a very diligent student. 空席 (くうせき): vacant seat 映画館には空席がたくさんあった。There were many vacant seats in the cinema. 276 SHOW CONTENTS 留守番 (るすばん): house-sitting, looking after the house while someone is away 留守番を頼まれた。I was asked to look after the house. 列車 (れっしゃ): train (usually long-distance or express) 列車は時間通りに到着した。The train arrived on time. 礼儀 (れいぎ): manners, etiquette 礼儀を守ることは大切だ。It is important to observe good manners. 零点 (れいてん): zero points, failing grade テストで零点を取った。I got zero points on the test. 零度 (れいど): zero degrees (temperature) 今朝の気温は零度だった。The temperature this morning was zero degrees. レシート: receipt (casual) レシートをもらえますか？Can I get a receipt? レシピ: recipe 新しいレシピを試してみた。I tried a new recipe. 冷凍 (れいとう): freezing, frozen food 冷凍食品を買った。I bought frozen food. 列島 (れっとう): archipelago 日本は列島から成っている。Japan consists of an archipelago. 和菓子 (わがし): Japanese sweets 和菓子を食べながらお茶を飲む。I drink tea while eating Japanese sweets. ロビー: lobby ホテルのロビーで待ち合わせた。We met in the hotel lobby. レベル: level 日本語のレベルが上がった。My Japanese level has improved. わくわく: excited, thrilled (onomatopoeic) 遠足がわくわくする。I’m excited about the field trip. 別れ (わかれ): parting, farewell 友達と別れを惜しんだ。I was sad to say goodbye to my friend. 若者 (わかもの): young people, youth 若者の意見を聞きたい。I want to hear young people’s opinions. 脇 (わき): side, armpit 脇の下を清潔に保つ。Keep your armpits clean. 勤務 (きんむ): work, duty, service 朝9時から勤務が始まる。Work starts at 9 a.m. 腐る (くさる): to rot, to go bad 食べ物が腐ってしまった。The food has gone bad. 崩す (くずす): to break, to change (money), to destroy お金を崩して小銭を作った。I broke a bill into coins. 癖 (くせ): habit, peculiarity 彼は足を組む癖がある。He has a habit of crossing his legs. 277 SHOW CONTENTS 和室 (わしつ): Japanese-style room 旅館の和室に泊まった。I stayed in a Japanese-style room at the inn. 話題 (わだい): topic, subject of conversation 彼はいつも面白い話題を持っている。He always has interesting topics. 笑い声 (わらいごえ): laughter 部屋から笑い声が聞こえた。I heard laughter coming from the room. 連日 (れんじつ): every day, day after day 連日雨が続いている。It has been raining day after day. 我々 (われわれ): we, us (formal) 我々はチームとして頑張る。We will do our best as a team. 割り勘 (わりかん): splitting the bill evenly 食事代は割り勘にした。We split the meal bill evenly. 悪者 (わるもの): villain, bad person 彼は映画の悪者役を演じた。He played the villain in the movie. 割りに (わりに): comparatively, relatively 割りに簡単な仕事だった。It was a relatively easy job. 悪口 (わるくち): bad-mouthing, insult 彼は人の悪口を言わない。He doesn’t bad-mouth others. 割引 (わりびき): discount この店は学生割引がある。This store offers student discounts. 管 (くだ): pipe, tube 水道の管が壊れた。The water pipe broke. 具体的 (ぐたいてき): concrete, specific 具体的な例を挙げて説明してください。Please explain with a specific example 下がる (さがる): to go down, to fall, to hang 気温が下がって寒くなった。The temperature dropped and it became cold. 砕ける (くだける): to break, to be broken グラスが床で砕けた。The glass broke on the floor. 口紅 (くちべに): lipstick 口紅を塗るのを忘れた。I forgot to put on lipstick. 区別 (くべつ): distinction, differentiation 性別を区別しない学校もある。There are schools that do not distinguish by gender. 組み立てる (くみたてる): to assemble, to build 家具を自分で組み立てた。I assembled the furniture myself. 唇 (くちびる): lips 唇が乾燥している。My lips are dry. 組合 (くみあい): union, association 労働組合に加入している。I belong to a labor union. 組み合わせる (くみあわせる): to combine, to put together 色を組み合わせて服を選ぶ。I choose clothes by combining colors. 278 SHOW CONTENTS 口癖 (くちぐせ): habitual saying, pet phrase 彼の口癖は「なるほど」だ。His habitual phrase is “I see.” 汲む (くむ): to draw (water), to scoop バケツで水を汲んだ。I drew water with a bucket. 組む (くむ): to pair up, to assemble, to cross (arms/legs) チームを組んでプロジェクトに取り組む。We form a team and work on the project. 繰り返す (くりかえす): to repeat 同じミスを繰り返してはいけない。Don’t repeat the same mistake. グラウンド: sports ground, field 子どもたちはグラウンドで遊んでいる。The children are playing on the field. 悔しがる (くやしがる): to show frustration, to feel regret 試合に負けて彼は悔しがっていた。He was frustrated after losing the match. 悔やむ (くやむ): to regret チャンスを逃したことを悔やんでいる。I regret missing the opportunity. 苦しむ (くるしむ): to suffer 彼は重い病気に苦しんでいる。He is suffering from a serious illness. 敬意 (けいい): respect 先生に敬意を表する。I show respect to the teacher. 暮れる (くれる): to get dark (at the end of the day) 日が暮れる前に帰りましょう。Let’s go home before it gets dark. 加える (くわえる): to add スープに塩を少し加えた。I added a bit of salt to the soup. 暮れ (くれ): year-end, dusk 年の暮れは忙しい。The end of the year is busy. 苦労 (くろう): hardship, trouble 彼は若い頃たくさん苦労した。He went through many hardships in his youth. 詳しい (くわしい): detailed, well-informed 彼はパソコンに詳しい。He is knowledgeable about computers. 稽古 (けいこ): practice (especially for arts or sports) 毎日剣道の稽古をしている。I practice kendo every day. 傾向 (けいこう): tendency, trend 最近は健康志向の傾向が強い。There is a strong trend toward health-consciousness lately. 契約 (けいやく): contract, agreement 新しい会社と契約を結んだ。We signed a contract with a new company. 下校 (げこう): going home from school 子どもたちは午後3時に下校した。The children left school at 3 PM. 芸術 (げいじゅつ): art 芸術は人の心を豊かにする。Art enriches the human spirit. 外科 (げか): surgery (department) 彼は外科の医者です。He is a surgeon. 279 SHOW CONTENTS 下車 (げしゃ): getting off (a vehicle) 次の駅で下車してください。Please get off at the next station. 化粧 (けしょう): makeup, cosmetics 彼女は毎朝化粧に時間をかける。She spends time putting on makeup every morning. 下旬 (げじゅん): last third of the month 旅行は7月の下旬に行く予定です。We\u0026rsquo;re planning to travel in the last third of July. 下駄 (げた): traditional Japanese wooden clogs 夏祭りには浴衣と下駄を履く。I wear a yukata and geta to the summer festival. 下水 (げすい): sewage, drainage 古い建物は下水設備が悪い。Old buildings often have poor drainage systems. 削る (けずる): to shave, to scrape, to cut down 鉛筆をナイフで削る。I sharpen a pencil with a knife. 蹴る (ける): to kick ボールを力強く蹴った。He kicked the ball powerfully. 決心 (けっしん): determination, resolution 留学することを決心した。I made up my mind to study abroad. 月給 (げっきゅう): monthly salary 月給はいくらですか？What\u0026rsquo;s your monthly salary? 血液 (けつえき): blood 血液型は何ですか？What’s your blood type? 欠勤 (けっきん): absence from work 病気で二日間欠勤した。I was absent from work for two days due to illness. 煙い (けむい): smoky 焚き火の煙で部屋が煙い。The room is smoky from the bonfire. 件名 (けんめい): subject (of an email or document) メールの件名を書き忘れた。I forgot to write the subject of the email. 建設 (けんせつ): construction 新しいビルの建設が始まった。The construction of a new building has started. 現状 (げんじょう): present condition, current state 現状を変える必要がある。The current situation needs to be changed. 剣道 (けんどう): kendo (Japanese fencing) 剣道は日本の伝統的な武道だ。Kendo is a traditional Japanese martial art. 効果 (こうか): effect, effectiveness この薬はすぐに効果が現れる。This medicine works quickly. 謙遜 (けんそん): modesty, humility 彼の謙遜な態度に感心した。I was impressed by his humble attitude. 恋人 (こいびと): lover, sweetheart 彼女は高校時代の恋人です。She is my high school sweetheart. 硬貨 (こうか): coin 自動販売機は硬貨しか使えない。The vending machine only accepts coins. 280 SHOW CONTENTS 豪華 (ごうか): luxurious, splendid 豪華なホテルに泊まった。I stayed at a luxurious hotel. 公害 (こうがい): pollution, environmental damage 工場の排気ガスが公害の原因になっている。Factory exhaust gases are causing pollution. 講座 (こうざ): course, class (lecture) 日本語の講座に申し込んだ。I signed up for a Japanese course. 後期 (こうき): latter term, second semester 後期の授業は10月から始まる。The second semester starts in October. 高級 (こうきゅう): high-class, luxury 高級レストランで食事をした。We dined at a luxury restaurant. 合計 (ごうけい): total, sum 合計金額はいくらですか？What is the total amount? 構成 (こうせい): composition, structure チームの構成を見直す必要がある。We need to reconsider the team\u0026rsquo;s composition. 構想 (こうそう): concept, idea, plan 新しいプロジェクトの構想を練っている。I’m developing a concept for a new project. 高層 (こうそう): high-rise 高層ビルが立ち並んでいる。High-rise buildings are lined up. 交際 (こうさい): association, dating 二人は5年間交際している。They’ve been dating for five years. 強盗 (ごうとう): robbery, robber 強盗が銀行に押し入った。A robber broke into the bank. 公平 (こうへい): fairness, justice 公平な判断をしてください。Please make a fair decision. 越える (こえる): to cross over, to exceed 山を越えて町に行った。I went over the mountain to the town. 呼吸 (こきゅう): breathing, respiration 深く呼吸してください。Please take a deep breath. 国民 (こくみん): citizens, people of a country 国民の意見を尊重する。Respect the opinions of the people. 凍る (こおる): to freeze 水が凍ってしまった。The water has frozen. 誤解 (ごかい): misunderstanding 誤解を解くために説明した。I explained to clear up the misunderstanding. 国会 (こっかい): National Diet (Japan\u0026rsquo;s parliament) 法案が国会で審議された。The bill was discussed in the National Diet. 小雨 (こさめ): light rain, drizzle 小雨の中を歩いた。I walked in the drizzle. 国家 (こっか): nation, state 国家の安全を守る。Protect the safety of the nation. 281 SHOW CONTENTS 腰掛ける (こしかける): to sit down どうぞ、椅子に腰掛けてください。Please have a seat in the chair. 個人 (こじん): individual, personal これは個人の意見です。This is a personal opinion. 国籍 (こくせき): nationality 彼は日本の国籍を持っている。He has Japanese nationality. 氷 (こおり): ice 飲み物に氷を入れてください。Please put ice in the drink. 個体 (こたい): individual object, solid (in physics) 水は温度によって液体から個体になる。Water becomes solid depending on temperature. 小型 (こがた): small size, compact 小型犬を飼っている。I have a small dog. 腰 (こし): lower back, waist 腰が痛いので病院に行った。I went to the hospital because of back pain. 個性 (こせい): individuality, personality 彼は個性のある服を着ている。He wears clothes with a strong sense of individuality. 擦る (こする): to rub, to scrape 目をこすらないように。Don\u0026rsquo;t rub your eyes. 好み (このみ): preference, taste 彼女の好みはシンプルなデザインだ。Her taste is for simple designs. 込み (こみ): including, crowded 税込みで1000円です。It’s 1000 yen including tax. 最小限 (さいしょうげん): minimum 費用を最小限に抑えたい。I want to keep the costs to a minimum. 小遣い (こづかい): pocket money, allowance 毎月小遣いをもらっている。I get an allowance every month. 小麦 (こむぎ): wheat 小麦はパンの原料です。Wheat is the main ingredient in bread. コンクール: competition (especially artistic) ピアノコンクールに出場した。I entered a piano competition. コマーシャル: commercial (advertisement) このコマーシャルは有名な俳優が出ている。This commercial features a famous actor. 小包 (こづつみ): parcel, package 小包が郵便で届いた。A package arrived by mail. この間 (このあいだ): the other day, recently この間会った友達から連絡があった。I got a message from a friend I met recently. 骨折 (こっせつ): bone fracture スポーツ中に腕を骨折した。I fractured my arm during sports. 断る (ことわる): to refuse, to decline 招待を丁寧に断った。I politely declined the invitation. 282 SHOW CONTENTS 災害 (さいがい): disaster, calamity 地震や台風などの災害に備えることが大切だ。It’s important to prepare for disasters such as earthquakes and typhoons. 見込む (みこむ): to anticipate, to expect 来週は雨が降ると見込まれている。It is expected to rain next week. 最多 (さいた): the most, the highest number 今年の参加者数は過去最多だった。This year had the highest number of participants ever. 殺す (ころす): to kill その薬は細菌を殺す効果がある。The medicine is effective in killing bacteria. 転ぶ (ころぶ): to fall down 雨の日に道で転んでしまった。I fell on the street on a rainy day. 最中 (さいちゅう): in the middle of (doing something) 会議の最中に電話が鳴った。The phone rang during the meeting. 最低限 (さいていげん): minimum, lowest limit 最低限のマナーは守ってください。Please observe the minimum standards of manners. 転がる (ころがる): to roll, to tumble ボールが道に転がっていった。The ball rolled into the road. 災難 (さいなん): misfortune, disaster 財布を落としてしまうなんて、災難だ。Losing your wallet is such misfortune. 最低 (さいてい): the worst, lowest 今回の成績は今までで最低だった。This time’s score was the worst ever. 込める (こめる): to put into (emotion, effort, etc.) 手紙に感謝の気持ちを込めた。I put my gratitude into the letter. 最大限 (さいだいげん): maximum 力を最大限に発揮した。I used my full strength. 零す (こぼす): to spill, to shed (tears) コップの水をこぼしてしまった。I spilled the water in the cup. 採点 (さいてん): grading, marking テストの採点が終わった。The test grading is finished. 粉 (こな): powder, flour 小麦粉は白い粉です。Wheat flour is a white powder. 混乱 (こんらん): confusion, chaos 地震の後、町は混乱状態だった。The town was in chaos after the earthquake. 最終 (さいしゅう): last, final 最終電車に乗り遅れた。I missed the last train. 財産 (ざいさん): property, assets 両親から財産を受け継いだ。I inherited property from my parents. 祭日 (さいじつ): national holiday 来週の月曜日は祭日です。Next Monday is a national holiday. 支える (ささえる): to support, to sustain 家族が私を支えてくれた。My family supported me. 283 SHOW CONTENTS 先ほど (さきほど): a little while ago 先ほど電話をいただきました。I received a call a little while ago. 幸い (さいわい): fortunately; happiness 幸い、事故には巻き込まれなかった。Fortunately, I wasn’t involved in the accident. 参考 (さんこう): reference この資料をレポートの参考にしてください。Please use this material as a reference for your report. 冷ます (さます): to cool (something) down 熱いスープを少し冷ましてから飲む。Let the hot soup cool down a bit before drinking. 叫び声 (さけびごえ): scream, shout 彼の叫び声が遠くまで響いた。His scream echoed far away. 採用 (さいよう): employment, adoption 新しい社員が10人採用された。Ten new employees were hired. 栽培 (さいばい): cultivation, farming 野菜を自分で栽培しています。I grow vegetables myself. 冷める (さめる): to cool down, to lose interest コーヒーが冷めてしまった。The coffee has gotten cold. 覚ます (さます): to awaken (someone), to sober up 目覚まし時計が彼を覚ました。The alarm clock woke him up. 盛ん (さかん): prosperous, active この地域では農業が盛んだ。Agriculture is active in this area. 左右 (さゆう): left and right; to influence その判断が結果を左右する。That decision will influence the outcome. 座席 (ざせき): seat 飛行機の座席は通路側を選んだ。I chose an aisle seat on the plane. 刺す (さす): to stab, to pierce, to sting 蚊に刺されてかゆい。I got bitten by a mosquito and it\u0026rsquo;s itchy. 差別 (さべつ): discrimination 人種差別は絶対に許されない。Racial discrimination must never be tolerated. 挿す (さす): to insert, to put in 花瓶に花を挿した。I put flowers in the vase. 偖 (さて): well then, now (used to change the topic) 偖、次の問題に進みましょう。Well then, let’s move on to the next question. 刺さる (ささる): to stick into, to pierce 針が指に刺さった。A needle stuck into my finger. 爽やか (さわやか): fresh, refreshing 爽やかな朝の風が気持ちいい。The fresh morning breeze feels good. 更に (さらに): furthermore, even more さらに努力を重ねてください。Please make even more effort. 猿 (さる): monkey 動物園で猿を見た。I saw monkeys at the zoo. 参考書 (さんこうしょ): reference book この参考書で試験対策をした。I studied for the exam using this reference book. 284 SHOW CONTENTS 産地 (さんち): production area, place of origin このリンゴは青森県の産地です。These apples are from Aomori Prefecture. 算数 (さんすう): arithmetic 小学校では毎日算数の授業がある。There is an arithmetic class every day in elementary school. 塩辛い (しおからい): salty このスープは少し塩辛い。This soup is a bit salty. 時間割 (じかんわり): timetable, class schedule 新しい時間割をもらった。I received the new class schedule. シートベルト: seatbelt 車に乗るときはシートベルトを締めてください。Please fasten your seatbelt when you get in the car. 資格 (しかく): qualification, license 彼は医師の資格を持っている。He has a medical license. 仕送り (しおくり): allowance, money sent from home 両親から毎月仕送りをもらっている。I receive an allowance from my parents every month. 仕上がる (しあがる): to be finished, to be completed レポートがようやく仕上がった。The report is finally finished. 司会 (しかい): host, emcee 彼が結婚式の司会を務めた。He acted as the emcee for the wedding. 時期 (じき): period, time 今は旅行に適した時期だ。Now is a good time for travel. 指示 (しじ): instruction, direction 上司の指示に従った。I followed my boss’s instructions. 時刻 (じこく): time, (specific) hour 電車の出発時刻を確認する。Check the train’s departure time. 時給 (じきゅう): hourly wage このバイトの時給は1000円です。The hourly wage for this part-time job is 1,000 yen. 敷く (しく): to lay down (a mat, sheet, etc.) 布団を敷いて寝る。Lay out the futon and sleep. 事実 (じじつ): fact, reality それは事実に基づいた話だ。That story is based on facts. 試着 (しちゃく): trying on clothes 洋服を買う前に試着する。Try on clothes before buying them. 従う (したがう): to follow, to obey ルールに従って行動してください。Please act according to the rules. 自信満々 (じしんまんまん): full of confidence 彼は自信満々で答えた。He answered full of confidence. 親しむ (したしむ): to be familiar with, to enjoy 小さい頃から音楽に親しんでいる。I’ve been familiar with music since childhood. 試食 (ししょく): sample tasting スーパーで新商品の試食ができる。You can sample a new product at the supermarket. 沈む (しずむ): to sink, to go down 太陽が西に沈んでいく。The sun is sinking in the west. 285 SHOW CONTENTS 姿勢 (しせい): posture, attitude 彼は姿勢が良いので印象がいい。He has good posture, so he gives a good impression. 下着 (したぎ): underwear 旅行のときは下着を多めに持っていく。I bring extra underwear when I travel. 実生活 (じっせいかつ): real life 学校で学んだことを実生活で使う。I use what I learned at school in real life. 実感 (じっかん): real feeling, realization 成功して初めて努力の意味を実感した。I truly realized the meaning of hard work only after succeeding. 実社会 (じっしゃかい): real world, working society 大学を卒業して実社会に出た。I graduated from university and entered the real world. 湿度 (しつど): humidity 梅雨の時期は湿度が高い。Humidity is high during the rainy season. 実現 (じつげん): realization, materialization 夢の実現のために努力する。I work hard to make my dream come true. 実績 (じっせき): achievements, track record 彼は豊富な実績を持っている。He has a rich track record. 実習 (じっしゅう): practical training 医学生は病院で実習を受ける。Medical students undergo practical training at hospitals. 失業 (しつぎょう): unemployment 彼は失業中で職を探している。He is unemployed and looking for a job. 実験 (じっけん): experiment 化学の授業で実験をした。We did an experiment in chemistry class. 縛る (しばる): to tie, to bind 荷物を紐で縛る。Tie the package with string. 辞表 (じひょう): resignation letter 彼は辞表を提出した。He submitted his resignation letter. 品数 (しなかず): number of items (especially in a meal or stock) このレストランは品数が豊富だ。This restaurant has a wide variety of dishes. 次男 (じなん): second son 彼は家の次男だ。He is the second son in the family. 死亡 (しぼう): death 事故で数名が死亡した。Several people died in the accident. 芝生 (しばふ): lawn, grass 公園の芝生に座って昼寝した。I took a nap sitting on the lawn in the park. 尻尾 (しっぽ): tail 猫がしっぽを振っている。The cat is wagging its tail. 絞る (しぼる): to wring, to narrow down タオルの水を絞る。Wring out the water from the towel. 候補を三つに絞った。I narrowed the candidates down to three. 実用 (じつよう): practical use この道具は実用的で便利だ。This tool is practical and convenient. 286 SHOW CONTENTS 始発 (しはつ): first train or bus of the day 始発電車に乗って出発した。I took the first train of the day and departed. 失望 (しつぼう): disappointment 試験に落ちて失望した。I was disappointed after failing the exam. 実力 (じつりょく): real ability, capability 実力を発揮するチャンスが来た。I had a chance to demonstrate my true ability. 指導 (しどう): guidance, leadership 先生の指導のもとで研究を行う。We conduct research under the teacher’s guidance. 指定席 (していせき): reserved seat 新幹線では指定席を予約した。I reserved a seat on the bullet train. 支店 (してん): branch office 大阪に新しい支店を開設した。We opened a new branch office in Osaka. 自慢 (じまん): pride, boasting 彼は息子の成績を自慢していた。He was bragging about his son\u0026rsquo;s grades. 品 (しな): goods, item, article 店に多くの品が並んでいる。There are many items lined up in the store. 事務 (じむ): office work, clerical work 彼女は事務の仕事をしている。She does clerical work. 染み (しみ): stain, spot シャツにコーヒーの染みがついた。There’s a coffee stain on my shirt. 指名 (しめい): nomination, designation 会長に彼が指名された。He was nominated as the chairman. 仕舞い (しまい): end, finish 今日はもう仕舞いにしよう。Let’s call it a day. 地味 (じみ): plain, subdued 地味な服装を好む。I prefer plain clothing. 氏名 (しめい): full name 氏名を用紙に記入してください。Please fill in your full name on the form. 霜 (しも): frost 今朝は霜が降りていた。There was frost this morning. 締め切り (しめきり): deadline, closing レポートの締め切りは金曜日です。The deadline for the report is Friday. 示す (しめす): to show, to indicate 地図で場所を示してください。Please show me the location on the map. 市役所 (しやくしょ): city hall 書類を市役所に提出した。I submitted the documents to city hall. 締め切る (しめきる): to close (applications, doors), to shut 応募はすでに締め切られた。Applications are already closed. 車掌 (しゃしょう): train conductor 車掌が切符を確認した。The conductor checked the tickets. 287 SHOW CONTENTS 車庫 (しゃこ): garage 車を車庫に入れる。I park the car in the garage. シャッター: shutter 夜になると店のシャッターを閉める。The store closes its shutters at night. 住居 (じゅうきょ): residence, dwelling 新しい住居を探している。I\u0026rsquo;m looking for a new place to live. 重視 (じゅうし): importance, emphasis 健康を重視するべきだ。You should place importance on your health. 週刊誌 (しゅうかんし): weekly magazine 週刊誌でそのニュースを読んだ。I read the news in a weekly magazine. 従業員 (じゅうぎょういん): employee, staff member 会社の従業員は100人以上いる。The company has over 100 employees. 自由席 (じゆうせき): non-reserved seat 新幹線の自由席に座った。I sat in an unreserved seat on the bullet train. 集団 (しゅうだん): group, mass 子供たちが集団で遊んでいる。The children are playing in a group. 重大 (じゅうだい): serious, important 重大な問題が発生した。A serious problem occurred. 充電 (じゅうでん): charging (battery) スマホを充電しておく。I\u0026rsquo;ll charge my smartphone. 重点 (じゅうてん): emphasis, focus このプロジェクトでは安全を重点にしている。This project focuses on safety. 住宅 (じゅうたく): housing, residence 新しい住宅がたくさん建っている。Many new houses are being built. 住民 (じゅうみん): resident, inhabitant 地元の住民と話し合う。Discuss with local residents. 終点 (しゅうてん): last stop, terminus バスは終点に到着した。The bus arrived at the final stop. 終電 (しゅうでん): last train 終電に間に合わなかった。I missed the last train. 受信 (じゅしん): reception (signal, email, etc.) メールの受信ができない。I can’t receive emails. 重量 (じゅうりょう): weight (heavy objects) 荷物の重量を量る。Measure the weight of the luggage. 未開封 (みかいふう): unopened これは未開封の手紙です。This is an unopened letter. 既知 (きち): known (already known) それは既知の事実だ。That is a known fact. 出荷 (しゅっか): shipping, shipment 商品は今日出荷されます。The goods will be shipped today. 288 SHOW CONTENTS 祝日 (しゅくじつ): national holiday 明日は祝日なので会社は休みです。Tomorrow is a national holiday, so the office is closed. 塾 (じゅく): cram school 毎週土曜日に塾に通っている。I go to a cram school every Saturday. 主張 (しゅちょう): assertion, claim 彼は自分の意見を強く主張した。He strongly asserted his opinion. 授業料 (じゅぎょうりょう): tuition fee 授業料は前払いです。The tuition fee must be paid in advance. 出勤 (しゅっきん): going to work 毎朝8時に出勤しています。I go to work at 8 a.m. every morning. 寿命 (じゅみょう): lifespan この電池の寿命は5年です。This battery has a lifespan of five years. 出版 (しゅっぱん): publishing 新しい小説が出版された。A new novel was published. 出国 (しゅっこく): departure from a country 出国手続きを済ませた。I completed the departure procedures. 主要 (しゅよう): main, major これは主要な問題だ。This is a major issue. 需要 (じゅよう): demand (economic) 電気自動車の需要が増えている。Demand for electric cars is increasing. 主役 (しゅやく): leading role 彼が映画の主役を演じた。He played the lead role in the movie. 首都 (しゅと): capital city 日本の首都は東京です。The capital of Japan is Tokyo. 主任 (しゅにん): person in charge, manager 彼は開発チームの主任です。He is the manager of the development team. 順序 (じゅんじょ): order, sequence 順序を守って並んでください。Please line up in order. 順調 (じゅんちょう): favorable, smooth 仕事は順調に進んでいる。The work is going smoothly. 順番 (じゅんばん): order (of turns), sequence 順番を待ってください。Please wait for your turn. 順に (じゅんに): in order 書類を順に並べてください。Arrange the documents in order. 消極的 (しょうきょくてき): passive, negative 彼は新しいことに対して消極的だ。He is passive about trying new things. 乗客 (じょうきゃく): passenger 電車は乗客で混んでいた。The train was crowded with passengers. 奨学金 (しょうがくきん): scholarship 奨学金をもらって大学に通っている。I attend university with a scholarship. 289 SHOW CONTENTS 蒸気 (じょうき): steam, vapor 蒸気で車の窓が曇った。The car windows fogged up from the steam. 上級 (じょうきゅう): advanced level 彼は日本語の上級クラスに通っている。He attends an advanced Japanese class. 消化 (しょうか): digestion 食べ物が胃で消化される。Food is digested in the stomach. 商業 (しょうぎょう): commerce, business この都市は商業が盛んだ。Commerce is thriving in this city. 状況 (じょうきょう): situation, condition 現在の状況を説明してください。Please explain the current situation. 条件 (じょうけん): condition, requirement この仕事にはいくつかの条件がある。There are several conditions for this job. 状態 (じょうたい): state, condition 車は良い状態にある。The car is in good condition. 常識 (じょうしき): common sense 常識を持って行動してください。Please act with common sense. 乗車 (じょうしゃ): boarding (a vehicle) 電車に乗車するときは切符が必要だ。You need a ticket to board the train. 商社 (しょうしゃ): trading company 彼は大手の商社で働いている。He works at a major trading company. 生じる (しょうじる): to occur, to arise 問題が生じたらすぐに知らせてください。Please inform me immediately if a problem arises. 冗談 (じょうだん): joke それは冗談ですよね？That\u0026rsquo;s a joke, right? 正午 (しょうご): noon 会議は正午に始まります。The meeting starts at noon. 商店 (しょうてん): shop, store この通りにはたくさんの商店がある。There are many shops on this street. 商売 (しょうばい): business, trade 彼は小さな商売をしている。He runs a small business. 上等 (じょうとう): superior, first-class このワインは上等だ。This wine is of superior quality. 衝突 (しょうとつ): collision, conflict 事故で車が衝突した。The cars collided in the accident. 上半身 (じょうはんしん): upper body 上半身の運動をしましょう。Let\u0026rsquo;s do exercises for the upper body. 上品 (じょうひん): elegant, refined 彼女は上品な服を着ている。She is wearing elegant clothes. 勝負 (しょうぶ): match, contest, game 今日は勝負の日だ。Today is the day of the match. 290 SHOW CONTENTS 正面 (しょうめん): front, facade 建物の正面に大きな扉がある。There is a large door at the front of the building. 食品 (しょくひん): food products スーパーで新鮮な食品を買った。I bought fresh food products at the supermarket. 食費 (しょくひ): food expenses 毎月の食費を節約したい。I want to save on my monthly food expenses. 私立 (しりつ): private (institution) 彼女は私立の大学に通っている。She attends a private university. 皺 (しわ): wrinkle, crease シャツに皺がついている。There are wrinkles on the shirt. 印 (しるし): mark, sign, symbol この印は重要なポイントを示している。This mark indicates an important point. 白黒 (しろくろ): black and white 昔の映画は白黒で撮影された。Old movies were filmed in black and white. 食料 (しょくりょう): food, provisions 非常用の食料を準備した。I prepared emergency food supplies. 諸国 (しょこく): various countries 諸国の文化を学ぶ。Learn about the cultures of various countries. 進学 (しんがく): advancing to a higher level of education 高校卒業後、大学に進学する。After high school, I will advance to university. 新作 (しんさく): new work, new production 彼の新作映画が公開された。His new movie was released. 食器 (しょっき): tableware, dishes 食器を洗うのは私の仕事だ。Washing the dishes is my job. 知り合う (しりあう): to get to know, to become acquainted 新しいクラスメートと知り合った。I got to know my new classmates. 処理 (しょり): processing, handling ごみの処理は毎日行われる。Garbage is processed daily. 深刻 (しんこく): serious, severe その問題は深刻な影響を与えた。That problem had a serious impact. 診察 (しんさつ): medical examination 医者は患者を診察した。The doctor examined the patient. 診断 (しんだん): diagnosis 病気の診断が下された。A diagnosis of the illness was made. 信じる (しんじる): to believe, to trust 彼の言葉を信じている。I believe his words. 人物 (じんぶつ): person, character 彼は重要な人物だ。He is an important person. 進度 (しんど): progress, rate of progress 勉強の進度が遅れている。The study progress is delayed. 291 SHOW CONTENTS 進歩 (しんぽ): progress, advancement 科学技術は日々進歩している。Science and technology are progressing daily. 森林 (しんりん): forest, woods 森林でハイキングを楽しんだ。I enjoyed hiking in the forest. 水蒸気 (すいじょうき): water vapor, steam 水蒸気が窓に付いている。There is water vapor on the window. 隙 (すき): gap, chance, opportunity 相手の隙を狙って攻撃する。Attack by targeting the opponent’s gap. 水分 (すいぶん): moisture, water content 運動中は水分補給が大切だ。It’s important to hydrate during exercise. 水温 (すいおん): water temperature プールの水温がちょうどいい。The pool’s water temperature is just right. 好き嫌い (すききらい): likes and dislikes, preferences 子供の好き嫌いはよくあることだ。It’s common for children to have likes and dislikes. 炊飯器 (すいはんき): rice cooker 毎朝、炊飯器でご飯を炊く。I cook rice every morning with the rice cooker. 好き好き (すきずき): matter of taste, personal preference 好き好きだから、無理に勧めないで。It’s a matter of taste, so don’t force it. 進める (すすめる): to advance, to proceed, to recommend 計画を進めるために努力する。I make efforts to advance the plan. 隙間 (すきま): crack, gap, crevice ドアの隙間から風が入る。Wind comes in through the crack in the door. 過ごす (すごす): to spend (time), to pass 休日を家族と過ごした。I spent the holiday with my family. 掬う (すくう): to scoop up, to ladle 池の水を手で掬った。I scooped water from the pond with my hands. 進んで (すすんで): voluntarily, willingly, proactively 彼は進んで手伝いに来た。He came willingly to help. 頭痛 (ずつう): headache 昨日から頭痛が続いている。I have had a headache since yesterday. 勧める (すすめる): to recommend, to advise 新しい本を友達に勧めた。I recommended a new book to my friend. すっきり: refreshed, clear, neat 運動した後、気分がすっきりした。I felt refreshed after exercising. 既に (すでに): already 彼は既に出発した。He has already left. 砂 (すな): sand 海辺で砂遊びをした。I played with sand at the beach. 制限 (せいげん): limit, restriction 速度制限を守って運転する。Drive following the speed limit. 292 SHOW CONTENTS 制作 (せいさく): production (of works like films, TV programs, art) この映画は有名な監督によって制作された。This movie was produced by a famous director. 請求書 (せいきゅうしょ): invoice, bill 請求書をメールで送ってください。Please send the invoice by email. 正常 (せいじょう): normal, regular 機械は現在、正常に作動しています。The machine is currently operating normally. 性質 (せいしつ): nature, characteristic この素材は燃えやすい性質を持っている。This material has flammable properties. 政治 (せいじ): politics 若者が政治に関心を持つことは重要だ。It’s important for young people to take interest in politics. 製作 (せいさく): manufacturing, making (especially of tangible items) この会社は家具の製作を専門としている。This company specializes in furniture manufacturing. 生年月日 (せいねんがっぴ): date of birth ご自身の生年月日を記入してください。Please fill in your date of birth. 贅沢 (ぜいたく): luxury, extravagance たまには贅沢な食事を楽しみたい。I want to enjoy a luxurious meal once in a while. 成立 (せいりつ): establishment, realization (of a deal, law, etc.) 二国間の協定が成立した。A bilateral agreement was established. 正方形 (せいほうけい): square (shape) このテーブルは正方形です。This table is square-shaped. 生物 (せいぶつ): living creature, organism 深海にはまだ知られていない生物がいる。There are still unknown organisms in the deep sea. 咳 (せき): cough 昨日から咳が止まらない。I’ve had a persistent cough since yesterday. 狭い (せまい): narrow, cramped この部屋はちょっと狭いですね。This room is a bit cramped. 石油 (せきゆ): petroleum, oil この国は石油資源が豊富だ。This country is rich in oil resources. 節約 (せつやく): saving, economizing 電気の節約に協力してください。Please help conserve electricity. 石炭 (せきたん): coal 昔は石炭が主なエネルギー源だった。Coal used to be the main energy source. 背負う (せおう): to carry on one’s back, to bear (burden, responsibility) 彼は家族の期待を背負っている。He bears his family\u0026rsquo;s expectations. 性別 (せいべつ): gender, sex 応募者の性別を問わない。The applicant’s gender does not matter. 積極的 (せっきょくてき): proactive, positive 彼女は積極的に質問をしていた。She was actively asking questions. 選挙 (せんきょ): election 来月は市長の選挙が行われる。The mayoral election will be held next month. 293 SHOW CONTENTS 前期 (ぜんき): first term, previous period 前期の成績は良かった。My grades were good last term. 専業主婦 (せんぎょうしゅふ): full-time housewife 彼女は専業主婦として家事に専念している。She devotes herself to housework as a full-time housewife. 専攻 (せんこう): major, field of study 大学では経済学を専攻していました。I majored in economics at university. 絶対 (ぜったい): absolutely, definitely これは絶対に秘密だよ。This is absolutely a secret. 全国 (ぜんこく): whole country, nationwide 全国大会に出場することになった。We qualified for the national tournament. 前後 (ぜんご): around (time), before and after 会議は３時前後に始まる予定です。The meeting is scheduled to start around 3 o’clock. 接待 (せったい): business entertainment, hospitality 取引先との接待が今夜あります。There’s a business dinner with clients tonight. 設備 (せつび): facilities, equipment このホテルは最新の設備を備えている。This hotel is equipped with the latest facilities. 洗剤 (せんざい): detergent 新しい洗剤で服がもっときれいになった。The new detergent made the clothes even cleaner. 全身 (ぜんしん): whole body 彼は全身筋肉痛だと言っていた。He said his whole body was sore. 先日 (せんじつ): the other day, recently 先日のお話の続きですが…。Regarding the discussion from the other day… 洗濯物 (せんたくもの): laundry 洗濯物を干すのを忘れた。I forgot to hang out the laundry. 全体 (ぜんたい): whole, entirety クラス全体で写真を撮った。We took a photo with the whole class. 前途 (ぜんと): future, prospects 君には前途が有望だ。You have a bright future ahead. 宣伝 (せんでん): advertisement, publicity 新商品の宣伝がテレビで流れている。The commercial for the new product is on TV. 全力 (ぜんりょく): full effort, all one\u0026rsquo;s strength 全力で走ったので息が切れた。I ran with all my strength and got out of breath. 線路 (せんろ): railway track 線路に物を投げてはいけません。Do not throw objects onto the train tracks. 騒音 (そうおん): noise, din 工事の騒音で眠れなかった。I couldn’t sleep because of the construction noise. 増加 (ぞうか): increase, rise 観光客の数が年々増加している。The number of tourists increases every year. 倉庫 (そうこ): warehouse, storage 古い家具は倉庫に保管されている。The old furniture is stored in the warehouse. 294 SHOW CONTENTS 送別会 (そうべつかい): farewell party 同僚のために送別会を開いた。We held a farewell party for a colleague. 送料 (そうりょう): shipping fee, postage この商品は送料が無料です。Shipping for this item is free. 袖 (そで): sleeve 袖にシミがついているよ。There’s a stain on your sleeve. 速度 (そくど): speed 車の速度を落としてください。Please reduce your speed. 創作 (そうさく): creation, creative work 彼はSF小説の創作に励んでいる。He is devoted to writing science fiction stories. 想像 (そうぞう): imagination 彼の話は想像以上に面白かった。His story was more interesting than I imagined. 育つ (そだつ): to grow up, to be raised この植物は日陰でもよく育つ。This plant grows well even in the shade. 祖先 (そせん): ancestors 私の祖先は農民だったそうです。My ancestors were said to be farmers. 注ぐ (そそぐ): to pour (into), to fill グラスにワインを注いでください。Please pour wine into the glass. 外側 (そとがわ): outside, exterior 箱の外側にラベルを貼ってください。Please stick the label on the outside of the box. 粗末 (そまつ): crude, shabby, humble 粗末な食事で申し訳ありません。Sorry for the humble meal. 揃う (そろう): to be complete, to gather メンバーが全員揃った。All members have gathered. 揃える (そろえる): to collect, to arrange, to match 書類を揃えてから提出してください。Please organize the documents before submitting them. その上 (そのうえ): moreover, besides 彼は親切で、その上ユーモアもある。He is kind and, moreover, has a sense of humor. その代わり (そのかわり): instead, in exchange 行けませんが、その代わりに資料を送ります。I can\u0026rsquo;t go, but I’ll send the documents instead. 剃る (そる): to shave 毎朝ひげを剃っている。I shave every morning. 逸れる (それる): to go off course, to deviate 話が本題から逸れてしまった。The conversation strayed from the main topic. 損 (そん): loss, disadvantage 早く買えば損はしませんよ。You won’t lose anything by buying early. その場 (そのば): on the spot, there and then 彼はその場で答えを出した。He gave an answer on the spot. 大学院 (だいがくいん): graduate school 彼は大学院で物理学を研究している。He is studying physics in graduate school. 295 SHOW CONTENTS 体育 (たいいく): physical education 体育の授業でバスケットボールをした。We played basketball in P.E. class. 損失 (そんしつ): loss, damage 火災で大きな損失を受けた。We suffered a great loss due to the fire. 第一 (だいいち): first, primary 安全が第一です。Safety comes first. 存じる (ぞんじる): to know (humble form) その件については存じません。I’m not aware of that matter. 代金 (だいきん): payment, price 代金はカードで支払いました。I paid the amount by card. 大工 (だいく): carpenter 父は大工として働いている。My father works as a carpenter. 退屈 (たいくつ): boredom 雨の日は退屈でたまらない。Rainy days are unbearably boring. 対策 (たいさく): countermeasure, measure 地震対策を強化する必要がある。We need to strengthen earthquake countermeasures. 対照 (たいしょう): contrast, comparison 二人の性格は対照的だ。Their personalities are in contrast. 退勤 (たいきん): leaving work 今日は早めに退勤した。I left work a bit early today. 体験 (たいけん): experience (personally doing something) 田舎で農業を体験した。I experienced farming in the countryside. 滞在 (たいざい): stay, sojourn 一週間の滞在を予定しています。I plan to stay for a week. 大した (たいした): considerable, great 彼の怪我は大したことなかった。His injury wasn’t serious. 大根 (だいこん): daikon radish 味噌汁に大根を入れました。I added daikon to the miso soup. 大して (たいして): not very (when used with negatives) 大して難しくなかった。It wasn’t very difficult. 体重 (たいじゅう): body weight 体重が増えてしまった。I gained weight. 大小 (だいしょう): size, large and small 大小さまざまな箱がある。There are boxes of various sizes. 対象 (たいしょう): target, object (of study, survey, etc.) 学生を対象にアンケートを行った。We conducted a survey targeting students. 体積 (たいせき): volume (three-dimensional space) この箱の体積を測ってください。Please measure the volume of this box. 退職 (たいしょく): retirement, resignation 彼は来月退職する予定です。He plans to retire next month. 296 SHOW CONTENTS 対する (たいする): to face, to be directed at, to oppose 彼は質問に対する答えを準備していた。He had prepared an answer for the question. 体力 (たいりょく): physical strength 体力をつけるために運動している。I exercise to build physical strength. 体調 (たいちょう): physical condition 今日は体調が悪い。I’m not feeling well today. 代表 (だいひょう): representative, delegation 彼は会社の代表として出席した。He attended as the company’s representative. 大量 (たいりょう): large quantity 大量の注文が入りました。We received a large order. 対面 (たいめん): face-to-face meeting 彼とは初めての対面だった。It was my first time meeting him in person. 大統領 (だいとうりょう): president (of a country) 大統領が演説を行った。The president gave a speech. 大陸 (たいりく): continent アフリカは広い大陸だ。Africa is a vast continent. 絶えず (たえず): constantly, continually 彼は絶えず文句を言っている。He’s constantly complaining. 高まる (たかまる): to rise, to increase (emotion, ability, etc.) 関心が高まっている。Interest is increasing. 互いに (たがいに): mutually, each other 二人は互いに助け合っている。The two help each other. 高める (たかめる): to raise, to enhance 能力を高める努力をしている。I’m trying to improve my abilities. 宝物 (たからもの): treasure この写真は私の宝物です。This photo is my treasure. 多少 (たしょう): a little, somewhat 多少の誤差は許容される。Some margin of error is allowed. 畳む (たたむ): to fold 洗濯物を畳んでしまった。I folded and put away the laundry. 確かめる (たしかめる): to confirm, to verify 予定を確かめてから連絡します。I’ll check the schedule and get back to you. 宅配便 (たくはいびん): home delivery service 宅配便で荷物を送った。I sent the package by courier. 抱く (だく / いだく): to hold, to embrace (だく = physical / いだく = abstract) 赤ちゃんを優しく抱いた。She gently held the baby in her arms. 夢を抱いて上京した。I moved to Tokyo with a dream. (いだく) 戦う (たたかう): to fight, to compete 自由のために戦った。They fought for freedom. 立場 (たちば): position, standpoint 自分の立場を考えて発言しなさい。Speak while considering your position. 297 SHOW CONTENTS 発つ (たつ): to depart, to leave (for a journey) 明日、東京を発つ予定です。I plan to leave Tokyo tomorrow. 立ち寄る (たちよる): to stop by, to drop in 帰りにコンビニに立ち寄った。I stopped by the convenience store on the way home. 例える (たとえる): to compare, to liken 人生は旅に例えられる。Life is often compared to a journey. 頼み (たのみ): request, favor 彼から急な頼みをされた。He made an urgent request. 谷 (たに): valley 山と山の間に美しい谷がある。There’s a beautiful valley between the mountains. 種子 (しゅし / たね)**: seed この植物の種子をまいた。I sowed the seeds of this plant. 溜まる (たまる): to accumulate, to pile up 宿題が溜まってしまった。My homework has piled up. ため息 (ためいき): sigh 彼は深いため息をついた。He let out a deep sigh. 便り (たより): news, letter 久しぶりに友人から便りが届いた。I received a letter from a friend after a long time. 旅 (たび): journey, trip 一人で旅に出かけた。I went on a trip alone. 足りない (たりない): not enough, insufficient お金が足りない。I don’t have enough money. 短気 (たんき): short-tempered 彼は短気だから注意して。Be careful—he has a short temper. 単位 (たんい): unit, credit (school) この科目は3単位です。This subject is worth three credits. 溜める (ためる): to accumulate, to save (money, etc.) お金を少しずつ溜めている。I’m gradually saving money. 段階 (だんかい): stage, phase 今は計画の初期段階です。We’re in the early stage of planning. 短期 (たんき): short-term 短期留学をしたい。I want to study abroad short-term. 試しに (ためしに): as a trial, just to try 試しにこのソフトを使ってみた。I tried this software out as a test. 足りる (たりる): to be enough, to suffice 時間は足りると思う。I think we have enough time. 男子 (だんし): boy, male (young man) クラスの男子がサッカーをしていた。The boys in the class were playing soccer. 団地 (だんち): apartment complex 団地に住んでいる。I live in an apartment complex. 298 SHOW CONTENTS 足らず (たらず): less than, just under 三日足らずで完成した。It was completed in less than three days. 断定 (だんてい): conclusion, assertion 彼の話だけで断定するのは早い。It’s too early to make a conclusion based only on his story. 担当 (たんとう): in charge, responsible この仕事は私が担当します。I will be in charge of this task. 頼る (たよる): to rely on, to depend on 彼に頼るしかなかった。I had no choice but to rely on him. 短所 (たんしょ): weak point, shortcoming 誰にでも短所はある。Everyone has shortcomings. 単に (たんに): simply, merely 単に冗談のつもりだった。I merely meant it as a joke. 担任 (たんにん): homeroom teacher 担任の先生は優しい。Our homeroom teacher is kind. 近づく (ちかづく): to approach, to get close 台風が近づいている。A typhoon is approaching. 近々 (ちかぢか): soon, in the near future 近々引っ越す予定です。I plan to move soon. 近づける (ちかづける): to bring near, to let (something) approach 火を顔に近づけないで。Don’t bring the fire close to your face. 茶の間 (ちゃのま): living room (Japanese style) 茶の間でテレビを見ていた。I was watching TV in the living room. 縮む (ちぢむ): to shrink, to contract 洗濯したらセーターが縮んだ。The sweater shrank after washing. 知識 (ちしき): knowledge 知識を広げることは大切だ。It’s important to broaden your knowledge. 地名 (ちめい): place name この地名は歴史がある。This place name has historical significance. 近寄る (ちかよる): to approach, to draw near 猫が静かに近寄ってきた。The cat quietly approached. 縮める (ちぢめる): to shorten, to shrink (something) スカートの丈を縮めた。I shortened the length of the skirt. チャイム: chime, doorbell チャイムが鳴って授業が始まった。The chime rang and class started. 中古 (ちゅうこ): secondhand, used 中古の車を買った。I bought a used car. 注文 (ちゅうもん): order (e.g., at a restaurant or online) 注文を確認してください。Please confirm the order. 駐車 (ちゅうしゃ): parking この場所に駐車しないでください。Please don’t park here. 299 SHOW CONTENTS 中年 (ちゅうねん): middle age 父はもう中年だ。My father is already middle-aged. 長女 (ちょうじょ): eldest daughter 長女は医者になった。The eldest daughter became a doctor. 長所 (ちょうしょ): strength, strong point 彼の長所は努力家なところだ。His strength is being hardworking. 聴解 (ちょうかい): listening comprehension 聴解の練習を毎日している。I practice listening comprehension every day. 長距離 (ちょうきょり): long distance 長距離バスに乗った。I took a long-distance bus. 調子 (ちょうし): condition, tone 最近、体の調子がいい。I\u0026rsquo;ve been feeling well lately. 長期 (ちょうき): long-term 長期計画を立てる必要がある。We need to make a long-term plan. 直接 (ちょくせつ): directly 社長に直接話を聞いた。I heard the story directly from the president. 著者 (ちょしゃ): author この本の著者は有名な学者です。The author of this book is a famous scholar. 賃貸 (ちんたい): rental, lease 賃貸マンションを探している。I’m looking for a rental apartment. 治療 (ちりょう): treatment, medical care 怪我の治療を受けた。I received treatment for my injury. つい: just now, unintentionally つい食べ過ぎてしまった。I ended up eating too much unintentionally. 頂上 (ちょうじょう): summit, top 山の頂上に到着した。We reached the mountain summit. 調節 (ちょうせつ): adjustment, regulation 温度を調節する。Adjust the temperature. 散らかす (ちらかす): to scatter, to make a mess 子供たちが部屋を散らかした。The kids messed up the room. 頂点 (ちょうてん): peak, top, summit キャリアの頂点に立つ。Reach the peak of one’s career. 頂戴 (ちょうだい): (humble) receiving, please (give me) お水を一杯頂戴。Please give me a glass of water. 長方形 (ちょうほうけい): rectangle ノートは長方形の形をしている。The notebook is rectangular in shape. 調味料 (ちょうみりょう): seasoning, condiment 調味料を少し加えてください。Please add a little seasoning. 貯金 (ちょきん): savings 毎月少しずつ貯金している。I save a little money each month. 300 SHOW CONTENTS 通過 (つうか): passing through 電車はこの駅を通過します。The train will pass through this station. 通学 (つうがく): commuting to school 毎日自転車で通学している。I commute to school by bike every day. 遂に (ついに): finally, at last 遂に夢が叶った。My dream finally came true. 通信販売 (つうしんはんばい): mail order, online shopping 通信販売で服を買った。I bought clothes through mail order. 通行人 (つうこうにん): passerby 通行人に道を尋ねた。I asked a passerby for directions. 通帳 (つうちょう): bankbook 通帳に記帳してください。Please update the bankbook. 捕まる (つかまる): to be caught, to be arrested 犯人が警察に捕まった。The criminal was caught by the police. 使い捨て (つかいすて): disposable 使い捨てカメラを使った。I used a disposable camera. 付き合い (つきあい): association, socializing 仕事の付き合いで飲みに行った。I went out drinking for work-related socializing. 付き合う (つきあう): to associate with, to date 彼と付き合って三ヶ月になる。I’ve been dating him for three months. 通訳 (つうやく): interpretation, interpreter 英語の通訳を頼まれた。I was asked to interpret English. 使い道 (つかいみち): use, way to use ボーナスの使い道を考えている。I\u0026rsquo;m thinking about how to use my bonus. 付き (つき): with, attached 朝食付きのプランを選んだ。I chose a plan with breakfast. 浸かる (つかる): to soak, to be immersed 温泉に浸かって疲れを取った。I soaked in the hot spring and relieved my fatigue. 掴む (つかむ): to grab, to grasp チャンスを掴んだ。I seized the opportunity. 突き当たり (つきあたり): end of a street or hallway 廊下の突き当たりにトイレがある。The restroom is at the end of the hallway. 作り (つくり): structure, build, style この建物は古い作りをしている。This building has an old-fashioned structure. 突く (つく): to poke, to thrust 指で彼の肩を突いた。I poked his shoulder with my finger. 繋がる (つながる): to be connected この道は駅に繋がっている。This road leads to the station. 301 SHOW CONTENTS 繋ぐ (つなぐ): to connect, to link, to tie together 電話線を繋ぐ必要がある。We need to connect the telephone line. 潰れる (つぶれる): to be crushed, to be smashed, to go bankrupt あの店は潰れてしまった。That shop went bankrupt. 土 (つち): soil, earth, ground 植物は土の中で育つ。Plants grow in the soil. 津波 (つなみ): tsunami, tidal wave 津波の警報が発令された。A tsunami warning was issued. 作り出す (つくりだす): to produce, to create, to manufacture 彼は新しい製品を作り出した。He created a new product. 翼 (つばさ): wing 鳥は翼を広げて飛ぶ。Birds fly by spreading their wings. 粒 (つぶ): grain, small particle, drop 砂糖の粒が溶ける。The grains of sugar dissolve. 潰す (つぶす): to crush, to smash, to waste (time or opportunity) 時間を潰すためにテレビを見た。I watched TV to kill time. 罪 (つみ): sin, crime, guilt 彼は罪を認めた。He admitted his guilt. 詰めきる (つめきる): to pack completely, to fill up fully 荷物を詰めきって旅行に出発した。He packed all the luggage and left for the trip. 爪 (つめ): nail, claw 猫の爪は鋭い。A cat’s claws are sharp. 積もる (つもる): to pile up, to accumulate (usually snow or dust) 雪が屋根に積もっている。Snow has piled up on the roof. 積む (つむ): to stack, to pile up, to load 荷物をトラックに積む。Load the luggage onto the truck. 吊るす (つるす): to hang, to suspend 洗濯物を外に吊るす。Hang the laundry outside. 出会う (であう): to meet by chance, to encounter 彼女と偶然出会った。I met her by chance. 定員 (ていいん): capacity (number of people allowed) バスの定員は50人です。The bus capacity is 50 people. 出会い (であい): encounter, meeting 旅行で素敵な出会いがあった。I had a wonderful encounter during the trip. 定期券 (ていきけん): commuter pass, season ticket 電車の定期券を買った。I bought a commuter pass for the train. 停留所 (ていりゅうじょ): bus stop, tram stop 次の停留所で降ります。I will get off at the next bus stop. 停電 (ていでん): power outage, blackout 昨夜は停電で困った。Last night, we had trouble because of the power outage. 302 SHOW CONTENTS お巡りさん (おまわりさん): police officer (friendly term) 道に迷ったら、お巡りさんに聞くといいよ。If you get lost, it’s good to ask a police officer. 親子丼 (おやこどん): chicken and egg rice bowl 昼ご飯に親子丼を食べた。I ate oyakodon for lunch. 階建て (かいだて): number of stories (in a building) そのビルは10階建てです。That building has 10 stories. 書留 (かきとめ): registered mail 書留で大事な書類を送った。I sent important documents by registered mail. 掛かる (かかる): to take (time, money), to hang, to be caught (in something) 仕事に3時間掛かった。The work took three hours. 掛ける (かける): to hang something, to put on (glasses), to make (a call) 壁に絵を掛けた。I hung a picture on the wall. 被る (かぶる): to wear (a hat), to cover, to suffer (loss) 帽子を被って外に出た。I put on a hat and went outside. 粥 (かゆ): rice porridge, congee 風邪の時は粥が食べやすい。Rice porridge is easy to eat when you have a cold. 唐揚げ (からあげ): Japanese-style fried chicken 昨夜、唐揚げを作った。I made fried chicken last night. 看板 (かんばん): signboard, billboard 店の前に大きな看板がある。There is a big signboard in front of the shop. 消える (きえる): to disappear, to go out (light, fire) 電気が突然消えた。The lights suddenly went out. 北側 (きたがわ): north side 部屋は北側にあります。The room is on the north side. 警備 (けいび): security, guard duty 警備員が建物を見回っている。Security guards are patrolling the building. 原稿 (げんこう): manuscript, draft 作家は新しい原稿を書いている。The writer is writing a new manuscript. 消す (けす): to turn off, to erase, to extinguish 電気を消してください。Please turn off the light. 濃い (こい): strong (taste, color), dense, thick コーヒーが濃い味だ。The coffee has a strong flavor. 高等学校 (こうとうがっこう): high school 彼は地元の高等学校に通っている。He attends the local high school. 交差点 (こうさてん): intersection, crossing 交差点で信号を待った。I waited at the traffic light at the intersection. この前 (このまえ): the other day, recently この前、友達に会った。I met my friend the other day. 先に (さきに): ahead, before, earlier 先に行って待っていてください。Please go ahead and wait. 注す (さす): to pour (usually liquids like tea or sake) お茶を注してください。Please pour the tea. 303 SHOW CONTENTS 湿度 (しつど): humidity 今日の湿度は高い。Today\u0026rsquo;s humidity is high. じゃが芋 (じゃがいも): potato じゃが芋を使ってカレーを作った。I made curry using potatoes. 締める (しめる): to tighten, to fasten, to close (e.g., a door) ネジをしっかり締めてください。Please tighten the screw firmly. 出産 (しゅっさん): childbirth, delivery 妻が無事に出産した。My wife gave birth safely. 焼酎 (しょうちゅう): Japanese distilled liquor (shochu) 焼酎を飲むのが好きだ。I like drinking shochu. 少しも (すこしも): not at all (used with negatives) 彼の話は少しも理解できなかった。I couldn’t understand his story at all. 滑る (すべる): to slip, to slide 雨で道路が滑る。The road is slippery because of the rain. ストーブ: stove, heater 冬はストーブを使う。We use a heater in winter. 節分 (せつぶん): Setsubun (bean-throwing festival to drive away evil spirits) 節分に豆まきをした。We threw beans at Setsubun. 背広 (せびろ): suit (men’s business suit) 彼は背広を着て出勤した。He wore a suit to work. 確かめる (たしかめる): to confirm, to verify 出発前に予約を確かめた。I confirmed the reservation before departure. 卓球 (たっきゅう): table tennis, ping pong 週末に友達と卓球をした。I played table tennis with friends on the weekend. 月見 (つきみ): moon viewing (festival or event) 秋に月見を楽しむ。Enjoy moon viewing in autumn. 付ける (つける): to attach, to turn on, to add 電気を付けてください。Please turn on the light. 伝える (つたえる): to convey, to communicate, to report 先生に伝言を伝えた。I delivered a message to the teacher. 勤める (つとめる): to work for (a company, organization) 彼は銀行に勤めている。He works at a bank. 露 (つゆ): dew 朝、葉っぱに露がついていた。There was dew on the leaves in the morning. 梅雨 (つゆ): rainy season 梅雨は6月から7月にかけて続く。The rainy season lasts from June to July. 定価 (ていか): fixed price, list price この本は定価で買った。I bought this book at the fixed price. 丁寧 (ていねい): polite, courteous, careful 彼女は丁寧な話し方をする。She speaks politely. 304 SHOW CONTENTS テキスト: text (usually written or digital text) 授業のテキストをコピーした。I copied the class text. 天候 (てんこう): weather, climatic conditions 天候が悪くて試合が中止になった。The game was canceled due to bad weather. 特技 (とくぎ): special skill, talent 彼の特技はピアノ演奏だ。His special skill is playing the piano. ドリンク: drink, beverage パーティーでドリンクを用意した。I prepared drinks for the party. 仲 (なか): relationship, relations, friendship 彼とは長い仲だ。We have a long-standing relationship. 直す (なおす): to fix, to repair, to correct 壊れた時計を直した。I fixed the broken clock. 無くす (なくす): to lose something 財布を無くして困った。I lost my wallet and was troubled. 悩む (なやむ): to worry, to be troubled 進路について悩んでいる。I’m worried about my career path. 並ぶ (ならぶ): to line up, to stand in a line 店の前に人が並んでいる。People are lining up in front of the store. 並べる (ならべる): to arrange, to line up things 本を棚に並べた。I arranged books on the shelf. 人間 (にんげん): human being, person 人間は社会的な動物だ。Humans are social animals. 脱ぐ (ぬぐ): to take off (clothes, shoes) 家に入ったら靴を脱いでください。Please take off your shoes when you enter the house. 温い (ぬるい): lukewarm, tepid このお茶は温すぎる。This tea is too lukewarm. 年賀状 (ねんがじょう): New Year\u0026rsquo;s card 毎年、友達に年賀状を送る。I send New Year\u0026rsquo;s cards to my friends every year. 飲み会 (のみかい): drinking party, social gathering with drinks 会社の飲み会に参加した。I attended a company drinking party. 糊 (のり): glue, paste 紙に糊を塗った。I applied glue to the paper. 灰皿 (はいざら): ashtray 灰皿はテーブルの上にある。The ashtray is on the table. 葉書 (はがき): postcard 海外から葉書が届いた。I received a postcard from overseas. 二十歳 (はたち): twenty years old (age) 彼女は今年二十歳になった。She turned twenty this year. 二十日 (はつか): the twentieth day of the month 支払いは二十日にしてください。Please make the payment on the twentieth. 305 SHOW CONTENTS 張る (はる): to stick, to stretch, to put up 壁にポスターを張った。I put up a poster on the wall. 番目 (ばんめ): -th (ordinal number suffix) 彼はクラスで三番目に背が高い。He is the third tallest in the class. フィルム: film (camera or movie film) 昔はカメラにフィルムを入れて撮影していた。In the past, we used film in cameras to take pictures. 振る (ふる): to wave, to shake, to sprinkle 手を振って友達に挨拶した。I waved my hand to greet my friend. 故郷 (ふるさと): hometown, birthplace 久しぶりに故郷に帰った。I returned to my hometown after a long time. 細い (ほそい): thin, slender 細い道を歩いて行った。I walked along a narrow path. 迷子 (まいご): lost child デパートで迷子のアナウンスがあった。There was an announcement about a lost child in the department store. 丸い (まるい): round, circular このテーブルは丸い形をしている。This table is round. 迷う (まよう): to get lost, to be indecisive 道に迷ってしまった。I got lost. 見送り (みおくり): seeing someone off, farewell 空港で友達を見送りした。I saw my friend off at the airport. 磨く (みがく): to brush, to polish 毎日歯を磨くことが大切だ。It’s important to brush your teeth every day. 短い (みじかい): short (length or time) 短い休みを楽しんだ。I enjoyed the short break. 家賃 (やちん): rent (for housing) 家賃が高くて引っ越した。I moved because the rent was too high 浴衣 (ゆかた): yukata (casual summer kimono) 夏祭りに浴衣を着て行った。I wore a yukata to the summer festival. ライタ: lighter タバコを吸うためにライタを使った。He used a lighter to smoke a cigarette. 寮 (りょう): dormitory 大学の寮に住んでいる。I live in a university dormitory. 渡る (わたる): to cross (a bridge, road, etc.) 道を渡るとコンビニがある。There’s a convenience store across the street. 渡す (わたす): to hand over, to give プレゼントを友達に渡した。I gave the present to my friend. 会う (あう): to meet 明日、友達に会う予定です。I plan to meet my friend tomorrow. 上がる (あがる): to go up, to rise, to enter (a house) 物価が上がっている。Prices are rising. 306 SHOW CONTENTS 開く (ひらく/あく): to open ドアが開くと、風が入ってきた。When the door opened, the wind came in. 当たる (あたる): to hit, to win (a prize), to be correct 宝くじに当たった。I won the lottery. 憧れ (あこがれ): longing, admiration 海外生活は多くの人の憧れだ。Living abroad is a dream for many people. 上げる (あげる): to raise, to give 手を上げて答えてください。Raise your hand and answer, please. 充電 (じゅうでん): charging (a battery) スマホの充電が切れた。My phone’s battery died. 物語 (ものがたり): story, tale この映画は感動的な物語だ。This movie is a touching story. 候補 (こうほ): candidate, nominee 新しい市長の候補が発表された。The new mayoral candidates were announced. 温める (あたためる): to warm up スープを温めて飲んだ。I warmed up the soup and drank it. 与える (あたえる): to give, to provide 先生は生徒に課題を与えた。The teacher gave the students an assignment. 当てる (あてる): to hit, to guess correctly, to apply クイズの答えを当てた。I guessed the quiz answer correctly. 編む (あむ): to knit, to braid 母がセーターを編んでくれた。My mother knitted a sweater for me. アナウンサー: announcer, newscaster 彼女はテレビのアナウンサーです。She is a TV announcer. 謝る (あやまる): to apologize 遅れてきたことを謝った。I apologized for being late. 油 (あぶら): oil フライパンに油をひいた。I added oil to the frying pan. 表す (あらわす): to express, to represent 感謝の気持ちを言葉で表す。Express gratitude with words. 編み物 (あみもの): knitting, knitted goods 冬になると編み物を始める人が多い。Many people start knitting in winter. 平和賞 (へいわしょう): peace prize 彼はノーベル平和賞を受賞した。He won the Nobel Peace Prize. 委員会 (いいんかい): committee 新しい制度について委員会で話し合った。The committee discussed the new system. 核兵器 (かくへいき): nuclear weapons 核兵器の廃絶が望まれている。Abolition of nuclear weapons is desired. 不整脈 (ふせいみゃく): arrhythmia, irregular heartbeat 医者に不整脈と診断された。I was diagnosed with arrhythmia by the doctor. 読解 １、日本の寿司の種類と作り方 SHOW CONTENTS 今日有名な寿司屋に行きました、沢山の寿司食べました。日本の寿司には、沢山の種類があります。代表的な物は、握り寿司、ちらし寿司、巻き寿司、稲荷寿司、箱寿司、そして回転寿司です。これらの寿司は、それぞれ異なる材料と作り方を使います。\nToday, I went to a famous sushi restaurant and ate a lot of sushi. Japanese sushi has many varieties. The most representative types are nigiri sushi, chirashi sushi, maki sushi, inari sushi, oshi sushi (pressed sushi), and kaiten sushi (conveyor belt sushi). Each of these sushi types uses different ingredients and preparation methods.\nYour browser does not support the audio element. SHOW NOTES 沢山（たくさん）：a lot 種類（しゅるい）：variety, kind, type, category 代表的（だいひょうてき）：representitive 握り寿司（にぎりすし）：Nigiri-zushi is the most common type of sushi. It consists of a small mound of vinegared rice topped with a slice of fish or other seafood. ちらし寿司（ちらしずし）：Chirashi means \u0026ldquo;scattered,\u0026rdquo; and this sushi is made by scattering sushi ingredients, such as fish, vegetables, and egg over a bowl of sushi rice. 巻き寿司（まきずし）：Maki-zushi refers to sushi that\u0026rsquo;s rolled in sheet of nori (seaweed) with rice, fish, and vegetables inside. The roll is then sliced into bite-sized pieces. 稲荷寿司（いなりずし）：Inari-zushi consists of vinegared rice stuffed inside a pocket of sweet, marinated tofu skin called \u0026ldquo;aburaage\u0026rdquo;. It\u0026rsquo;s often served as a snack or appetizer. 箱寿司（はこずし）：Oshi-zushi is a type of pressed sushi from the Kansai region. The ingredients (fish, vegetables, and rice) are arranged in a box and then pressed together to form a compact, rectangular shape. It\u0026rsquo;s sliced into blocks for serving. 回転寿司（かいてんずし）：Kaiten-zushi is a style of sushi restaurant where plates of sushi are placed on a rotating conveyor belt. Customers can pick the plates they want as they pass by. それぞれ：each, respectively 異なる（ことなる）：to be different, to vary 材料（ざいりょう）：materials, ingredients 作り方（つくりかた）：way of making SHOW CONTENTS まず、握り寿司は、小さなお米を手で握る方法で作ります。その上に新鮮な魚介類、例えばマグロやサーモン、鯛、烏賊などが乗せられます。海苔やわさびが付け合わせとして使われることもあります。お米は、特別な方法で炊く必要があります。炊き立てのお米に酢を混ぜて、寿司の材料と合わせます。\nFirst, nigiri sushi is made by hand-pressing small portions of vinegared rice. On top of the rice, fresh seafood such as tuna, salmon, sea bream, or squid is placed. Sometimes, nori (seaweed) or wasabi is added as a garnish. The rice must be prepared in a specific way—freshly steamed rice is mixed with vinegar and then paired with the sushi toppings.\nYour browser does not support the audio element. SHOW NOTES お米（おこめ）：rice 握る（にぎる）：to grasp, to clutch 魚介類（ぎょかいるい）：marine products, seafood 例えば（たとえば）：for example, e.g. 鮪（マグロ）：tuna　サーモン：salmon　鯛（たい）：sea bream　烏賊（いか）：squid 乗せられ（のせられ）：place on 海苔（のり）：Nori 山葵（わさび）：Wasabi 付け合わせ（つけあわせ）：garnish 特別（とくべつ）：special, particular 方法（ほうほう）：method, way 炊く（たく）：to cook 炊き立て（たきたて）：freshly boiled (rice), steaming 酢（す）：vinegar 混ぜ（まぜ）：to mix, to stir 合わせます（あわせます）：to mix, to combine SHOW CONTENTS 次に、ちらし寿司は、寿司のお米の上にたくさんの魚介類を散らして作ります。イクラや海胆、蛸や帆立もよく使われます。この寿司は見た目がとてもきれいで、食べるのが楽しいです。\nNext, chirashi sushi is made by artfully scattering various seafood over sushi rice. Ingredients like salmon roe (ikura), sea urchin (uni), octopus, and scallops are commonly used. This sushi is visually stunning and makes for a delightful eating experience.\nYour browser does not support the audio element. SHOW NOTES 散らし（ちらし）：scattering イクラ：salted salmon roe 海胆（うに）：sea urchin 蛸（たこ）：octopus 帆立（ほたて）：Japanese scallop 見た目（みため）：appearance, look SHOW CONTENTS 巻き寿司は、海苔の上にお米と魚介類を乗せ、巻くことで作ります。中に胡麻やわかめを入れることもあります。\nMaki sushi is made by placing rice and seafood on nori seaweed and rolling it tightly. Sesame seeds or wakame seaweed are sometimes added inside for extra flavor and texture.\nYour browser does not support the audio element. SHOW NOTES 巻く（まく）：to roll 胡麻（ごま）：sesame seeds 若布（わかめ）：若布 is a type of edible seaweed commonly used in Japanese cuisine. It is often found in dishes such as miso soup, seaweed salad, ramen, and sushi. SHOW CONTENTS また、稲荷寿司は、甘く味付けされた油揚げにお米を詰めたものです。箱寿司は、特に関西地方で人気があり、箱に詰めたお米と魚を固めることで作ります。\nInari sushi features sweetly seasoned fried tofu pouches stuffed with vinegared rice. Oshi sushi (pressed sushi), particularly popular in the Kansai region, is made by compacting layers of rice and fish in a wooden mold.\nYour browser does not support the audio element. SHOW NOTES 味付けされた（あじつけされた）：seasoned (flavor). 油揚げ（あぶらあげ）: deep-frying 詰めた（つめた）：to stuff into, to fill 関西（かんさい）：Kansai (関西) is a region in Japan that includes major cities such as 大阪（Osaka）, 京都（Kyoto）, 神戸（Kobe）, 奈良（Nara）, and 和歌山（Wakayama）. 地方（ちほう）：district, region 固める（かためる）：to press firmly, to solidify. SHOW CONTENTS 回転寿司は、レストランでよく見かけます。回るコンベアの上に様々な寿司が乗っていて、食べたいものを選ぶことができます。\nKaiten-zushi (conveyor belt sushi) is commonly seen in Japanese restaurants. Various sushi plates travel on a rotating conveyor belt, allowing customers to pick whatever they desire.\nYour browser does not support the audio element. SHOW NOTES 回る（まわる）：to turn, to rotate コンベア：conveyor 様々（さまざま）：various 選ぶ（えらぶ）：to choose, to select, to pick out SHOW CONTENTS 寿司に使う材料は、魚だけでなく、昆布や生姜（ガリ）もあります。塩っぱい味や酸っぱい味、そして甘味がバランスよく組み合わさるのが寿司の魅力です。わさびや胡椒でちょっとした辛さを加えることもあります。\nIngredients for sushi include not only fish, but also kelp and ginger (gari). Sushi is a well-balanced combination of salty, sour, and sweet flavors. Wasabi and pepper are sometimes used to add a little spiciness.\nYour browser does not support the audio element. SHOW NOTES 昆布（こんぶ）：kelp 生姜（しょうが）：ginner ガリ：sliced ginger prepared in vinegar (served with sushi); pickled ginger. バランス：balance 組み合わさる（くみあわさる）：to fit together, to combine 魅力（みりょく）：charm, appeal 胡椒（こしょう）：pepper ちょっとした（一寸した）：a touch of, a slight amount of 辛さ（つらさ）：spiciness 加える（くわえる）：to add SHOW CONTENTS 寿司を作る方法は、とてもシンプルですが、どれも新鮮な材料が大事です。最初に材料を準備し、混ぜることや飾ることが大切です。できあがると、どれも美味しいお寿司が完成します。\nThe methods for making sushi are quite simple, but fresh ingredients are essential. First, you prepare the components—mixing and arranging them carefully. When done right, the result is always delicious sushi.\nYour browser does not support the audio element. SHOW NOTES シンプル：simple 大事（だいじ）：important 最初（さいしょ）：beginning 準備（じゅんび）：preparation 飾る（かざる）：to decorate 大切（たいせつ）：important できあがると（出来上がると）：to be completed 完成（かんせい）：completion; perfection ","permalink":"https://signalyu.github.io/posts/3-humanities/languages/japanese/1-jlpt-n1/","summary":"リスニング 音楽 ブルー・ライト・ヨコハマ Your browser does not support the audio element. 歌詞見せて 街（まち『き』）の灯（あか）りが　とてもきれいね\nThe city lights are so beautiful\n城市的灯光如此美丽\nヨコハマ　ブルー・ライト・ヨコハマ\nYokohama, Blue Light Yokohama\n横滨，蓝色之光横滨\nあなたと二人　幸せよ\nWith you, I\u0026rsquo;m so happy\n与你在一起 多么幸福\nいつものように　愛のことばを\nAs always, whisper words of love\n像往常一样 请对我说爱的蜜语\nヨコハマ　ブルー・ライト・ヨコハマ\nYokohama, Blue Light Yokohama\n横滨，蓝色之光横滨\n私にください　あなたから\nPlease say them to me, my darling\n请对我说 亲爱的\n歩いても　歩いても\nNo matter how far we walk","title":"Japanese-Language Proficiency Test — N1"},{"content":"1. Order Food in Restaurant https://youtu.be/_izDbJ45Q5I SHOW NOTES I'm still working on it. This sentence expresses that an action is ongoing and not yet completed. It also suggests that more time is needed to finish it. Did you finish reading? — I\u0026rsquo;m still working on it. Did you fix my car? — I\u0026rsquo;m still working on it. Coke and Fries This refers to a popular combination of fast food: Coca-cola and French Fries. Complimentary This word is used to describe something that is free of charge or offered as a gift. For example: The hotel offers complimentary breakfast. (The breakfast is free of charge.) I'll go with This phrase means to choose or select something from available options. For example: I\u0026rsquo;ll go with pizza. (Pizza is the chosen option over others.) Grab This word means to qucikly take hold of something or pick something up in a hurry. For example: On your way home, can you grab some milk? Wait for me, please. I need to grab my coat. Let\u0026rsquo;s grab a cup of coffee. 2. Calling in Sick https://youtu.be/UCtpnO9r7pQ SHOW NOTES I'm feeling quite ill today. This phrase indicates that the person is experiencing discomfort or sickness. I'm coming down with the flu. This sentence means the person is starting to get sick with the flu. \u0026ldquo;Coming down with\u0026rdquo; is an informal way to say that someone is begining to show symptoms of disease. Calling in sick This phrase is commonly used to notify the employer by phone or email that the person will be absent due to illness. I was hoping to take the day off. This sentence means that the person wants to have a break from work for the day, usually because of personal reasons or illness. 3. Describe Someone\u0026rsquo;s Appearance https://youtu.be/KRysx-guzlw SHOW NOTES Description of Someone's Appearance: He\u0026rsquo;s good looking, he\u0026rsquo;s quite tall, around 6'1. He\u0026rsquo;s in his early 30s, and he get the most beautiful dark brown eyes. Heard is the past tense of the verb hear, which means to listen or become aware of something through the sense of hearing. I heard you\u0026rsquo;re dating a new guy. Julie told me she heard that you\u0026rsquo;re pregnant. What! You got fired? I heard that you quit. Fill me in This phrase means to provide someone with the details or information about something, especially if they missed out on it. For example: Can you fill me in on what happened during the meeting? Career path refers to the direction of someone\u0026rsquo;s career over time. It\u0026rsquo;s the journey someone follows in their professional life. For example: She\u0026rsquo;s thinking about changing her career path and moving into marketing. Goodlooking is used to describe someone who is attractive. It\u0026rsquo;s more natural than handsome. Hot is an informal term used to describe someone who is very attractive, typically in a physical or sexual way. However, it\u0026rsquo;s important to note that it is not always appropriate to use it directly when describing someone, as it can be considered somewhat impolite. It is more commonly used among friends or in casual settings as a comment or compliment. 4. Road Trip https://youtu.be/X8ch6GxkG7I SHOW NOTES Munchies refers to snacks or small amounts of food, often eaten casually or between meals. Fill up the tank means to fill the gas tank of a car with fuel. It\u0026rsquo;s often used when someone is getting ready to drive somewhere. A Pit Stop originally refers to a quick stop made by race cars during a race or refuel or change tires. In everyday language, it can refer to any quick stop made during a journey, such as for food, a bathroom break, etc. For example: Let\u0026rsquo;s make a pit stop for some coffee before we continue driving. We've got all our bases covered. This phrase means that all possible situations or needs have been thought about and planned for. For example: Don\u0026rsquo;t worry about the trip, we\u0026rsquo;ve got all our bases covered. We\u0026rsquo;ve got all our bases covered in case the Hurricane hits. Okay, I have my keys, wallet and passport, looks like I have all my bases covered. Let's get ... This is a common expression used to start something or make it happen. It can be used in many contexts, such as starting a project, meal, or activity. For example: I have a chicken, so let\u0026rsquo;s get cooking. This house is really scary, let\u0026rsquo;s get out of here. I have another meeting in 20 minutes, so let\u0026rsquo;s get down to business. Are we ready to go? This is a question asking if everything is prepared and if it\u0026rsquo;s time to start or leave. It\u0026rsquo;s often used when you\u0026rsquo;re about to start a trip, a task, or an activity. For example: Are we ready to go? The car is packed! It's all set. This means that everything is prepared or ready to go. It suggests that no further work is needed and everything is in order. For example: Don\u0026rsquo;t worry about the meeting, it\u0026rsquo;s all set. 5. Computer Viruses https://youtu.be/1Ic3G-KyEzQ SHOW NOTES Froze refers to something especially a computer or software that suddenly stopped responding and is no longer working, For example: My computer froze when I was trying to open the file. Infected file refers to a file on a computer that has been corrupted or infected by a virus or malware. Up to date means that something is current, recent, and has the latest information or updates. For example: I need to buy a new computer, because mine isn\u0026rsquo;t up to date. I can\u0026rsquo;t find the street, are you sure this map is up to date. Sarah has just finished the reports and all the information is up to date. I'll be right... It is an informal way to describe someone will return or be ready very soon. For example: Can you help me with my computer. — I\u0026rsquo;ll be right there. Come downstairs, dinner is ready. — I\u0026rsquo;ll be right down. Hurry up! I need to use the bathroom. — I\u0026rsquo;ll be right out. It turns out that This phrase is used to reveal a surprising or unexpected result or discovery. It often introduces new information. For example: Frank didn\u0026rsquo;t come to work today, and it turns out that he was sick. I\u0026rsquo;ve been feeling really sick recently, it turns out that I\u0026rsquo;m pregnant. It's acting up again. When something \u0026ldquo;acts up,\u0026rdquo; it means it\u0026rsquo;s behaving in an unusual or malfunctioning way. It is commonly used to describe a technical problem. For example: Oh great! That stupid computer froze again, that\u0026rsquo;s the third time today. 6. Embarrassing Situation https://youtu.be/yFAepMyEIWM SHOW NOTES In a bit of a hurry This phrase means that someone need to do something quickly. For example: Can you drive fast, I\u0026rsquo;m in a bit of a hurry. I can\u0026rsquo;t talk right now, I\u0026rsquo;m in a bit of a hurry. I\u0026rsquo;m in a bit of a hurry, so I\u0026rsquo;ll check these files later. Slipped my mind This means that someone forgot something unintentionally. For example: I\u0026rsquo;m sorry I forgot to respond to your email, it just slipped my mind. I meant to call you but it completely slipped my mind. Don\u0026rsquo;t you know what day is it today? — Oh, it\u0026rsquo;s your birthday. It completely slipped my mind. around here This refers to the local area or the place where someone is currently. For example: Are there any good restaurants around here? Is there a bank around here? Extention: Los Angeles is a great city, I used to live around there. terrible with This means someone is not good at something. For example, You\u0026rsquo;re terrible with numbers, you can\u0026rsquo;t even remember your own telephone number. I\u0026rsquo;m teribble with directions, I\u0026rsquo;m always getting lost. I\u0026rsquo;m teribble with faces, I can never remember what people look like. how's it going? This sentence is a casual, native way to greet someone. For example, How\u0026rsquo;s it going? Everything is going well. 7. Watch a Movie https://youtu.be/8LwCV7IHgss SHOW NOTES inconsiderate This word describes someone who is thoughtless or doesn\u0026rsquo;t consider how their actions affect others. For example: It was inconsiderate of him to interrupt during the meeting. keep it down This phrase is used to ask someone to lower the volume or make less noise. For example: I\u0026rsquo;m trying to study, do you mind keeping it down? not such a big deal This phrase is used to suggest that something is not as important or serious as it may seem. For example: Don\u0026rsquo;t worry about the mistake; it\u0026rsquo;s not such a big deal. I can\u0026rsquo;t get these files to you by tomorrow. — It\u0026rsquo;s OK, it\u0026rsquo;s not such a big deal. switch it off This means to turn something off, usually referring to electronics or devices. For example: Please switch it off when you\u0026rsquo;re done using the computer. can't hear a thing This phrase means that it is so noisy that it is impossible to hear anything clearly. For example: What? This music is too loud, I can\u0026rsquo;t hear a thing. Do you mind... This is a polite way to ask if someone is okay with something or if something would be a problem. For example: Do you mind holding my coat for me? I forgot my wallet. Do you mind paying for dinner? Do you mind turning off your phone? 8. In Debt https://youtu.be/QHeOq0D4zjU SHOW NOTES recession refers to a period of economic decline when businesses slow down and unemployment rises. For example: The country is going through a recession, and many people are losing their jobs. mortgagerefers to a loan taken out to buy property, where the property itself serves as collateral until the loan is paid off. For example: He has a mortgage on his house, and he\u0026rsquo;s paying it off monthly. hit me pretty hard This phrase means something had a strong, negative impact on someone emotionally or financially. For example: My divorce hit me pretty hard, I\u0026rsquo;m so depressed. This cold hit me pretty hard, I\u0026rsquo;ve been in bed for a week. The news of Fluffy\u0026rsquo;s death hit me pretty hard, I\u0026rsquo;ve been crying for days. what can I do for you: This is a polite way to ask how to help someone or what they need. I'm sorry to trouble you This is a polite way of apologizing for causing inconvenience or bothering someone. For example: Can I trouble you for a moment, I just need you to sign this form for me. I\u0026rsquo;m sorry to trouble you, but may I go home early today. Can I trouble you for a pen, mine is not working anymore. On top of all that This phrase is commonly used to add something additional to make things worse, but it can also be used in positive things. For example: Today I lost my job, my car got stolen, and on top of all that, my girl friend broke up with me. Today was a really great day, it was my birthday and all my friends came to visit me, and on top of all that, I received a surprising gift! 9. In a Rush https://youtu.be/DjgpFzIWCRs SHOW NOTES step on it This phrase means to go faster or speed up, especially when driving or in a hurry. For example: We\u0026rsquo;re running late, step on it. have a fit This means to become very angry, upset, or emotional about something. For example: Jeez, you don\u0026rsquo;t need to have a fit, nothing is going to happen if we\u0026rsquo;re five minutes late. My boss is going to have a fit if I don\u0026rsquo;t finish this on time. I almost had a fit when my boss told me I had to work this weekend. cut through means to go through a path that helps save time or provides a shortcut, often through an area that isn\u0026rsquo;t typically a main route. For example: I\u0026rsquo;ll cut through the park to get to the other side of the neighborhood faster. make a left/right/U-turn: These are driving directions. For example: Make a left at the light, then a right at the next stop sign. I missed my exit. I need to make a U-turn. are you nuts This is a casual, humorous, shocked way to ask if someone is crazy or acting irrationally. For example: You want to get married now? Are you nuts? You only met her 3 weeks ago. Are you nuts? I\u0026rsquo;m not going to cheat on the exam, what if I get caught? Let's take a side street/Wilson Avenue/the freeway These phases are used to suggest an alternative route or road. For example: The main road is too congested. Let\u0026rsquo;s take a side street to avoid the traffic. We can get there faster if we take Wilson Avenue. Let\u0026rsquo;s take the freeway to avoid getting stuck in traffic. 10. Visiting the Eye Doctor https://youtu.be/lJLgLQWmpBI SHOW NOTES 2020 vision refers to the normal vision in United States. It\u0026rsquo;s often used to indicate perfect or ideal eyesight. Far-sighted/Near-sighted Far-sighted refers to hyperopia, a condition where distant objects are clear, but nearby objects appear blurry. People with this condition have difficulty seeing things close up. Near-sighted refers to myopia, a condition where nearby objects are clear, but distant objects appear blurry. People with this condition have trouble seeing things far away. make out means to be able to see or understand something, especially when it is difficult to do so. For example: I can barely make out the words on the sign. If you look carefully , you almost make out a few of the stars in the sky. Can you see what\u0026rsquo;s written on the sign there — No, I can\u0026rsquo;t quite make it out. Blind as a bat is a fugurative expression used to describe someone who has very poor vision or is unable to see well. What seems to be the problem/matter/trouble These are used to ask what the issue or difficulty is. What seems to be the problem? (asking about a difficulty or issue) What seems to be the matter? (asking about what is troubling someone) What seems to be the trouble? (asking about a specific difficulty or issue) head on/in/out/up are informal expressions that typically refer to moving or going in a certain direction. head on in: It’s getting late; let’s head on in. head on out: We’ll head on out after lunch. head on up: We’re going to head on up to the second floor. 11. Scheduling an Appointment https://youtu.be/E8vH3YpcFfg SHOW NOTES double check means to verify or check something again to make sure it is correct or accurate. For example: I\u0026rsquo;ll double check my schedule to make sure I\u0026rsquo;m free tomorrow. scheduled means that something has been planned or arranged to happen at a specific time. For example: I have a meeting scheduled for 2 PM. booked solid means that all available time slots are taken, and there are no open appointments or spaces left. For example: I can\u0026rsquo;t get a hotel room, they\u0026rsquo;re booked solid until after the New Year. I\u0026rsquo;m pretty sorry there are no seats available on this flight, we booked solid over the Christmas holidays. Sorry, I can\u0026rsquo;t meet you today, I\u0026rsquo;m booked solid. Sentence Collecting: Appointment: I\u0026rsquo;m calling to arrange an appointment with Ms Mcneely. Please book an appointment for next week. Please schedule an appointment for next week. Dialogue: A: How\u0026rsquo;s Thursday? Does she have any time available then? B: Unfortunately, she\u0026rsquo;s booked solid on Thursday. How does next Monday work for you? A: Actually, I\u0026rsquo;ve got something scheduled on Monday. Can she do Tuesday? B: Let me see, sure, Tuesday\u0026rsquo;s perfect. 12. Going Out to Eat https://youtu.be/VpsxLnJ52ME SHOW NOTES food poisoning refers to an illness caused by consuming food or drink that is contaminated with harmful bacteria, viruses, or toxins. For example: I think I have food poisoning from the salad I ate yesterday. allergic refers to having an allergy, which is an immunue system reaction to certain substances, such as food, pollen, or pet dander. For example: She is allegic to peanuts, so she has to be careful about what she eats. check out This phrase usually means to look at or examine something, or visit a place. For example: Have you been to new cafe next door. — Yeah, I checked it out yesterday, the food was great. I\u0026rsquo;m going to check out that new shopping mall this weekend. bistro refers to a small, casual restaurant or cafe, often offering simple, home-style meals. For example: We went to a charming bistro for dinner last night. not all that crazy about is an informal expression that means not very interested in or not particularly fond of something. Do you want to go shopping with me tomorrow? — I\u0026rsquo;m not all that crazy about shopping, I don\u0026rsquo;t like spending money. I\u0026rsquo;m not all that crazy about Jazz music. Can I change this song? in the mood for This expression means desiring or wanting something at a particular moment, usually referring to food or activities. For example: We always eat hamburgers for dinner, I\u0026rsquo;m in the mood for something different. Let\u0026rsquo;s watch movie. How about Texas Chainsaw Massacre. — I\u0026rsquo;m not in the mood for a horrible movie. Sentence Collecting Ask Suggestions Do you have any suggestions? Do you have any ideas? Do you have any thoughts? Giving Suggestions I\u0026rsquo;d recommend giving it a try. You\u0026rsquo;ve gotta give them a try. You could give them a try. 13. Cancelling an Appointment https://youtu.be/lcZA5FeM2_I SHOW NOTES reschedule means to change the time or date of an event or appointment to a later time. For example: We need to reschedule the meeting for next week. postpone means to delay or push something to a later time, often with a specific future date in mind. For example: The concert was postponed due to the rain. can't make it is a casual way of saying that attending or participating in an event or meeting is not possible. For example: I\u0026rsquo;m sorry, I can\u0026rsquo;t make it to the party tonight. this thing came up This phrase is used to explain that something unexpected or urgent has happened, preventing attendence or participation in a planned activity. I\u0026rsquo;m sorry that I\u0026rsquo;m late this thing came up at work, and I had to stay to take care of it. I can\u0026rsquo;t talk right now, something came up. The meeting at 3 PM had to be rescheduled because this thing came up at work. Sentence Collecting What\u0026rsquo;s up? — Not much./Nothing. 14. Asking for More Time https://youtu.be/IKm6ceWu1IU SHOW NOTES press kit refers to a collection of materials, such as photos, press releases, or information about a company, product, or event, that is given to journalists or media for publicity purpose. deadline/extension deadline is the final date by which something must be completed or submitted. For example: The deadline for the report is Friday at 5 PM. extension is an extra period of time given to complete something after the original deadline. For example: She requested an extension on the project deadline. ran into means to unexpectedly meet someone or experience something, usually a problem. For example: We ran into a storm on our way home. If you\u0026rsquo;re not careful now, you\u0026rsquo;re going to run into a lot of problems later. I ran into some trouble with my computer. I've been meaning to... This is used to express an intention to do something that has not yet been done. For example: I\u0026rsquo;m sorry I haven\u0026rsquo;t called you yet, I\u0026rsquo;ve been meaning to but I\u0026rsquo;ve been busy. I\u0026rsquo;ve been meaning to tell you but John quit yesterday. I\u0026rsquo;ve been meaning to see that film for a while. beyond my control refers to something that cannot be influenced or changed by the person, usually an event or situation. For example: The delay was beyond my control because of the weather. put this off means to delay or postpone something to a later time. For example: I\u0026rsquo;ve been putting off this project for a week, and it\u0026rsquo;s due tomorrow. Can we put off our meeting till next week, I\u0026rsquo;m too busy right now. I\u0026rsquo;ve been putting off my email all day, and now I have 50 messages to respond to. 15. Complimentary Upgrade https://youtu.be/vJlvav_HThc SHOW NOTES under the name refers to something that is registered or listed in someone\u0026rsquo;s name. For example: Do you have a reservation under the name Smith? mix up means to confuse or mistake one thing for another. For example: There was a mix up at the airport, and my bags were sent to Antarctica. I\u0026rsquo;m sorry sir, there\u0026rsquo;s been a terrible mix up with giving you the wrong baby. overlooked means more reservations or tickets have been sold than there is capacity to accommodate. For example: The hotel was overbooked, and they didn\u0026rsquo;t have a room for us when we arrived. complimentary upgrade refers to a free improvement. For example: We received a complimentary upgrade to a presidential suite at the hotel. 16. Cutting in Line https://youtu.be/79cfTb94tHU SHOW NOTES there's no way... This phrase is used to express that something is impossible to happen. For example: There\u0026rsquo;s no way I can have those reports finished today. The stadium is so crowded that there\u0026rsquo;s no way we\u0026rsquo;ll find a seat. Do you think Michael\u0026rsquo;s gonna buy that house? — There\u0026rsquo;s no way he has enough money to buy it. cut in line means to move ahead of others in a line or queue, usually in an unfair or rude manner. For example: Excuse me, I\u0026rsquo;m really late, can I cut in line, please? I hate it when people cut in line at the bank, it\u0026rsquo;s so rude. I think it\u0026rsquo;s okay when a pregnant woman cuts in line. sue me is a casual or somewhat sarcastic expression used to suggest that someone is free to take legal action, often when the speaker does not care about the consequences. It can also be used humorously when someone is being accused of something. For example: I forgot your birthday. Sue me! (Used in a joking way) 17. Wedding Day https://youtu.be/MCtwK8KGtBk SHOW NOTES it's about time. is commonly used to express that something finally happens after a long wait. For example: Dinner\u0026rsquo;s ready. — It\u0026rsquo;s about time, I\u0026rsquo;m starving. Guess what. I finally got a job. — It\u0026rsquo;s about time, you\u0026rsquo;ve been unemployeed for two years. We\u0026rsquo;re almost there, just a couple more minutes. — It\u0026rsquo;s about time, we\u0026rsquo;ve been driving for 12 hours. bridesmaids are women who are chosen to assist the bride on her wedding day. flower girl is a young girl who walks down the aisle before the bride, scattering flower petals. ring bearer is a young boy who carries the wedding rings down the aisle. gorgeous is a uni-sex adjective, it can be used to describe both people and things. For example: She looks gorgeous in that dress. The sunset was absolutely gorgeous. Common Mistake Wrong: Let\u0026rsquo;s marry. Right: Let\u0026rsquo;s get married. Flower Girl \u0026amp; Ring Bearer 18. Asking for Time Off https://youtu.be/Ds5zwyfLyqI SHOW NOTES notice refers to the information that gived someone in advance about something, often referring to leaving a job or ending an agreement. For example: If you want to quit your job, make sure you give enough notice, you\u0026rsquo;ll need to tell us four weeks in advance. You didn\u0026rsquo;t give me enough notice about this project, I didn\u0026rsquo;t have enough time to finish it. Sentence Collecting: Do you have a sec/second/minute? — Sure, what can I do for you? Would you be okay with that? — I\u0026rsquo;m fine with that. Are you alright with that? / Will you Ok with this? I was just wondering/thinking/hoping... is more polite than I want to... 19. Hiring an Assistant https://youtu.be/JZFIdKbnZCU SHOW NOTES understaffed means that there are not enough employees or workers to handle the work or tasks. For example: Our team is understaffed right now, so we need to delay the project deadline. the timing is just not right means that it\u0026rsquo;s not the right moment or situation to do something. For example: I was gonna sell my house, but the timing is just not right. Honey, I think we should have a baby. — The timing is just not right. weight off my shoulders phrase means feeling relieved from stress or worry. After I finished my final exam, it felt like a weight was off my shoulders. give me a hand is an informal way of asking for help. For example: Can you give me a hand with these boxes. Neil, I\u0026rsquo;ll need you to give me a hand with the sales reports. Let me give you a hand with your suitcase. keep our costs down means to reduce or control expenses. We need to keep our costs down if we want to make a profit this quarter. 20. Bargain https://youtu.be/I4ivQUabfyo SHOW NOTES bargain refers to a good deal or something you buy at a lower price than usual. It can also refer to negotiating for a better price. For example: I found a great bargain on these shoes—they were 50% off! price range refers to the range of prices within which something is available, or the amount someone is willing to pay. For example: I\u0026rsquo;m looking for a new phone, but my price range is between $200 and $400. shop around means to look at different stores or options to compare prices before making a purchase. For example: Before you buy that jacket, shop around and see if you can find a better deal at another store. Can you give me a better deal? This is a request for a lower price or a better offer, often used during negotiations. For example: I really like this shirt, but it\u0026rsquo;s too expensive. Can you give me a better deal? Can you give me a better price on this car, I really don\u0026rsquo;t have that much money. That's still more than I wanted to spend. This is commonly used in situations where the price is still too high even after trying to negotiate or considering different options. For example: I know the dress is on sale, but that\u0026rsquo;s still more than I wanted to spend. That's my last offer This is commonly used in situations where the final price someone is willing to accept; no further negotiations will be made. For example: I can\u0026rsquo;t go lower than $500 for the laptop. That\u0026rsquo;s my last offer. 21. Watching Basketball https://youtu.be/O-BvPcJfX1w SHOW NOTES foul refers to a violation of the rules in a sport, usually resulting in a penalty. For example: He committed a foul by pushing the opponent during the game. ref is short for referee, refers to an official who oversees a game or match to enforce the rules. For example: The ref called a foul on that play because the defender hit the shooter. free throw refers to a shot taken from the free-throw line without any defense, usually awarded after a foul. For example: She made both of her free throws after the foul was committed. make the shot means to successfully score by getting the ball into the hoop or goal. For example: If Gretzky make a shot, they\u0026rsquo;re gonna win the Stanley Cup. 3-pointer refers to a basketball shot taken from beyond the three-point line, worth three points if successful. For example: He hit a 3-pointer to tie the game in the final seconds. travel refers to a vilation in basketball where a player takes too many steps without dribbling the ball. For example: The ref called a travel because the player took five steps without dribbling. beer run informally refers to going to get beer, usually in a group or as part of a social activity. For example: We\u0026rsquo;re running out of drinks—time for a beer run. screw up means to make a mistake or do something badly, often in a way that causes problems or difficulties. For example: Jill, you really screwed up this time, you\u0026rsquo;re fired. This game is important, if you screw it up again, we\u0026rsquo;re out of the finals. I\u0026rsquo;m sorry, I know I screwed up, will you forgive me? 22. Ending a Relationship https://youtu.be/HjXbEHvwskM SHOW NOTES get a hold of means to contact or reach someone. For example: I tried calling her all day, but I couldn\u0026rsquo;t get a hold of her. stood me up means to fail to meet someone as planned, especially when they were expecting you. For example: I waited for an hour, but she stood me up and never showed. priority refers to something that is considered more important to be done or dealt with first. For example: Getting the report finished is my top priority today. heading is commonly used to express the future direction, outcome, or progress. For example: I don\u0026rsquo;t know where our relationship is heading. Where is this bus heading? Where is this project heading? Do you have any idea...? This is commonly used to ask if someone knows or has any information about something. For example: You forgot my birthday. Do you have any idea how angry I am? Julie kiss my borfriend, does she have any idea how mean that was? I just broke up with my boyfriend, don\u0026rsquo;t you have any idea how sad I am? I've heard it all before. This phrase is used when someone is tired of hearing the same things or excuses. For example: You say you\u0026rsquo;ll change, but I\u0026rsquo;ve heard it all before. I\u0026rsquo;m not buying it. 23. New Year\u0026rsquo;s Resolution https://youtu.be/I9k50oVZPHA SHOW NOTES transform means to change something completely in appearance, form, or nature, often for the better. For example: She used to be shy, but the experience completely transformed her. stuffed means to be very full, especially after eating too much. For example: I ate so much pizza, I\u0026rsquo;m completely stuffed! stick to it means to continue with something especially when it\u0026rsquo;s difficult. For example: I can\u0026rsquo;t solve this math problem. — Stick to it. I\u0026rsquo;m sure you\u0026rsquo;ll get it. I mean it. This phrase emphasizes seriousness in what someone is saying. For example: If you don\u0026rsquo;t finish your homework by tonight, there will be consequences. I mean it! cut out means to remove something entirely. For example: It\u0026rsquo;s time for me to focus on my work, I\u0026rsquo;m going to cut out everything else from my life. You have to cut out the salt and carbon from your diet, no more chips, no more French fries, no more popcorn. 24. Ordering Pizza https://youtu.be/yaeLbz_NK4U SHOW NOTES pepperoni is a type of spicy Italian sausage made from cured pork and beef, often used as a topping for pizza. olives are small, oval-shaped fruits that are typically green or black. They are often used in salads, pasta dishes, or as pizza toppings. martini is a classic cocktail typically made with gin and vermouth, garnished with an olive or a twist of lemon peel. thick crust / thin crust Thick crust is soft and doughy, while thin crust is crispy and light. ham is a type of cured or smoked meat, often made from the thigh of a pig. It is commonly used as a topping for pizzas or in sandwiches. Regina Margarita is a variation of the famous Margherita pizza, typically with tomato, mozzarella, and basil, but may also include other toppings or slightly different variations depending on the restaurant. This is Marty speaking. This is a way to introduce oneself on the phone, letting the other person know who is speaking. For example: Hello, this is Marty speaking. How can I help you? 2 for 1 special is a promotional offer where customers get two items for the price of one. This is commonly seen in restaurants, stores, or fast-food promotions. 25. Receptionist https://youtu.be/sgxrbqyGonE SHOW NOTES May I take your name? This is a polite way of asking for someone\u0026rsquo;s name, typically when answering the phone or greeting someone in an office or service setting. Miss Stevens will be with you momentarily. This is a polite way to inform someone that Miss Stevens will arrive or be ready to speak with them shortly. For example: Please take a seat. Miss Stevens will be with you momentarily. Miss Stenvens is ready for you now. This is used to inform someone that the person they are waiting to see is now available to meet them. For example: Miss Stevens is ready for you now. Please follow me. I'll show you to her office. This is used to guide someone to another person\u0026rsquo;s office or location. For example: Please follow me. I\u0026rsquo;ll show you to her office. right this way is a polite way of directing someone to go in a certain direction. watch your step is a cautionary phrase used to warn someone to be careful of their footing, often when walking on uneven ground or stairs. 26. Swimming https://youtu.be/kGopb2awYiM SHOW NOTES anchor the boat means to secure a boat in place by dropping an anchor into the water, preventing it from drifting. For example: We need to anchor the boat before we go swimming. doggy padding is a simple swimming stroke where the swimmer uses a paddling motion with their arms and legs, similar to how a dog swims. It is often used by beginners as it\u0026rsquo;s an easy and natural way to stay afloat. breaststroke is a swimming stroke where the swimmer moves their arms in a half-circle motion while pulling their legs in a frog-like kick. backstroke is a swimming stroke done on the back, where the swimmer alternates arm strokes in a circular motion while kicking their legs. take a dip means to go into the water for a quick swim. For example: It\u0026rsquo;s such a hot day; let\u0026rsquo;s take a dip in the pool to cool off. for a little while means for a short period of time. I\u0026rsquo;m going to take a dip for little while before the sunset. 27. Eggs Preparation https://youtu.be/e-z7jc3B4zg SHOW NOTES picky means being very selective or particular, especially when it comes to food, preferences, or choices. He\u0026rsquo;s really picky about his food—he doesn\u0026rsquo;t like vegetables. yolk/egg white yolk is the yellow part of an egg, which is surrounded by the egg white. egg white is the clear part of an egg that surrounds the yolk sunny side up is a way of cooking eggs where the egg is fried on one side only, leaving the yolk exposed and not flipped. soft/hard boiled eggs soft boiled egg is an egg that has been boiled for a short time, resulting in a runny yolk and slightly firm white. hard boiled egg is an egg that has been boiled for a longer period, making both the yolk and white firm. eggs and soldiers is a British dish where soft-boiled eggs are served with strips of toast (called soldiers) for dipping into the yolk. I feel like... This is often used to express a desire, mood, or inclination to do something. I feel like baking. I feel like eating pizza. drives me crazy means to cause frustration or annoyance, often in a way that is hard to ignore. This music is driving me crazy, turn it down. Don\u0026rsquo;t leave garbage in my car, it drives me crazy. Your mom is driving me crazy, she keeps calling me. 28. At the Bar https://youtu.be/l-IL4mtzye0 SHOW NOTES on tap refers to beverages, especially beer, that are available from a keg. When something is \u0026ldquo;on tap\u0026rdquo;, it means that it\u0026rsquo;s being served from a tap at a bar or restaurant. happy hour refers a time when drinks and appetizers are sold at discounted, usually in the late afternoon or early evening. a special refers to a discounted item, usually in a restaurant or bar. Today\u0026rsquo;s special is a burger and fries for only $5. pint is a unit of measurement for liquids, commonly for beer. a pint = 473 milliliters appetizer is a small dish served before the main course to stimulate appetite. Nachos /ˈnɑːtʃoʊz/ is a popular snack made from tortilla chips covered with melted cheese and often topped with things like salsa, guacamole, sour cream, etc. Heineken /ˈhaɪnɪkən/ is a popular brand of beer originally from the Netherlands. Budweiser /ˈbʌdˌwaɪzər/ is a well-known American beer brand. Mozzarella /ˌmɑːtsəˈrɛlə/ is an Italian cheese that is soft, white, and commonly used in salads, pizzas, and pasta dishes. how/what about are used to suggest or inquire about something. What about these dirty clothes, you said you would wash them days ago. What about going to the mall instead. I\u0026rsquo;m tired of going to the movies. How about we go to the new restaurant tonight? 29. Fingers https://youtu.be/y-eo1VNedcQ SHOW NOTES pinky, ring finger, middle finger, index finger, thumb pinky: The smallest finger. ring finger: The fourth finger, typically where a ring is worn. middle finger: The third finger, located in the center of the hand. index finger: The second finger, next to the thumb, often used for pointing. thumb: The first and thickest finger, opposable to the other fingers, making grasping objects easier. may this ring be blessed This phrase refers to a wish or prayer for the ring to be blessed or sactified, often said during a wedding ceremony. abide in peace This phrase means to live or remain in peace, suggesting calmness and harmony. with this ring, I thee wed This is a traditional phrase spoken during a wedding ceremony, where one person declares their intention to marry the other by placing a ring on their finger. wear it as a symbol of our love and commitment This phrase explains that the ring represents the love and promise made between two people in marriage. 30. Math https://youtu.be/8uLJQnZROyI SHOW NOTES teacher's pet refers to a student who is overly favored by the teacher, often because they try to please the teacher. It common have a negative connotation, implying that the student is trying too hard to gain the teacher\u0026rsquo;s approval. scuk up means someone who is overly flattering someone, usually a person in power, like a teacher or boss, in an insincere way to gain favor. smarty pants is a playful or teasing way to describe someone who is very clever or shows off their intelligence, often in a way that annoys others. know-it-all refers to a person who believes they know everything. It\u0026rsquo;s usually used in negative or sarcastic way to describe someone who is seen as arrogant about their knowledge. 31. Sci-fi https://youtu.be/hdcGDXFFiq4 SHOW NOTES blaster is a type of weapon, often seen in science fiction or action movies. break through means to make progress or succeed after overcoming obstacles, which can refer to physical barriers like wall, or more abstract challenges like tough problems. After 15 minutes, the workers broke through the wall, and rescued everyone from the fire. He is such a good player, he broke through the entire defense. They are breaking through our impenetrable wall. settle this means to solve a disagreement or issue. It can be used when there\u0026rsquo;s need to come to a final decision or conclusion about something. I\u0026rsquo;m fed up with arguing about this, let\u0026rsquo;s just settle the argument once and for all. tractor beam is a concept from science fiction, usually referring to a powerful beam used to pull or attract objects toward a spacecraft. no longer be means that something is no longer happening, or someone is no longer in a particular role. I\u0026rsquo;ll no longer be your boyfriend. know nothing of This phrase is often used to express that someone is ignorant or uninformed about a topic. You think you can understand what I\u0026rsquo;m going through, but you know nothing of the struggles I\u0026rsquo;ve faced. once and for all means to finally resolve or finish something, often in a definitive or conclusive way. He claims that his photographs prove once and for all that UFOs do exist. I told him once and for all that I don\u0026rsquo;t want to be his girlfriend anymore. 32. Barber Shop/Hair Salon https://youtu.be/l4jdN_P3UjE SHOW NOTES trim means to cut something or small adjustments, usually to hair. silky is commonly used to describe hair that very soft and smooth to touch. shiny is used to describe something that has a bright, smooth surface, such as shiny hair or a shiny car. grow out means to let something, such as hair or nails, become longer naturally without cutting them. sideburn is the strip of hair that grows along the sides of the face, in front of the ears. take a little off the top is commonly used when someone wants to trim a small amount of hair from the top part of their head. nothing too fancy means something is simple, not elaborate, or not showing off. don't just stand there is used to tell people to take action instead of staying still or doing nothing. Don\u0026rsquo;t just stand there, help me take these boxes into the house. The house is on fire, don\u0026rsquo;t just stand there, call the fire department. look like a million buck means to look very attractive, stylish, or impressive. It\u0026rsquo;s a compliment often used when someone is well-dressed or appears confident and radiant. Mullet is a hairstyle where the front of the hair is short, and the back is left long. It bacame popular in the 1980s. Hockey Hair is a term for a hairstyle similar to the mullet, often associated with hockey players. It’s characterized by long hair in the back and shorter hair in the front. Afro refers to a hairstyle where the hair is naturally grown out and styled into a rounded shape, often associated with African heritage. Mohawk is a hairstyle where the hair is shaved or very short on the sides, with a strip of longer hair running from the front to the back of the head. Flat Top is a hairstyle where the hair is cut short on the sides and top, creating a flat, even surface. crew cut is very short and simple style where the hair on the sides and top is cut short and uniform in length. Dreadlocks is a hairstyle where the hair is matted or twisted into long, rope like strands. It is often associated with various cultures, especially in the Caribbean and African communities. 33. Pharmacy/Drug Store/Chemist https://youtu.be/5J2cwx5gHUI SHOW NOTES price check refers to checking the price of an item, usually at a store or supermarket. Can you do a price check on this shirt? I\u0026rsquo;m not sure if it\u0026rsquo;s on sale. capsule is a medication enclosed in a soft or hard shell, usually made of gelatin. tablet is a solid form of medication that is typically swallowed. overdose means to take more than the recommended or safe amount of a drug. eyedrops means a liquid medication that is applied to the eyes. Prozac is a brand name for the medication fluoxetine, which is used to treat depression, anxiety, and other disorders. be sure means to be certain about something. Be sure not to forget your unbrella, it\u0026rsquo;s raining today. hang on generally means to wait for a short time or hold something tightly. wait: Hang on, I\u0026rsquo;ll be right there. hold: Hang on to the railing while going down the stairs. 34. Baseball https://youtu.be/Uc1GjEKoPZI SHOW NOTES national anthem is a patriotic song officially recognized by a country, often sing at the begining of public events like sports games. hymn is a religous song, typically sing during religious ceremonies or services. pitcher is a player in baseball who throws the ball to the batter from the pitcher\u0026rsquo;s mound. outfielder is a player in baseball who is positioned in the outfield (the area fartest from the home plate) and is responsible for catching fly balls and making throws back to the infield. line drive is a type of hit in baseball where the ball is hit sharply and traight, usually at a low angle. scrambling refers to a player in baseball quickly and awkwardly to avoid being tagged or to regain control of the ball. inning is a division of a baseball game where both teams have a chance to bat and field. The game went into extra innings, and the home team won in the 12th inning. up to bat refers to the player who is currently batting or next in line to the bat in a baseball game. It\u0026rsquo;s your turn, you\u0026rsquo;re up to bat now. strike one refers to a term used in baseball when the batter misses a pitched ball, or doesn\u0026rsquo;t swing at a ball that\u0026rsquo;s in the strike zone. curve ball is a type of pitch in baseball that curves or breaks as it approaches the batter, making it harder to hit. Also used figuratively to mean something unexpected. The pitcher threw a curve ball, and the batter couldn\u0026rsquo;t hit it. My boss threw me a curve ball today, so I have to stay and work late. hit a home run A home run is a term from baseball that refers to a hit in which the batter hits the ball out of the playing field, typically over the outfield fence, without it being caught. In a figurative sense, it means achieving a significant success or accomplishing something exceptionally well. Great job on that sales presentation, you really hit home run. Our sales team hit a home run this month by doubling our revenue. 35. Confess Love https://youtu.be/74FmjXrg0t8 SHOW NOTES here's the thing is used to introduce something important or to explain a situation. Here\u0026rsquo;s the thing, we need to leave in 10 minutes if we want to catch the train. I can't take it anymore is used when someone feels overwhelmed, frustrated, or exhausted by a situation and can no longer handle it. The man next door has been so loud, I can\u0026rsquo;t take it anymore. My boss always yells at me, I can\u0026rsquo;t take it anymore. I can\u0026rsquo;t take it anymore, I\u0026rsquo;m going to quit. are you serious is similar to really, it\u0026rsquo;s often used when something is surprising, unbelievable, or hard to believe. Are you serious? You just won the lottery?! have the guts means having the courage to do something difficult, dangerous, or challenging. I don\u0026rsquo;t think I have the guts to go skydiving. I don\u0026rsquo;t have the guts to give a speech. I\u0026rsquo;ve never had the guts to say no to my boss. just for the two of us means something is meant for only two people, often implying exclusivity or intimacy. I booked a small table at the restaurant, just for the two of us. give me a shot means to give someone a chance to try or attempt something. I know I can do this drawing better, just give me a shot. The HR manager wasn\u0026rsquo;t going to hire me, but he decided to give me a shot. 36. Back In 1950 https://youtu.be/9Ox9lC_Jbuk SHOW NOTES A Sock Hop is a type of informal dance event that was popular in the 1950s and 1960s. A Sadie Hawkins Dance is a type of dance where girls ask the boys to be their dates, instead of the traditional way where boys ask girls. I'm swell is an old-fashioned, informal way of saying \u0026ldquo;I\u0026rsquo;m doing great\u0026rdquo; or \u0026ldquo;I\u0026rsquo;m fine.\u0026rdquo; It was popular in the 1930s and 1940s. How are you feeling today?—I\u0026rsquo;m swell. cool it means to relax or calm down, especially if someone is getting overly excited or angry. It\u0026rsquo;s a way to tell someone to take it easy. Just cool it. Now is not the right time to get angry. You need to cool it and stop yelling at me. knuckle sandwich is a humorous or exaggerated way of referring to a punch in the face. It\u0026rsquo;s a playful way of saying someone might get hit. If you keep talking like that, you might end up with a knuckle sandwich! pipsqueak is a playful term or slightly insulting term for someone who is small or weak, often used for children or someone who\u0026rsquo;s being annoying in a harmless way. Stop being such a pipsqueak and help me carry these boxes. It'll be blast means that something is going to be a lot of fun or exciting. Don\u0026rsquo;t worry, the party\u0026rsquo;s going to be a blast. have my eyes on means to be interested in or focused on something, whether it\u0026rsquo;s a person, a goal, or an object. I\u0026rsquo;ve had my eyes on that new phone for a while. ease off means to reduce the intensity, pressure, or effort being applied to something or someone. It’s used when someone is doing something too forcefully, and you suggest they should stop being so intense or give more space. You\u0026rsquo;re pushing Susie too much, you need to ease off a bit. You need to ease off the junk food. Matt is putting so much pressure on me these days, I wish he would ease off. Scok Hop Sadie Hawkins Dance 37. Back In 1970 https://youtu.be/lJqo8PYZbBc SHOW NOTES roller rink ia a place where people go to skate. A roller skate is a type of skate with four wheels arranged in two rows, like a small car\u0026rsquo;s wheels. A roller blade is a type of skate with wheels arranged in a single line. groovy is a slang term from the 1960s-70s meaning \u0026ldquo;cool\u0026rdquo; or \u0026ldquo;awesome\u0026rdquo;. far out ia slang term in 1970s meaning \u0026ldquo;amazing\u0026rdquo; or \u0026ldquo;incredible\u0026rdquo;. foxy is used to describe someone as very attractive or sexy. mellow out means to relax or calm down. You need to mellow out after a stressful day. right on is a phrase showing aggrement or excitement, similar to saying \u0026ldquo;exactly\u0026rdquo; or \u0026ldquo;that\u0026rsquo;s great\u0026rdquo;. Right on, you got a high score, that\u0026rsquo;s amazing. gravy is a slang for something extra good or easy, like a bonus. This raise was gravy on top of the promotion. to book is a casual way to say \u0026ldquo;leave quickly\u0026rdquo; or \u0026ldquo;run away\u0026rdquo;. We need to book before it gets too late. how's it hanging is a casual way of saying \u0026ldquo;how are you?\u0026rdquo; chat her up is a british slang phrase meaning to start a conversation with someone, usually flirting. hit someone up is a casual way to say \u0026ldquo;contact someone\u0026rdquo;, often to ask for something, either by calling, texting, or meeting. Can you believe Patrick, he came up to me a month ago, and tried to hit me up for some money. When I was a kid, I used to always hit my dead up for lunch money. This is the last time I lend you money, don\u0026rsquo;t even try to hit me up for more. grab some grub is a casual phrase meaning \u0026ldquo;get something to eat.\u0026rdquo; Grub is a slang term for food. Let\u0026rsquo;s grab some grub before the movie. ","permalink":"https://signalyu.github.io/posts/3-humanities/languages/english/1-learning-english-with-podcasts/","summary":"1. Order Food in Restaurant https://youtu.be/_izDbJ45Q5I SHOW NOTES I'm still working on it. This sentence expresses that an action is ongoing and not yet completed. It also suggests that more time is needed to finish it. Did you finish reading? — I\u0026rsquo;m still working on it. Did you fix my car? — I\u0026rsquo;m still working on it. Coke and Fries This refers to a popular combination of fast food: Coca-cola and French Fries.","title":"Learning English With Podcasts"},{"content":"IDEA Postfix Completion Postfix completion allows writing code faster by adding expressions after a variable or value. It can be customized to suit specific coding needs.\n\u0026#34;Hello\u0026#34;.var → String s = \u0026#34;Hello\u0026#34;; Live Templates Live Templates are predefined code snippets that can be inserted quickly using a shortcut. It can be customized to suit specific coding needs.\nsout → System.out.println(); Keyboard Shortcuts Show Hint: Alt + Enter Show Parameter Info: Ctrl + P Surround with Selected Code Block: Ctrl + Alt + J Start a New Line: Shift + Enter Start a New Line Before Current: Ctrl + Alt + Enter Show Live Template: Ctrl + J Rename in Batch: Shift + F6 Extract Method: Ctrl + Alt + M Override Methods: Ctrl + O Implement Methods: Ctrl + I Optimize Imports: Ctrl + Alt + O View Source Code: Ctrl + N → Ctrl + F12 Go to Previous Edit Location: Ctrl + Alt + ← Go to Next Edit Location: Ctrl + Alt + → Show Inheritance Tree: Ctrl + H Show Quick Documentation: Ctrl + Q Show UML Diagram: Ctrl + Alt + U Go to Specified Line: Ctrl + G → Enter line number Go to Variable Definition: Ctrl + Alt + B Expand Code Block: Ctrl + Shift + + Collapse Code Block: Ctrl + Shift + - Debug Method Breakpoints Field Breakpoints Conditional Breakpoints Thread Debug Custom Data Views Config Tomcat Create Maven Java Project Create Maven Java Web Maven Introduction to Maven Maven is a build automation and project management tool primarily used for Java projects. It follows the concept of Project Object Model (POM), which is defined in an XML file (pom.xml) at the root of the project.\nsettings.xml Configuration SHOW CODE settings.xml ./ ├── bin/ │ ├── m2.conf │ ├── mvn* │ ├── mvn.cmd │ ├── mvnDebug* │ ├── mvnDebug.cmd │ └── mvnyjp* ├── boot/ │ ├── plexus-classworlds-2.7.0.jar │ └── plexus-classworlds.license ├── conf/ │ ├── logging/ │ │ └── simplelogger.properties │ ├── settings.xml # CUSTOMIZE DEFAULT BEHAVIOR IN THIS FILE │ └── toolchains.xml ├── ... The settings.xml file in Maven is typically used to customize the default behavior according to user needs. Common modifications include configuring repository locations, setting up mirrors, and defining profiles.\nSHOW CODE: Configuring Repository Location Configuring Repository Location \u0026lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: ${user.home}/.m2/repository \u0026lt;localRepository\u0026gt;/path/to/local/repo\u0026lt;/localRepository\u0026gt; --\u0026gt; \u0026lt;localRepository\u0026gt;/Users/signalfish/maven-repository\u0026lt;/localRepository\u0026gt; SHOW CODE: Setting Up Mirrors Setting Up Mirrors \u0026lt;mirrors\u0026gt; \u0026lt;!-- mirror | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;mirrorId\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;repositoryId\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;Human Readable Name for this Mirror.\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://my.repository.com/repo/path\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; --\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public/\u0026lt;/url\u0026gt; \u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; SHOW CODE: Defining Profiles Defining Profiles \u0026lt;profiles\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;env-dev\u0026lt;/id\u0026gt; \u0026lt;activation\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;target-env\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;dev\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/activation\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;tomcatPath\u0026gt;/path/to/tomcat/instance\u0026lt;/tomcatPath\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/profile\u0026gt; --\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;jdk-1.8\u0026lt;/id\u0026gt; \u0026lt;activation\u0026gt; \u0026lt;activeByDefault\u0026gt;true\u0026lt;/activeByDefault\u0026gt; \u0026lt;jdk\u0026gt;1.8\u0026lt;/jdk\u0026gt; \u0026lt;/activation\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;1.8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;1.8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;maven.compiler.compilerVersion\u0026gt;1.8\u0026lt;/maven.compiler.compilerVersion\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;jdk-17\u0026lt;/id\u0026gt; \u0026lt;activation\u0026gt; \u0026lt;activeByDefault\u0026gt;true\u0026lt;/activeByDefault\u0026gt; \u0026lt;jdk\u0026gt;17\u0026lt;/jdk\u0026gt; \u0026lt;/activation\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;17\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;17\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;maven.compiler.compilerVersion\u0026gt;17\u0026lt;/maven.compiler.compilerVersion\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;/profiles\u0026gt; GAVP In Maven, GAVP refers to four key components that are used to uniquely identify and describe an artifact (e.g., WAR, JAR, or POM) in a Maven repository.\nG stands for GroupID, which represents the organization or group responsible for the artifact. It typically follows the reverse domain name convention, such as \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; or \u0026lt;groupId\u0026gt;dev.signalyu\u0026lt;/groupId\u0026gt;. A stands for ArtifactID, which identifies the specific artifact within the group. It usually matches the project name or module name, such as \u0026lt;artifactId\u0026gt;my-app\u0026lt;/artifactId\u0026gt;. V stands for Version, which specifies the version of the artifact, such as \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt;. P stands for Packaging, which specifies the type of artifact. It tells Maven what kind of output to expect from the project, such as a JAR file for a library or a WAR file for a web application, such as \u0026lt;packaging\u0026gt;jar\u0026lt;/packaging\u0026gt;. Common Maven Commands mvn compile: Compiles the source code of the project. mvn test: Compiles the source code, runs unit tests, and reports the results. mvn package: Compiles the source code, runs unit tests, and packages the compiled code into desired artifact. mvn clean: Removes the previously compiled files and generated artifacts. mvn install: Compiles the source code, runs unit tests, packages the compiled code into an artifact, and installs it into local Maven repository. mvn deploy: Compiles the source code, runs unit tests, packages the compiled code into an artifact, and deploys the artifact to a remote repository. Maven Dependency Download Failure When Maven fails to download dependencies, follow these steps to resolve the issue:\nCheck the network connection: Ensure a stable internet connection. If an internal network is used, verify the mirror configuration in settings.xml to ensure it\u0026rsquo;s correctly set up. Verify the dependency version: Double-check the version of the dependency specified in pom.xml. Clean the local repository: If the previous steps don\u0026rsquo;t resolve the issue, try cleaning the local Maven repository or deleting the specific dependency directory in the repository. Invalidate caches in the IDE: In IntelliJ IDEA, navigate to File -\u0026gt; Invalidate Caches to clear any cached information that might be causing issues. Then, restart the IntelliJ IDEA. Dependency Inheritence In Maven, dependency inheritance refers to the ability to inherit dependencies from a parent project. This feature enables better management of dependencies in multi-module projects, where a child module can inherit dependency configurations from the parent POM.\nSHOW CODE Parent POM Child POM \u0026lt;project xmlns=\u0026quot;http://maven.apache.org/POM/4.0.0\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xsi:schemaLocation=\u0026quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026quot;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;parent-project\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;modules\u0026gt; \u0026lt;module\u0026gt;child-project1\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;child-project2\u0026lt;/module\u0026gt; \u0026lt;/modules\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.3.12\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- These dependencies can be inherited by child projects --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.commons\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-lang3\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.12.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; \u0026lt;project xmlns=\u0026quot;http://maven.apache.org/POM/4.0.0\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xsi:schemaLocation=\u0026quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026quot;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;parent-project\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;relativePath\u0026gt;../pom.xml\u0026lt;/relativePath\u0026gt; \u0026lt;!-- Path to the parent POM --\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;artifactId\u0026gt;child-project1\u0026lt;/artifactId\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- Child module can use the dependency inherited from the parent --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-core\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; In the above code, The spring-core dependency is inherited from the parent, and the version is automatically resolved by Maven from the parent’s dependencyManagement section. The commons-lang3 dependency from the parent is also inherited, but does not need to be re-declared in the child POM.\nThe difference between dependencyManagement and dependencies is that dependencies directly add dependencies to the project build, meaning they are included in the project\u0026rsquo;s final artifact. On the other hand, dependencyManagement specifies the version and configuration of dependencies for inheritance in child modules, without directly adding them to the project build.\nGit Backend Development Microservices Architecture Class Design Features Read Base Attribute ER Diagram SHOW CODE Java @RestController @RequestMapping(value = \u0026quot;/api/album\u0026quot;) public class BaseCategoryApiController { @Autowired BaseCategoryService baseCategoryService; @GetMapping(\u0026quot;/category/findAttribute/{category1Id}\u0026quot;) public Result\u0026lt;List\u0026lt;BaseAttribute\u0026gt;\u0026gt; getAttributeByCategory1Id(@PathVariable @Min(1) Long category1Id) { List\u0026lt;BaseAttribute\u0026gt; list = baseCategoryService.getAttributeByCategory1Id(category1Id); return Result.ok(list); } } public interface BaseCategoryService extends IService\u0026lt;BaseCategory1\u0026gt; { List\u0026lt;BaseAttribute\u0026gt; getAttributeByCategory1Id(Long category1Id); } public class BaseCategoryServiceImpl extends ServiceImpl\u0026lt;BaseCategory1Mapper, BaseCategory1\u0026gt; implements BaseCategoryService { @Autowired private BaseAttributeMapper baseAttributeMapper; public List\u0026lt;BaseAttribute\u0026gt; getAttributeByCategory1Id(Long category1Id) { return baseAttributeMapper.getAttributeByCategory1Id(category1Id); } } @Mapper public interface BaseAttributeMapper extends BaseMapper\u0026lt;BaseAttribute\u0026gt; { List\u0026lt;BaseAttribute\u0026gt; getAttributeByCategory1Id(@Param(\u0026quot;category1Id\u0026quot;) Long category1Id); } \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; ?\u0026gt; \u0026lt;!DOCTYPE mapper PUBLIC \u0026quot;-//mybatis.org//DTD Mapper 3.0//EN\u0026quot; \u0026quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd\u0026quot; \u0026gt; \u0026lt;mapper namespace=\u0026quot;dev.signalyu.tingshu.album.mapper.BaseAttributeMapper\u0026quot;\u0026gt; \u0026lt;resultMap id=\u0026quot;baseAttributeMap\u0026quot; type=\u0026quot;dev.signalyu.tingshu.model.album.BaseAttribute\u0026quot; autoMapping=\u0026quot;true\u0026quot;\u0026gt; \u0026lt;id column=\u0026quot;id\u0026quot; property=\u0026quot;id\u0026quot; /\u0026gt; \u0026lt;collection property=\u0026quot;attributeValueList\u0026quot; ofType=\u0026quot;dev.signalyu.tingshu.model.album.BaseAttributeValue\u0026quot; autoMapping=\u0026quot;true\u0026quot;\u0026gt; \u0026lt;id column=\u0026quot;base_attribute_value_id\u0026quot; property=\u0026quot;id\u0026quot; /\u0026gt; \u0026lt;/collection\u0026gt; \u0026lt;/resultMap\u0026gt; \u0026lt;select id=\u0026quot;getAttributeByCategory1Id\u0026quot; resultMap=\u0026quot;baseAttributeMap\u0026quot;\u0026gt; select ba.id, ba.category1_id, ba.attribute_name, bav.id as base_attribute_value_id, bav.value_name from base_attribute as ba left join base_attribute_value bav on ba.id = bav.attribute_id where category1_id = #{category1Id} and ba.is_deleted = 0; \u0026lt;/select\u0026gt; \u0026lt;/mapper\u0026gt; @Data @TableName(\u0026quot;base_attribute\u0026quot;) public class BaseAttribute extends BaseEntity { private static final long serialVersionUID = 1L; @Schema(description = \u0026quot;Category 1 ID\u0026quot;) @TableField(\u0026quot;category1_id\u0026quot;) private Long category1Id; @Schema(description = \u0026quot;Attribute display name\u0026quot;) @TableField(\u0026quot;attribute_name\u0026quot;) private String attributeName; @TableField(exist = false) private List\u0026lt;BaseAttributeValue\u0026gt; attributeValueList; } @Data @TableName(\"base_attribute_value\") public class BaseAttributeValue extends BaseEntity { private static final long serialVersionUID = 1L; @Schema(description = \"Attribute ID\") @TableField(\"attribute_id\") private Long attributeId; @Schema(description = \"Attribute value name\") @TableField(\"value_name\") private String valueName; } SHOW RESULT SET id category1_id attribute_name base_attribute_value_id value_name 1 2 Audiobook Type 1 Male-oriented Novels 1 2 Audiobook Type 2 Female-oriented Novels 2 2 Payment Type 3 Paid 2 2 Payment Type 4 Free SHOW NOTES Architecture Flow: Controller → BaseCategoryService (Interface) → BaseCategoryServiceImpl (Implementation) → Uses: - baseMapper (for BaseCategory1 CRUD) - baseAttributeMapper (for custom queries) namespace: The namespace defines the Java interface that the XML mapper is associated with. It is used to uniquely identify the mapper in the context of MyBatis. In the above code, dev.signalyu.tingshu.album.mapper.BaseAttributeMapper represents the fully qualified name of the Java interface that the mapper belongs to. This means that the methods declared in the interface BaseAttributeMapper will use the SQL statements defined in the XML file. resultMap/collection/autoMapping: The resultMap is used to define how the result set from a query is mapped to Java objects. The collection element is used to map a collection of objects (e.g., List, Set) that are related to the main object being mapped. The autoMapping attribute tells MyBatis to automatically map the fields of the result set to the properties of the Java object. In the above code, The id=\u0026quot;baseAttributeMap\u0026quot; defines a mapping for BaseAttribute class, where the columns of the result set are mapped to the fields of the BaseAttribute class. The column=\u0026quot;id\u0026quot; in result set maps to the property=\u0026quot;id\u0026quot; field in BaseAttribute. The column=\u0026quot;base_attribute_value_id\u0026quot; inside the collection tag maps to the property=\u0026quot;id\u0026quot; field in BaseAttributeValue. The select statement inside the mapper doesn\u0026rsquo;t query attribute_id field. When mybatis performs mapping, the attributeId in BaseAttributeValue objects will be null. Update ER Diagram: album_info \u0026amp; album_stat SHOW CODE Java @RestController @RequestMapping(\u0026quot;api/album\u0026quot;) public class AlbumInfoApiController { @Autowired private AlbumInfoService albumInfoService; @PostMapping(\u0026quot;/albumInfo/saveAlbumInfo\u0026quot;) public Result saveAlbumInfo(@RequestBody @Validated AlbumInfoVo albumInfoVo){ Long userId = AuthContextHolder.getUserId(); albumInfoService.saveAlbumInfo(userId, albumInfoVo); return Result.ok(); } } public interface AlbumInfoService extends IService\u0026lt;AlbumInfo\u0026gt; { void saveAlbumInfo(Long userId, AlbumInfoVo albumInfoVo); void saveAlbumStat(Long albumId, String statType, int statNum); } @Service public class AlbumInfoServiceImpl extends ServiceImpl\u0026lt;AlbumInfoMapper, AlbumInfo\u0026gt; implements AlbumInfoService { @Autowired private AlbumInfoMapper albumInfoMapper; @Autowired private AlbumAttributeValueMapper albumAttributeValueMapper; @Autowired private AlbumStatMapper albumStatMapper; @Override @Transactional(rollbackFor = Exception.class) public void saveAlbumInfo(Long userId, AlbumInfoVo albumInfoVo) { AlbumInfo albumInfo = BeanUtil.copyProperties(albumInfoVo, AlbumInfo.class); albumInfo.setUserId(userId); albumInfo.setIncludeTrackCount(0); albumInfo.setIsFinished(\u0026quot;0\u0026quot;); albumInfo.setTracksForFree(5); albumInfo.setStatus(SystemConstant.ALBUM_STATUS_PASS); albumInfoMapper.insert(albumInfo); Long albumId = albumInfo.getId(); List\u0026lt;AlbumAttributeValueVo\u0026gt; albumAttributeValueVoList = albumInfoVo.getAlbumAttributeValueVoList(); if (CollectionUtil.isNotEmpty(albumAttributeValueVoList)) { for (AlbumAttributeValueVo albumAttributeValueVo : albumAttributeValueVoList) { AlbumAttributeValue albumAttributeValue = BeanUtil.copyProperties(albumAttributeValueVo, AlbumAttributeValue.class); albumAttributeValue.setAlbumId(albumId); albumAttributeValueMapper.insert(albumAttributeValue); } } this.saveAlbumStat(albumId, SystemConstant.ALBUM_STAT_PLAY, 0); this.saveAlbumStat(albumId, SystemConstant.ALBUM_STAT_SUBSCRIBE, 0); this.saveAlbumStat(albumId, SystemConstant.ALBUM_STAT_BUY, 0); this.saveAlbumStat(albumId, SystemConstant.ALBUM_STAT_COMMENT, 0); } @Override public void saveAlbumStat(Long albumId, String statType, int statNum) { AlbumStat albumStat = new AlbumStat(); albumStat.setAlbumId(albumId); albumStat.setStatType(statType); albumStat.setStatNum(statNum); albumStatMapper.insert(albumStat); } } SHOW NOTES public interface AlbumInfoService extends IService\u0026lt;AlbumInfo\u0026gt; {} public class ServiceImpl\u0026lt;M extends BaseMapper\u0026lt;T\u0026gt;, T\u0026gt; implements IService\u0026lt;T\u0026gt; {} public interface BaseMapper\u0026lt;T\u0026gt; extends Mapper\u0026lt;T\u0026gt; {} public interface AlbumInfoMapper extends BaseMapper\u0026lt;AlbumInfo\u0026gt; {} public interface AlbumAttributeValueMapper extends BaseMapper\u0026lt;AlbumAttributeValue\u0026gt; {} public interface AlbumStatMapper extends BaseMapper\u0026lt;AlbumStat\u0026gt; {} public class AlbumInfoServiceImpl extends ServiceImpl\u0026lt;AlbumInfoMapper, AlbumInfo\u0026gt; implements AlbumInfoService { // ... albumInfoMapper.insert(albumInfo); // ... albumAttributeValueMapper.insert(albumAttributeValue); // ... albumStatMapper.insert(albumStat); } The BaseMapper\u0026lt;T\u0026gt; interface provides ready-to-use database operations, eliminating the need for a mapper.xml file. As a result, the three mappers—albumInfoMapper, albumAttributeValueMapper, and albumStatMapper—can utilize the insert method without the need to write a mapper.xml file.\nDelete Using Views Views are useful in several scenarios, including when complex queries are frequently used or when providing controlled access to specific data for security purposes.\nCategory ER Diagram SHOW CODE SQL CREATE OR REPLACE VIEW base_category_view AS SELECT bc3.id, bc1.id category1_id, bc1.name category1_name, bc2.id category2_id, bc2.name category2_name, bc3.id category3_id, bc3.name category3_name, bc3.is_deleted, bc3.create_time, bc3.update_time FROM base_category1 bc1 LEFT JOIN base_category2 bc2 ON bc2.category1_id = bc1.id LEFT JOIN base_category3 bc3 ON bc3.category2_id = bc2.id; -- Basic query SELECT * FROM base_category_view; -- Filtered query SELECT category1_name, category2_name, category3_name FROM base_category_view WHERE is_deleted = 0; Grouping Show Data category1_id category1_name category2_id category2_name category3_id category3_name 1 Music 101 Music Effects 1001 Hypnotic Music 1 Music 101 Music Effects 1002 Relaxation Music 1 Music 101 Music Effects 1003 Energizing Music 1 Music 101 Music Effects 1004 Prenatal Music 1 Music 101 Music Effects 1005 Workout Music 1 Music 101 Music Effects 1006 Leisure Music 1 Music 102 Course Guidance 1007 Sleep Assistance Guide 1 Music 102 Course Guidance 1008 Relaxation Guide 1 Music 102 Course Guidance 1009 Focus Guide 1 Music 102 Course Guidance 1010 Children Sleep Guide 1 Music 102 Course Guidance 1011 Other 1 Music 103 Host Music Show 1012 Classic Music Recommendation 1 Music 103 Host Music Show 1013 Hot Song Roundup 1 Music 103 Host Music Show 1014 Cover Songs 1 Music 103 Host Music Show 1015 Music Education 1 Music 103 Host Music Show 1016 Music Stories 2 Audiobook 104 Male Frequency Novels 1018 Military Novels 2 Audiobook 104 Male Frequency Novels 1019 Sports Novels 2 Audiobook 104 Male Frequency Novels 1020 Alternate Dimensions 2 Audiobook 104 Male Frequency Novels 1021 Fantasy 2 Audiobook 104 Male Frequency Novels 1022 Suspense \u0026amp; Paranormal 2 Audiobook 104 Male Frequency Novels 1023 Martial Arts 2 Audiobook 104 Male Frequency Novels 1024 Urban 2 Audiobook 104 Male Frequency Novels 1025 Immortal Heroes 2 Audiobook 104 Male Frequency Novels 1026 Fantasy Fiction 2 Audiobook 104 Male Frequency Novels 1027 Historical Novels 2 Audiobook 104 Male Frequency Novels 1028 Game Novels 2 Audiobook 104 Male Frequency Novels 1029 Science Fiction 2 Audiobook 105 Female Frequency Novels 1030 Fantasy Romance 2 Audiobook 105 Female Frequency Novels 1031 Romantic Youth 2 Audiobook 105 Female Frequency Novels 1032 Modern Romance 2 Audiobook 105 Female Frequency Novels 1033 Ancient Romance SHOW CODE Java Json @RestController @RequestMapping(value = \u0026quot;/api/album\u0026quot;) public class BaseCategoryApiController { @Autowired private BaseCategoryService baseCategoryService; @GetMapping(\u0026quot;/category/getBaseCategoryList\u0026quot;) public Result\u0026lt;List\u0026lt;JSONObject\u0026gt;\u0026gt; getBaseCategoryList() { List\u0026lt;JSONObject\u0026gt; list = baseCategoryService.getBaseCategoryList(); return Result.ok(list); } } public interface BaseCategoryService extends IService\u0026lt;BaseCategory1\u0026gt; { List\u0026lt;JSONObject\u0026gt; getBaseCategoryList(); } @Service public class BaseCategoryServiceImpl extends ServiceImpl\u0026lt;BaseCategory1Mapper, BaseCategory1\u0026gt; implements BaseCategoryService { @Autowired private BaseCategory1Mapper baseCategory1Mapper; @Autowired private BaseCategory2Mapper baseCategory2Mapper; @Autowired private BaseCategory3Mapper baseCategory3Mapper; @Autowired private BaseCategoryViewMapper baseCategoryViewMapper; @Override public List\u0026lt;JSONObject\u0026gt; getBaseCategoryList() { // Create target collection List\u0026lt;JSONObject\u0026gt; allList = new ArrayList\u0026lt;\u0026gt;(); // Query all category data from view List\u0026lt;BaseCategoryView\u0026gt; allCategoryList = baseCategoryViewMapper.selectList(null); // Process level 1 categories - group by level 1 category ID // Using Stream to group into Map where key=level1Id, value=list of categories Map\u0026lt;Long, List\u0026lt;BaseCategoryView\u0026gt;\u0026gt; category1Map = allCategoryList.stream() .collect(Collectors.groupingBy(BaseCategoryView::getCategory1Id)); if (CollectionUtil.isNotEmpty(category1Map)) { for (Map.Entry\u0026lt;Long, List\u0026lt;BaseCategoryView\u0026gt;\u0026gt; entry1 : category1Map.entrySet()) { // Process each level 1 category Long category1Id = entry1.getKey(); String category1Name = entry1.getValue().get(0).getCategory1Name(); // Build level 1 category JSON object JSONObject jsonObject1 = new JSONObject(); jsonObject1.put(\u0026quot;categoryId\u0026quot;, category1Id); jsonObject1.put(\u0026quot;categoryName\u0026quot;, category1Name); // Process level 2 categories within current level 1 category Map\u0026lt;Long, List\u0026lt;BaseCategoryView\u0026gt;\u0026gt; category2Map = entry1.getValue().stream() .collect(Collectors.groupingBy(BaseCategoryView::getCategory2Id)); if (CollectionUtil.isNotEmpty(category2Map)) { List\u0026lt;JSONObject\u0026gt; jsonObject2List = new ArrayList\u0026lt;\u0026gt;(); for (Map.Entry\u0026lt;Long, List\u0026lt;BaseCategoryView\u0026gt;\u0026gt; entry2 : category2Map.entrySet()) { // Get level 2 category ID and name Long category2Id = entry2.getKey(); String category2Name = entry2.getValue().get(0).getCategory2Name(); // Build level 2 category JSON object JSONObject jsonObject2 = new JSONObject(); jsonObject2.put(\u0026quot;categoryId\u0026quot;, category2Id); jsonObject2.put(\u0026quot;categoryName\u0026quot;, category2Name); // Process level 3 categories within current level 2 category List\u0026lt;JSONObject\u0026gt; jsonObject3List = new ArrayList\u0026lt;\u0026gt;(); for (BaseCategoryView baseCategoryView : entry2.getValue()) { // Get level 3 category ID and name Long category3Id = baseCategoryView.getCategory3Id(); String category3Name = baseCategoryView.getCategory3Name(); // Build level 3 category JSON object JSONObject jsonObject3 = new JSONObject(); jsonObject3.put(\u0026quot;categoryId\u0026quot;, category3Id); jsonObject3.put(\u0026quot;categoryName\u0026quot;, category3Name); jsonObject3List.add(jsonObject3); } // Add level 3 categories to level 2 object's \u0026quot;categoryChild\u0026quot; jsonObject2.put(\u0026quot;categoryChild\u0026quot;, jsonObject3List); jsonObject2List.add(jsonObject2); } // Add level 2 categories to level 1 object's \u0026quot;categoryChild\u0026quot; jsonObject1.put(\u0026quot;categoryChild\u0026quot;, jsonObject2List); } // Add level 1 category to final result list allList.add(jsonObject1); } } return allList; } } @Mapper public interface BaseCategoryViewMapper extends BaseMapper\u0026lt;BaseCategoryView\u0026gt; { } [ { \"categoryName\": \"Music\", \"categoryId\": 1, \"categoryChild\": [ { \"categoryName\": \"Music \u0026 Sound Effects\", \"categoryId\": 101, \"categoryChild\": [ {\"categoryName\": \"Hypnotic Music\", \"categoryId\": 1001}, {\"categoryName\": \"Relaxation Music\", \"categoryId\": 1002}, {\"categoryName\": \"Energizing Music\", \"categoryId\": 1003}, {\"categoryName\": \"Prenatal Music\", \"categoryId\": 1004}, {\"categoryName\": \"Workout Music\", \"categoryId\": 1005}, {\"categoryName\": \"Leisure Music\", \"categoryId\": 1006} ] }, { \"categoryName\": \"Guided Courses\", \"categoryId\": 102, \"categoryChild\": [ {\"categoryName\": \"Sleep Guidance\", \"categoryId\": 1007}, {\"categoryName\": \"Relaxation Guidance\", \"categoryId\": 1008}, {\"categoryName\": \"Focus Guidance\", \"categoryId\": 1009}, {\"categoryName\": \"Children's Sleep Guidance\", \"categoryId\": 1010}, {\"categoryName\": \"Others\", \"categoryId\": 1011} ] }, { \"categoryName\": \"Host Music Programs\", \"categoryId\": 103, \"categoryChild\": [ {\"categoryName\": \"Classic Music Recommendations\", \"categoryId\": 1012}, {\"categoryName\": \"Hot Songs Highlights\", \"categoryId\": 1013}, {\"categoryName\": \"Song Covers\", \"categoryId\": 1014}, {\"categoryName\": \"Music Lessons\", \"categoryId\": 1015}, {\"categoryName\": \"Music Stories\", \"categoryId\": 1016} ] } ] }, { \"categoryName\": \"Audiobooks\", \"categoryId\": 2, \"categoryChild\": [ { \"categoryName\": \"Male-Oriented Fiction\", \"categoryId\": 104, \"categoryChild\": [ {\"categoryName\": \"Military Fiction\", \"categoryId\": 1018}, {\"categoryName\": \"Sports Fiction\", \"categoryId\": 1019}, {\"categoryName\": \"N-Dimensional\", \"categoryId\": 1020}, {\"categoryName\": \"Fantasy\", \"categoryId\": 1021}, {\"categoryName\": \"Suspense \u0026 Supernatural\", \"categoryId\": 1022}, {\"categoryName\": \"Martial Arts\", \"categoryId\": 1023}, {\"categoryName\": \"Urban Fiction\", \"categoryId\": 1024}, {\"categoryName\": \"Xianxia\", \"categoryId\": 1025}, {\"categoryName\": \"Xuanhuan\", \"categoryId\": 1026}, {\"categoryName\": \"Historical Fiction\", \"categoryId\": 1027}, {\"categoryName\": \"Gaming Fiction\", \"categoryId\": 1028}, {\"categoryName\": \"Science Fiction\", \"categoryId\": 1029} ] }, { \"categoryName\": \"Female-Oriented Fiction\", \"categoryId\": 105, \"categoryChild\": [ {\"categoryName\": \"Fantasy Romance\", \"categoryId\": 1030}, {\"categoryName\": \"Youth Romance\", \"categoryId\": 1031}, {\"categoryName\": \"Modern Romance\", \"categoryId\": 1032}, {\"categoryName\": \"Historical Romance\", \"categoryId\": 1033} ] } ] } ] Paging Query, Dynamic Query, Row-to-Column Transformation ER Diagram: album_info \u0026amp; album_stat SHOW DATA SETS album_info Table: id album_title cover_url include_track_count create_time 1 Night Piano Melodies https://imagev2...xxx.png 55 2023-04-04 09:05:02 2 Classic Gramophone https://imagev2...yyy.png 55 2023-04-04 09:05:27 album_stat Table: album_id stat_type stat_num 1 0401 1 1 0402 0 1 0403 0 1 0404 999 2 0401 1 2 0402 0 2 0403 0 2 0404 0 SHOW CODE Java @RestController @RequestMapping(\u0026quot;api/album\u0026quot;) public class AlbumInfoApiController { @PostMapping(\u0026quot;/albumInfo/findUserAlbumPage/{page}/{limit}\u0026quot;) @TingshuLogin public Result\u0026lt;Page\u0026lt;AlbumListVo\u0026gt;\u0026gt; getUserAlbumPage(@RequestBody AlbumInfoQuery albumInfoQuery, @PathVariable int page, @PathVariable int limit) { // Get user ID and set it to query object Long userId = AuthContextHolder.getUserId(); albumInfoQuery.setUserId(userId); // Use MyBatisPlus pagination at controller level Page\u0026lt;AlbumListVo\u0026gt; pageInfo = new Page\u0026lt;\u0026gt;(page, limit); pageInfo = albumInfoService.getUserAlbumPage(pageInfo, albumInfoQuery); return Result.ok(pageInfo); } } public interface AlbumInfoService extends IService\u0026lt;AlbumInfo\u0026gt; { Page\u0026lt;AlbumListVo\u0026gt; getUserAlbumPage(Page\u0026lt;AlbumListVo\u0026gt; pageInfo, AlbumInfoQuery albumInfoQuery); } @Service public class AlbumInfoServiceImpl extends ServiceImpl\u0026lt;AlbumInfoMapper, AlbumInfo\u0026gt; implements AlbumInfoService { @Override public Page\u0026lt;AlbumListVo\u0026gt; getUserAlbumPage(Page\u0026lt;AlbumListVo\u0026gt; pageInfo, AlbumInfoQuery albumInfoQuery) { return albumInfoMapper.getUserAlbumPage(pageInfo, albumInfoQuery); } } @Mapper public interface AlbumInfoMapper extends BaseMapper\u0026lt;AlbumInfo\u0026gt; { Page\u0026lt;AlbumListVo\u0026gt; getUserAlbumPage(Page\u0026lt;AlbumListVo\u0026gt; pageInfo, @Param(\u0026quot;vo\u0026quot;) AlbumInfoQuery albumInfoQuery); } \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; ?\u0026gt; \u0026lt;!DOCTYPE mapper PUBLIC \u0026quot;-//mybatis.org//DTD Mapper 3.0//EN\u0026quot; \u0026quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd\u0026quot; \u0026gt; \u0026lt;mapper namespace=\u0026quot;dev.signalyu.tingshu.album.mapper.AlbumInfoMapper\u0026quot;\u0026gt; \u0026lt;select id=\u0026quot;getUserAlbumPage\u0026quot; resultType=\u0026quot;dev.signalyu.tingshu.vo.album.AlbumListVo\u0026quot;\u0026gt; select ai.id albumId, ai.album_title, ai.cover_url, ai.include_track_count, ai.create_time, max(if(stat.stat_type = '0401', stat_num, 0)) playStatNum, max(if(stat.stat_type = '0402', stat_num, 0)) subscribeStatNum, max(if(stat.stat_type = '0403', stat_num, 0)) buyStatNum, max(if(stat.stat_type = '0404', stat_num, 0)) commentStatNum from album_info ai inner join album_stat stat on stat.album_id = ai.id \u0026lt;where\u0026gt; \u0026lt;if test=\u0026quot;vo.userId != null\u0026quot;\u0026gt; ai.user_id = #{vo.userId} \u0026lt;/if\u0026gt; \u0026lt;if test=\u0026quot;vo.status != null and vo.status != ''\u0026quot;\u0026gt; and ai.status = #{vo.status} \u0026lt;/if\u0026gt; \u0026lt;if test=\u0026quot;vo.albumTitle != null and vo.albumTitle != ''\u0026quot;\u0026gt; and ai.album_title like concat('%', #{vo.albumTitle} ,'%') \u0026lt;/if\u0026gt; \u0026lt;/where\u0026gt; and ai.is_deleted = 0 group by ai.id order by ai.id desc \u0026lt;/select\u0026gt; \u0026lt;/mapper\u0026gt; SHOW RESULT SETS Result Sets: albumId album_title cover_url include_track_count create_time playStatNum subscribeStatNum buyStatNum commentStatNum 1 Night Piano Melodies https://imagev2...xxx.png 55 2023-04-04 09:05:02 1 0 0 999 2 Classic Gramophone https://imagev2...yyy.png 55 2023-04-04 09:05:27 1 0 0 0 SHOW NOTES MyBatis-Plus dynamically modifies SQL statements for pagination using the PaginationInnerInterceptor. The standard implementation flow is as follows: // Configuration Setup @Configuration @MapperScan(\u0026#34;dev.signalyu.tingshu.*.mapper\u0026#34;) public class MybatisPlusConfig { @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); // Add pagination interceptor with MySQL dialect interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); return interceptor; } } // Pagination Query Execution public class AlbumInfoApiController { Page\u0026lt;AlbumListVo\u0026gt; pageInfo = new Page\u0026lt;\u0026gt;(page, limit); pageInfo = albumInfoService.getUserAlbumPage(pageInfo, albumInfoQuery); } public interface AlbumInfoService extends IService\u0026lt;AlbumInfo\u0026gt; { Page\u0026lt;AlbumListVo\u0026gt; getUserAlbumPage(Page\u0026lt;AlbumListVo\u0026gt; pageInfo, AlbumInfoQuery albumInfoQuery); } public class AlbumInfoServiceImpl extends ServiceImpl\u0026lt;AlbumInfoMapper, AlbumInfo\u0026gt; implements AlbumInfoService { @Override public Page\u0026lt;AlbumListVo\u0026gt; getUserAlbumPage(Page\u0026lt;AlbumListVo\u0026gt; pageInfo, AlbumInfoQuery albumInfoQuery) { return albumInfoMapper.getUserAlbumPage(pageInfo, albumInfoQuery); } } public interface AlbumInfoMapper extends BaseMapper\u0026lt;AlbumInfo\u0026gt; { Page\u0026lt;AlbumListVo\u0026gt; getUserAlbumPage(Page\u0026lt;AlbumListVo\u0026gt; pageInfo, @Param(\u0026#34;vo\u0026#34;) AlbumInfoQuery albumInfoQuery); } Dynamic Query in MyBatis and MyBatisPlus --- MyBatis --- \u0026lt;where\u0026gt; \u0026lt;if test=\u0026#34;vo.userId != null\u0026#34;\u0026gt; ai.user_id = #{vo.userId} \u0026lt;/if\u0026gt; \u0026lt;if test=\u0026#34;vo.status != null and vo.status != \u0026#39;\u0026#39;\u0026#34;\u0026gt; and ai.status = #{vo.status} \u0026lt;/if\u0026gt; \u0026lt;if test=\u0026#34;vo.albumTitle != null and vo.albumTitle != \u0026#39;\u0026#39;\u0026#34;\u0026gt; and ai.album_title like concat(\u0026#39;%\u0026#39;, #{vo.albumTitle} ,\u0026#39;%\u0026#39;) \u0026lt;/if\u0026gt; \u0026lt;/where\u0026gt; --- MyBatisPlus --- QueryWrapper\u0026lt;AlbumInfo\u0026gt; queryWrapper = new QueryWrapper\u0026lt;\u0026gt;(); // \u0026#34;vo\u0026#34; represents an object of AlbumInfoQuery class queryWrapper.eq(vo.getUserId() != null, \u0026#34;user_id\u0026#34;, vo.getUserId()) .eq(vo.getStatus() != null \u0026amp;\u0026amp; !vo.getStatus().isEmpty(), \u0026#34;status\u0026#34;, vo.getStatus()) .like(vo.getAlbumTitle() != null \u0026amp;\u0026amp; !vo.getAlbumTitle().isEmpty(), \u0026#34;album_title\u0026#34;, vo.getAlbumTitle()) .eq(\u0026#34;is_deleted\u0026#34;, 0) .orderByDesc(\u0026#34;id\u0026#34;); albumInfoService.list(queryWrapper); Row-to-Column Transformation --- Use MAX() and IF() --- select ai.id AS albumId, ai.album_title, ai.cover_url, ai.include_track_count, ai.create_time, --- Even though IF() returns only one value (0 or stat_type), --- --- it is necessary to use an aggregate function like MAX() to --- --- ensure proper behavior in the GROUP BY clause --- max(if(stat.stat_type = \u0026#39;0401\u0026#39;, stat_num, 0)) playStatNum, max(if(stat.stat_type = \u0026#39;0402\u0026#39;, stat_num, 0)) subscribeStatNum, max(if(stat.stat_type = \u0026#39;0403\u0026#39;, stat_num, 0)) buyStatNum, max(if(stat.stat_type = \u0026#39;0404\u0026#39;, stat_num, 0)) commentStatNum from album_info ai inner join album_stat stat on stat.album_id = ai.id group by ai.id; --- Use MAX() and CASE...WHEN --- SELECT ai.id AS albumId, ai.album_title, ai.cover_url, ai.include_track_count, ai.create_time, --- Even though IF() returns only one value (0 or stat_type), --- --- it is necessary to use an aggregate function like MAX() to --- --- ensure proper behavior in the GROUP BY clause --- MAX(CASE WHEN stat.stat_type = \u0026#39;0401\u0026#39; THEN stat.stat_num ELSE 0 END) AS playStatNum, MAX(CASE WHEN stat.stat_type = \u0026#39;0402\u0026#39; THEN stat.stat_num ELSE 0 END) AS subscribeStatNum, MAX(CASE WHEN stat.stat_type = \u0026#39;0403\u0026#39; THEN stat.stat_num ELSE 0 END) AS buyStatNum, MAX(CASE WHEN stat.stat_type = \u0026#39;0404\u0026#39; THEN stat.stat_num ELSE 0 END) AS commentStatNum FROM album_info ai INNER JOIN album_stat stat ON stat.album_id = ai.id GROUP BY ai.id, ai.album_title, ai.cover_url, ai.include_track_count, ai.create_time; --- Use GROUP_CONCAT() and IF() --- SELECT ai.id AS albumId, ai.album_title, ai.cover_url, ai.include_track_count, ai.create_time, GROUP_CONCAT(IF(stat.stat_type = \u0026#39;0401\u0026#39;, stat.stat_num, 0) ORDER BY stat.stat_type) AS playStatNum, GROUP_CONCAT(IF(stat.stat_type = \u0026#39;0402\u0026#39;, stat.stat_num, 0) ORDER BY stat.stat_type) AS subscribeStatNum, GROUP_CONCAT(IF(stat.stat_type = \u0026#39;0403\u0026#39;, stat.stat_num, 0) ORDER BY stat.stat_type) AS buyStatNum, GROUP_CONCAT(IF(stat.stat_type = \u0026#39;0404\u0026#39;, stat.stat_num, 0) ORDER BY stat.stat_type) AS commentStatNum FROM album_info ai INNER JOIN album_stat stat ON stat.album_id = ai.id GROUP BY ai.id; It is important to note that when performing row-to-column transformation, applying an aggregate function such as MAX() or GROUP_CONCAT() is necessary. Otherwise, MySQL will raise an exception similar to \u0026ldquo;nonaggregated column is not functionally dependent on columns in GROUP BY clause.\u0026rdquo; For example, running the following query will result in an error message like: SELECT list is not in GROUP BY clause and contains nonaggregated column 'tingshu_album.stat.stat_type' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by.\nSELECT ai.id AS albumId, ai.album_title, ai.cover_url, ai.include_track_count, ai.create_time, if(stat.stat_type = \u0026#39;0401\u0026#39;, stat_num, 0) AS playStatNum, if(stat.stat_type = \u0026#39;0402\u0026#39;, stat_num, 0) AS subscribeStatNum, if(stat.stat_type = \u0026#39;0403\u0026#39;, stat_num, 0) AS buyStatNum, if(stat.stat_type = \u0026#39;0404\u0026#39;, stat_num, 0) AS commentStatNum FROM album_info ai INNER JOIN album_stat stat ON stat.album_id = ai.id GROUP BY ai.id; Database Caching ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/development-manual/1-development-manual/","summary":"IDEA Postfix Completion Postfix completion allows writing code faster by adding expressions after a variable or value. It can be customized to suit specific coding needs.\n\u0026#34;Hello\u0026#34;.var → String s = \u0026#34;Hello\u0026#34;; Live Templates Live Templates are predefined code snippets that can be inserted quickly using a shortcut. It can be customized to suit specific coding needs.\nsout → System.out.println(); Keyboard Shortcuts Show Hint: Alt + Enter Show Parameter Info: Ctrl + P Surround with Selected Code Block: Ctrl + Alt + J Start a New Line: Shift + Enter Start a New Line Before Current: Ctrl + Alt + Enter Show Live Template: Ctrl + J Rename in Batch: Shift + F6 Extract Method: Ctrl + Alt + M Override Methods: Ctrl + O Implement Methods: Ctrl + I Optimize Imports: Ctrl + Alt + O View Source Code: Ctrl + N → Ctrl + F12 Go to Previous Edit Location: Ctrl + Alt + ← Go to Next Edit Location: Ctrl + Alt + → Show Inheritance Tree: Ctrl + H Show Quick Documentation: Ctrl + Q Show UML Diagram: Ctrl + Alt + U Go to Specified Line: Ctrl + G → Enter line number Go to Variable Definition: Ctrl + Alt + B Expand Code Block: Ctrl + Shift + + Collapse Code Block: Ctrl + Shift + - Debug Method Breakpoints Field Breakpoints Conditional Breakpoints Thread Debug Custom Data Views Config Tomcat Create Maven Java Project Create Maven Java Web Maven Introduction to Maven Maven is a build automation and project management tool primarily used for Java projects.","title":"Development Manual"},{"content":"Core Concepts Loose Coupling Loose Coupling is a design principle that aims to reduce the dependencies between components within a system.\nInversion of Control (IoC) Inversion of Control is a design principle where the control of object creation and lifecycle management is transferred from the application code to an external container or framework.\nDependency Injection (DI) Dependency Injection is a design pattern commonly used in object-oriented programming, where the dependecies of a class are provided externally rather than being created within the class itself.\nBeans Beans are objects that are managed by the Spring framework.\nContainer A Spring Container is responsible for managing the life cycle, configuration, and dependencies injection of the beans in a Spring Application.\nLife Cycle of Beans Beans are objects that are managed by the Spring framework. Bean Definition includes configuration meta data required by the Spring container to create and manage the bean. Bean Configurations can be provided in various way, including XML configuration files, annotations, and Java-based configuration. Bean Instantiation $\\rightarrow$ Population of Properties $\\rightarrow$ Initialization $\\rightarrow$ Ready for Use $\\rightarrow$ Destruction The Difference between instantiation and initiation?\nInstantiation occurs when a new keyword is used to create an object. It focus on constructing the object\u0026rsquo;s structure and allocating memory. In contrast, initialization focus on assigning values to the object\u0026rsquo;s fields and setting up its initial state after instantiation.\nConstructor Injection \u0026amp; Setter Injection \u0026amp; Field Injection Constructor Injection Constructor Injection in Spring is a type of dependency injection where the Spring framework provides the required dependency to a class by invoking its constructor. Since dependencies are supplied via the constructor, they cannot be changed after object creation \u0026ndash; promoting immutability. However, this approach may cause circular dependency issues if two or more beans depend on each other in a circular manner.\nSHOW CODE Java @Component public class ServiceA { private final RepositoryA repositoryA; // Constructor injection @Autowired public ServiceA(RepositoryA repositoryA) { this.repositoryA = repositoryA; } } Setter Injection Setter Injection in Spring is a form of dependency injection where the Spring framework injects dependencies into a bean by calling the bean\u0026rsquo;s setter method. This approach is flexible and commonly used to inject optional dependencies or when the dependency might change after the object is initialized.\nSHOW CODE Java @Component public class ServiceB { private RepositoryB repositoryB; // Setter injection @Autowired public void setRepositoryB(RepositoryB repositoryB) { this.repositoryB = repositoryB; } } Field Injection Field Injection in Spring is a form of dependency injection where the Spring framework directly injects dependencies into a class\u0026rsquo;s fields. Like constructor injection, the dependencies remain immutable after being injected. Under the hood. Spring uses reflection to assign values to private fields.\nSHOW CODE Java @Component public class ServiceC { @Autowired private RepositoryC repositoryC; public void performAction() { repositoryC.doSomething(); } } @Component \u0026amp; @ComponentScan The @Component annotation in Spring is used to mark a class as spring-managed bean, allowing Spring to detect and register it as a bean in the application context. The @ComponentScan annotation is used to specify base packages that Spring should scan for @Component-annotated during configuration.\nSHOW CODE Java package com.example.myapp @Component public class MyService { public void performTask() { System.out.println(\"Task performed!\"); } } @Configuration @ComponentScan(basePackages = \"com.example.myapp\") public class AppConfig { } @Value \u0026amp; @Autowired \u0026amp; @Qualifier @Value The @Value annotation is used to inject values into fields, mathod parameters, and constructor arguments.\nSHOW CODE Java // Injects literal values @Value(\"Hello, World!\") private String message; // Injects from a properties file app.name=MySpringApp @Value(\"${app.name}\") private String appName; // Injects default values @Value(\"${app.version:1.0.0}\") private String appVersion; // Injects expression @Value(\"#{T(java.lang.Math).random() * 100}\") private double randomValue; @Autowired The @Autowired annotation is used for automatic dependency injection. It allows Spring resolve and inject the required bean into a class automatically by type.\nSHOW CODE Java // Field Injection @Component public class ServiceA { @Autowired private RepositoryA repositoryA; public void performTask() { repositoryA.doSomething(); } } // Setter Injection @Component public class ServiceB { private RepositoryB repositoryB; @Autowired public void setRepositoryB(RepositoryB repositoryB) { this.repositoryB = repositoryB; } } // Constructor Injection @Component public class ServiceB { private RepositoryB repositoryB; @Autowired public void setRepositoryB(RepositoryB repositoryB) { this.repositoryB = repositoryB; } } @Qualifier The @Qualifier annotation in Spring is used for resolve ambiguities when multiple beans of the same type are available in the application context.\nSHOW CODE Java @Component(\"repositoryImpl1\") public class RepositoryImpl1 implements Repository {} @Component(\"repositoryImpl2\") public class RepositoryImpl2 implements Repository {} @Component public class Service { @Autowired @Qualifier(\"repositoryImpl2\") private Repository repository; } Components of Spring Boot Spring Boot Starter: Simplifies dependency management by building commonly used dependencies, reducing the need for manual configuration.\nAuto Configuration: Automatically configures Spring Boot application beans and settings based on the libraries on the classpath, eliminating the need for extensive configuration in application.properties or XML files.\nSpring Boot Atuator: Provides production-ready features like monitoring, metrics, and health checks to ensure better application insights and management.\nEmbedded Server: Includes servers like Tomcat and Jetty, allowing applications to run as standalone programs, simplifying development and deployment.\nSpring Boot DevTools: A collection of tools that enhance the development experience by enabling features like hot reload and live reload for faster feedback.\nSpring Boot Auto Configuration Spring Boot looks for classes annotated with @Configuration and examines the dependencies in the classpath. The @Configuration annotation triggers the logic that looks for @Bean declarations within the class and registers those beans to be managed by the Spring container.\nIn a Spring Boot application, the main method typically calls the SpringApplication.run() method. This method takes the main application class (e.g., XXXApplication.class) as a parameter. The XXXAplication class is annotated with @SpringBootApplication which includes three key annotations: @SpringBootConfiguration, @EnableAutoConfiguration, and @ComponentScan.\n@SpringBootConfiguration is an alias for @Configurition. It indicates that the class contains Spring bean definitions, and Spring Boot will scan it for @Bean declarations.\n@EnableAutoConfiguration annotation tells Spring Boot to enable its auto-configuration mechanism. It looks for the file AutoConfiguration.imports inside the spring-boot-autoconfigure.jar dependency, which lists auto-configuration classes. Spring Boot automatically imports and executes every class that has the AutoConfiguration name at the end of the class name.\n# META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration org.springframework.boot.autoconfigure.aop.AopAutoConfiguration org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration ... @ComponentScan annotation tells Spring Boot to scan for Spring components (such as @Component, @Service, @Repository, etc.) in the specified packages or the entire classpath. By default, it scans from the package of the class that contains the annotation. To specify a different base package, the basePackages parameter can be set, like this:\n@ComponentScan(basePackages = {\u0026#34;com.mycompany\u0026#34;}) Common Annotations @Component vs. @Bean The @Component annotation is applied to a class to mark it as a bean managed by the Spring container. There are several specialized variants of this annotation: @Controller (for web controllers), @Service (for service layer components), and @Repository (for DAO layer components). In contrast, the @Bean annotation is used to mark a method within a class annotated with @Configuration, indicating that the method should return an object to be managed by the Spring container. This apporpach provides more control over bean creation and configuration, allowing for more explicit customization of the bean.\nSHOW CODE Java // Spring will detect UserService during classpath // scanning and manage it as a bean. @Component public class UserService { public String getUser() { return \"User\"; } } @Configuration public class AppConfig { @Bean public UserService userService() { // Explicitly creating and returning the bean return new UserService(); } } @ResposeBody The @ResponseBody annotation in Spring is used to indicate that a method\u0026rsquo;s return value should be written directly to the HTTP response body, rather than being treated as a view name, which is the default behavior in traditional Spring MVC controllers. The return value is automatically serialized into a format like JSON or XML, typically using Jackson, depending on the request\u0026rsquo;s Accept header.\nSHOW CODE Java @Controller public class MyRestController { @RequestMapping(\"/user\") @ResponseBody public User getUser() { return new User(\"John\", \"Doe\"); } } public class User { private String firstName; private String lastName; // Constructor, getters, and setters } In the above code, the User object will be automatically serialized into JSON format by Jackson when returned from the getUser() method. The @ResponseBody annotation ensures that the method\u0026rsquo;s return value is written directly to the HTTP response body, and Jackson handles the conversion to JSON.\n@Controller vs. @RestController The @Controller annotation is used to declare a class as a controller in Spring MVC. By default, methods within a @Controller-annotated class return a view name (e.g., home.jsp). If a method needs to return a value directly (such as JSON or XML), it should be annotated with @ResponseBody. In contrast, the @RestController annotation is a specialized version of @Controller used to define a controller for RESTful web services. It combines @Controller and @ResponseBody, meaning that the methods in a RestController-annotated class automatically return values written directly to the HTTP response body. This response is typically serialized into JSON or XML format by Jackson.\nSHOW CODE Java @Controller public class WebController { @RequestMapping(\"/home\") public String home() { return \"home\"; // returns home.jsp } } @Controller public class MyController { @RequestMapping(\"/greeting\") @ResponseBody public String greeting() { return \"Hello, World!\"; // The return value is written directly to the response body } } @RestController public class UserController { @RequestMapping(\"/api/user\") public User getUser() { return new User(\"Alice\", \"Smith\"); } } public class User { private String firstName; private String lastName; // Constructor, getters, and setters } @RequestBody, @RequestParam, @PathVariable The @RequestBody annotation is used to bind the body of an HTTP request to a method parameter. It is typically used with HTTP methods like POST, PUT, or PATCH to send data in formats such as JSON or XML. Spring automatically deserializes the request body into an obejct using a message converter, liek Jakson.\nSHOW CODE Java @RestController public class UserController { @PostMapping(\"/user\") public ResponseEntity\u0026lt;String\u0026gt; createUser(@RequestBody User user) { // User is automatically deserialized from the JSON request body return ResponseEntity.ok(\"User created: \" + user.getName()); } } The @RequestParam annotation binds a query parameter or form data to a method parameter. It is commonly used in GET or POST requests to retrive single query parameters. The annotation has optional attributes such as required (to specify if the parameter is mandatory) and defaultValue (to provide a default value when the parameter is absent).\nSHOW CODE Java @RestController public class SearchController { @GetMapping(\"/search\") public ResponseEntity\u0026lt;String\u0026gt; search(@RequestParam String query, @RequestParam(defaultValue = \"10\") int limit) { // query: the search term from the query string // limit: the number of results (defaults to 10 if not provided) return ResponseEntity.ok(\"Searching for: \" + query + \", Limit: \" + limit); } } The @PathVariable annotation binds a URL path variable to a method parameter, commonly used in RESTful web service to capture dynamic segments in the URL. For example, int the URL /user/{id}, the {id} part is dynamic, and the value of {id} will be extracted and passed to the method parameter.\nSHOW CODE Java @RestController public class UserController { // Regular expression to match both with and without the path variable @GetMapping(\"/user/{id:[a-zA-Z0-9]*}\") public ResponseEntity\u0026lt;String\u0026gt; getUser(@PathVariable(required = false) String id) { if (id == null) { return ResponseEntity.ok(\"Default User\"); } return ResponseEntity.ok(\"User ID: \" + id); } } Transformation between Object and Spring In Spring Boot, the transformation between objects and JSON is handled by the Jackson library which allows for easy serialization (converting an object to JSON) and deserialization (converting JSON to an object).\nSHOW CODE Java // When a controller returns an object, Spring Boot automatically // converts it to JSON @RestController public class UserController { @GetMapping(\"/user\") public User getUser() { return new User(1, \"John Doe\", \"john.doe@example.com\"); } } // When accessed via /user, the response is: { \"id\": 1, \"name\": \"John Doe\", \"email\": \"john.doe@example.com\" } // Spring Boot automatically converts the incoming JSON data into // an object when the object is a parameter in the controller method. @RestController public class UserController { @PostMapping(\"/user\") public String createUser(@RequestBody User user) { return \"User \" + user.getName() + \" created!\"; } } // Input JOSN: { \"id\": 2, \"name\": \"Jane Doe\", \"email\": \"jane.doe@example.com\" } ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/framework-and-tools/framework/backend/spring/1-spring-notes/","summary":"Core Concepts Loose Coupling Loose Coupling is a design principle that aims to reduce the dependencies between components within a system.\nInversion of Control (IoC) Inversion of Control is a design principle where the control of object creation and lifecycle management is transferred from the application code to an external container or framework.\nDependency Injection (DI) Dependency Injection is a design pattern commonly used in object-oriented programming, where the dependecies of a class are provided externally rather than being created within the class itself.","title":"Spring"},{"content":"Enum In Java, an enum (short for \u0026ldquo;enumeration\u0026rdquo;) is used to define a collection of constants, such as days of the week or months of the year. An enum provides a type-safe way to handle constant values, and it can be used in a switch statement or for comparison using ==. Compared to a final constant in Java, an enum can contain fields, methods, and constructors. The values() method is used to retrive all the constants in an enum, and the valueOf() method is used to convert a string into an enum constant.\nSHOW CODE Java enum Day { SUNDAY(1), MONDAY(2), TUESDAY(3), WEDNESDA(4), THURSDAY(5), FRIDAY(6), SATURDAY(7); private final int dayNum; Day(int dayNum) { this.dayNum = dayNum; } public int getDayNum() { return dayNum; } public static Day fromNumber(int num) { for (Day day : Day.values()) { if (day.getDayNum() == num) { return day; } } throw new IllegalArgumentException(\"Invalid day number: \" + num); } @Override public String toString() { return name() + \"(\" + dayNum + \")\"; } } public class Solution { public static void main(String[] args) { for (Day d : Day.values()) { System.out.print(d + \"\\t\"); } System.out.println(\"\\n\" + Day.fromNumber(1)); // System.out.println(Day.fromNumber(8)); // Converts a string to enum constant System.out.println(Day.valueOf(\"MONDAY\")); } } Generics In Java, Generics is a mechanism that allows writing classes, interfaces, and methods with type parameters, often represented by T, E, K, and V, and allows calling them with different type parameters. It provides strong type safety checks at compile time, enhances code reusability, and eliminates the need for casting.\nBasic Generics SHOW CODE Java interface Pair { K getKey(); V getValue(); } class SimplePair\u0026lt;K,V\u0026gt; implements Pair\u0026lt;K,V\u0026gt; { private final K key; private final V value; public SimplePair(K key, V value) { this.key = key; this.value = value; } @Override public K getKey() { return key; } @Override public V getValue() { return value; } @Override public String toString() { return \"(\" + key + \",\" + value + \")\"; } } public class Main { public static void main(String[] args) { SimplePair\u0026lt;String, Integer\u0026gt; pair = new SimplePair\u0026lt;\u0026gt;(\"Signal\", 27); System.out.println(\"pair = \" + pair); String key = pair.getKey(); System.out.println(\"key = \" + key); Integer value = pair.getValue(); System.out.println(\"value = \" + value); } } Bounded Type Parameters Bounded Type Parameters in Java allow restricting the range of types when writing generic code. It can be categorized into four types: Upper Bounded Type, Lower Bounded Type, Unbounded Type, and Multiple Bounds.\nUpper Bounded Type In Java, Upper Bounded Wildcards are used to define upper bounded types. The syntax for an upper bounded wildcard is \u0026lt;T extends SomeClassOrInterface\u0026gt;, which indicates that the argument type T must be a subclass of SomeClassOrInterface or SomeClassOrInterface itself.\nSHOW CODE Java import java.util.List; public class Main { // Method that accepts a list of elements that are of type Number or its subclasses public static void printNumbers(List\u0026lt;? extends Number\u0026gt; list) { for (Number number : list) { System.out.println(number); } } public static void main(String[] args) { List\u0026lt;Integer\u0026gt; intList = List.of(1, 2, 3, 4); List\u0026lt;Double\u0026gt; doubleList = List.of(1.1, 2.2, 3.3); printNumbers(intList); // Valid, Integer is a subclass of Number printNumbers(doubleList); // Valid, Double is a subclass of Number } } Lower Bounded Type In Java, Lower Bounded Wildcards are used to define lower bounded types. The syntax for a lower bounded wildcard is \u0026lt;T super SomeClassOrInterface\u0026gt;, which indicates that the argument type T must be a super class of SomeClassOrInterface or SomeClassOrInterface itself.\nSHOW CODE Java import java.util.ArrayList; import java.util.List; // Custom class Person class Person { String name; Person(String name) { this.name = name; } @Override public String toString() { return \"Person{name='\" + name + \"'}\"; } } // Subclass Employee extends Person class Employee extends Person { double salary; Employee(String name, double salary) { super(name); this.salary = salary; } @Override public String toString() { return \"Employee{name='\" + name + \"', salary=\" + salary + \"}\"; } } public class Main { // Method that accepts a list of Person or its superclasses (e.g., Object) // This method can add Employee objects to the list. public static void addEmployees(List\u0026lt;? super Employee\u0026gt; list) { list.add(new Employee(\"Alice\", 50000)); list.add(new Employee(\"Bob\", 60000)); list.add(new Employee(\"Charlie\", 70000)); } public static void main(String[] args) { // Create a list of Person, which is a superclass of Employee List\u0026lt;Person\u0026gt; personList = new ArrayList\u0026lt;\u0026gt;(); // Add Employee objects to the personList using the addEmployees method addEmployees(personList); // Print the list to see the added Employee objects for (Person person : personList) { System.out.println(person); } } } SHOW OUTPUT Output Employee{name='Alice', salary=50000.0} Employee{name='Bob', salary=60000.0} Employee{name='Charlie', salary=70000.0} Unbounded Type In Java, the Unbounded Type is represented by using the unbounded wildcard ?, which indicates that no restrictions are placed on the type of an argument passed to the method. It is commonly used when passing a collection of elements to a method where the specific type of the elements is not important. With an unbounded wildcard, elements can be read but cannot be added to the collection (except null) inside the methods.\nSHOW CODE Java import java.util.ArrayList; import java.util.List; class Person { private String name; private int age; public Person(String name, int age) { this.name = name; this.age = age; } @Override public String toString() { return \"Person(\" + name + \", \" + age + \")\"; } } public class Main { public static void printList(List\u0026lt;?\u0026gt; list) { // Iterate over the list and print each element list.add(null); // list.add(1); for (Object element : list) { System.out.println(element); } } public static void main(String[] args) { // Create lists of different types List\u0026lt;String\u0026gt; stringList = new ArrayList\u0026lt;\u0026gt;(); stringList.add(\"Hello\"); stringList.add(\"World\"); List\u0026lt;Integer\u0026gt; intList = new ArrayList\u0026lt;\u0026gt;(); intList.add(10); intList.add(20); List\u0026lt;Object\u0026gt; objectList = new ArrayList\u0026lt;\u0026gt;(); objectList.add(\"Some String\"); objectList.add(100); objectList.add(1.1); objectList.add('a'); objectList.add(true); objectList.add(new Person(\"Signal\", 18)); objectList.add(null); // Call the printList method for each list System.out.println(\"String List:\"); printList(stringList); // Works with List\u0026lt;String\u0026gt; System.out.println(\"\\nInteger List:\"); printList(intList); // Works with List\u0026lt;Integer\u0026gt; System.out.println(\"\\nObject List:\"); printList(objectList); // Works with List\u0026lt;Object\u0026gt; } } SHOW OUTPUT Output String List: Hello World Integer List: 10 20 Object List: Some String 100 1.1 a true Person(Signal, 18) null null Multiple Bounds In Java, a Multiple Bounds constraint allows the argument type T passed to a method to extend multiple types or implement multiple interfaces. This is commonly achieved using the \u0026amp; operator. The syntax for multiple bounds is \u0026lt;T extends classType \u0026amp; Interface1 \u0026amp; Interface2\u0026gt;, indicating that the argument type T must extend the class classType and implement both Interface1 and Interface2.\nSHOW CODE Java // Interface 1 interface CanFly { void fly(); } // Interface 2 interface CanSwim { void swim(); } // A base class for animals class Animal { String name; Animal(String name) { this.name = name; } } // Class that implements both interfaces class Duck extends Animal implements CanFly, CanSwim { Duck(String name) { super(name); } @Override public void fly() { System.out.println(name + \" is flying.\"); } @Override public void swim() { System.out.println(name + \" is swimming.\"); } } // A class that uses multiple bounds in its type parameter class AnimalAction\u0026lt;T extends Animal \u0026 CanFly \u0026 CanSwim\u0026gt; { T animal; AnimalAction(T animal) { this.animal = animal; } void performActions() { animal.fly(); animal.swim(); } } public class Main { public static void main(String[] args) { // Create a Duck object Duck duck = new Duck(\"Dodo\"); // Create an AnimalAction object for Duck, which extends Animal and implements CanFly and CanSwim AnimalAction\u0026ltDuck\u0026gt; action = new AnimalAction\u0026lt;\u0026gt;(duck); // Perform actions on the Duck action.performActions(); } } Reflection Reflection in Java is a feature that allows inspecting and manipulating the properties or behaviors of classes, methods, fields, and constructors at runtime. It is commonly used to examine class information, access private methods and fields, invoke methods dynamically, and create objects dynamically using the Java Reflection API. The Java Reflection API is provided by the java.lang.reflect package and the java.lang.Class class. Some of the key classes and methods in this API include:\nClass: Represents the class of an object and provides methods like getName(), getDeclaredMethods(), getDeclaredFields(), and others to examine the class\u0026rsquo;s metadata. Method: Represents a method of a class and allows invoking it dynamically using methods like invoke(). Field: Represents a field (variable) in a class and allows accessing or modifying its value dynamically. Constructor: Represents a constructor in a class and allows creating new instances dynamically using methods like newInstance(). SHOW CODE Java package dev.signalyu.warmup; import java.lang.reflect.*; class Person { private String name; private int age; public Person(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } private void sayHello() { System.out.println(\"Hello, \" + name); } @Override public String toString() { return \"Person{\" + \"name='\" + name + '\\'' + \", age=\" + age + '}'; } } public class Main { public static void main(String[] args) throws Exception { // Create a new Person object Person person = new Person(\"John\", 30); // Get the Class object associated with the Person class Class\u003c?\u003e clazz = person.getClass(); // Get class name System.out.println(\"Class name: \" + clazz.getName()); // Get declared methods Method[] methods = clazz.getDeclaredMethods(); for (Method method : methods) { System.out.println(\"Method: \" + method.getName()); } // Get declared fields Field[] fields = clazz.getDeclaredFields(); for (Field field : fields) { System.out.println(\"Field: \" + field.getName()); } // Accessing a private field via reflection Field field = clazz.getDeclaredField(\"name\"); field.setAccessible(true); // Make the private field accessible System.out.printf(\"Private field: 'name'=%s\\n\", field.get(person)); // Get the 'sayHello' method Method method = clazz.getDeclaredMethod(\"sayHello\"); // Make the private method accessible method.setAccessible(true); // Invoke the method on the 'person' object method.invoke(person); // Dynamically load the Person class Class\u003c?\u003e clazz2 = Class.forName(\"dev.signalyu.warmup.Person\"); // Get the constructor that takes a String argument Constructor\u003c?\u003e constructor = clazz2.getConstructor(String.class, int.class); // Create an instance of Person using reflection Person Signal = (Person) constructor.newInstance(\"Signal\", 18); System.out.println(\"Signal = \" + Signal); } } SHOW OUTPUT Output Class name: dev.signalyu.warmup.Person Method: getName Method: toString Method: setName Method: sayHello Method: getAge Field: name Field: age Private field: 'name'=John Hello, John Signal = Person{name='Signal', age=18} Annotations Annotations in Java are a form of metadata used to provide additional information that does not directly affect the execution of the code. They are commonly used to convey instructions to the compiler (such as detecting errors or supressing warnings) or to support runtime processing. Annotations are prefixed with the @ symbol and can be applied to classes, methods, firlds, and other program elements.\nCommon meta annotations, such as @Target adn @Retension, are used to specify how and where an annotation can be applied. The @Target annotation defines the valid program elements for an annotation, including:\nElementType.TYPE: The annotation can be applied to a class or interface. ElementType.METHOD: The annotation can be applied to a method. ElementType.FIELD: The annotation can be applied to a field. The @Retention annotation specifies the lifespan of the annotation. Foe example, using @Retention(RetentionPolicy).RUNTIME indicates that the annotation is available at runtime for reflection.\nTo customize an annotation in Java, the first step is to define its basic structure using the @interface keyword. Elements (parameters) can be included in the annotation, with or without default values, depending on the requirements.\nNext, meta-annotation such as @Target and @Retention are added to specify where the annotation can be applied and how long it will be retained.\nOnce the annotation is defined, it can be applied according to the specified @Target (e.g., on methods, classes, or fields).\nThe final step is to define the logic for processing the annotation, typically achieved through reflection at runtime.\nSHOW CODE: Login Interception Login Interception @Getter public enum ResultCodeEnum { LOGIN_AUTH(208, \"Not logged in\"); private final int code; private final String message; ResultCodeEnum(int code, String message) { this.code = code; this.message = message; } } public class RedisConstant { /** * The prefix for user login keys in Redis. */ public static final String USER_LOGIN_KEY_PREFIX = \"user:login:\"; } public class AuthContextHolder { private static final ThreadLocal\u0026lt;Long\u0026gt; userId = new ThreadLocal\u0026lt;\u0026gt;(); /** * Sets the user ID in the thread-local context. * * @param _userId The user ID to set. */ public static void setUserId(Long _userId) { userId.set(_userId); } /** * Gets the user ID from the thread-local context. * * @return The current user ID. */ public static Long getUserId() { return userId.get(); } /** * Removes the user ID from the thread-local context. */ public static void removeUserId() { userId.remove(); } } @Target({ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Inherited @Documented public @interface AppLogin { /** * Indicates if login is required for the annotated method. * Default is true. */ boolean required() default true; } @Aspect @Component public class AppLoginAspect { @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; /** * Intercepts methods annotated with @AppLogin to enforce login validation. * * @param joinPoint The proceeding join point for the intercepted method. * @param appLogin The AppLogin annotation instance. * @return The result of the intercepted method execution. * @throws Throwable If an error occurs during method execution. */ @SneakyThrows @Around(\"execution(* com.atApp.tingshu.*.api.*.*(..)) \u0026\u0026 @annotation(appLogin)\") public Object loginAspect(ProceedingJoinPoint joinPoint, AppLogin appLogin) { // Extract the token from the request header String token = getTokenFromRequest(); // Check login status in Redis String loginKey = RedisConstant.USER_LOGIN_KEY_PREFIX + token; UserInfoVo userInfoVo = (UserInfoVo) redisTemplate.opsForValue().get(loginKey); // If login is required and user is not authenticated, throw exception if (appLogin.required() \u0026\u0026 userInfoVo == null) { throw new AppException(ResultCodeEnum.LOGIN_AUTH); } // If user is authenticated, set the user ID in the thread-local context if (userInfoVo != null) { AuthContextHolder.setUserId(userInfoVo.getId()); } try { // Proceed with the method execution return joinPoint.proceed(); } finally { // Ensure that user ID is cleared after the method execution AuthContextHolder.removeUserId(); } } /** * Extracts the token from the HTTP request header. * * @return The token string. */ private String getTokenFromRequest() { RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes(); ServletRequestAttributes servletRequestAttributes = (ServletRequestAttributes) requestAttributes; HttpServletRequest request = servletRequestAttributes.getRequest(); return request.getHeader(\"token\"); } } Serialization \u0026amp; Deserialization In Java, Serialization and Deserialzation are processes used to convert objects into a byte stream and restore them back into objects, respectively. These processes are essential for storing objects in files, transmitting them over a network, or preserving their state.\nSerialization involves converting an object into a byte stream. To serialize an object, its class must implement the java.io.Serializable interface, which is a marker interface without any methods. The ObjectOutputStream class is used to write the serialized object to a file or another output stream. A serialVersionUID is automatically generated if not explicitly defined, but it is recommended to provide one manually to ensure compatibility during deserialization. Fields marked as transcient are not serialized. Additionally, any objects regerenced by the serialized object are also serialized, provided they implement the Serializable interface.\nDeserialization is the process of reconstructing a serialized object back into a Java object. For deserialization to succeed, the class must be available in the classpath. This process is performed using the ObjectInputStream class, which reads the byte stream and restores the object to its original state.\nSHOW CODE Java import java.io.*; // Define a Serializable class class Person implements Serializable { private static final long serialVersionUID = 1L; // Ensures class compatibility during deserialization private String name; private int age; // Transient field will not be serialized private transient String password; public Person(String name, int age, String password) { this.name = name; this.age = age; this.password = password; } @Override public String toString() { return \"Person{name='\" + name + \"', age=\" + age + \", password='\" + password + \"'}\"; } } public class Main { public static void main(String[] args) { Person person = new Person(\"Signal Yu\", 18, \"securePassword\"); // Serialize the object try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"person.ser\"))) { oos.writeObject(person); System.out.println(\"Object serialized successfully.\"); } catch (IOException e) { e.printStackTrace(); } // Deserialize the object try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"person.ser\"))) { Person deserializedPerson = (Person) ois.readObject(); System.out.println(\"Deserialized object: \" + deserializedPerson); } catch (IOException | ClassNotFoundException e) { e.printStackTrace(); } } } SHOW OUTPUT Output Object serialized successfully. Deserialized object: Person{name='Signal Yu', age=18, password='null'} Lambda Expression Runnable SHOW CODE Java public class Test { public static void main(String[] args) { // Java 8 之前 Runnable runnable = new Runnable() { @Override public void run() { System.out.println(\"Inside Runnable 1\"); } }; new Thread(runnable).start(); // Java 8 - Lambda 语法 Runnable runnableLambda = () -\u003e {System.out.println(\"Inside Runnable 2\");}; new Thread(runnableLambda).start(); new Thread(() -\u003e System.out.println(\"Inside Runnable 3\")).start(); } } Comparator SHOW CODE Java public class Test { public static void main(String[] args) { // JAVA 8 之前 Comparator\u0026lt;Integer\u0026gt; comparator = new Comparator\u0026lt;Integer\u0026gt;() { @Override public int compare(Integer o1, Integer o2) { /** * o1 \u003c o2 -\u003e -1 * o1 == o2 -\u003e 0 * o1 \u003e o2 -\u003e 1 */ return o1.compareTo(o2); } }; System.out.println(comparator.compare(1, 2)); // -1 /** * JAVA 8 */ // Comparator\u0026lt;Integer\u0026gt; comparatorLambda1 = (Integer a, Integer b) -\u003e a.compareTo(b); Comparator\u0026lt;Integer\u0026gt; comparatorLambda1 = Comparator.naturalOrder(); System.out.println(comparatorLambda1.compare(1, 2)); // -1 // Comparator\u0026lt;Integer\u0026gt; comparatorLambda2 = (a, b) -\u003e b.compareTo(a); Comparator\u0026lt;Integer\u0026gt; comparatorLambda2 = Comparator.reverseOrder(); System.out.println(comparatorLambda2.compare(1, 2)); // 1 int[] nums = new int[]{2, 1, 4, 3}; System.out.println(\"nums = \" + Arrays.toString(nums)); Arrays.sort(nums); // 默认为升序排序 // 倒序排序 Integer[] newNums = Arrays.stream(nums).boxed().toArray(Integer[]::new); Arrays.sort(newNums, Comparator.reverseOrder()); } } Local Variables in Lambda Expression SHOW CODE Java public class Test { public static void main(String[] args) { /** * 1. The variable used in a lambda expression must be effectively final, * meaning its value cannot change after it has been assigned. * 2. A lambda captures the values of local variables, not the variables * themselves. * 3. Local variables in a lambda cannot have the same name as variables * in the enclosing scope to avoid shadowing. */ int num = 10; // effectively final Runnable r = () -\u003e System.out.println(num); r.run(); // Error: Variable num is already defined in the scope // Runnable r = () -\u003e { // int num = 20; // Compile-time error // System.out.println(num); // }; } } Functional Interface Consumer SHOW CODE Java import java.util.Arrays; import java.util.List; import java.util.function.Consumer; public class Test { public static void main(String[] args) { List\u0026lt;String\u0026gt; items = Arrays.asList(\"One\", \"Two\", \"Three\"); /** * Consumer 接收一个参数并执行一些操作，不返回结果 * Consumer 有 accept 和 andThen 两个方法 * accept 用于接收参数，andThen 用于链接多个 Consumer */ // 示例1：定义一个 Consumer，它将打印传入的字符串 Consumer\u0026lt;String\u0026gt; printConsumer = s -\u003e System.out.println(\"打印消息: \" + s); printConsumer.accept(\"Hello, World!\"); // 输出: 打印消息: Hello, World! // 示例 2：Consumer 链式操作 Consumer\u0026lt;String\u0026gt; printItem = item -\u003e System.out.print(\"打印: \" + item + \"\\t\"); Consumer\u0026lt;String\u0026gt; printLength = item -\u003e System.out.println(\"长度: \" + item.length()); Consumer\u0026lt;String\u0026gt; combined = printItem.andThen(printLength); // 将两个 Consumer 组合在一起 // 使用 forEach 遍历集合并执行组合操作 items.forEach(combined); // items.forEach(item -\u003e { // System.out.print(\"打印: \" + item + \"\\t\"); // System.out.println(\"长度: \" + item.length()); // }); } } BiConsumer SHOW CODE Java import java.util.Arrays; import java.util.List; import java.util.function.BiConsumer; // 定义 Student 记录类，包含学生的姓名和活动列表 record Student(String name, List\u0026lt;String\u0026gt; activities) { } //class Student { // private final String name; // private final List\u0026lt;String\u0026gt; activities; // // public Student(String name, List\u0026lt;String\u0026gt; activities) { // this.name = name; // this.activities = activities; // } // // public String getName() { // return name; // } // // public List\u0026lt;String\u0026gt; getActivities() { // return activities; // } //} class StudentDataBase { // 提供学生数据，返回一个包含多个学生的列表 public static List\u0026lt;Student\u0026gt; getAllStudents() { return Arrays.asList( new Student(\"Alice\", Arrays.asList(\"Swimming\", \"Basketball\")), new Student(\"Bob\", Arrays.asList(\"Cycling\", \"Chess\")), new Student(\"Charlie\", Arrays.asList(\"Running\", \"Reading\")) ); } } class Test { public static void main(String[] args) { /** * BiConsumer 适用于对两个参数执行操作，但不需要返回结果的场景。 */ // BiConsumer 接口用于处理学生姓名和活动列表 BiConsumer\u0026lt;\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; studentBiConsumer = (name, activities) -\u003e System.out.println(name + \" : \" + activities); // 获取学生列表 List\u0026lt;Student\u0026gt; students = StudentDataBase.getAllStudents(); // 使用 forEach 遍历每个学生对象并输出其姓名和活动列表 students.forEach(student -\u003e studentBiConsumer.accept(student.name(), student.activities())); } } Predicate SHOW CODE Java import java.util.Arrays; import java.util.List; import java.util.function.Predicate; class Test { public static void main(String[] args) { /* Predicate 用于测试输入对象是否满足某种条件，常用于过滤、条件判断等场景 Predicate 提供了 and, or 和 negate 三个默认方法 Predicate 提供了 isEqual 和 not (Java 11) 两个静态方法 */ // 示例 1: Predicate\u0026lt;Integer\u0026gt; isEven = num -\u003e num % 2 == 0; List\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6); List\u0026lt;Integer\u0026gt; evenNumbers = numbers.stream() .filter(isEven) .toList(); System.out.println(\"偶数: \" + evenNumbers); // 输出: 偶数: [2, 4, 6] // 示例 2: Predicate\u0026lt;Integer\u0026gt; isOdd = num -\u003e num % 2 == 0; Predicate\u0026lt;Integer\u0026gt; isGreaterThanFive = num -\u003e num \u003e 5; // 使用 and() 方法组合两个条件 Predicate\u0026lt;Integer\u0026gt; isOddAndGreaterThanFive = isOdd.and(isGreaterThanFive); System.out.println(isOddAndGreaterThanFive.test(7)); // 输出: true System.out.println(isOddAndGreaterThanFive.test(3)); // 输出: false // 示例 3 List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"Alice\"); // 使用 isEqual 和 not 来筛选出不等于 \"Alice\" 的名字 List\u0026lt;String\u0026gt; filteredNames = names.stream() .filter(Predicate.not(Predicate.isEqual(\"Alice\"))) .toList(); System.out.println(filteredNames); // Output: [Bob, Charlie] } } BiPredicate SHOW CODE Java import java.util.function.BiPredicate; class Test { public static void main(String[] args) { // BiPredicate 适合需要对两个参数进行测试或判断的情况 // 示例 1 BiPredicate\u0026lt;Integer, Integer\u0026gt; isSumGreaterThanTen = (a, b) -\u003e (a + b) \u003e 10; BiPredicate\u0026lt;Integer, Integer\u0026gt; isProductEven = (a, b) -\u003e (a * b) % 2 == 0; BiPredicate\u0026lt;Integer, Integer\u0026gt; combined = isSumGreaterThanTen.and(isProductEven); System.out.println(combined.test(5, 6)); // 输出: true，因为和大于10且乘积为偶数 System.out.println(combined.test(5, 5)); // 输出: false，因为乘积为奇数 } } Function SHOW CODE Java import java.util.function.Function; class Test { public static void main(String[] args) { /** * Function 接受一个参数并返回一个结果 * apply(T t)：对给定的参数执行函数操作并返回结果 * andThen()：在当前函数之后执行另一个函数 * compose()：在当前函数之前执行另一个函数 */ // 示例 1 Function\u0026lt;Integer, Integer\u0026gt; squareFunction = x -\u003e x * x; Integer result = squareFunction.apply(5); System.out.println(\"5 的平方是: \" + result); // 示例 2 Function\u0026lt;Integer, Integer\u0026gt; multiplyBy2 = x -\u003e x * 2; Function\u0026lt;Integer, Integer\u0026gt; add3 = x -\u003e x + 3; // 使用 andThen：先乘以 2，再加 3 Integer result1 = multiplyBy2.andThen(add3).apply(5); System.out.println(\"(5 * 2) + 3 的结果是: \" + result1); // 使用 compose：先加 3，再乘以 2 Integer result2 = multiplyBy2.compose(add3).apply(5); System.out.println(\"(5 + 3) * 2 的结果是: \" + result2); } } BiFunction SHOW CODE Java import java.util.function.BiFunction; class Test { public static void main(String[] args) { // BiFunction takes two arguments and returns a result BiFunction\u0026lt;Integer, Integer, Integer\u0026gt; sum = (a, b) -\u003e a + b; int result = sum.apply(5, 3); // Returns 8 System.out.println(\"Result: \" + result); } } Method Reference SHOW CODE Java import java.util.Arrays; import java.util.List; import java.util.function.Function; import java.util.function.Supplier; public class Test { public static void main(String[] args) { /** * Method reference is a shortcut for writing the lambda function */ // 示例 1 List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); // 使用 Lambda 表达式 names.stream().map(name -\u003e name.toUpperCase()).forEach(name -\u003e System.out.println(name)); // 使用Method Reference names.stream().map(String::toUpperCase).forEach(System.out::println); /** * 构造器引用是Method Reference的特例 * 用法如下： * () -\u003e new Person() \u003c--\u003e Person::new; * (name) -\u003e new Person() \u003c--\u003e Person::new; */ // 示例 2 // Using () -\u003e new Person() Supplier\u0026lt;Person\u0026gt; personSupplier = () -\u003e new Person(); Person p1 = personSupplier.get(); System.out.println(p1); // Output: Person{name='Default'} // Using Person::new Supplier\u0026lt;Person\u0026gt; personSupplierRef = Person::new; Person p2 = personSupplierRef.get(); System.out.println(p2); // Output: Person{name='Default'} // 示例 3 // Using (name) -\u003e new Person(name) Function\u0026lt;String, Person\u0026gt; personFunction = (name) -\u003e new Person(name); Person p3 = personFunction.apply(\"Alice\"); System.out.println(p3); // Output: Person{name='Alice'} // Using Person::new Function\u0026lt;String, Person\u0026gt; personFunctionRef = Person::new; Person p4 = personFunctionRef.apply(\"Bob\"); System.out.println(p4); // Output: Person{name='Bob'} } } class Person { private String name; // Default constructor public Person() { this.name = \"Default\"; } // Constructor with a parameter public Person(String name) { this.name = name; } @Override public String toString() { return \"Person{name='\" + name + \"'}\"; } } Stream API Introduction to Stream API A Stream is a sequence of elements designed for processing in a functional and sequential manner. Stream operations are lazy, meaning they are not executed until a terminal operation (e.g., collect, forEach, reduce, count) is invoked. Streams are immutable, allowing access to elements without modifying the source. Java provides two types of streams: stream (for sequential processing) and parallel stream (for concurrent processing).\nCollections V.S. Stream\nIn Java, Collections are data structures designed for storing and manipulating data, whereas Streams are a sequence of elements which enable functional-style operations on data. Collections allow data modification, whereas Streams provide read-only access to elements. Operations on Collections are executed eagerly, while Streams operations are lazy and only executed when a terminal operation is invoked. Collections can be reused multiple times, but Streams are single-use and cannot be reused after processing. Debugging Streams: the peek() method can be used to inspect the intermediate results during stream operations.\nArrays.asList(\u0026#34;hello\u0026#34;, \u0026#34;hi\u0026#34;).stream() .peek(System.out::println) .filter(s -\u0026gt; s.length() \u0026gt; 2) .peek(s -\u0026gt; System.out.println(\u0026#34;Filtered: \u0026#34; + s)) .map(String::toUpperCase) .peek(s -\u0026gt; System.out.println(\u0026#34;Mapped: \u0026#34; + s)) .collect(Collectors.toList()); hello Filtered: hello Mapped: HELLO hi flatMap The flatMap method is used to transform each element in a stream into another stream and then flatten the resulting streams into a single stream.\nSHOW CODE Java import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; public class Test { public static void main(String[] args) { List\u0026lt;List\u0026lt;String\u0026gt; nestedList = Arrays.asList( Arrays.asList(\"A\", \"B\"), Arrays.asList(\"C\", \"D\"), Arrays.asList(\"E\", \"F\") ); List\u0026lt;String\u0026gt; flattenedList = nestedList.stream() .flatMap(List::stream) // Flatten the nested lists .map(String::toLowerCase) // Convert each string to lowercase .collect(Collectors.toList()); System.out.println(flattenedList); // Output: [a, b, c, d, e, f] } } The map method transforms each element into another type, while the flatMap method transforms and flaten streams into a single stream.\ndistinct(), count(), sorted() The distinct() method eliminates duplicate elements from the stream. The count() method calculates the total number of elements in the stream. The sorted() method sorts the elements of the stream.\nSHOW CODE Java List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Alice\", \"Charlie\"); long count = names.stream() .distinct() // Optional: Count unique elements .count(); System.out.println(count); // Output: 3 List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); List\u0026lt;String\u0026gt; sortedByLength = names.stream() .sorted(Comparator.comparingInt(String::length)) .collect(Collectors.toList()); System.out.println(sortedByLength); // Output: [Bob, Alice, Charlie] reduce() The reduce() method in Java 8 Streams is a terminal operation used to combine elements in a stream into a single result by repeatedly applying a binary operator.\nSHOW CODE Java // Summing numbers List\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3, 4, 5); int sum = numbers.stream().reduce(0, Integer::sum); System.out.println(sum); // Output: 15 // Finding maximum values List\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3, 4, 5); int max = numbers.stream().reduce(Integer.MIN_VALUE, Integer::max); System.out.println(max); // Output: 5 // Concatenating Strings List\u0026lt;String\u0026gt; words = Arrays.asList(\"Java\", \"Stream\", \"Reduce\"); String concatenated = words.stream().reduce(\"\", String::concat); System.out.println(concatenated); // Output: JavaStreamReduce // Product of numbers List\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3, 4); int product = numbers.stream().reduce(1, (a, b) -\u003e a * b); System.out.println(product); // Output: 24 limit(), skip() The limit() method retrieves a specified number of elements from a stream. The skip() method discards the first specified number of elements in a stream.\nSHOW CODE Java List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"); List\u0026lt;String\u0026gt; paginatedNames = names.stream() .skip(2) // Skip the first 2 elements .limit(2) // Take the next 2 elements .collect(Collectors.toList()); System.out.println(paginatedNames); // Output: [Charlie, David] allMatch(), anyMatch(), noneMatch() The allMatch() method verifies if all elements in a stream satisfy the given predicate. The anyMatch() method determines if any element in the stream matches the specified predicate. The noneMatch() method confirms if no element in the stream matches the specified predicate.\nSHOW CODE Java List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); // Check if all names are longer than 3 characters boolean allLongNames = names.stream().allMatch(name -\u003e name.length() \u003e 3); System.out.println(allLongNames); // Output: true // Check if any name starts with 'A' boolean anyStartsWithA = names.stream().anyMatch(name -\u003e name.startsWith(\"A\")); System.out.println(anyStartsWithA); // Output: true // Check if no name is shorter than 3 characters boolean noneShortNames = names.stream().noneMatch(name -\u003e name.length() \u003c 3); System.out.println(noneShortNames); // Output: true findAny(), findFirst() The findAny() method retrieves an arbitrary element from a stream, particularly useful for parallel processing. The findFirst() method fetches the first element from a stream based on its encounter order.\nSHOW CODE Java List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); Optional\u0026lt;String\u0026gt; anyName = names.stream().findAny(); System.out.println(anyName.orElse(\"No names found\")); // Output: Alice (or any other element) List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); Optional\u0026lt;String\u0026gt; firstName = names.stream().findFirst(); System.out.println(firstName.orElse(\"No names found\")); // Output: Alice Factory Methods: Of(), generate(), iterate() Stream.of() is used to create a stream from a fixed set of elements.\nSHOW CODE Java import java.util.stream.Stream; public class Main { public static void main(String[] args) { Stream\u0026lt;String\u0026gt; stream = Stream.of(\"Apple\", \"Banana\", \"Cherry\"); stream.forEach(System.out::println); } } Stream.generate() method is used to create an infinite stream of elements generated by a Supplier.\nSHOW CODE Java import java.util.stream.Stream; public class Main { public static void main(String[] args) { Stream\u0026lt;String\u0026gt; infiniteStream = Stream.generate(() -\u003e \"Hello\"); infiniteStream.limit(5).forEach(System.out::println); } } Stream.iterate() is used to create an infinite stream by applying a function repeatedly to a seed value.\nSHOW CODE Java import java.util.Random; Stream\u0026lt;Integer\u0026gt; randomNumbers = Stream.generate(() -\u003e new Random().nextInt(100)); randomNumbers.limit(5).forEach(System.out::println); When working with infinite streams, such as those created by Stream.generate() or Stream.iterate(), always use operations like limit() to prevent infinite processing.\nTerminal Operations: joining(), counting(), mapping() The joining method is a terminal operation used to concatenate the elements of a stream into a single String. By default, the elements are joined without a delimiter, but a custom delimiter, prefix, and suffix can also be specified.\nSHOW CODE Java import java.util.*; import java.util.stream.Collectors; public class JoiningExample { public static void main(String[] args) { List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); // Simple joining String result1 = names.stream().collect(Collectors.joining()); System.out.println(result1); // AliceBobCharlie // Joining with a delimiter String result2 = names.stream().collect(Collectors.joining(\", \")); System.out.println(result2); // Alice, Bob, Charlie // Joining with delimiter, prefix, and suffix String result3 = names.stream().collect(Collectors.joining(\", \", \"[\", \"]\")); System.out.println(result3); // [Alice, Bob, Charlie] } } The counting() method is a terminal operation used to count the number of elements in a stream and return the count as a long.\nSHOW CODE Java import java.util.*; import java.util.stream.Collectors; public class CountingExample { public static void main(String[] args) { List\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3, 4, 5); // Counting the elements in the stream long count = numbers.stream().collect(Collectors.counting()); System.out.println(count); // 5 } } The mapping() method is an intermediate collector that applies a function to the elements of a stream before passing the transformed elements to another collector for final processing.\nSHOW CODE Java import java.util.*; import java.util.stream.Collectors; public class MappingExample { public static void main(String[] args) { List\u0026lt;String\u0026gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\"); // Convert names to uppercase and join them String result = names.stream() .collect(Collectors.mapping(String::toUpperCase, Collectors.joining(\", \"))); System.out.println(result); // ALICE, BOB, CHARLIE } } Terminal Operations: minBy(), maxBy(), groupingBy() The minBy() collector finds the minimum element in a stream based on a specified Comparator and returns the result as an Optional.\nSHOW CODE Java Optional min = Stream.of(3, 5, 1, 2) .collect(Collectors.minBy(Comparator.naturalOrder())); System.out.println(min.orElse(-1)); // Output: 1 The maxBy() collector finds the maximum element in a stream based on a specified Comparator and returns the result as an Optional.\nSHOW CODE Java Optional max = Stream.of(3, 5, 1, 2) .collect(Collectors.maxBy(Comparator.naturalOrder())); System.out.println(max.orElse(-1)); // Output: 5 The groupingBy() collector groups the elements of a stream based on a classification function and returns the grouped data as a Map.\nSHOW CODE Java Map\u0026lt;Integer, List\u0026lt;String\u0026gt;\u0026gt; groupedByLength = Stream.of(\"cat\", \"dog\", \"bird\", \"fox\") .collect(Collectors.groupingBy(String::length)); System.out.println(groupedByLength); // Output: {3=[cat, dog, fox], 4=[bird]} Numeric Stream A Numeric Stream in Java is a specialized type of stream that operates specifically on numeric values. There are three types of numeric streams: IntStream, LongStream, and Double Stream, which handle int, long, and double values, respectively. Numeric streams eliminate the overhead of autoboxing and provide commonly used methods such as sum() and max() for performing operations on numeric data, making them more efficient compared to regular Stream types.\nSHOW CODE Java IntStream.range(1, 5).forEach(System.out::println); // Output: 1 2 3 4 IntStream.rangeClosed(1, 5).forEach(System.out::println); // Output: 1 2 3 4 5 long count = IntStream.range(1, 10).count(); System.out.println(count); // Output: 9 int sum = IntStream.range(1, 5).sum(); System.out.println(sum); // Output: 10 (1 + 2 + 3 + 4) OptionalInt max = IntStream.range(1, 5).max(); max.ifPresent(System.out::println); // Output: 4 OptionalInt min = IntStream.range(1, 5).min(); min.ifPresent(System.out::println); // Output: 1 OptionalDouble average = IntStream.range(1, 5).average(); average.ifPresent(System.out::println); // Output: 2.5 List\u0026lt;String\u0026gt; numbers = Arrays.asList(\"1\", \"2\", \"3\", \"4\"); IntStream intStream = numbers.stream().mapToInt(Integer::parseInt); intStream.forEach(System.out::println); // Output: 1, 2, 3, 4 List\u0026lt;String\u0026gt; numbers = Arrays.asList(\"1.1\", \"2.2\", \"3.3\", \"4.4\"); DoubleStream doubleStream = numbers.stream().mapToDouble(Double::parseDouble); doubleStream.forEach(System.out::println); // Output: 1.1, 2.2, 3.3, 4.4 List\u0026lt;String\u0026gt; numbers = Arrays.asList(\"10\", \"20\", \"30\", \"40\"); LongStream longStream = numbers.stream().mapToLong(Long::parseLong); longStream.forEach(System.out::println); // Output: 10, 20, 30, 40 IntStream intStream = IntStream.range(1, 5); Stream\u0026lt;String\u0026gt; stringStream = intStream.mapToObj(Integer::toString); stringStream.forEach(System.out::println); // Output: \"1\", \"2\", \"3\", \"4\" ","permalink":"https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/programming/java/1-java-programming/","summary":"Enum In Java, an enum (short for \u0026ldquo;enumeration\u0026rdquo;) is used to define a collection of constants, such as days of the week or months of the year. An enum provides a type-safe way to handle constant values, and it can be used in a switch statement or for comparison using ==. Compared to a final constant in Java, an enum can contain fields, methods, and constructors. The values() method is used to retrive all the constants in an enum, and the valueOf() method is used to convert a string into an enum constant.","title":"Java Programming"}]