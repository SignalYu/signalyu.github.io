<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tech on 信一的博客</title>
    <link>https://signalyu.github.io/tags/tech/</link>
    <description>Recent content in Tech on 信一的博客</description>
    <generator>Hugo -- 0.126.1</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 04 Jun 2024 16:17:31 +0800</lastBuildDate>
    <atom:link href="https://signalyu.github.io/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C 语言中的数组与指针</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/tech/c/1-array-and-pointer-in-c/</link>
      <pubDate>Tue, 04 Jun 2024 16:17:31 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/tech/c/1-array-and-pointer-in-c/</guid>
      <description>数组 数组基本概念 在 C 语言中，越界访问数组编译器并不会报错； 一维数组的长度计算：int length = sizeof(arr) / sizeof(arr[0]); sizeof 返回值的数据类型是 size_t ，所以 sizeof(a) / sizeof(a[0]) 的数据类型也是 size_t。在 printf() 里面的占位符，要用 %zd 或 %zu 。 一维数组的内存分析： 一维数组的内存分析 C 语言规定，数组变量一旦声明，数组名指向的地址就不可更改。因此，使用大括号赋值时，必须在数组声明时赋值，否则编译时会报错。 int nums[5]; nums = {1, 2, 3, 4, 5}; // 报错 int nums[5] = {1, 2, 3, 4, 5}; // 正确写法 数组的复制 使用循环复制数组： void copyArray(int src[], int dest[], int size) { for (int i = 0; i &lt; size; i++) { dest[i] = src[i]; } } 使用 memcopy() 函数复制数组： #include &amp;lt;string.</description>
    </item>
    <item>
      <title>Linux 参考手册（Centos 9 Stream）</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/tech/linux/1-centos-linux-manual/</link>
      <pubDate>Sun, 02 Jun 2024 13:30:36 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/tech/linux/1-centos-linux-manual/</guid>
      <description>用户管理 软件安装 yum 和 dnf yum (Yellowdog Updater, Modified) 和 dnf (Dandified Yum) 都是基于 Red Hat 的 Linux 发行版的包管理工具。dnf 是 yum 管理工具的增强版，centos 8 及后续版本采用 dnf 为 软件包管理工具。 dnf 常用命令如下： 更新所有 package：sudo dnf update 安装 package：sudo dnf install package_name 移除一个 package：sudo dnf remove package_name 列出已安装的 package：dnf list installed 查找指定的 package：dnf search package_naem 安装 MySQL 更新所有已安装的 package： $ sudo dnf update 安装 mysql-server： $ sudo dnf install mysql-server -y 启动 mysqld 服务查看其状态： $ sudo systemctl start mysqld # 允许机器启动时自动启动 mysqld $ sudo systemctl enable mysqld Created symlink /etc/systemd/system/multi-user.</description>
    </item>
    <item>
      <title>Spring MVC 执行流程</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/tech/spring-mvc/1-spring-mvc-execution-flow/</link>
      <pubDate>Tue, 14 May 2024 14:21:49 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/tech/spring-mvc/1-spring-mvc-execution-flow/</guid>
      <description>Spring MVC 执行流程图 Spring MVC 执行流程图 graph TB subgraph dispatchServlet[前端控制器（DispatchServlet）] direction TB doDispatch ~~~ getHandler ~~~ getHandlerAdapter ~~~ processDispatchResult end subgraph handlerMapping[处理器映射器] end subgraph handlerAdapter[处理器适配器] handle end subgraph handler[处理器（Handler）] 执行业务逻辑 end subgraph viewResolver[视图解析器] resolveViewName end subgraph view[视图（View）] render end user(((用户))) --&gt;|① 请求| dispatchServlet dispatchServlet --&gt;|② 匹配 Handler| handlerMapping handlerMapping --&gt;|③ 返回 HandlerExecutionChain| dispatchServlet dispatchServlet --&gt;|④ 获取 HandlerAdapter| handlerAdapter handlerAdapter --&gt;|⑤ 返回 HandlerAdapter| dispatchServlet dispatchServlet -.- preHandler[⑥ 执行 preHandler] -.-&gt;|⑦ 执行 handle| handlerAdapter handlerAdapter --&gt;|⑧ 执行 handleInternal| handler --&gt;|⑨ 返回 ModelAndView| handlerAdapter handlerAdapter -.</description>
    </item>
    <item>
      <title>Spring：理解 AOP</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/tech/spring/2-spring-aop/</link>
      <pubDate>Sun, 12 May 2024 13:19:15 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/tech/spring/2-spring-aop/</guid>
      <description>AOP 相关概念 AOP 相关概念 横切关注点（Crosscutting Concern）：横切关注点是指业务处理过程中的附加功能。一类业务可以有多个横切关注点（附加功能），例如上述例子中的的借书方法具有日志和安全校验两个附加功能，即具有两个横切关注点。 切面（Aspect）：在不同类业务中提取的同类核心关注点构成的模块称为切面。例如上述例子中的借书和还书方法可提取出日志切面（LoggingAspect）和校验切面（AuthenticationAspect）。 连接点（Joint Point）：连接点是指业务处理过程中能够应用切面功能的位置。 通知（Advice）：通知是指切面在某个特定连接点上触发的行为。 切入点（Pointcut）：切入点是指业务处理过程中实际应用切面功能的连接点位置。例如核心业务处理前，核心业务成功处理后，核心业务处理发生异常时等等。 织入（Weaving）：织入是指将附加功能集成到目标对象的过程。 AOP 代码 点击查看代码 BookService BookServiceImpl LoggingAspect AuthenticationAspect BookServiceTest beans.xml 输出结果 package org.signalyu; public interface BookService { boolean borrowBook(String bookId); boolean returnBook(String bookId); } package org.signalyu; import org.springframework.stereotype.Service; import java.util.HashMap; import java.util.Map; @Service public class BookServiceImpl implements BookService { final private Map&amp;ltString, Boolean&gt; bookStatus = new HashMap&amp;lt;&gt;(); public BookServiceImpl() { // Initialize book status map with some books available initially bookStatus.</description>
    </item>
    <item>
      <title>Spring：理解控制反转和依赖注入</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/tech/spring/1-spring-ioc-di/</link>
      <pubDate>Sun, 12 May 2024 08:37:38 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/tech/spring/1-spring-ioc-di/</guid>
      <description>控制反转 控制反转（IoC）：控制反转是一种设计原则，指的是对象的创建和管理权从应用程序的某个对象反转给 IoC 容器。如下图所示，汽车类（Car）依赖于引擎类（Engine），即 Car 类对其依赖—— Engine 类对象的创建具有控制权。在传统模式下，Car 类必须在其内部创建 Engine 类。而在 IoC 模式下，Engine 类对象的创建和管理由外部实体——IoC 容器完成，也就是说，对 Engine 类对象的创建和管理权限由 Car 类转移到 IoC 容器中。由于在 IoC 模式下 Car 类不需要在其内部创建 Engine 类对象，因此实现了代码解耦。
graph LR direction LR subgraph traditional[传统模式] direction LR car[Car] -.- depend((依赖)) -.-&gt; engine[Engine] car --&gt;|创建| engine end graph subgraph iocPattern[IoC 模式] engine[Engine] -.- depend((依赖)) -.-&gt; car[Car] config[XML/注解配置] ==&gt; ioc[IoC 容器] --&gt;|依赖注入| depend ioc --&gt;|创建| car &amp; engine end 点击查看传统模式代码 Car.java Engine.java package org.signalyu; public class Car { private Engine engine; public Car() { // Car 类在其内部创建 Engine 类 this.</description>
    </item>
    <item>
      <title>Maven 笔记</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/tech/maven/1-maven-notes/</link>
      <pubDate>Thu, 02 May 2024 19:26:09 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/tech/maven/1-maven-notes/</guid>
      <description>Maven 简介 --- title: Maven 软件的工作原理图 --- flowchart subgraph mavenRepo[Maven 依赖仓库] officialRepo[官方仓库]--&gt;|定期备份|mirrorRepo[镜像仓库] mirrorRepo[镜像仓库]--&gt;|下载|localRepo[本地仓库] end subgraph dependencyManage[依赖管理] dispatch[依赖传递]~~~conflict[依赖冲突]~~~inheritence[依赖继承]~~~cohesion[依赖聚合] end subgraph settings[配置 settings.xml] localRepository~~~mirror~~~jdk end subgraph lifeCircle[生命周期] clean ~~~ compile ~~~ test ~~~ package ~~~ install ~~~ others[...] end subgraph projects[项目] javaSE[JavaSE]~~~javaWeb[JavaWeb] pom.xml -.- javaSE &amp; javaWeb end subgraph app[包] jar ~~~ war end localRepo --&gt;|引用| maven((Maven)) --- dependencyManage maven -.- settings javaSE &amp; javaWeb --&gt; install install --&gt; localRepo package --&gt; app IntelliJ --&gt;|新建| javaSE --&gt;|war| javaWeb 依赖管理：Maven 可以管理项目的依赖，包括自动下载所需依赖库、自动下载依赖需要的依赖并且保证版本没有冲突、依赖版本管理等。 构建管理：项目构建是指将源代码、配置文件、资源文件等转化为能够运行或部署的应用程序或库的过程。Maven 可以管理项目的编译、测试、打包、部署等构建过程。通过实现标准的构建生命周期，Maven 可以确保每一个构建过程都遵循同样的的规则和最佳实践。同时，Maven 的插件机制也使得开发者可以对构建过程进行扩展和定制。 Maven 目录结构 点击查看代码 Maven 目录结构 .</description>
    </item>
    <item>
      <title>Java 私有成员继承</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/tech/java/1-java-private-inheritance/</link>
      <pubDate>Tue, 23 Apr 2024 15:31:50 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/tech/java/1-java-private-inheritance/</guid>
      <description>子类对象拥有父类的私有成员，但子类不继承父类的私有属性。 子类对象包含父类私有属性 首先验证子类对象包含父类的私有属性，代码如下：
点击查看代码 class Parent { private int privateField; public Parent() { System.out.println(&#34;this in Parent() =&gt; &#34; + this); this.privateField = 666; } public Parent(int privateField) { System.out.println(&#34;this in Parent(int) =&gt; &#34; + this); this.privateField = privateField; } private void printPrivateField() { System.out.println(this.privateField); } public void accessPrivateMembers() { System.out.println(&#34;this in accessPrivateMembers() =&gt; &#34; + this); System.out.print(&#34;调用 this.printPrivateField() 方法 =&gt; &#34;); this.printPrivateField(); } } class Child extends Parent { public Child() { System.</description>
    </item>
  </channel>
</rss>
