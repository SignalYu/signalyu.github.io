<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design Patterns on Signal&#39;s Blog</title>
    <link>https://signalyu.github.io/tags/design-patterns/</link>
    <description>Recent content in Design Patterns on Signal&#39;s Blog</description>
    <generator>Hugo -- 0.126.1</generator>
    <language>EN</language>
    <lastBuildDate>Sun, 12 Nov 2023 14:38:17 +0800</lastBuildDate>
    <atom:link href="https://signalyu.github.io/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Design Patterns</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/design-patterns/1-design-patterns/</link>
      <pubDate>Sun, 12 Nov 2023 14:38:17 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/design-patterns/1-design-patterns/</guid>
      <description>1. Solid Principle 1.1 Single Responsibility Principle A class should have only one reason to change, meaning each class should focus on a single functionality or responsibility.
SHOW CODE Single Responsibility Principle import java.io.IOException; import java.util.*; import java.util.regex.*; import com.fasterxml.jackson.databind.ObjectMapper; /** * 1. User class is only used to represent entity. * 2. UserValidator class is solely responsible for validating user objects. * 3. Store class is only used to manage user objects storage.</description>
    </item>
  </channel>
</rss>
