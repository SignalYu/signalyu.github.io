<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Programming on Signal&#39;s Blog</title>
    <link>https://signalyu.github.io/tags/programming/</link>
    <description>Recent content in Programming on Signal&#39;s Blog</description>
    <generator>Hugo -- 0.126.1</generator>
    <language>EN</language>
    <lastBuildDate>Mon, 02 Dec 2024 15:15:55 +0800</lastBuildDate>
    <atom:link href="https://signalyu.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Coding Problem Set</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/programming/coding-problems/1-cocoding-problem-set/</link>
      <pubDate>Mon, 02 Dec 2024 15:15:55 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/programming/coding-problems/1-cocoding-problem-set/</guid>
      <description>Queue 银行插队 SHOW PROBLEM 一、题目描述
某银行将客户分为了若干个优先级，1级最高，5级最低。当客户到达银行时，优先级高的人可以随时插队到优先级低的人的前面。
现在给定一系列的客户到达和办理业务的时间序列，请你每次银行办理业务时输出客户的编号。
如果有多个优先级相同且最高的客户，则按照到达顺序进行办理。
二、输入描述
第一行是一个正整数 n（1 ≤ n ≤ 500），表示输入序列中的事件数量。 接下来的 n 行每行第一个字符为 a 或 p： 当字符为 a 时，后面跟着两个正整数 num 和 x，表示到达的客户编号 num 和优先级 x。 当字符为 p 时，表示当前优先级最高的客户去办理业务。 三、输出描述
对于每个 p 类型的事件，输出一行，仅包含一个正整数 num，表示办理业务的客户编号。
四、测试用例
测试用例 1
输入:
4 a 1 3 a 2 2 a 3 2 p 输出:
2 说明:
客户 1 到达，优先级为 3。 客户 2 和客户 3 到达，优先级为 2。 第一次 p 会办理客户 2，因为客户 2 和客户 3 优先级相同，但是客户 2 先到达。 测试用例 2</description>
    </item>
    <item>
      <title>Java Programming Notes</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/programming/java/1-java-programming-notes/</link>
      <pubDate>Mon, 08 Nov 2021 11:36:53 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/programming/java/1-java-programming-notes/</guid>
      <description>Enum In Java, an enum (short for &amp;ldquo;enumeration&amp;rdquo;) is used to define a collection of constants, such as days of the week or months of the year. An enum provides a type-safe way to handle constant values, and it can be used in a switch statement or for comparison using ==. Compared to a final constant in Java, an enum can contain fields, methods, and constructors. The values() method is used to retrive all the constants in an enum, and the valueOf() method is used to convert a string into an enum constant.</description>
    </item>
  </channel>
</rss>
